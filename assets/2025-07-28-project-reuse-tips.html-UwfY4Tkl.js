import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as n}from"./app-CEDSurVN.js";const l={};function s(r,t){return n(),i("div",null,t[0]||(t[0]=[a(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>项目开发中，如果想快速迭代，最好的方式是复用、模块化。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>只需要写一下胶水代码，你来整体分析一下，类似于乐高、中间建筑的斗拱之类的。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>背后的共同的理念，以及作为研发，如何沉淀自己的作品集，模块化的生产资料，用于后续自己的快速项目成型？</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你提到的“乐高”、“斗拱”、“胶水代码”，这些比喻都非常贴切地表达了现代软件开发中的<strong>模块化与复用理念</strong>。</p><p>我们可以从多个维度来分析这个话题，包括理念、实践、如何沉淀与构建个人的模块库（也可以理解为个人的“开发资产”）。</p><hr><h2 id="一、核心理念-模块化、可复用、组合优于重造" tabindex="-1"><a class="header-anchor" href="#一、核心理念-模块化、可复用、组合优于重造"><span>一、核心理念：模块化、可复用、组合优于重造</span></a></h2><ol><li><p><strong>乐高式开发理念</strong></p><ul><li>每一个模块（类、组件、服务、函数）就像一个乐高积木。</li><li>它本身功能单一，但接口标准，易于拼装。</li><li>你开发新项目时，不是从头写砖，而是拿已有的积木搭新结构。</li><li>胶水代码 = 组合逻辑 + 状态协调 + 数据流转换（不承担实际业务逻辑）</li></ul></li><li><p><strong>斗拱式建筑思维</strong></p><ul><li>类似于古代建筑中层层咬合的结构：一个复杂系统是由许多“结构稳定”的构件叠加形成。</li><li>你要思考的不是“写代码”，而是“如何让结构更稳固、可替换、便于改造”。</li></ul></li><li><p><strong>现代软件工程思想</strong></p><ul><li><strong>高内聚、低耦合</strong>：模块内部实现细节对外隐藏，对外暴露清晰接口。</li><li><strong>接口驱动</strong>开发：先定义接口、协议，再填充实现。</li><li><strong>关注稳定点</strong>：稳定点封装变化点，变化点靠配置、参数化、插件化实现。</li></ul></li></ol><hr><h2 id="二、如何落地-开发中如何-模块化-沉淀" tabindex="-1"><a class="header-anchor" href="#二、如何落地-开发中如何-模块化-沉淀"><span>二、如何落地：开发中如何“模块化 + 沉淀”？</span></a></h2><h3 id="_1-从项目中抽象公共能力-功能通用性-业务独立性" tabindex="-1"><a class="header-anchor" href="#_1-从项目中抽象公共能力-功能通用性-业务独立性"><span>1. 从项目中抽象公共能力（功能通用性 + 业务独立性）</span></a></h3><ul><li>举例：你写了一个用户权限系统、文件上传、任务调度器、WebSocket 消息中心等。</li><li><strong>提取通用性接口，抽离与具体业务耦合的逻辑。</strong></li><li><strong>独立成模块或库</strong>，配合 README + DEMO，具备随时接入的能力。</li></ul><h3 id="_2-分类你的-积木" tabindex="-1"><a class="header-anchor" href="#_2-分类你的-积木"><span>2. 分类你的“积木”</span></a></h3><table><thead><tr><th>种类</th><th>举例</th><th>沉淀建议</th></tr></thead><tbody><tr><td>工具函数层</td><td>日期处理、UUID、对象深拷贝、加解密</td><td><code>utils</code> 工具库，配合测试用例</td></tr><tr><td>通用业务组件</td><td>上传组件、富文本、图表封装、登录框</td><td>做成 <code>npm</code>、<code>maven</code>、<code>jar</code> 包</td></tr><tr><td>服务能力</td><td>文件服务、短信服务、缓存中间层、API 封装</td><td>提供 SDK 接口，配置即可注入使用</td></tr><tr><td>脚手架工具</td><td>项目初始化模板、目录结构、依赖推荐</td><td>做成模板仓库（如 Vite 模板）</td></tr><tr><td>插件/中间件</td><td>Express/Koa 中间件、Spring Boot Starter</td><td>支持快速挂载，文档说明清晰</td></tr><tr><td>前端模块化</td><td>React/Vue 自定义组件，状态管理片段</td><td>配套文档 + 示例页面</td></tr></tbody></table><hr><h2 id="三、研发如何构建自己的-生产资料-模块化资产" tabindex="-1"><a class="header-anchor" href="#三、研发如何构建自己的-生产资料-模块化资产"><span>三、研发如何构建自己的“生产资料”（模块化资产）</span></a></h2><ol><li><p><strong>搭建自己的“私有组件库”或“工具库”仓库</strong></p><ul><li>建一个 GitHub/GitLab/私服的仓库，分类管理不同模块。</li><li>配套写上：使用说明 / API 说明 / 示例代码 / 自动化测试。</li></ul></li><li><p><strong>写好每一个“胶水代码”的接口规范</strong></p><ul><li>比如写一个插件式任务调度器，暴露 <code>init(config)</code>、<code>register(handler)</code> 接口。</li><li>方便别人（或你未来的自己）快速复用。</li></ul></li><li><p><strong>建立“代码资产”地图</strong></p><ul><li>列出你已经完成的模块、它的应用场景、依赖、成熟度。</li><li>用 notion、excel、markdown 等工具管理你已有的“工具积木”。</li></ul></li><li><p><strong>通过脚手架快速产出项目骨架</strong></p><ul><li>比如：<code>create-myapp</code> 命令可以基于你封装好的结构快速创建新项目。</li><li>可以集成统一的 lint、ci、部署、mock、日志等模块。</li></ul></li><li><p><strong>写博客/文档沉淀你的模块能力</strong></p><ul><li>“写出来”是为了将隐性经验显性化，利于你长期维护 &amp; 他人协作。</li><li>示例文章：《如何打造一个可插拔的任务执行框架》、《5分钟接入通用上传服务》等。</li></ul></li></ol><hr><h2 id="四、最终目标-做到-复用-可替换-拆装自如" tabindex="-1"><a class="header-anchor" href="#四、最终目标-做到-复用-可替换-拆装自如"><span>四、最终目标：做到“复用 + 可替换 + 拆装自如”</span></a></h2><ul><li>一句话总结：<strong>让项目像搭积木一样构建，而不是像盖房子一样从地基挖起。</strong></li><li>你应当能做到： <ol><li>新项目3小时内搭好完整框架（借助脚手架）</li><li>80%的功能来自你已有的模块（拿来即用）</li><li>剩下20%写“胶水”，调度逻辑与定制业务</li><li>项目验收后，能将新增部分进一步拆分沉淀</li></ol></li></ul><hr><h2 id="五、延伸建议" tabindex="-1"><a class="header-anchor" href="#五、延伸建议"><span>五、延伸建议</span></a></h2><ul><li><p><strong>推荐工具链/策略</strong></p><ul><li>前端：Monorepo（Turborepo / Nx）管理组件库</li><li>后端：Spring Boot Starter 自定义组件包</li><li>模块发布：npm / maven 私服，支持团队复用</li><li>项目模板：Yeoman、Plop、Vite + Vue/React 模板</li></ul></li><li><p><strong>团队层面</strong></p><ul><li>建立模块注册中心（Module Hub）+ README 索引文档</li><li>统一模块规范、接口命名风格、依赖管理规范</li></ul></li></ul><hr><p>如果你愿意，我可以帮你：</p><ul><li>设计一个你的模块化体系结构图</li><li>提供一个标准化的模块模板（适合前端/后端/服务）</li><li>帮你管理你的“积木仓库”文档结构</li></ul><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,27)]))}const p=e(l,[["render",s]]),c=JSON.parse('{"path":"/posts/Life/2025-07-28-project-reuse-tips.html","title":"乐高 斗拱 项目的模块化、胶水代码 快速迭代","lang":"zh-CN","frontmatter":{"title":"乐高 斗拱 项目的模块化、胶水代码 快速迭代","date":"2025-07-28T00:00:00.000Z","categories":["Life"],"tags":["life","thinking","sh"],"published":true,"description":"chat 你提到的“乐高”、“斗拱”、“胶水代码”，这些比喻都非常贴切地表达了现代软件开发中的模块化与复用理念。 我们可以从多个维度来分析这个话题，包括理念、实践、如何沉淀与构建个人的模块库（也可以理解为个人的“开发资产”）。 一、核心理念：模块化、可复用、组合优于重造 乐高式开发理念 每一个模块（类、组件、服务、函数）就像一个乐高积木。 它本身功能单...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Life/2025-07-28-project-reuse-tips.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"乐高 斗拱 项目的模块化、胶水代码 快速迭代"}],["meta",{"property":"og:description","content":"chat 你提到的“乐高”、“斗拱”、“胶水代码”，这些比喻都非常贴切地表达了现代软件开发中的模块化与复用理念。 我们可以从多个维度来分析这个话题，包括理念、实践、如何沉淀与构建个人的模块库（也可以理解为个人的“开发资产”）。 一、核心理念：模块化、可复用、组合优于重造 乐高式开发理念 每一个模块（类、组件、服务、函数）就像一个乐高积木。 它本身功能单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"life"}],["meta",{"property":"article:tag","content":"thinking"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"乐高 斗拱 项目的模块化、胶水代码 快速迭代\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.52,"words":1355},"filePathRelative":"posts/Life/2025-07-28-project-reuse-tips.md","localizedDate":"2025年7月28日","excerpt":"\\n<h1>chat</h1>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>项目开发中，如果想快速迭代，最好的方式是复用、模块化。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>只需要写一下胶水代码，你来整体分析一下，类似于乐高、中间建筑的斗拱之类的。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>背后的共同的理念，以及作为研发，如何沉淀自己的作品集，模块化的生产资料，用于后续自己的快速项目成型？</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,c as data};
