import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-CEDSurVN.js";const l={};function p(t,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="创建-go-模块" tabindex="-1"><a class="header-anchor" href="#创建-go-模块"><span>创建 Go 模块</span></a></h1><p>启动一个其他人可以使用的模块</p><p>这是教程的第一部分，介绍 Go 语言的一些基本功能。</p><p>在本教程中，您将创建两个模块。</p><p>第一个是旨在由其他库或应用程序导入的库。 第二个是调用者应用程序，它将使用第一个应用程序。</p><p>本教程的序列包括七个简短主题，每个主题说明该语言的不同部分。</p><ul><li><p>创建模块——编写一个小模块，其中包含可以从另一个模块调用的函数。</p></li><li><p>从另一个模块调用您的代码——导入并使用您的新模块。</p></li><li><p>返回并处理错误——添加简单的错误处理。</p></li><li><p>返回随机问候语——处理切片中的数据（Go 的动态大小数组）。</p></li><li><p>为多人返回问候语——将键/值对存储在映射中。</p></li><li><p>添加测试——使用 Go 的内置单元测试功能来测试您的代码。</p></li><li><p>编译并安装应用程序——在本地编译并安装您的代码。</p></li></ul><h1 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件"><span>先决条件</span></a></h1><p>有一定的编程经验。</p><p>这里的代码非常简单，但它有助于了解有关函数、循环和数组的知识。</p><p>一个编辑代码的工具。 您拥有的任何文本编辑器都可以正常工作。</p><p>大多数文本编辑器对 Go 都有很好的支持。</p><p>最流行的是 VSCode（免费）、GoLand（付费）和 Vim（免费）。</p><p>命令终端。</p><p>Go 可以在 Linux 和 Mac 上的任何终端以及 Windows 中的 PowerShell 或 cmd 上正常运行。</p><h1 id="启动一个其他人可以使用的模块" tabindex="-1"><a class="header-anchor" href="#启动一个其他人可以使用的模块"><span>启动一个其他人可以使用的模块</span></a></h1><p>首先创建一个 Go 模块。</p><p>在模块中，您可以为一组离散且有用的功能收集一个或多个相关包。</p><p>例如，您可以创建一个包含具有财务分析功能的包的模块，以便其他编写财务应用程序的人可以使用您的工作。</p><p>Go 代码被分组为包，包又被分组为模块。</p><p>您的模块指定运行代码所需的依赖项，包括 Go 版本及其所需的其他模块集。</p><p>当您添加或改进模块中的功能时，您会发布该模块的新版本。</p><p>编写调用模块中函数的代码的开发人员可以导入模块的更新包并在将其投入生产使用之前使用新版本进行测试。</p><h2 id="_1-cd-目录" tabindex="-1"><a class="header-anchor" href="#_1-cd-目录"><span>1. cd 目录</span></a></h2><p>打开命令提示符并 cd 到您的主目录。</p><p>在 Linux 或 Mac 上：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cd D:\\_go\\01-modules</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-创建-greetings-文件夹" tabindex="-1"><a class="header-anchor" href="#_2-创建-greetings-文件夹"><span>2. 创建 greetings 文件夹</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir greetings</span></span>
<span class="line"><span>cd greetings</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-go-mod-init-命令初始化" tabindex="-1"><a class="header-anchor" href="#_3-使用-go-mod-init-命令初始化"><span>3. 使用 go mod init 命令初始化</span></a></h2><p>运行 go mod init 命令，为其提供模块路径 - 此处使用 <a href="http://example.com/greetings%E3%80%82" target="_blank" rel="noopener noreferrer">example.com/greetings。</a></p><p>如果您发布模块，则这必须是 Go 工具可以下载您的模块的路径。 那将是您的代码的存储库。</p><p>有关使用模块路径命名模块的更多信息，请参阅管理依赖项。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go mod init example.com/greetings</span></span>
<span class="line"><span>go: creating new go.mod: module example.com/greetings</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>go mod init 命令创建一个 go.mod 文件来跟踪代码的依赖项。</p><p>到目前为止，该文件仅包含模块的名称和代码支持的 Go 版本。</p><p>但是当您添加依赖项时，go.mod 文件将列出您的代码所依赖的版本。</p><p>这可以保持构建的可重复性，并让您可以直接控制要使用的模块版本。</p><h3 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h3><p>实际上会在 greeting 文件夹下创建一个文件 <code>go.mod</code></p><p>内容如下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>module example.com/greetings</span></span>
<span class="line"><span></span></span>
<span class="line"><span>go 1.20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-创建-go-文件" tabindex="-1"><a class="header-anchor" href="#_4-创建-go-文件"><span>4. 创建 go 文件</span></a></h2><p>创建 greetings.go 文件，内容如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> greetings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Hello returns a greeting for the named person.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Return a greeting that embeds the name in a message.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hi, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">. Welcome!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> message</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是您的模块的第一个代码。 它会向任何需要问候的呼叫者返回问候语。</p><p>您将在下一步中编写调用此函数的代码。</p><p>在此代码中，您：</p><ul><li><p>声明一个greetings包来收集相关函数。</p></li><li><p>实现 Hello 函数来返回问候语。</p></li></ul><p>该函数接受一个类型为字符串的名称参数。</p><p>该函数还返回一个字符串。</p><p>在Go中，名称以大写字母开头的函数可以被不在同一包中的函数调用。</p><p>这在 Go 中称为导出名称。 有关导出名称的更多信息，请参阅 Go 浏览中的导出名称。</p><figure><img src="https://go.dev/doc/tutorial/images/function-syntax.png" alt="go" tabindex="0" loading="lazy"><figcaption>go</figcaption></figure><p>声明一个消息变量来保存您的问候语。</p><p>在 Go 中，<code>:=</code> 运算符是在一行中声明和初始化变量的快捷方式（Go 使用右侧的值来确定变量的类型）。</p><p>从长远来看，您可能会这样写：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> message</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hi, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">. Welcome!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 fmt 包的 Sprintf 函数创建问候消息。</p><p>第一个参数是格式字符串，Sprintf 将名称参数的值替换为 <code>%v</code> 格式动词。</p><p>插入 name 参数的值即可完成问候语文本。</p><p>将格式化的问候语文本返回给呼叫者。</p><p>在下一步中，您将从另一个模块调用此函数。</p><hr><h1 id="从另一个模块调用您的代码" tabindex="-1"><a class="header-anchor" href="#从另一个模块调用您的代码"><span>从另一个模块调用您的代码</span></a></h1><p>在上一节中，您创建了一个问候语模块。</p><p>在本部分中，您将编写代码来调用刚刚编写的模块中的 Hello 函数。</p><p>您将编写可作为应用程序执行的代码，并调用问候语模块中的代码。</p><h1 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h1><ol><li>文件夹</li></ol><p>为 Go 模块源代码创建一个 hello 目录。</p><p>这是您编写调用者的位置。</p><p>创建此目录后，您应该在层次结构中的同一级别上有一个 hello 和一个greetings 目录，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/</span></span>
<span class="line"><span> |-- greetings/</span></span>
<span class="line"><span> |-- hello/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们和 greeting 同级别，创建一个 hello 文件夹。</p><ol start="2"><li>为您要编写的代码启用依赖项跟踪。</li></ol><p>要为代码启用依赖项跟踪，请运行 go mod init 命令，并为其指定代码所在模块的名称。</p><p>出于本教程的目的，请使用 <a href="http://example.com/hello" target="_blank" rel="noopener noreferrer">example.com/hello</a> 作为模块路径。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go mod init example.com/hello</span></span>
<span class="line"><span>go: creating new go.mod: module example.com/hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>编写代码来调用 Hello 函数，然后打印函数的返回值。</p></li><li><p>创建 hello.go 中。</p></li></ol><p>内容如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;example.com/greetings&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Get a greeting message and print it.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    message</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> greetings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Gladys&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>编辑 <a href="http://example.com/hello" target="_blank" rel="noopener noreferrer">example.com/hello</a> 模块以使用本地 <a href="http://example.com/greetings" target="_blank" rel="noopener noreferrer">example.com/greetings</a> 模块。</li></ol><p>对于生产使用，您可以从其存储库发布 <a href="http://example.com/greetings" target="_blank" rel="noopener noreferrer">example.com/greetings</a> 模块（带有反映其发布位置的模块路径），Go 工具可以在其中找到它并下载它。</p><p>目前，由于您尚未发布该模块，因此您需要调整 <a href="http://example.com/hello" target="_blank" rel="noopener noreferrer">example.com/hello</a> 模块，以便它可以在本地文件系统上找到 <a href="http://example.com/greetings" target="_blank" rel="noopener noreferrer">example.com/greetings</a> 代码。</p><p>为此，请使用 go mod edit 命令编辑 <a href="http://example.com/hello" target="_blank" rel="noopener noreferrer">example.com/hello</a> 模块，将 Go 工具从其模块路径（模块所在的位置）重定向到本地目录（模块所在的位置）。</p><p>在 hello 目录中的命令提示符下，运行以下命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go mod edit -replace example.com/greetings=../greetings</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令指定 <a href="http://example.com/greetings" target="_blank" rel="noopener noreferrer">example.com/greetings</a> 应替换为 ../greetings 以定位依赖项。</p><p>运行命令后，hello 目录中的 go.mod 文件应包含替换指令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>module example.com/hello</span></span>
<span class="line"><span></span></span>
<span class="line"><span>go 1.20</span></span>
<span class="line"><span></span></span>
<span class="line"><span>replace example.com/greetings =&gt; ../greetings</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 hello 目录中的命令提示符下，运行 go mod tidy 命令来同步 <a href="http://example.com/hello" target="_blank" rel="noopener noreferrer">example.com/hello</a> 模块的依赖项，添加代码所需但尚未在模块中跟踪的依赖项。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go mod tidy</span></span>
<span class="line"><span>go: found example.com/greetings in example.com/greetings v0.0.0-00010101000000-000000000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的 go.mod 内容如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>module example.com/hello</span></span>
<span class="line"><span></span></span>
<span class="line"><span>go 1.20</span></span>
<span class="line"><span></span></span>
<span class="line"><span>replace example.com/greetings =&gt; ../greetings</span></span>
<span class="line"><span></span></span>
<span class="line"><span>require example.com/greetings v0.0.0-00010101000000-000000000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令在greetings目录中找到本地代码，<a href="http://xn--requireexample-466vmu72hn9yxmglm6btu6aba728w099ax4q.com/hello%E9%9C%80%E8%A6%81example.com/greetings%E3%80%82" target="_blank" rel="noopener noreferrer">然后添加一个require指令来指定example.com/hello需要example.com/greetings。</a></p><p>当您在 hello.go 中导入问候语包时，您创建了此依赖项。</p><p>模块路径后面的数字是伪版本号——生成的数字，用于代替语义版本号（模块还没有）。</p><p>要引用已发布的模块，go.mod 文件通常会省略替换指令，并使用末尾带有标记版本号的 require 指令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>require example.com/greetings v1.1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="6"><li>执行</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go run .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>效果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hi, Gladys. Welcome!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://go.dev/doc/tutorial/call-module-code" target="_blank" rel="noopener noreferrer">https://go.dev/doc/tutorial/call-module-code</a></p>`,106)]))}const d=s(l,[["render",p]]),o=JSON.parse('{"path":"/posts/Lang/2018-09-07-lang-go-03-tour-make-module.html","title":"Go Lang-03-Tutorial Create a Go module 创建并调用一个模块","lang":"zh-CN","frontmatter":{"title":"Go Lang-03-Tutorial Create a Go module 创建并调用一个模块","date":"2018-09-07T00:00:00.000Z","categories":["Lang"],"tags":["go","lang","sh"],"published":true,"description":"创建 Go 模块 启动一个其他人可以使用的模块 这是教程的第一部分，介绍 Go 语言的一些基本功能。 在本教程中，您将创建两个模块。 第一个是旨在由其他库或应用程序导入的库。 第二个是调用者应用程序，它将使用第一个应用程序。 本教程的序列包括七个简短主题，每个主题说明该语言的不同部分。 创建模块——编写一个小模块，其中包含可以从另一个模块调用的函数。 ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2018-09-07-lang-go-03-tour-make-module.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Go Lang-03-Tutorial Create a Go module 创建并调用一个模块"}],["meta",{"property":"og:description","content":"创建 Go 模块 启动一个其他人可以使用的模块 这是教程的第一部分，介绍 Go 语言的一些基本功能。 在本教程中，您将创建两个模块。 第一个是旨在由其他库或应用程序导入的库。 第二个是调用者应用程序，它将使用第一个应用程序。 本教程的序列包括七个简短主题，每个主题说明该语言的不同部分。 创建模块——编写一个小模块，其中包含可以从另一个模块调用的函数。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://go.dev/doc/tutorial/images/function-syntax.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go Lang-03-Tutorial Create a Go module 创建并调用一个模块\\",\\"image\\":[\\"https://go.dev/doc/tutorial/images/function-syntax.png\\"],\\"datePublished\\":\\"2018-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.83,"words":2049},"filePathRelative":"posts/Lang/2018-09-07-lang-go-03-tour-make-module.md","localizedDate":"2018年9月7日","excerpt":"\\n<p>启动一个其他人可以使用的模块</p>\\n<p>这是教程的第一部分，介绍 Go 语言的一些基本功能。</p>\\n<p>在本教程中，您将创建两个模块。</p>\\n<p>第一个是旨在由其他库或应用程序导入的库。 第二个是调用者应用程序，它将使用第一个应用程序。</p>\\n<p>本教程的序列包括七个简短主题，每个主题说明该语言的不同部分。</p>\\n<ul>\\n<li>\\n<p>创建模块——编写一个小模块，其中包含可以从另一个模块调用的函数。</p>\\n</li>\\n<li>\\n<p>从另一个模块调用您的代码——导入并使用您的新模块。</p>\\n</li>\\n<li>\\n<p>返回并处理错误——添加简单的错误处理。</p>\\n</li>\\n<li>\\n<p>返回随机问候语——处理切片中的数据（Go 的动态大小数组）。</p>\\n</li>\\n<li>\\n<p>为多人返回问候语——将键/值对存储在映射中。</p>\\n</li>\\n<li>\\n<p>添加测试——使用 Go 的内置单元测试功能来测试您的代码。</p>\\n</li>\\n<li>\\n<p>编译并安装应用程序——在本地编译并安装您的代码。</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,o as data};
