import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as a}from"./app-uJE4P3e0.js";const l={};function d(t,s){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建"><span>项目创建</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm create vite@latest logic-flow-demo -- --template vue</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>cd logic-flow-demo</span></span>
<span class="line"><span>  npm install</span></span>
<span class="line"><span>  npm run dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="报错" tabindex="-1"><a class="header-anchor" href="#报错"><span>报错</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>6 packages are looking for funding</span></span>
<span class="line"><span>  run \`npm fund\` for details</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt; logic-flow-demo@0.0.0 dev</span></span>
<span class="line"><span>&gt; vite</span></span>
<span class="line"><span></span></span>
<span class="line"><span>error when starting dev server:</span></span>
<span class="line"><span>TypeError: crypto.hash is not a function</span></span>
<span class="line"><span>    at getHash (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:2789:21)</span></span>
<span class="line"><span>    at getLockfileHash (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:11745:9)</span></span>
<span class="line"><span>    at getDepHash (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:11748:23)</span></span>
<span class="line"><span>    at initDepsOptimizerMetadata (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:11201:53)</span></span>
<span class="line"><span>    at createDepsOptimizer (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:34854:17)</span></span>
<span class="line"><span>    at new DevEnvironment (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:35619:109)</span></span>
<span class="line"><span>    at Object.defaultCreateClientDevEnvironment [as createEnvironment] (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:36038:9)</span></span>
<span class="line"><span>    at _createServer (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-eRCq8YxU.js:28464:132)</span></span>
<span class="line"><span>    at async CAC. (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/cli.js:573:18)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="版本" tabindex="-1"><a class="header-anchor" href="#版本"><span>版本</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ node -v</span></span>
<span class="line"><span>v20.10.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决方式-降级到-node-20-10-能跑的-vite-版本" tabindex="-1"><a class="header-anchor" href="#解决方式-降级到-node-20-10-能跑的-vite-版本"><span>解决方式 降级到 Node 20.10 能跑的 Vite 版本</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vite@5.4.10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @vitejs/plugin-vue@5.1.4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后清理依赖缓存并重装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node_modules</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package-lock.json</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h2><p><a href="http://localhost:5173/" target="_blank" rel="noopener noreferrer">http://localhost:5173/</a> 可以查看效果</p><h1 id="vue-logic-flow-入门" tabindex="-1"><a class="header-anchor" href="#vue-logic-flow-入门"><span>vue logic-flow 入门</span></a></h1><p>当然可以！下面给你一个用 Vue 3 搭配 LogicFlow 的最简入门例子，帮你快速在 Vue 3 项目里集成 LogicFlow 画布。</p><hr><h3 id="_1-安装-logicflow" tabindex="-1"><a class="header-anchor" href="#_1-安装-logicflow"><span>1. 安装 LogicFlow</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @logicflow/core</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_2-在-vue-3-组件中使用-logicflow" tabindex="-1"><a class="header-anchor" href="#_2-在-vue-3-组件中使用-logicflow"><span>2. 在 Vue 3 组件中使用 LogicFlow</span></a></h3><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import { ref, onMounted, onBeforeUnmount } from &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import LogicFlow from &#39;@logicflow/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">const lfContainer = ref(null)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">let lf = null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">onMounted(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lf = new LogicFlow({</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    container: lfContainer.value,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: 800,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: 600,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lf.render()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  // 添加一个节点示例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lf.addNode({</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id: &#39;node1&#39;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    type: &#39;rect&#39;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    x: 100,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    y: 100,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    text: &#39;Hello LogicFlow&#39;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">onBeforeUnmount(() =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  // 组件卸载时销毁实例，避免内存泄漏</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  if (lf) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    lf.destroy()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    lf = null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.logicflow-container {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  border: 1px solid #ddd;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  width: 800px;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: 600px;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h3><ul><li>我们用 <code>ref</code> 获取容器 DOM。</li><li><code>new LogicFlow()</code> 初始化画布，传入容器和尺寸。</li><li><code>lf.render()</code> 渲染画布。</li><li><code>lf.addNode()</code> 动态添加一个矩形节点。</li><li>组件销毁时调用 <code>lf.destroy()</code> 做清理。</li></ul><p>到这里我们完成一个最简单的 demo。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="报错-1" tabindex="-1"><a class="header-anchor" href="#报错-1"><span>报错</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  File: D:/vue-demo/logic-flow-demo/src/components/FlowEditor.vue:10:13</span></span>
<span class="line"><span>  1  |  import { ref, onMounted, onBeforeUnmount } from &#39;vue&#39;</span></span>
<span class="line"><span>  2  |    import LogicFlow from &#39;@logicflow/core&#39;</span></span>
<span class="line"><span>  3  |    import &#39;@logicflow/core/dist/style.css&#39;</span></span>
<span class="line"><span>     |              ^</span></span>
<span class="line"><span>  4  |</span></span>
<span class="line"><span>  5  |</span></span>
<span class="line"><span>      at TransformPluginContext._formatError (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:49258:41)</span></span>
<span class="line"><span>      at TransformPluginContext.error (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:49253:16)</span></span>
<span class="line"><span>      at normalizeUrl (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:64291:23)</span></span>
<span class="line"><span>      at async file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:64423:39</span></span>
<span class="line"><span>      at async Promise.all (index 2)</span></span>
<span class="line"><span>      at async TransformPluginContext.transform (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:64350:7)</span></span>
<span class="line"><span>      at async PluginContainer.transform (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:49099:18)</span></span>
<span class="line"><span>      at async loadAndTransform (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:51977:27)</span></span>
<span class="line"><span>      at async viteTransformMiddleware (file:///D:/vue-demo/logic-flow-demo/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:62105:24) (x2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确认下本地的 <code>@logicflow/core/dist/index.css</code> 是这个文件，修正下即可。</p><h2 id="n8n-dify-他们的是基于什么组件实现的-核心是如何实现的" tabindex="-1"><a class="header-anchor" href="#n8n-dify-他们的是基于什么组件实现的-核心是如何实现的"><span>n8n dify 他们的是基于什么组件实现的？核心是如何实现的？</span></a></h2><p>很棒的问题！想了解 n8n 和 dify 这类<strong>可视化工作流/流程编辑器</strong>的底层核心及用到的技术组件，以下是我整理的深度分析：</p><hr><h2 id="_1-n8n-的核心技术栈和实现" tabindex="-1"><a class="header-anchor" href="#_1-n8n-的核心技术栈和实现"><span>1. n8n 的核心技术栈和实现</span></a></h2><h3 id="核心架构" tabindex="-1"><a class="header-anchor" href="#核心架构"><span>核心架构</span></a></h3><ul><li><p><strong>前端</strong><br> n8n 的 Web 前端主要用 <strong>React</strong> 编写，核心流程编辑器用的是 <strong>React Flow</strong> 组件库（或自己基于类似理念实现的流程画布）。<br> React Flow 是一个 React 专用的、专注节点拖拽、连线和编辑的库，提供画布缩放、节点连接、连线断开、拖拽交互等功能。</p></li><li><p><strong>节点和连接</strong><br> 节点表示工作流中的任务（API调用、数据处理等），每个节点有输入和输出端口，可以拖拽连接形成执行顺序。<br> 节点数据结构包含节点参数、状态、连接关系。</p></li><li><p><strong>工作流执行引擎</strong><br> n8n 里，流程设计与执行是分离的，前端只负责流程可视化，后端用 Node.js 运行工作流逻辑，支持异步执行、重试、条件分支等。</p></li></ul><h3 id="关键点" tabindex="-1"><a class="header-anchor" href="#关键点"><span>关键点</span></a></h3><ul><li><p><strong>React Flow</strong><br><a href="https://reactflow.dev/" target="_blank" rel="noopener noreferrer">https://reactflow.dev/</a></p><ul><li>开源，支持节点拖拽、连线、选中、删除、缩放等核心画布功能</li><li>节点自定义渲染，方便扩展各种节点UI</li><li>内置丰富事件支持流程交互</li></ul></li><li><p><strong>状态管理</strong><br> n8n 前端使用 React Context 和自定义hooks管理节点数据和连线状态。</p></li></ul><hr><h2 id="_2-dify-的核心技术栈和实现" tabindex="-1"><a class="header-anchor" href="#_2-dify-的核心技术栈和实现"><span>2. dify 的核心技术栈和实现</span></a></h2><p>dify（字节跳动开源的 AI 工作流平台）目前官方并未公开完整的技术细节源码，但从公开演示和一些社区信息看，dify的可视化流程编辑：</p><ul><li><p><strong>基于 LogicFlow</strong><br> dify 官网示例和文档中多次提到使用 LogicFlow 作为流程图底层实现，LogicFlow 是阿里团队开源的流程图编辑器，专注图的可视化、拖拽和连线。</p></li><li><p><strong>二次开发和定制</strong><br> dify 在 LogicFlow 之上做了大量定制，包含丰富的节点类型、流程控制逻辑、拖拽左侧组件面板、节点属性编辑器、右键菜单、多选操作等。</p></li><li><p><strong>Vue3 + TypeScript</strong> 技术栈<br> dify 的前端更多使用 Vue3 + Pinia 进行状态管理，配合 LogicFlow 做可视化拖拽。</p></li></ul><hr><h2 id="_3-这些平台核心是如何实现的" tabindex="-1"><a class="header-anchor" href="#_3-这些平台核心是如何实现的"><span>3. 这些平台核心是如何实现的？</span></a></h2><h3 id="核心要素总结" tabindex="-1"><a class="header-anchor" href="#核心要素总结"><span>核心要素总结</span></a></h3><table><thead><tr><th>核心功能</th><th>具体实现说明</th></tr></thead><tbody><tr><td><strong>画布交互</strong></td><td>基于流程图引擎（React Flow / LogicFlow / X6等），支持节点拖拽、连线、缩放、框选、复制粘贴等交互。</td></tr><tr><td><strong>节点定义</strong></td><td>节点可自定义，包含显示内容、输入输出端口、参数配置，动态渲染节点 UI。</td></tr><tr><td><strong>连线逻辑</strong></td><td>节点间连线代表流程执行路径，连线可拖拽创建和删除，支持校验（端口兼容性、循环等）。</td></tr><tr><td><strong>状态管理</strong></td><td>画布数据（节点、连线、画布位置、选中状态）存在于前端状态管理库中，保持画布与数据同步。</td></tr><tr><td><strong>属性面板</strong></td><td>选中节点时，显示节点参数配置面板，支持表单式编辑，实时同步回画布节点数据。</td></tr><tr><td><strong>流程序列化</strong></td><td>流程图结构以 JSON 格式保存，方便持久化、导入导出和远程同步。</td></tr><tr><td><strong>流程执行</strong></td><td>前端设计的流程导出成执行图，后端工作流引擎解析执行，支持异步、条件、重试、错误处理。</td></tr></tbody></table><hr><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4. 总结</span></a></h2><table><thead><tr><th>平台</th><th>画布组件</th><th>技术栈</th><th>备注</th></tr></thead><tbody><tr><td>n8n</td><td>React Flow</td><td>React + Node</td><td>React Flow 开源，社区活跃</td></tr><tr><td>dify</td><td>LogicFlow</td><td>Vue3 + TS</td><td>基于 LogicFlow 二次开发，定制丰富</td></tr></tbody></table><hr><h2 id="_5-如果你想自己做类似功能" tabindex="-1"><a class="header-anchor" href="#_5-如果你想自己做类似功能"><span>5. 如果你想自己做类似功能</span></a></h2><ul><li><strong>推荐先用 LogicFlow（Vue3）或 React Flow（React）快速搭建拖拽画布</strong></li><li><strong>设计节点模型和连接规则</strong></li><li><strong>做节点属性编辑面板，绑定状态管理</strong></li><li><strong>实现流程导入导出和执行逻辑接口</strong></li></ul><hr><p>如果你想，我可以帮你写个基于 LogicFlow 的<strong>Vue3 拖拽流程编辑器示例</strong>，包含：</p><ul><li>左侧节点拖拽面板</li><li>中间画布节点拖拽连线</li><li>右侧属性编辑器</li></ul><p>一步步教你实现一个基础版的 n8n/dify 流程编辑器。你觉得怎么样？</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,54)]))}const o=n(l,[["render",d]]),c=JSON.parse('{"path":"/posts/FLOW/2025-08-09-flow-control-03-vue3-create-logicflow-01-helloword-drag-demo.html","title":"流程控制-02-vue3项目创建流程引擎前端 demo","lang":"zh-CN","frontmatter":{"title":"流程控制-02-vue3项目创建流程引擎前端 demo","date":"2025-08-09T00:00:00.000Z","categories":["FLOW"],"tags":["flow","vue3","sh"],"published":true,"description":"项目创建 报错 版本 解决方式 降级到 Node 20.10 能跑的 Vite 版本 然后清理依赖缓存并重装： 效果 http://localhost:5173/ 可以查看效果 vue logic-flow 入门 当然可以！下面给你一个用 Vue 3 搭配 LogicFlow 的最简入门例子，帮你快速在 Vue 3 项目里集成 LogicFlow 画布...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/FLOW/2025-08-09-flow-control-03-vue3-create-logicflow-01-helloword-drag-demo.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"流程控制-02-vue3项目创建流程引擎前端 demo"}],["meta",{"property":"og:description","content":"项目创建 报错 版本 解决方式 降级到 Node 20.10 能跑的 Vite 版本 然后清理依赖缓存并重装： 效果 http://localhost:5173/ 可以查看效果 vue logic-flow 入门 当然可以！下面给你一个用 Vue 3 搭配 LogicFlow 的最简入门例子，帮你快速在 Vue 3 项目里集成 LogicFlow 画布..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"flow"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-08-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流程控制-02-vue3项目创建流程引擎前端 demo\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.59,"words":1677},"filePathRelative":"posts/FLOW/2025-08-09-flow-control-03-vue3-create-logicflow-01-helloword-drag-demo.md","localizedDate":"2025年8月9日","excerpt":"\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>npm create vite@latest logic-flow-demo -- --template vue</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>cd logic-flow-demo</span></span>\\n<span class=\\"line\\"><span>  npm install</span></span>\\n<span class=\\"line\\"><span>  npm run dev</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,c as data};
