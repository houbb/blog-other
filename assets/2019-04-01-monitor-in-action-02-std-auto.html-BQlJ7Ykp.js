import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as o,o as p}from"./app-CEDSurVN.js";const n={};function r(i,t){return p(),a("div",null,t[0]||(t[0]=[o('<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h1><p>我们如何实现日志的自动化解析？</p><p>答案是前提需要标准化。</p><p>但是希望所有的日志都是标准的，这显然非常不现实。</p><p>那么，有没有什么办法，稍微让这个情况好一些呢？</p><h1 id="v1-标准化的底层框架日志" tabindex="-1"><a class="header-anchor" href="#v1-标准化的底层框架日志"><span>v1-标准化的底层框架日志</span></a></h1><p>我们场景的中间件，比如 mq cache rpc database config 等，可以提供一些中间件层面的标准的日志输出。</p><p>因为这部分不需要用户太多额外的工作量，一般公司提前埋点好，耗时比较好推进的。</p><h1 id="v2-etl" tabindex="-1"><a class="header-anchor" href="#v2-etl"><span>V2-ETL</span></a></h1><p>所有的数据不标准化，是一个常见的现状。</p><p>一种非常自然的解决方案就是 ETL，对日志加工处理为标准化的日志。</p><p>这方面做得比较好的，比如 logstash。</p><p>我们可以对加工后的日志进行相关的业务处理。</p><h1 id="相关开源项目" tabindex="-1"><a class="header-anchor" href="#相关开源项目"><span>相关开源项目</span></a></h1><p>标准化的日志输出： <a href="https://github.com/houbb/auto-log" target="_blank" rel="noopener noreferrer">log stash in java.(简易版 logstash 实现)</a></p><p>日志的 ETL: <a href="https://github.com/houbb/logstash4j" target="_blank" rel="noopener noreferrer">log stash in java.(简易版 logstash 实现)</a></p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>日志的全链路作为基础，有很多需要考虑的点。</p><p>标准化==》自动化</p><p>全链路==》TID</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>无</p>',22)]))}const h=e(n,[["render",r]]),d=JSON.parse('{"path":"/posts/devops/2019-04-01-monitor-in-action-02-std-auto.html","title":"监控系统实战-02-标准化是自动化的前提","lang":"zh-CN","frontmatter":{"title":"监控系统实战-02-标准化是自动化的前提","date":"2018-11-25T00:00:00.000Z","categories":["Devops"],"tags":["devops","monitor","apm","zabbix","sh"],"published":true,"description":"背景 我们如何实现日志的自动化解析？ 答案是前提需要标准化。 但是希望所有的日志都是标准的，这显然非常不现实。 那么，有没有什么办法，稍微让这个情况好一些呢？ v1-标准化的底层框架日志 我们场景的中间件，比如 mq cache rpc database config 等，可以提供一些中间件层面的标准的日志输出。 因为这部分不需要用户太多额外的工作量，...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/devops/2019-04-01-monitor-in-action-02-std-auto.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"监控系统实战-02-标准化是自动化的前提"}],["meta",{"property":"og:description","content":"背景 我们如何实现日志的自动化解析？ 答案是前提需要标准化。 但是希望所有的日志都是标准的，这显然非常不现实。 那么，有没有什么办法，稍微让这个情况好一些呢？ v1-标准化的底层框架日志 我们场景的中间件，比如 mq cache rpc database config 等，可以提供一些中间件层面的标准的日志输出。 因为这部分不需要用户太多额外的工作量，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"monitor"}],["meta",{"property":"article:tag","content":"apm"}],["meta",{"property":"article:tag","content":"zabbix"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-11-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监控系统实战-02-标准化是自动化的前提\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-11-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.13,"words":339},"filePathRelative":"posts/devops/2019-04-01-monitor-in-action-02-std-auto.md","localizedDate":"2018年11月25日","excerpt":"\\n<p>我们如何实现日志的自动化解析？</p>\\n<p>答案是前提需要标准化。</p>\\n<p>但是希望所有的日志都是标准的，这显然非常不现实。</p>\\n<p>那么，有没有什么办法，稍微让这个情况好一些呢？</p>\\n<h1>v1-标准化的底层框架日志</h1>\\n<p>我们场景的中间件，比如 mq cache rpc database config 等，可以提供一些中间件层面的标准的日志输出。</p>\\n<p>因为这部分不需要用户太多额外的工作量，一般公司提前埋点好，耗时比较好推进的。</p>\\n<h1>V2-ETL</h1>\\n<p>所有的数据不标准化，是一个常见的现状。</p>\\n<p>一种非常自然的解决方案就是 ETL，对日志加工处理为标准化的日志。</p>","autoDesc":true}');export{h as comp,d as data};
