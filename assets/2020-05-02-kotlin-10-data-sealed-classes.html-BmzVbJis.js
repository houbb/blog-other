import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CEDSurVN.js";const l={};function h(t,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="数据类" tabindex="-1"><a class="header-anchor" href="#数据类"><span>数据类</span></a></h1><p>Kotlin 可以创建一个只包含数据的类，关键字为 <code>data</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>data class User(val name: String, val age: Int)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译器会自动的从主构造函数中根据所有声明的属性提取以下函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>equals() / hashCode()</span></span>
<span class="line"><span>toString() 格式如 &quot;User(name=John, age=42)&quot;</span></span>
<span class="line"><span>componentN() functions 对应于属性，按声明顺序排列</span></span>
<span class="line"><span>copy() 函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这些函数在类中已经被明确定义了，或者从超类中继承而来，就不再会生成。</p><h2 id="条件" tabindex="-1"><a class="header-anchor" href="#条件"><span>条件</span></a></h2><p>为了保证生成代码的一致性以及有意义，数据类需要满足以下条件：</p><ul><li><p>主构造函数至少包含一个参数。</p></li><li><p>所有的主构造函数的参数必须标识为val 或者 var ;</p></li><li><p>数据类不可以声明为 abstract, open, sealed 或者 inner;</p></li><li><p>数据类不能继承其他类 (但是可以实现接口)。</p></li></ul><p>ps: 上一次看到 <code>sealed</code> 这种密封类还是在 C# 编程中。现在感觉 kotlin 确实引入了不少 keyword。</p><h2 id="复制" tabindex="-1"><a class="header-anchor" href="#复制"><span>复制</span></a></h2><p>复制使用 <code>copy()</code> 函数，我们可以使用该函数复制对象并修改部分属性, 对于上文的 User 类，其实现会类似下面这样：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> copy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.name, age: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.age) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, age)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jack </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Jack&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> olderJack </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jack.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(jack)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(olderJack)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>User(name=Jack, age=1)</span></span>
<span class="line"><span>User(name=Jack, age=2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类以及解构声明" tabindex="-1"><a class="header-anchor" href="#数据类以及解构声明"><span>数据类以及解构声明</span></a></h2><p>组件函数允许数据类在解构声明中使用：</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jane </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Jane&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">35</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (name, age) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> jane</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$age</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> years of age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// prints &quot;Jane, 35 years of age&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准数据类" tabindex="-1"><a class="header-anchor" href="#标准数据类"><span>标准数据类</span></a></h2><p>标准库提供了 Pair 和 Triple。</p><p>在大多数情形中，命名数据类是更好的设计选择，因为这样代码可读性更强而且提供了有意义的名字和属性。</p><p>ps: 当然有时候只是简单的几个属性，可以使用内置的标准库类。</p><h1 id="密封类" tabindex="-1"><a class="header-anchor" href="#密封类"><span>密封类</span></a></h1><p>密封类用来表示受限的类继承结构：当一个值为有限几种的类型, 而不能有任何其他类型时。</p><p>在某种意义上，他们是枚举类的扩展：枚举类型的值集合也是受限的，但每个枚举常量只存在一个实例，而密封类的一个子类可以有可包含状态的多个实例。</p><p>声明一个密封类，使用 <code>sealed</code> 修饰类，密封类可以有子类，但是所有的子类都必须要内嵌在密封类中。</p><p>sealed 不能修饰 interface, abstract class(会报 warning,但是不会出现编译错误)</p><h2 id="实例-1" tabindex="-1"><a class="header-anchor" href="#实例-1"><span>实例</span></a></h2><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sealed</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Expr</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> number: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">data</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e1: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e2: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NotANumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Double</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (expr) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Const </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expr.number</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr.e1) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr.e2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    NotANumber </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Double.NaN</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="好处" tabindex="-1"><a class="header-anchor" href="#好处"><span>好处</span></a></h2><p>使用密封类的关键好处在于使用 when 表达式的时候，如果能够验证语句覆盖了所有情况，就不需要为该语句再添加一个 else 子句了。</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Expr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Double</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Expr.Const </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expr.number</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Expr.Sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr.e1) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> eval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(expr.e2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Expr.NotANumber </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Double.NaN</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 不再需要 \`else\` 子句，因为我们已经覆盖了所有的情况</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps: 从这个例子可以看得出，sealed 类是枚举的一种拓展。不过比枚举更加灵活。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><h2 id="官方" tabindex="-1"><a class="header-anchor" href="#官方"><span>官方</span></a></h2><p><a href="http://www.kotlinlang.org/" target="_blank" rel="noopener noreferrer">官网</a></p><h2 id="参考入门教程" tabindex="-1"><a class="header-anchor" href="#参考入门教程"><span>参考入门教程</span></a></h2><p><a href="https://www.runoob.com/kotlin/kotlin-data-sealed-classes.html" target="_blank" rel="noopener noreferrer">Kotlin 数据类与密封类</a></p>`,40)]))}const r=i(l,[["render",h]]),d=JSON.parse('{"path":"/posts/Kotlin/2020-05-02-kotlin-10-data-sealed-classes.html","title":"Kotlin-10-数据类和密封类","lang":"zh-CN","frontmatter":{"title":"Kotlin-10-数据类和密封类","date":"2020-05-02T00:00:00.000Z","categories":["Kotlin"],"tags":["kotlin","sh"],"published":true,"description":"数据类 Kotlin 可以创建一个只包含数据的类，关键字为 data： 编译器会自动的从主构造函数中根据所有声明的属性提取以下函数： 如果这些函数在类中已经被明确定义了，或者从超类中继承而来，就不再会生成。 条件 为了保证生成代码的一致性以及有意义，数据类需要满足以下条件： 主构造函数至少包含一个参数。 所有的主构造函数的参数必须标识为val 或者 v...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Kotlin/2020-05-02-kotlin-10-data-sealed-classes.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Kotlin-10-数据类和密封类"}],["meta",{"property":"og:description","content":"数据类 Kotlin 可以创建一个只包含数据的类，关键字为 data： 编译器会自动的从主构造函数中根据所有声明的属性提取以下函数： 如果这些函数在类中已经被明确定义了，或者从超类中继承而来，就不再会生成。 条件 为了保证生成代码的一致性以及有意义，数据类需要满足以下条件： 主构造函数至少包含一个参数。 所有的主构造函数的参数必须标识为val 或者 v..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2020-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin-10-数据类和密封类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.91,"words":872},"filePathRelative":"posts/Kotlin/2020-05-02-kotlin-10-data-sealed-classes.md","localizedDate":"2020年5月2日","excerpt":"\\n<p>Kotlin 可以创建一个只包含数据的类，关键字为 <code>data</code>：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>data class User(val name: String, val age: Int)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,d as data};
