import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CEDSurVN.js";const e={};function h(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数"><span>定义函数</span></a></h1><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>关键字 <code>def</code> 引入一个函数 定义。</p><p>它必须后跟函数名称和带括号的形式参数列表。</p><p>构成函数体的语句从下一行开始，并且必须缩进。</p><p>函数体的第一个语句可以（可选的）是字符串文字；这个字符串文字是函数的文档字符串或 docstring 。（有关文档字符串的更多信息，请参阅 文档字符串 部分）有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以交互式的形式浏览代码；在你编写的代码中包含文档字符串是一种很好的做法，所以要养成习惯。</p><p>函数的 执行 会引入一个用于函数局部变量的新符号表。更确切地说，函数中的所有变量赋值都将值存储在本地符号表中；而变量引用首先在本地符号表中查找，然后在封闭函数的本地符号表中查找，然后在全局符号表中查找，最后在内置符号表中查找。所以全局变量不能直接在函数中赋值（除非使用 global 命名），尽管可以引用它们。</p><p>在函数被调用时，实际参数（实参）会被引入被调用函数的本地符号表中；因此，实参是通过 按值调用 传递的（其中 值 始终是对象 引用 而不是对象的值）。</p><p>当一个函数调用另外一个函数时，将会为该调用创建一个新的本地符号表。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><ul><li><a href="http://fib.py" target="_blank" rel="noopener noreferrer">fib.py</a></li></ul><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">desc: Fib 数列</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">author: binbin.hou</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义函数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&quot;&quot;&quot;Get the fib series of number n.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	a,b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> my_function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     &quot;&quot;&quot;Do nothing, but document it.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...     No, really, it doesn&#39;t do anything.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...     &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     pass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(my_function.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__doc__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Do nothing, but document it.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    No, really, it doesn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;t do anything.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="函数标注" tabindex="-1"><a class="header-anchor" href="#函数标注"><span>函数标注</span></a></h1><p>函数标注是关于用户自定义函数中使用的类型的完全可选元数据信息。</p><p>函数标注 以字典的形式存放在函数的 <code>__annotations__</code> 属性中，并且不会影响函数的任何其他部分。</p><p>形参标注的定义方式是在形参名称后加上冒号，后面跟一个表达式，该表达式会被求值为标注的值。</p><p>返回值标注的定义方式是加上一个组合符号 <code>-&gt;</code>，后面跟一个表达式，该标注位于形参列表和表示 def 语句结束的冒号之间。</p><h2 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子</span></a></h2><p>下面的示例有一个位置参数，一个关键字参数以及返回值带有相应标注:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">ham</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> eggs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;eggs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) -&gt; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">     print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Annotations:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, f.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__annotations__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">     print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Arguments:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ham, eggs)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ham </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; and &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eggs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Annotations: {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ham&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: , </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;return&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: , </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;eggs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Arguments: spam eggs</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam and eggs&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="个人理解" tabindex="-1"><a class="header-anchor" href="#个人理解"><span>个人理解</span></a></h2><p>类似于 java 中的注解吧，提供一些对象的元信息。</p><h1 id="个人收获" tabindex="-1"><a class="header-anchor" href="#个人收获"><span>个人收获</span></a></h1><p>Python 作为一款非常受欢迎的语言，在对设计者和使用者的友好程度上是非常值得肯定的。</p><p>至少是优于 java/C/C++/C# 的。</p><p>提供编写和阅读的便利性，正式高级语言的很大的一个意义。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/zh-cn/3/tutorial/controlflow.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/zh-cn/3/tutorial/controlflow.html</a></p>`,28)]))}const r=i(e,[["render",h]]),d=JSON.parse('{"path":"/posts/Lang/2018-02-14-python-07-functional-07.html","title":"Python-07-Function 函数的定义和使用","lang":"zh-CN","frontmatter":{"title":"Python-07-Function 函数的定义和使用","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","sh"],"published":true,"description":"定义函数 说明 关键字 def 引入一个函数 定义。 它必须后跟函数名称和带括号的形式参数列表。 构成函数体的语句从下一行开始，并且必须缩进。 函数体的第一个语句可以（可选的）是字符串文字；这个字符串文字是函数的文档字符串或 docstring 。（有关文档字符串的更多信息，请参阅 文档字符串 部分）有些工具使用文档字符串自动生成在线或印刷文档，或者让...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2018-02-14-python-07-functional-07.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python-07-Function 函数的定义和使用"}],["meta",{"property":"og:description","content":"定义函数 说明 关键字 def 引入一个函数 定义。 它必须后跟函数名称和带括号的形式参数列表。 构成函数体的语句从下一行开始，并且必须缩进。 函数体的第一个语句可以（可选的）是字符串文字；这个字符串文字是函数的文档字符串或 docstring 。（有关文档字符串的更多信息，请参阅 文档字符串 部分）有些工具使用文档字符串自动生成在线或印刷文档，或者让..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python-07-Function 函数的定义和使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":7.46,"words":2238},"filePathRelative":"posts/Lang/2018-02-14-python-07-functional-07.md","localizedDate":"2018年2月14日","excerpt":"\\n<h2>说明</h2>\\n<p>关键字 <code>def</code> 引入一个函数 定义。</p>\\n<p>它必须后跟函数名称和带括号的形式参数列表。</p>\\n<p>构成函数体的语句从下一行开始，并且必须缩进。</p>\\n<p>函数体的第一个语句可以（可选的）是字符串文字；这个字符串文字是函数的文档字符串或 docstring 。（有关文档字符串的更多信息，请参阅 文档字符串 部分）有些工具使用文档字符串自动生成在线或印刷文档，或者让用户以交互式的形式浏览代码；在你编写的代码中包含文档字符串是一种很好的做法，所以要养成习惯。</p>\\n<p>函数的 执行 会引入一个用于函数局部变量的新符号表。更确切地说，函数中的所有变量赋值都将值存储在本地符号表中；而变量引用首先在本地符号表中查找，然后在封闭函数的本地符号表中查找，然后在全局符号表中查找，最后在内置符号表中查找。所以全局变量不能直接在函数中赋值（除非使用 global 命名），尽管可以引用它们。</p>","autoDesc":true}');export{r as comp,d as data};
