import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as r,o as n}from"./app-CEDSurVN.js";const e={};function s(t,a){return n(),p("div",null,a[0]||(a[0]=[r(`<h1 id="系列目录" tabindex="-1"><a class="header-anchor" href="#系列目录"><span>系列目录</span></a></h1><p><a href="https://houbb.github.io/2022/05/10/interview-01-spring" target="_blank" rel="noopener noreferrer">spring 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-02-springboot" target="_blank" rel="noopener noreferrer">spring-boot 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-04-redis" target="_blank" rel="noopener noreferrer">redis 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-05-mysql" target="_blank" rel="noopener noreferrer">mysql 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-07-mq" target="_blank" rel="noopener noreferrer">mq 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-06-dubbo" target="_blank" rel="noopener noreferrer">rpc/dubbo 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-08-zookeeper" target="_blank" rel="noopener noreferrer">ZooKeeper 面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-09-jvm-classloader" target="_blank" rel="noopener noreferrer">JVM 常见面试题之双亲委派</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-09-jvm-gc" target="_blank" rel="noopener noreferrer">JVM 常见面试题之 GC 垃圾回收</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-09-jvm-struct" target="_blank" rel="noopener noreferrer">JVM 常见面试题之 java 内存结构</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-11-java-jvm" target="_blank" rel="noopener noreferrer">JVM 常见面试题之 java 内存结构2</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-03-mybatis" target="_blank" rel="noopener noreferrer">【面试】mybatis 常见面试题汇总</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-10-repeat" target="_blank" rel="noopener noreferrer">面试官：你们项目中是怎么做防重复提交的？</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-11-java-basic-event" target="_blank" rel="noopener noreferrer">java 基础之 event 事件机制</a></p><p><a href="https://houbb.github.io/2018/07/01/reflection-01-overview" target="_blank" rel="noopener noreferrer">Reflection-01-java 反射机制</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-11-java-distribute" target="_blank" rel="noopener noreferrer">distributed 分布式相关专题汇总</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-11-java-web" target="_blank" rel="noopener noreferrer">web 常见面试题</a></p><p><a href="https://houbb.github.io/2022/05/10/interview-12-other" target="_blank" rel="noopener noreferrer">其他常见面试题</a></p><h1 id="什么是-spring-boot" tabindex="-1"><a class="header-anchor" href="#什么是-spring-boot"><span>什么是 Spring Boot？</span></a></h1><p>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，使开发者能快速上手。</p><h1 id="为什么要用-springboot" tabindex="-1"><a class="header-anchor" href="#为什么要用-springboot"><span>为什么要用 SpringBoot</span></a></h1><p>快速开发，快速整合，配置简化、内嵌服务容器</p><ul><li><p>独立运行</p></li><li><p>简化配置</p></li><li><p>自动配置</p></li><li><p>无代码生成和XML配置</p></li><li><p>应用监控</p></li><li><p>上手容易</p></li></ul><p><strong>SpringBoot来简化Spring应用开发，约定大于配置，去繁化简。</strong></p><h1 id="spring-boot-有哪些优点" tabindex="-1"><a class="header-anchor" href="#spring-boot-有哪些优点"><span>Spring Boot 有哪些优点？</span></a></h1><p>Spring Boot 主要有如下优点：</p><p>容易上手，提升开发效率，为 Spring 开发提供一个更快、更简单的开发框架。</p><p>开箱即用，远离繁琐的配置。</p><p>提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。</p><p>SpringBoot 总结就是使编码变简单、配置变简单、部署变简单、监控变简单等等</p><h1 id="springboot-与-springcloud-区别" tabindex="-1"><a class="header-anchor" href="#springboot-与-springcloud-区别"><span>SpringBoot 与 SpringCloud 区别</span></a></h1><p>SpringBoot 是快速开发的 Spring 框架，SpringCloud 是完整的微服务框架，SpringCloud 依赖于 SpringBoot。</p><h1 id="spring-和-springboot-有什么不同" tabindex="-1"><a class="header-anchor" href="#spring-和-springboot-有什么不同"><span>Spring 和 SpringBoot 有什么不同？</span></a></h1><p>Spring 框架提供多种特性使得 web 应用开发变得更简便，包括依赖注入、数据绑定、切面编程、数据存取等等。</p><p>随着时间推移，Spring 生态变得越来越复杂了，并且应用程序所必须的配置文件也令人觉得可怕。这就是 Spirng Boot 派上用场的地方了 – 它使得 Spring 的配置变得更轻而易举。</p><p>实际上，Spring 是 unopinionated（予以配置项多，倾向性弱） 的，Spring Boot 在平台和库的做法中更 opinionated ，使得我们更容易上手。</p><p>这里有两条 SpringBoot 带来的好处：</p><ol><li><p>根据 classpath 中的 artifacts 的自动化配置应用程序</p></li><li><p>提供非功能性特性例如安全和健康检查给到生产环境中的应用程序</p></li></ol><h1 id="spring-boot-的核心注解是哪个-它主要由哪几个注解组成的" tabindex="-1"><a class="header-anchor" href="#spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"><span>Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</span></a></h1><p>启动类上面的注解是 <code>@SpringBootApplication</code>，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：</p><p><code>@SpringBootConfiguration</code>：组合了 @Configuration 注解，实现配置文件的功能。</p><p><code>@EnableAutoConfiguration</code>：打开自动配置的功能，也可以关闭某个自动配置的选项，</p><p>例如：java 如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。</p><p><code>@ComponentScan</code>：Spring 组件扫描。</p><h1 id="为什么需要spring-boot-maven-plugin" tabindex="-1"><a class="header-anchor" href="#为什么需要spring-boot-maven-plugin"><span>为什么需要spring-boot-maven-plugin？</span></a></h1><p>spring-boot-maven-plugin提供了一些像jar一样打包或者运行应用程序的命令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>spring-boot:run 运行SpringBoot应用程序；</span></span>
<span class="line"><span>spring-boot:repackage 重新打包你的jar包或者是war包使其可执行</span></span>
<span class="line"><span>spring-boot:start和spring-boot:stop管理Spring Boot应用程序的生命周期</span></span>
<span class="line"><span>spring-boot:build-info生成执行器可以使用的构造信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="spring-boot-支持哪些日志框架-推荐和默认的日志框架是哪个" tabindex="-1"><a class="header-anchor" href="#spring-boot-支持哪些日志框架-推荐和默认的日志框架是哪个"><span>Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？</span></a></h1><p>Spring Boot 支持 Java Util Logging, Log4j2, Logback 作为日志框架，如果你使用 Starters 启动器，Spring Boot 将使用 Logback 作为默认日志框架，但是不管是那种日志框架他都支持将配置文件输出到控制台或者文件中。</p><h1 id="springboot-starter的工作原理" tabindex="-1"><a class="header-anchor" href="#springboot-starter的工作原理"><span>SpringBoot Starter的工作原理</span></a></h1><p>我个人理解SpringBoot就是由各种Starter组合起来的，我们自己也可以开发Starter</p><p>在sprinBoot启动时由 <code>@SpringBootApplication</code> 注解会自动去maven中读取每个starter中的 <code>spring.factories</code> 文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把bean注入SpringContext中 //（SpringContext是Spring的配置文件）</p><h1 id="spring-boot-2-x-有什么新特性-与-1-x-有什么区别" tabindex="-1"><a class="header-anchor" href="#spring-boot-2-x-有什么新特性-与-1-x-有什么区别"><span>Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？</span></a></h1><ul><li><p>配置变更</p></li><li><p>JDK 版本升级</p></li><li><p>第三方类库升级</p></li><li><p>响应式 Spring 编程支持</p></li><li><p>HTTP/2 支持</p></li><li><p>配置属性绑定</p></li><li><p>更多改进与加强</p></li></ul><h1 id="springboot支持什么前端模板" tabindex="-1"><a class="header-anchor" href="#springboot支持什么前端模板"><span>SpringBoot支持什么前端模板，</span></a></h1><p>thymeleaf，freemarker，jsp，官方不推荐JSP会有限制</p><h1 id="springboot的缺点" tabindex="-1"><a class="header-anchor" href="#springboot的缺点"><span>SpringBoot的缺点</span></a></h1><p>我觉得是为难人，SpringBoot在目前我觉得没有什么缺点，非要找一个出来我觉得就是</p><p>由于不用自己做的配置，报错时很难定位。</p><h1 id="运行-spring-boot-有哪几种方式" tabindex="-1"><a class="header-anchor" href="#运行-spring-boot-有哪几种方式"><span>运行 Spring Boot 有哪几种方式？</span></a></h1><p>打包用命令或者放到容器中运行</p><p>用 Maven/ Gradle 插件运行</p><p>直接执行 main 方法运行</p><h1 id="spring-boot-需要独立的容器运行吗" tabindex="-1"><a class="header-anchor" href="#spring-boot-需要独立的容器运行吗"><span>Spring Boot 需要独立的容器运行吗？</span></a></h1><p>可以不需要，内置了 Tomcat/Jetty 等容器。</p><h1 id="开启-spring-boot-特性有哪几种方式" tabindex="-1"><a class="header-anchor" href="#开启-spring-boot-特性有哪几种方式"><span>开启 Spring Boot 特性有哪几种方式？</span></a></h1><p>继承spring-boot-starter-parent项目</p><p>导入spring-boot-dependencies项目依赖</p><h1 id="springboot-实现热部署有哪几种方式" tabindex="-1"><a class="header-anchor" href="#springboot-实现热部署有哪几种方式"><span>SpringBoot 实现热部署有哪几种方式？</span></a></h1><p>热部署就是可以不用重新运行SpringBoot项目可以实现操作后台代码自动更新到以运行的项目中</p><p>主要有两种方式：</p><p>Spring Loaded</p><p>Spring-boot-devtools</p><h1 id="springboot-事务的使用" tabindex="-1"><a class="header-anchor" href="#springboot-事务的使用"><span>SpringBoot 事务的使用</span></a></h1><p>SpringBoot 的事务很简单，首先使用注解 <code>@EnableTransactionManagement</code> 开启事物之后，然后在Service方法上添加注解 <code>@Transactional</code> 便可。</p><h1 id="async-异步调用方法" tabindex="-1"><a class="header-anchor" href="#async-异步调用方法"><span>Async 异步调用方法</span></a></h1><p>在SpringBoot中使用异步调用是很简单的，只需要在方法上使用@Async注解即可实现方法的异步调用。</p><p>注意：需要在启动类加入 <code>@EnableAsync</code> 使异步调用 <code>@Async</code> 注解生效。</p><h1 id="如何在-spring-boot-启动的时候运行一些特定的代码" tabindex="-1"><a class="header-anchor" href="#如何在-spring-boot-启动的时候运行一些特定的代码"><span>如何在 Spring Boot 启动的时候运行一些特定的代码？</span></a></h1><p>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们都只提供了一个 run 方法</p><h1 id="spring-boot-有哪几种读取配置的方式" tabindex="-1"><a class="header-anchor" href="#spring-boot-有哪几种读取配置的方式"><span>Spring Boot 有哪几种读取配置的方式？</span></a></h1><p>Spring Boot 可以通过 @PropertySource @Value @Environment @ConfigurationPropertie 注解来绑定变量</p><h1 id="什么是-javaconfig" tabindex="-1"><a class="header-anchor" href="#什么是-javaconfig"><span>什么是 JavaConfig？</span></a></h1><p>Spring JavaConfig 是 Spring 社区的产品，Spring 3.0引入了他，它提供了配置 Spring IOC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><p>使用 JavaConfig 的优点在于：</p><p>面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。</p><p>减少或消除 XML 配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。</p><p>类型安全和重构友好。JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。</p><p>常用的Java config：</p><p>@Configuration：在类上打上写下此注解，表示这个类是配置类</p><p>@ComponentScan：在配置类上添加 @ComponentScan 注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 \`\`。</p><p>@Bean：bean的注入：相当于以前的 \`\`</p><p>@EnableWebMvc：相当于 xml 的 \`\`</p><p>@ImportResource： 相当于 xml 的 \`\`</p><h1 id="springboot-的自动配置原理是什么" tabindex="-1"><a class="header-anchor" href="#springboot-的自动配置原理是什么"><span>SpringBoot 的自动配置原理是什么</span></a></h1><p>主要是Spring Boot的启动类上的核心注解SpringBootApplication注解主配置类，有了这个主配置类启动时就会为SpringBoot开启一个@EnableAutoConfiguration注解自动配置功能。</p><p>有了这个 EnableAutoConfiguration 的话就会：</p><p>从配置文件 <code>META_INF/Spring.factories</code> 加载可能用到的自动配置类</p><p>去重，并将exclude和excludeName属性携带的类排除</p><p>过滤，将满足条件（@Conditional）的自动配置类返回</p><p>ps: 自定义 starter，就是根据这个特性实现的。</p><h1 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h1><h2 id="你如何理解-spring-boot-配置加载顺序" tabindex="-1"><a class="header-anchor" href="#你如何理解-spring-boot-配置加载顺序"><span>你如何理解 Spring Boot 配置加载顺序？</span></a></h2><p>在 Spring Boot 里面，可以使用以下几种方式来加载配置。</p><p>1.properties文件；</p><p>2.YAML文件；</p><p>3.系统环境变量；</p><p>4.命令行参数；</p><p>等等……</p><h2 id="什么是-yaml" tabindex="-1"><a class="header-anchor" href="#什么是-yaml"><span>什么是 YAML？</span></a></h2><p>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。</p><p>与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。</p><p>可以看出 YAML 具有分层配置数据。</p><h2 id="yaml-配置的优势在哪里" tabindex="-1"><a class="header-anchor" href="#yaml-配置的优势在哪里"><span>YAML 配置的优势在哪里 ?</span></a></h2><p>YAML 现在可以算是非常流行的一种配置文件格式了，无论是前端还是后端，都可以见到 YAML 配置。</p><p>那么 YAML 配置和传统的 properties 配置相比到底有哪些优势呢？</p><p><strong>配置有序，在一些特殊的场景下，配置有序很关键</strong></p><p>简洁明了，他还支持数组，数组中的元素可以是基本数据类型也可以是对象</p><p>相比 properties 配置文件，YAML 还有一个缺点，就是不支持 @PropertySource 注解导入自定义的 YAML 配置。</p><h2 id="spring-boot-是否可以使用-xml-配置" tabindex="-1"><a class="header-anchor" href="#spring-boot-是否可以使用-xml-配置"><span>Spring Boot 是否可以使用 XML 配置 ?</span></a></h2><p>Spring Boot 推荐使用 Java 配置而非 XML 配置，但是 Spring Boot 中也可以使用 XML 配置，通过 <code>@ImportResource</code> 注解可以引入一个 XML 配置。</p><h2 id="spring-boot-核心配置文件是什么-bootstrap-properties-和-application-properties-有何区别" tabindex="-1"><a class="header-anchor" href="#spring-boot-核心配置文件是什么-bootstrap-properties-和-application-properties-有何区别"><span>spring boot 核心配置文件是什么？bootstrap.properties 和 application.properties 有何区别 ?</span></a></h2><p>单纯做 Spring Boot 开发，可能不太容易遇到 bootstrap.properties 配置文件，但是在结合 Spring Cloud 时，这个配置就会经常遇到了，特别是在需要加载一些远程配置文件的时侯。</p><p>spring boot 核心的两个配置文件：</p><p>bootstrap (.yml 或者 .properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，配置在应用程序上下文的引导阶段生效。一般来说我们在 Spring Cloud 配置就会使用这个文件。且 boostrap 里面的属性不能被覆盖；</p><p>application (.yml 或者 .properties)： 由ApplicatonContext 加载，用于 spring boot 项目的自动化配置。</p><h2 id="什么是-spring-profiles" tabindex="-1"><a class="header-anchor" href="#什么是-spring-profiles"><span>什么是 Spring Profiles？</span></a></h2><p>在项目的开发中，有些配置文件在开发、测试或者生产等不同环境中可能是不同的，例如数据库连接、redis的配置等等。</p><p>那我们如何在不同环境中自动实现配置的切换呢？</p><p>Spring给我们提供了profiles机制给我们提供的就是来回切换配置文件的功能Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。</p><p>因此，当应用程序在开发中运行时，只有某些 bean 可以加载，而在 PRODUCTION中，某些其他 bean 可以加载。</p><p>假设我们的要求是 Swagger 文档仅适用于 QA 环境，并且禁用所有其他文档。</p><p>这可以使用配置文件来完成。Spring Boot 使得使用配置文件非常简单。</p><h1 id="多数据源" tabindex="-1"><a class="header-anchor" href="#多数据源"><span>多数据源</span></a></h1><h2 id="springboot多数据源拆分的思路" tabindex="-1"><a class="header-anchor" href="#springboot多数据源拆分的思路"><span>SpringBoot多数据源拆分的思路</span></a></h2><p>先在properties配置文件中配置两个数据源，创建分包mapper，使用@ConfigurationProperties读取properties中的配置，使用@MapperScan注册到对应的mapper包中</p><h2 id="springboot多数据源事务如何管理" tabindex="-1"><a class="header-anchor" href="#springboot多数据源事务如何管理"><span>SpringBoot多数据源事务如何管理</span></a></h2><p>第一种方式是在service层的@TransactionManager中使用transactionManager指定DataSourceConfig中配置的事务</p><p>第二种是使用jta-atomikos实现分布式事务管理</p><h1 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h1><h2 id="保护-spring-boot-应用有哪些方法" tabindex="-1"><a class="header-anchor" href="#保护-spring-boot-应用有哪些方法"><span>保护 Spring Boot 应用有哪些方法？</span></a></h2><p>在生产中使用HTTPS</p><p>使用Snyk检查你的依赖关系</p><p>升级到最新版本</p><p>启用CSRF保护</p><p>使用内容安全策略防止XSS攻击</p><h2 id="如何实现-spring-boot-应用程序的安全性" tabindex="-1"><a class="header-anchor" href="#如何实现-spring-boot-应用程序的安全性"><span>如何实现 Spring Boot 应用程序的安全性？</span></a></h2><p>为了实现 Spring Boot 的安全性，我们使用 spring-boot-starter-security 依赖项，并且必须添加安全配置。它只需要很少的代码。</p><p>配置类将必须扩展WebSecurityConfigurerAdapter 并覆盖其方法。</p><h2 id="比较一下-spring-security-和-shiro-各自的优缺点" tabindex="-1"><a class="header-anchor" href="#比较一下-spring-security-和-shiro-各自的优缺点"><span>比较一下 Spring Security 和 Shiro 各自的优缺点 ?</span></a></h2><p>由于 Spring Boot 官方提供了大量的非常方便的开箱即用的 Starter ，包括 Spring Security 的 Starter，使得在 Spring Boot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是 Spring Boot 项目，一般选择 Spring Security。</p><p>当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。</p><p>Shiro 和 Spring Security 相比，主要有如下一些特点：</p><p>Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架</p><p>Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单</p><p>Spring Security 功能强大；Shiro 功能简单</p><h1 id="跨域问题" tabindex="-1"><a class="header-anchor" href="#跨域问题"><span>跨域问题</span></a></h1><h2 id="spring-boot-中如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#spring-boot-中如何解决跨域问题"><span>Spring Boot 中如何解决跨域问题 ?</span></a></h2><p>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。</p><p>这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CorsConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebMvcConfigurer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> addCorsMappings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CorsRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allowedOrigins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allowCredentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allowedMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;POST&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PUT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DELETE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;OPTIONS&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3600</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="如何使用-spring-boot-实现全局异常处理" tabindex="-1"><a class="header-anchor" href="#如何使用-spring-boot-实现全局异常处理"><span>如何使用 Spring Boot 实现全局异常处理？</span></a></h1><p>Spring 提供了一种使用 ControllerAdvice 处理异常的非常有用的方法。</p><p>我们通过实现一个 ControlerAdvice 类，来处理控制器类抛出的所有异常。</p><h1 id="我们如何监视所有-spring-boot-微服务" tabindex="-1"><a class="header-anchor" href="#我们如何监视所有-spring-boot-微服务"><span>我们如何监视所有 Spring Boot 微服务？</span></a></h1><p>Spring Boot 提供监视器端点以监控各个微服务的度量。</p><p>这些端点对于获取有关应用程序的信息（如它们是否已启动）以及它们的组件（如数据库等）是否正常运行很有帮助。</p><p>但是，使用监视器的一个主要缺点或困难是，我们必须单独打开应用程序的知识点以了解其状态或健康状况。</p><p>想象一下涉及 50 个应用程序的微服务，管理员将不得不击中所有 50 个应用程序的执行终端。</p><p>为了帮助我们处理这种情况，我们将使用位于的开源项目。</p><p>它建立在 Spring Boot Actuator 之上，它提供了一个 Web UI，使我们能够可视化多个应用程序的度量。</p><h1 id="springboot性能如何优化" tabindex="-1"><a class="header-anchor" href="#springboot性能如何优化"><span>SpringBoot性能如何优化</span></a></h1><p>如果项目比较大，类比较多，不使用@SpringBootApplication，采用@Compoment指定扫包范围</p><p>在项目启动时设置JVM初始内存和最大内存相同</p><p>将springboot内置服务器由tomcat设置为undertow</p><h1 id="如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署" tabindex="-1"><a class="header-anchor" href="#如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署"><span>如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？</span></a></h1><p>这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。</p><p>Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。</p><p>Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。</p><p>Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。</p><p>DevTools 模块完全满足开发人员的需求。</p><p>该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      org.springframework.boot</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      spring-boot-devtools</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="springboot-微服务中如何实现-session-共享" tabindex="-1"><a class="header-anchor" href="#springboot-微服务中如何实现-session-共享"><span>SpringBoot 微服务中如何实现 session 共享 ?</span></a></h1><p>在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。</p><p>将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session。</p><p>这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。</p><h1 id="使用了哪些-starter-maven-依赖项" tabindex="-1"><a class="header-anchor" href="#使用了哪些-starter-maven-依赖项"><span>使用了哪些 starter maven 依赖项？</span></a></h1><p>使用了下面的一些依赖项</p><p>spring-boot-starter-web 嵌入tomcat和web开发需要servlet与jsp支持</p><p>spring-boot-starter-data-jpa 数据库支持</p><p>spring-boot-starter-data-redis redis数据库支持</p><p>spring-boot-starter-data-solr solr支持</p><p>mybatis-spring-boot-starter 第三方的mybatis集成starter</p><p>自定义的starter(如果自己开发过就可以说出来)</p><h1 id="spring-boot-中的-starter-到底是什么" tabindex="-1"><a class="header-anchor" href="#spring-boot-中的-starter-到底是什么"><span>Spring Boot 中的 starter 到底是什么 ?</span></a></h1><p>首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。</p><p>首先它提供了一个自动化配置类，一般命名为 XXXAutoConfiguration ，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性(spring.factories)注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。</p><p>正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。</p><p>当然，开发者也可以自定义 Starter</p><h1 id="spring-boot-中如何实现定时任务" tabindex="-1"><a class="header-anchor" href="#spring-boot-中如何实现定时任务"><span>Spring Boot 中如何实现定时任务 ?</span></a></h1><p>在 Spring Boot 中使用定时任务主要有两种不同的方式，一个就是使用 Spring 中的 @Scheduled 注解，另一个则是使用第三方框架 Quartz。</p><p>使用 Spring 中的 @Scheduled 的方式主要通过 @Scheduled 注解来实现。</p><h1 id="spring-boot-starter-parent-有什么用" tabindex="-1"><a class="header-anchor" href="#spring-boot-starter-parent-有什么用"><span>spring-boot-starter-parent 有什么用 ?</span></a></h1><p>我们都知道，新创建一个 Spring Boot 项目，默认都是有 parent 的，这个 parent 就是 spring-boot-starter-parent ，spring-boot-starter-parent 主要有如下作用：</p><ul><li><p>定义了 Java 编译版本为 1.8 。</p></li><li><p>使用 UTF-8 格式编码。</p></li><li><p>继承自 spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号。</p></li><li><p>执行打包操作的配置。</p></li><li><p>自动化的资源过滤。</p></li><li><p>自动化的插件配置。</p></li></ul><p>针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml。</p><h1 id="springboot-如何实现打包" tabindex="-1"><a class="header-anchor" href="#springboot-如何实现打包"><span>SpringBoot 如何实现打包</span></a></h1><p>进入项目目录在控制台输入mvn clean package，clean是清空已存在的项目包，package进行打包</p><p>或者点击左边选项栏中的Mavne，先点击clean在点击package</p><h1 id="spring-boot-打成的-jar-和普通的-jar-有什么区别" tabindex="-1"><a class="header-anchor" href="#spring-boot-打成的-jar-和普通的-jar-有什么区别"><span>Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?</span></a></h1><p>Spring Boot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 <code>java -jar xxx.jar</code> 命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。</p><p>Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。</p><p>普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 \\BOOT-INF\\classes 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。</p><h1 id="spring-cache-三种常用的缓存注解和意义" tabindex="-1"><a class="header-anchor" href="#spring-cache-三种常用的缓存注解和意义"><span>Spring Cache 三种常用的缓存注解和意义？</span></a></h1><p>1、 <code>@Cacheable</code> ，用来声明方法是可缓存，将结果存储到缓存中以便后续使用相同参数调用时不需执行实际的方法，直接从缓存中取值。</p><p>2、 <code>@CachePut</code>，使用 @CachePut 标注的方法在执行前，不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p><p>3、 <code>@CacheEvict</code>，是用来标注在需要清除缓存元素的方法或类上的，当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。</p><h1 id="什么是-spring-batch" tabindex="-1"><a class="header-anchor" href="#什么是-spring-batch"><span>什么是 Spring Batch？</span></a></h1><p>Spring Boot Batch 提供可重用的函数，这些函数在处理大量记录时非常重要，包括日志/跟踪，事务管理，作业处理统计信息，作业重新启动，跳过和资源管理。</p><p>它还提供了更先进的技术服务和功能，通过优化和分区技术，可以实现极高批量和高性能批处理作业。</p><p>简单以及复杂的大批量批处理作业可以高度可扩展的方式利用框架处理重要大量的信息。</p><h1 id="什么是-spring-actuator-它有什么优势" tabindex="-1"><a class="header-anchor" href="#什么是-spring-actuator-它有什么优势"><span>什么是 Spring Actuator？它有什么优势？</span></a></h1><p>这是SpringBoot中最常见的面试问题之一。</p><p>根据Spring文件：</p><p>执行器是一个制造术语，指的是移动或控制某物的机械装置。执行机构可以从一个小的变化中产生大量的运动。</p><p>众所周知，SpringBoot提供了许多自动配置特性，帮助开发人员快速开发生产组件。但是，当考虑调试和如何调试，如果出现问题，总是需要分析日志并挖掘应用程序的数据流，检查问题出在何处。因此，Spring Actuator提供了方便的访问这些类型的途径。它提供了许多特性，例如创建了什么样的bean、控制器中的映射、CPU使用情况等等。它还可以将自动收集和审计健康状况和指标应用到应用程序中。</p><p>它提供了一种非常简单的方法来访问少数生产就绪的REST端点，并从Web获取各种信息。但是通过使用这些端点，你可以做很多事情来查看端点文档。没有必要担心安全问题;如果存在Spring Security，则默认使用Spring Security的内容协商策略保护这些端点。或者，可以在RequestMatcher的帮助下配置自定义安全性。</p><h2 id="spring-boot-中的监视器是什么" tabindex="-1"><a class="header-anchor" href="#spring-boot-中的监视器是什么"><span>Spring Boot 中的监视器是什么？</span></a></h2><p>Spring boot actuator 是 spring 启动框架中的重要功能之一。</p><p>Spring boot 监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。</p><p>有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。</p><p>监视器模块公开了一组可直接作为 HTTP URL 访问的REST 端点来检查状态。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>本质上，Actuator 通过启用 production-ready 功能使得 SpringBoot 应用程序变得更有生命力。这些功能允许我们对生产环境中的应用程序进行监视和管理。</p><p>集成 SpringBoot Actuator 到项目中非常简单。我们需要做的只是将 spring-boot-starter-actuator starter 引入到 POM.xml 文件当中：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    org.springframework.boot</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    spring-boot-starter-actuator</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot Actuaor 可以使用 HTTP 或者 JMX endpoints来浏览操作信息。大多数应用程序都是用 HTTP，作为 endpoint 的标识以及使用 /actuator 前缀作为 URL路径。</p><p>这里有一些常用的内置 endpoints Actuator：</p><p>auditevents：查看 audit 事件信息</p><p>env：查看 环境变量</p><p>health：查看应用程序健康信息</p><p>httptrace：展示 HTTP 路径信息</p><p>info：展示 arbitrary 应用信息</p><p>metrics：展示 metrics 信息</p><p>loggers：显示并修改应用程序中日志器的配置</p><p>mappings：展示所有 @RequestMapping 路径信息</p><p>scheduledtasks：展示应用程序中的定时任务信息</p><p>threaddump：执行 Thread Dump</p><h1 id="_10-什么是-spring-data" tabindex="-1"><a class="header-anchor" href="#_10-什么是-spring-data"><span>10.什么是 Spring Data ?</span></a></h1><p>Spring Data 是 Spring 的一个子项目。用于简化数据库访问，支持NoSQL 和 关系数据存储。其主要目标是使数据库的访问变得方便快捷。</p><p>Spring Data 具有如下特点：</p><h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储"><span>存储</span></a></h2><p>SpringData 项目支持 NoSQL 存储：</p><ul><li><p>MongoDB （文档数据库）</p></li><li><p>Neo4j（图形数据库）</p></li><li><p>Redis（键/值存储）</p></li><li><p>Hbase（列族数据库）</p></li><li><p>Elasticsearch</p></li></ul><h2 id="存储技术" tabindex="-1"><a class="header-anchor" href="#存储技术"><span>存储技术</span></a></h2><p>SpringData 项目所支持的关系数据存储技术：</p><ul><li><p>JDBC</p></li><li><p>JPA(Java Persistence API的简称，中文名Java持久层API)</p></li></ul><p>Spring Data Jpa 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！</p><p>Spring Data JPA 通过规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。</p><h1 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档</span></a></h1><h2 id="什么是swagger-你用spring-boot实现了吗" tabindex="-1"><a class="header-anchor" href="#什么是swagger-你用spring-boot实现了吗"><span>什么是Swagger？你用Spring Boot实现了吗？</span></a></h2><p>Swagger 广泛用于可视化 API，使用 Swagger UI 为前端开发人员提供在线沙箱。</p><p>Swagger 是用于生成 RESTful Web 服务的可视化表示的工具，规范和完整框架实现。</p><p>它使文档能够以与服务器相同的速度更新。</p><p>当通过 Swagger 正确定义时，消费者可以使用最少量的实现逻辑来理解远程服务并与其进行交互。</p><p>因此，Swagger消除了调用服务时的猜测。</p><h2 id="前后端分离-如何维护接口文档" tabindex="-1"><a class="header-anchor" href="#前后端分离-如何维护接口文档"><span>前后端分离，如何维护接口文档？</span></a></h2><p>前后端分离开发日益流行，大部分情况下，我们都是通过 Spring Boot 做前后端分离开发，前后端分离一定会有接口文档，不然会前后端会深深陷入到扯皮中。</p><p>一个比较笨的方法就是使用 word 或者 md 来维护接口文档，但是效率太低，接口一变，所有人手上的文档都得变。</p><p>在 Spring Boot 中，这个问题常见的解决方案是 Swagger，使用 Swagger 我们可以快速生成一个接口文档网站，接口一旦发生变化，文档就会自动更新，所有开发工程师访问这一个在线网站就可以获取到最新的接口文档，非常方便。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://juejin.cn/post/6844904125709156359" target="_blank" rel="noopener noreferrer">Spring Boot面试题（总结最全面的面试题！！！）</a></p><p><a href="https://segmentfault.com/a/1190000016686735" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000016686735</a></p>`,276)]))}const l=i(e,[["render",s]]),g=JSON.parse('{"path":"/posts/Interview/2022-05-10-interview-02-springboot.html","title":"springboot 常见面试题","lang":"zh-CN","frontmatter":{"title":"springboot 常见面试题","date":"2022-05-10T00:00:00.000Z","categories":["Interview"],"tags":["interview","springboot","sh"],"published":true,"description":"系列目录 spring 常见面试题 spring-boot 常见面试题 redis 常见面试题 mysql 常见面试题 mq 常见面试题 rpc/dubbo 常见面试题 ZooKeeper 面试题 JVM 常见面试题之双亲委派 JVM 常见面试题之 GC 垃圾回收 JVM 常见面试题之 java 内存结构 JVM 常见面试题之 java 内存结构2 【...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Interview/2022-05-10-interview-02-springboot.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"springboot 常见面试题"}],["meta",{"property":"og:description","content":"系列目录 spring 常见面试题 spring-boot 常见面试题 redis 常见面试题 mysql 常见面试题 mq 常见面试题 rpc/dubbo 常见面试题 ZooKeeper 面试题 JVM 常见面试题之双亲委派 JVM 常见面试题之 GC 垃圾回收 JVM 常见面试题之 java 内存结构 JVM 常见面试题之 java 内存结构2 【..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"interview"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2022-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"springboot 常见面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":22.75,"words":6825},"filePathRelative":"posts/Interview/2022-05-10-interview-02-springboot.md","localizedDate":"2022年5月10日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2022/05/10/interview-01-spring\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">spring 常见面试题</a></p>\\n<p><a href=\\"https://houbb.github.io/2022/05/10/interview-02-springboot\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">spring-boot 常见面试题</a></p>\\n<p><a href=\\"https://houbb.github.io/2022/05/10/interview-04-redis\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">redis 常见面试题</a></p>","autoDesc":true}');export{l as comp,g as data};
