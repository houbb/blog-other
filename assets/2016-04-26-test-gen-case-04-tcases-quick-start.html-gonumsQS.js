import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as e,b as l,d as i,e as p,w as r,r as h,o}from"./app-CEDSurVN.js";const d={};function c(k,s){const a=h("RouteLink");return o(),t("div",null,[s[3]||(s[3]=e(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><blockquote><p><a href="https://houbb.github.io/2018/06/24/junit5-01-hello" target="_blank" rel="noopener noreferrer">junit5 系列</a></p></blockquote><blockquote><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p></blockquote><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><p><a href="https://github.com/houbb/evosuite-learn" target="_blank" rel="noopener noreferrer">自动生成测试用例</a></p><h2 id="入门指南" tabindex="-1"><a class="header-anchor" href="#入门指南"><span>入门指南</span></a></h2><h3 id="关于本指南" tabindex="-1"><a class="header-anchor" href="#关于本指南"><span>关于本指南</span></a></h3><p>本指南详细解释了Tcases的工作原理。在涉及示例时，本指南展示了在使用Tcases作为 shell 命令运行时如何操作。如果你使用 <a href="http://www.cornutum.org/tcases/docs/tcases-maven-plugin/index.html" target="_blank" rel="noopener noreferrer">Tcases Maven<br> Plugin</a> 运行 Tcases，命令行细节会略有不同，但所有概念都保持不变。</p><h3 id="安装-tcases-maven-插件" tabindex="-1"><a class="header-anchor" href="#安装-tcases-maven-插件"><span>安装 Tcases Maven 插件</span></a></h3><p>要获取 Tcases Maven 插件的依赖信息，请访问<br> 插件的<a href="http://www.cornutum.org/tcases/docs/tcases-maven-plugin/dependency-info.html" target="_blank" rel="noopener noreferrer">文档站点</a>。</p><h3 id="安装-tcases-发行版" tabindex="-1"><a class="header-anchor" href="#安装-tcases-发行版"><span>安装 Tcases 发行版</span></a></h3><p>要获取 Tcases 的命令行版本，请从 Maven Central Repository 下载 Tcases 二进制分发文件，使用以下步骤。</p><ol><li>访问 <a href="https://central.sonatype.com/artifact/org.cornutum.tcases/tcases-shell/4.0.1/versions" target="_blank" rel="noopener noreferrer">Central Repository 页面</a> 的 <code>tcases-shell</code>。</li><li>找到最新版本的条目并点击“浏览”。</li><li>要下载分发的 ZIP 文件，请点击“tcases-shell-<em>\${version}</em>.zip”。如果你更喜欢压缩的 TAR 文件，请点击“tcases-shell-<em>\${version}</em>.tar.gz”。</li></ol><p>将分发文件的内容解压到任何你喜欢的目录 —— 这现在是你的 <em>&quot;Tcases 主目录&quot;</em>。解压分发文件将创建一个 <em>&quot;Tcases 发布目录&quot;</em> —— 一个形式为 <code>tcases-</code><em>m</em>.<em>n</em>.<em>r</em> 的子目录，其中包含此版本 Tcases 的所有文件。发布目录包含以下子目录。</p><ul><li><code>bin</code>: 用于运行 Tcases 的可执行 shell 脚本</li><li><code>docs</code>: 用户指南、示例和 Javadoc</li><li><code>lib</code>: 运行 Tcases 所需的所有 JAR 文件</li></ul><p>还有一步，你就可以开始了：将 <code>bin</code> 子目录的路径添加到你系统的 <code>PATH</code> 环境变量中。</p><h3 id="json-还是-xml" tabindex="-1"><a class="header-anchor" href="#json-还是-xml"><span>JSON？还是 XML？</span></a></h3><p>所有 Tcases 文档的首选形式是 JSON，它能够表达所有 Tcases 的特性，并且在本指南的所有示例中都使用 JSON。</p><p>但 Tcases 的原始版本使用 XML 作为所有文档的格式，对于较旧的文档，仍然支持 XML。你可以在<a href="http://www.cornutum.org/tcases/docs/Tcases-Guide.htm" target="_blank" rel="noopener noreferrer">本指南的原始版本</a>中找到有关使用 XML 的所有详细信息，包括<a href="http://www.cornutum.org/tcases/docs/Tcases-Guide.htm#json" target="_blank" rel="noopener noreferrer">如何将现有的 XML 项目转换为 JSON</a>。</p><h3 id="从命令行运行" tabindex="-1"><a class="header-anchor" href="#从命令行运行"><span>从命令行运行</span></a></h3><p>你可以直接从 shell 命令行运行 Tcases。如果你使用 <code>bash</code> 或类似的 UNIX shell，可以运行 <code>tcases</code> 命令。或者，如果你使用 Windows 命令行，你可以使用 <code>tcases.bat</code> 命令文件以完全相同的语法运行 Tcases。</p><p>例如，为了快速检查，你可以运行 Tcases 自带的一个示例，使用以下命令。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tcases-release-dir</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docs/examples/json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tcases</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">find-Input.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于 <code>tcases</code> 命令（以及 <code>tcases.bat</code> 命令）的接口的详细信息，请参阅<br><a href="http://www.cornutum.org/tcases/docs/api/org/cornutum/tcases/TcasesCommand.Options.html" target="_blank" rel="noopener noreferrer"><code>TcasesCommand.Options</code></a> 类的 Javadoc。要在命令行上获得帮助，请运行 <code>tcases -help</code>。</p><h3 id="理解-tcases-的结果" tabindex="-1"><a class="header-anchor" href="#理解-tcases-的结果"><span>理解 Tcases 的结果</span></a></h3><p>运行 Tcases 时会发生什么？Tcases 读取一个<a href="#defining-system-functions">系统输入定义</a>，这是一个定义要测试的系统函数的 &quot;输入空间&quot; 的文档。从这个文档中，Tcases 生成一个称为 <em>系统测试定义</em> 的不同文档，它描述了一组测试用例。</p><p>尝试在其中一个示例系统输入定义上运行 Tcases。以下命令将为 <code>find</code> 命令的<a href="#an-example-the-find-command">示例</a>生成测试用例，稍后在本指南中<a href="#modeling-the-input-space">详细说明</a>。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tcases-release-dir</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docs/examples/json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tcases</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">find-Input.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的系统测试定义将写入标准输出。它看起来像这样：对于 <code>find</code> <a href="#defining-system-functions">函数</a>，一个测试用例定义列表，其中每个定义都为函数的所有<a href="#defining-input-variables">变量</a>定义了值。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;system&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Examples&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;find&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;testCases&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pattern=&#39;empty&#39;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;has&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;properties&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fileExists,fileName,patternEmpty&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;arg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;pattern&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;source&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;fileName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;defined&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;env&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;file.exists&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;file.contents.linesLongerThanPattern&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;NA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;file.contents.patternMatches&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;NA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;file.contents.patternsInLine&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            &quot;NA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">      ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="故障排除常见问题" tabindex="-1"><a class="header-anchor" href="#故障排除常见问题"><span>故障排除常见问题</span></a></h3>`,32)),l("p",null,[s[1]||(s[1]=i("遇到问题了吗？请查看")),p(a,{to:"/posts/tests/Troubleshooting-FAQs.html#troubleshooting-faqs"},{default:r(()=>s[0]||(s[0]=[i("故障排除FAQ")])),_:1}),s[2]||(s[2]=i("以获取帮助。"))]),s[4]||(s[4]=e('<h2 id="对输入空间进行建模" tabindex="-1"><a class="header-anchor" href="#对输入空间进行建模"><span>对输入空间进行建模</span></a></h2><p>Tcases根据您创建的 <em>系统输入定义</em> 创建测试定义。但是，您如何做到这一点呢？这就是本节的目的。</p><p>系统输入定义是对被测系统（SUT）的 &quot;输入空间&quot; 进行建模的文档。我们说它 &quot;建模&quot; 系统输入，因为它并不是字面上列举所有可能的输入值。相反，系统输入定义列出了影响系统结果的系统输入的所有重要方面。可以将其视为描述系统 &quot;输入空间&quot; 中 &quot;变化维度&quot; 的方式。某些变化维度是显而易见的。如果您正在测试 <code>add</code> 函数，您知道至少有两个变化维度 —— 被相加的两个不同数字。但是要找到所有关键维度，您可能需要更深入地查看。</p><p>例如，考虑如何测试一个简单的 &quot;列出文件&quot; 命令，例如 <code>UNIX</code> 中的 <code>ls</code> 命令。（为了保持简单，假设没有要担心的命令选项或开关。）显然，变化维度之一是给定的文件名数量。<code>ls</code> 应该处理不仅一个文件名，还有许多文件名的列表。如果没有给出文件名，<code>ls</code> 预计会产生完全不同的结果。但是每个文件名本身呢？<code>ls</code> 将根据名称标识的是简单文件还是目录而产生不同的结果。因此，文件名的类型是一个额外的变化维度。但还不止于此！某些文件名可能标识实际文件，但其他文件名可能是不存在的文件的虚假名称，这种差异会对 <code>ls</code> 预计要执行的操作产生重大影响。因此，这是另一个变化维度，与文件名本身无关，而是涉及 <code>ls</code> 运行的环境状态。</p><p>您可以看到，对输入空间进行建模需要对SUT进行仔细的思考。这是没有任何工具可以为您完成的工作。但是，Tcases为您提供了一种捕捉这种知识并将其转化为有效测试用例的方法。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>',6))])}const m=n(d,[["render",c]]),B=JSON.parse('{"path":"/posts/tests/2016-04-26-test-gen-case-04-tcases-quick-start.html","title":"test-04-test case generate 测试用例生成 tcases 快速开始","lang":"zh-CN","frontmatter":{"title":"test-04-test case generate 测试用例生成 tcases 快速开始","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","test","generate"],"published":true,"description":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 自动...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-gen-case-04-tcases-quick-start.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test-04-test case generate 测试用例生成 tcases 快速开始"}],["meta",{"property":"og:description","content":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 自动..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"generate"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test-04-test case generate 测试用例生成 tcases 快速开始\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.32,"words":1597},"filePathRelative":"posts/tests/2016-04-26-test-gen-case-04-tcases-quick-start.md","localizedDate":"2016年4月26日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2018/06/24/junit5-01-hello\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">junit5 系列</a></p>\\n</blockquote>\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2021/07/23/junit-performance-junit5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基于 junit5 实现 junitperf 源码分析</a></p>\\n</blockquote>","autoDesc":true}');export{m as comp,B as data};
