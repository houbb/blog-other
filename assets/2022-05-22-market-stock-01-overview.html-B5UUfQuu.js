import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CEDSurVN.js";const h={};function t(l,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h1><p>进行市场的商品售卖，要避免出现超卖的现象。</p><p>最近在做一个关于库存服务的设计方案，在网上找了很多资料，都没有一个大而全的设计方案，于是就参考网上现有的电商库存设计，设计出一个自认为非常优秀的关于库存服务扣减的方案，仅供大家参考。<br> ​</p><h1 id="设计流程图" tabindex="-1"><a class="header-anchor" href="#设计流程图"><span>设计流程图</span></a></h1><figure><img src="https://img-blog.csdnimg.cn/0472aa9a49b44c8ea52e752f6322a463.png" alt="设计流程图" tabindex="0" loading="lazy"><figcaption>设计流程图</figcaption></figure><h1 id="设计思路" tabindex="-1"><a class="header-anchor" href="#设计思路"><span>设计思路</span></a></h1><p>为了扛住高并发，我这里在两个地方做了库存扣减，第一个使用redis做预扣库存，第二个是数据库扣除实际库存；</p><p>用户提交订单时，做的是reids中库存预扣，只有当实际支付完成后，才会做数据库层的库存扣减。</p><p>在用户提交订单时、支付完成时、订单取消或下单失败时、运营更新商品时，都会涉及到库存的操作，所以本文分别就这几种场景，设计出对应的库存扣减逻辑。</p><h1 id="用户提交订单时库存预扣" tabindex="-1"><a class="header-anchor" href="#用户提交订单时库存预扣"><span>用户提交订单时库存预扣</span></a></h1><p>（1）查询redis当前的库存</p><p>库存数量大于等于购买数量n，则继续后续操作</p><p>如果小于，则库存扣减失败，订单创建失败</p><p>（2）调用redis的原子方法(increment)，执行扣减操作stock = increment(skuID,-n );</p><p>如果stock&gt;=0,则代表扣减成功，则库存预扣成功，订单创建成功</p><p>否则库存扣减失败，订单创建失败，再次调用increment(skuID,+n )，重要的一步是将redis库存回填</p><h1 id="用户支付完成时扣除实际库存" tabindex="-1"><a class="header-anchor" href="#用户支付完成时扣除实际库存"><span>用户支付完成时扣除实际库存</span></a></h1><p>为什么要在用户支付完成后才实际的扣减库存呢？而不是下单时直接扣减实际库存呢？</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点：</span></a></h2><p>防止用户支付前取消订单，进行库存回填的时候，还得操作实际库存,增加库存不一致的风险</p><p>为了提高并发，因为特别是在并发量比较大的时候，如果在下单时直接操作数据库库存，会导致创建订单花费的时间更长</p><p>防止用户恶意下单，不支付，占用库存**(主要原因)**</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点：</span></a></h2><p>用户支付时，有可能会出现库存不足，给用户造成不好的购物体验。</p><h1 id="订单取消-下单失败-库存回滚" tabindex="-1"><a class="header-anchor" href="#订单取消-下单失败-库存回滚"><span>订单取消/下单失败，库存回滚</span></a></h1><p>这里其实需要分为不同场景：</p><p>订单未支付前：订单取消或下单失败，则只需要回填redis库存</p><p>订单已经支付完成：订单取消/下单失败，则需要回填redis和数据库库存，并执行退款。</p><h1 id="运营更新商品-操作库存" tabindex="-1"><a class="header-anchor" href="#运营更新商品-操作库存"><span>运营更新商品，操作库存</span></a></h1><p>redis库存增加：使用increment(skuID,+n );原子操作更新库存</p><p>数据库库存增加：使用乐观锁进行更新。</p><h1 id="每日凌晨定时维护redis与数据库的库存数量" tabindex="-1"><a class="header-anchor" href="#每日凌晨定时维护redis与数据库的库存数量"><span>每日凌晨定时维护redis与数据库的库存数量</span></a></h1><p>为了防止redis和数据的库存出现不一致的情况，每天都需要进行检查；</p><p>库存以数据库中实际库存为主，将数据库中的库存减去未支付订单扣减的库存，更新到 redis 中。</p><h1 id="关于订单库存扣减的最佳实践" tabindex="-1"><a class="header-anchor" href="#关于订单库存扣减的最佳实践"><span>关于订单库存扣减的最佳实践</span></a></h1><h2 id="一-背景" tabindex="-1"><a class="header-anchor" href="#一-背景"><span>一： 背景</span></a></h2><p>在电商的业务场景中每个商品都是有库存的，而且可能存在很多限售的运营策略。</p><p>我们团队面临社区电商的业务场景更为复杂</p><p>。不仅仅是库存限售，存在区域，门店，用户，运营分组，物流等的限售策略。</p><p>如何面对日单量千万级别（未来更多），和多个维度的限售策略而不超卖，少卖是一个必须解决的问题。</p><p>​下面就是库存扣减的流程图。</p><p>冲图种我们可以看出，要保证整个扣减库存不出问题，限购查询和库存的扣减必须是原子性的而且要单线程执行。</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/40e68385e7e54032176fa14d859d022d.png" alt="流程" tabindex="0" loading="lazy"><figcaption>流程</figcaption></figure><p>现在处理这种场景存在多种方案。但是要保证高性能和高可用，大部分方案并不满足。</p><h2 id="二-探索" tabindex="-1"><a class="header-anchor" href="#二-探索"><span>二：探索</span></a></h2><h3 id="_1-历史数据库的事务特性和唯一主键的实现原子操作和单线程操作" tabindex="-1"><a class="header-anchor" href="#_1-历史数据库的事务特性和唯一主键的实现原子操作和单线程操作"><span>1. 历史数据库的事务特性和唯一主键的实现原子操作和单线程操作</span></a></h3><p>基于数据库的事务，扣减库存的操作方法同一个事务中进行库存扣减，事务中任何操作失败，执行回滚操作。</p><p>从而保证原子性。单纯靠数据库的事务，只能在单体的项目中。如何要分布式的项目中，就无法保证单线程操作了。</p><p>那如何在多进程中实现单线程扣减库存呢？我们可以利用数据库的唯一索引。</p><p>具体操作步骤：</p><p>新建立一张表：</p><p>t_lock_tbl，同时将商品ID作为唯一索引。</p><p>进行扣减库存之前在表中插入商品ID，然后进行数据库更新。</p><p>更新结束后上次刚才插入数据库中的记录，释放锁。</p><p>A线程进程扣减库存时候，插入了该商品的id，当B线程扣减该商品的库存的时候，同样也会在数据库中插入该商品ID，A线程没有执行完B线程插入同一个商品ID就会报主键重复的错误，这样就扣减库存失败。</p><p>这种方案，功能上是可以实现，但是过分依赖数据库，无法满足性能要求，而且存在很多获取锁失败的情况，用户体验差。</p><h3 id="_2-利用分布式锁" tabindex="-1"><a class="header-anchor" href="#_2-利用分布式锁"><span>2. 利用分布式锁</span></a></h3><p>Redis 或者 ZooKeeper 来实现一个分布式锁，以商品维度来加锁，在获取到锁的线程中，按顺序去执行商品库存的查询和扣减，这样就同时实现了顺序性和原子性。</p><p>​其实这个思路是可以的，只是不管通过哪种方式实现的分布式锁，都是有弊端的。</p><p>以 Redis 的实现来说，仅仅在设置锁的有效期问题上，就让人头大。</p><p>如果时间太短，那么业务程序还没有执行完，锁就自动释放了，这就失去了锁的作用；而如果时间偏长，一旦在释放锁的过程中出现异常，没能及时地释放，那么所有的业务线程都得阻塞等待直到锁自动失效，这样可能导致CPU飙升，系统吞吐量下降。</p><p>这与我们要实现高性能的系统是相悖的。</p><p>所以通过分布式锁的方式可以实现，但不建议使用。</p><h3 id="_3-redis-lua-脚本" tabindex="-1"><a class="header-anchor" href="#_3-redis-lua-脚本"><span>3. Redis + lua 脚本</span></a></h3><p>reids，单线程支持顺序操作，而且性能优异，但是不支持事务回滚。</p><p>但是通过redis+lua脚本可以实现redis操作的原子性。</p><p>这种方案同时满足顺序性和原子性的要求了。</p><p>这里能帮我们实现 Redis 执行 Lua 脚本的命令有两个，一个是 EVAL，另一个是 EVALSHA。</p><p>原生 EVAL 方法的使用语法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>EVAL script numkeys key [key ...] arg [arg ...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 EVAL 是命令，script 是我们 Lua 脚本的字符串形式，numkeys 是我们要传入的参数数量，key 是我们的入参，可以传入多个，arg 是额外的入参。</p><p>但这种方式需要每次都传入 Lua 脚本字符串，不仅浪费网络开销，同时 Redis 需要每次重新编译 Lua 脚本，对于我们追求性能极限的系统来说，不是很完美。</p><p>所以这里就要说到另一个命令 EVALSHA 了，原生语法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>EVALSHA sha1 numkeys key [key ...] arg [arg ...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看到其语法与 EVAL 类似，不同的是这里传入的不是脚本字符串，而是一个加密串 sha1。这个 sha1 是从哪来的呢？它是通过另一个命令 SCRIPT LOAD 返回的，该命令是预加载脚本用的，语法为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SCRIPT LOAD script</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样的话，我们通过预加载命令，将 Lua 脚本先存储在 Redis 中，并返回一个 sha1，下次要执行对应脚本时，只需要传入 sha1 即可执行对应的脚本。</p><p>这完美地解决了 EVAL 命令存在的弊端，所以我们这里也是基于 EVALSHA 方式来实现的。</p><p>既然有了思路，也有了方案，那我们开始用代码实现它吧。首先我们根据以上介绍的库存扣减核心操作，完成核心 Lua 脚本的编写。</p><p>其主要实现的功能就是查询库存并判断库存是否充足，如果充足，则做相应的扣减操作，脚本内容如下：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 调用Redis的get指令，查询活动库存，其中KEYS[1]为传入的参数1，即库存key</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;get&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 判断活动库存是否充足，其中KEYS[2]为传入的参数2，即当前抢购数量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> not </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> or </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">tonumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c_s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getGoodsList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GoodsVo</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        redisService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GoodsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.getGoodsStock, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getStockCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        isOverMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);//先初始化 每个商品都是false 就是还有</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**秒杀接口优化之 ----第二步：预减库存 从缓存中减库存</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 利用 redis 中的方法，减去库存，返回值为 减去1 之后的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">redisService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">decr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GoodsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.getGoodsStock, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*这里判断不能小于等于，因为减去之后等于 说明还有是正常范围*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stock</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  isOverMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 秒杀接口优化之--- 第一步: 系统初始化后就将所有商品库存放入 缓存</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Override</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">public</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> afterPropertiesSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">throws</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    List</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> goods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getGoodsList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GoodsVo</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        redisService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">GoodsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.getGoodsStock, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getStockCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        isOverMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsVo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);//先初始化 每个商品都是false 就是还有</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**再优化：优化 库存之后的请求不访问redis 通过判断 对应 map 的值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> isOver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">isOverMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">isOver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CodeMsg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.MIAO_SHA_NO_STOCK);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">stock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        isOverMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">goodsId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);//没有库存就设置 对应id 商品的map 为true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.在预减库存之前，从map中取标记，若标记为false，说明库存</p><p>3.预减库存，当遇到库存不足的时候，将该商品的标记置为true，表示该商品的库存不足。这样，下面的所有请求，将被拦截，无需访问redis进行预减库存。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://blog.csdn.net/weixin_34311210/article/details/119011222" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_34311210/article/details/119011222</a></p><p><a href="https://blog.csdn.net/aa119101/article/details/124344166" target="_blank" rel="noopener noreferrer">关于订单库存扣减的最佳实践</a></p><p><a href="https://blog.csdn.net/best_luxi/article/details/122528585" target="_blank" rel="noopener noreferrer">秒杀场景：如何通过 Redis 减库存</a></p>`,87)]))}const r=i(h,[["render",t]]),d=JSON.parse('{"path":"/posts/Market/2022-05-22-market-stock-01-overview.html","title":"市场库存扣减方案梳理","lang":"zh-CN","frontmatter":{"title":"市场库存扣减方案梳理","date":"2022-05-22T00:00:00.000Z","categories":["Market"],"tags":["markte","trans","sh"],"published":true,"description":"背景 进行市场的商品售卖，要避免出现超卖的现象。 最近在做一个关于库存服务的设计方案，在网上找了很多资料，都没有一个大而全的设计方案，于是就参考网上现有的电商库存设计，设计出一个自认为非常优秀的关于库存服务扣减的方案，仅供大家参考。 ​ 设计流程图 设计流程图设计流程图 设计思路 为了扛住高并发，我这里在两个地方做了库存扣减，第一个使用redis做预扣...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Market/2022-05-22-market-stock-01-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"市场库存扣减方案梳理"}],["meta",{"property":"og:description","content":"背景 进行市场的商品售卖，要避免出现超卖的现象。 最近在做一个关于库存服务的设计方案，在网上找了很多资料，都没有一个大而全的设计方案，于是就参考网上现有的电商库存设计，设计出一个自认为非常优秀的关于库存服务扣减的方案，仅供大家参考。 ​ 设计流程图 设计流程图设计流程图 设计思路 为了扛住高并发，我这里在两个地方做了库存扣减，第一个使用redis做预扣..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/0472aa9a49b44c8ea52e752f6322a463.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"markte"}],["meta",{"property":"article:tag","content":"trans"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2022-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"市场库存扣减方案梳理\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/0472aa9a49b44c8ea52e752f6322a463.png\\",\\"https://img-blog.csdnimg.cn/img_convert/40e68385e7e54032176fa14d859d022d.png\\"],\\"datePublished\\":\\"2022-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":11.95,"words":3584},"filePathRelative":"posts/Market/2022-05-22-market-stock-01-overview.md","localizedDate":"2022年5月22日","excerpt":"\\n<p>进行市场的商品售卖，要避免出现超卖的现象。</p>\\n<p>最近在做一个关于库存服务的设计方案，在网上找了很多资料，都没有一个大而全的设计方案，于是就参考网上现有的电商库存设计，设计出一个自认为非常优秀的关于库存服务扣减的方案，仅供大家参考。<br>\\n​</p>\\n<h1>设计流程图</h1>\\n<figure><img src=\\"https://img-blog.csdnimg.cn/0472aa9a49b44c8ea52e752f6322a463.png\\" alt=\\"设计流程图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>设计流程图</figcaption></figure>","autoDesc":true}');export{r as comp,d as data};
