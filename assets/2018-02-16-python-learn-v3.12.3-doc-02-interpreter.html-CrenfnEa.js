import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as s}from"./app-CEDSurVN.js";const o={};function a(r,e){return s(),i("div",null,e[0]||(e[0]=[n(`<p><strong>2. 使用Python解释器</strong></p><p><strong>2.1. 调用解释器</strong></p><p>Python解释器通常安装在<code>/usr/local/bin/python3.12</code>这样的位置。将<code>/usr/local/bin</code>添加到你的Unix shell的搜索路径中，可以通过输入以下命令来启动它：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python3.12</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在Windows机器上，如果你从Microsoft Store安装了Python，<code>python3.12</code>命令将可用。如果你安装了<code>py.exe</code>启动器，你可以使用<code>py</code>命令。参见<strong>附录：设置环境变量</strong>以了解其他启动Python的方法。</p><p>输入文件结束符（Unix上的<code>Control-D</code>，Windows上的<code>Control-Z</code>）将使解释器以零的退出状态退出。如果这不起作用，你可以通过输入以下命令退出解释器：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">quit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解释器的行编辑功能包括交互式编辑、历史替换和代码完成。如果你的系统支持GNU Readline库，可以通过输入<code>Control-P</code>来检查命令行编辑是否支持。如果哔哔哔作响，你有命令行编辑。如果没有发生任何事情或<code>^P</code>被回显，命令行编辑不可用。</p><p>解释器的工作方式类似于Unix shell：当使用标准输入连接到tty设备时，它交互式地读取和执行命令；当使用文件名参数或文件作为标准输入时，它从该文件读取并执行脚本。</p><p>另一种启动解释器的方法是使用<code>python -c command [arg] ...</code>，它执行命令中的语句，类似于shell的<code>-c</code>选项。</p><p>有些Python模块也可以作为脚本使用，可以使用<code>python -m module [arg] ...</code>来调用。</p><p><strong>2.1.1. 参数传递</strong></p><p>解释器知道脚本名和附加参数后，它们被转换为一个字符串列表并分配给<code>sys</code>模块中的<code>argv</code>变量。你可以通过执行<code>import sys</code>来访问这个列表。</p><p><strong>2.1.2. 交互模式</strong></p><p>当从tty读取命令时，解释器处于交互模式。在此模式下，它使用主提示符<code>&gt;&gt;&gt;</code>提示下一个命令；对于继续行，它使用次要提示符<code>...</code>。</p><p><strong>2.2. 解释器及其环境</strong></p><p><strong>2.2.1. 源代码编码</strong></p><p>默认情况下，Python源文件被视为以UTF-8编码。为了声明除默认之外的编码，应在文件的第一行添加一个特殊的注释行：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: encoding -*-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中<code>encoding</code>是Python支持的有效编解码器之一。例如，要声明使用Windows-1252编码，你的源代码文件的第一行应为：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: cp1252 -*-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例外情况是当源代码以UNIX的“shebang”行开始时。在这种情况下，应在文件的第二行添加编码声明。例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: cp1252 -*-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/3.12/tutorial/interpreter.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/3.12/tutorial/interpreter.html</a></p>`,25)]))}const d=t(o,[["render",a]]),p=JSON.parse('{"path":"/posts/Lang/2018-02-16-python-learn-v3.12.3-doc-02-interpreter.html","title":"Python v3.12.3 学习-02-Using the Python Interpreter 使用Python解释器","lang":"zh-CN","frontmatter":{"title":"Python v3.12.3 学习-02-Using the Python Interpreter 使用Python解释器","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","why-learn","sh"],"published":true,"description":"2. 使用Python解释器 2.1. 调用解释器 Python解释器通常安装在/usr/local/bin/python3.12这样的位置。将/usr/local/bin添加到你的Unix shell的搜索路径中，可以通过输入以下命令来启动它： 在Windows机器上，如果你从Microsoft Store安装了Python，python3.12命令...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2018-02-16-python-learn-v3.12.3-doc-02-interpreter.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python v3.12.3 学习-02-Using the Python Interpreter 使用Python解释器"}],["meta",{"property":"og:description","content":"2. 使用Python解释器 2.1. 调用解释器 Python解释器通常安装在/usr/local/bin/python3.12这样的位置。将/usr/local/bin添加到你的Unix shell的搜索路径中，可以通过输入以下命令来启动它： 在Windows机器上，如果你从Microsoft Store安装了Python，python3.12命令..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"why-learn"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python v3.12.3 学习-02-Using the Python Interpreter 使用Python解释器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.34,"words":701},"filePathRelative":"posts/Lang/2018-02-16-python-learn-v3.12.3-doc-02-interpreter.md","localizedDate":"2018年2月14日","excerpt":"<p><strong>2. 使用Python解释器</strong></p>\\n<p><strong>2.1. 调用解释器</strong></p>\\n<p>Python解释器通常安装在<code>/usr/local/bin/python3.12</code>这样的位置。将<code>/usr/local/bin</code>添加到你的Unix shell的搜索路径中，可以通过输入以下命令来启动它：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">python3.12</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,p as data};
