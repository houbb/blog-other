import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as i}from"./app-CEDSurVN.js";const t={};function l(o,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么？</span></a></h1><p>Automated auditing, performance metrics, and best practices for the web.</p><blockquote><p><a href="https://developer.chrome.com/docs/lighthouse/overview/" target="_blank" rel="noopener noreferrer">https://developer.chrome.com/docs/lighthouse/overview/</a></p></blockquote><h1 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h1><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>install</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npm install -g lighthouse</span></span>
<span class="line"><span># or use yarn:</span></span>
<span class="line"><span># yarn global add lighthouse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>usage</span></a></h2><p>运行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>lighthouse https://airhorner.com/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>By default, Lighthouse writes the report to an HTML file.</p><p>You can control the output format by passing flags.</p><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>options</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ lighthouse --help</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lighthouse  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>Logging:</span></span>
<span class="line"><span>  --verbose  Displays verbose logging  [boolean] [default: false]</span></span>
<span class="line"><span>  --quiet    Displays no progress, debug logs, or errors  [boolean] [default: false]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Configuration:</span></span>
<span class="line"><span>  --save-assets                  Save the trace contents &amp; devtools logs to disk  [boolean] [default: false]</span></span>
<span class="line"><span>  --list-all-audits              Prints a list of all available audits and exits  [boolean] [default: false]</span></span>
<span class="line"><span>  --list-trace-categories        Prints a list of all required trace categories and exits  [boolean] [default: false]</span></span>
<span class="line"><span>  --print-config                 Print the normalized config for the given config and options, then exit.  [boolean] [default: false]</span></span>
<span class="line"><span>  --additional-trace-categories  Additional categories to capture with the trace (comma-delimited).  [string]</span></span>
<span class="line"><span>  --config-path                  The path to the config JSON.</span></span>
<span class="line"><span>                                 An example config file: core/config/lr-desktop-config.js  [string]</span></span>
<span class="line"><span>  --preset                       Use a built-in configuration.</span></span>
<span class="line"><span>                                 WARNING: If the --config-path flag is provided, this preset will be ignored.  [string] [choices: &quot;perf&quot;, &quot;experimental&quot;, &quot;desktop&quot;]</span></span>
<span class="line"><span>  --chrome-flags                 Custom flags to pass to Chrome (space-delimited). For a full list of flags, see https://bit.ly/chrome-flags</span></span>
<span class="line"><span>                                 Additionally, use the CHROME_PATH environment variable to use a specific Chrome binary. Requires Chromium version 66.0 or later. If omitted, any detected Chrome Canary or Chrome stable will be used.  [string] [default: &quot;&quot;]</span></span>
<span class="line"><span>  --port                         The port to use for the debugging protocol. Use 0 for a random port  [number] [default: 0]</span></span>
<span class="line"><span>  --hostname                     The hostname to use for the debugging protocol.  [string] [default: &quot;localhost&quot;]</span></span>
<span class="line"><span>  --form-factor                  Determines how performance metrics are scored and if mobile-only audits are skipped. For desktop, --preset=desktop instead.  [string] [choices: &quot;mobile&quot;, &quot;desktop&quot;]</span></span>
<span class="line"><span>  --screenEmulation              Sets screen emulation parameters. See also --preset. Use --screenEmulation.disabled to disable. Otherwise set these 4 parameters individually: --screenEmulation.mobile --screenEmulation.width=360 --screenEmulation.height=640 --screenEmulation.deviceScaleFactor=2</span></span>
<span class="line"><span>  --emulatedUserAgent            Sets useragent emulation  [string]</span></span>
<span class="line"><span>  --max-wait-for-load            The timeout (in milliseconds) to wait before the page is considered done loading and the run should continue. WARNING: Very high values can lead to large traces and instability  [number]</span></span>
<span class="line"><span>  --enable-error-reporting       Enables error reporting, overriding any saved preference. --no-enable-error-reporting will do the opposite. More: https://github.com/GoogleChrome/lighthouse/blob/master/docs/error-reporting.md  [boolean]</span></span>
<span class="line"><span>  --gather-mode, -G              Collect artifacts from a connected browser and save to disk. (Artifacts folder path may optionally be provided). If audit-mode is not also enabled, the run will quit early.</span></span>
<span class="line"><span>  --audit-mode, -A               Process saved artifacts from disk. (Artifacts folder path may be provided, otherwise defaults to ./latest-run/)</span></span>
<span class="line"><span>  --only-audits                  Only run the specified audits  [array]</span></span>
<span class="line"><span>  --only-categories              Only run the specified categories. Available categories: accessibility, best-practices, performance, pwa, seo  [array]</span></span>
<span class="line"><span>  --skip-audits                  Run everything except these audits  [array]</span></span>
<span class="line"><span>  --budget-path                  The path to the budget.json file for LightWallet.  [string]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Output:</span></span>
<span class="line"><span>  --output       Reporter for the results, supports multiple values. choices: &quot;json&quot;, &quot;html&quot;, &quot;csv&quot;  [array] [default: [&quot;html&quot;]]</span></span>
<span class="line"><span>  --output-path  The file path to output the results. Use &#39;stdout&#39; to write to stdout.</span></span>
<span class="line"><span>                   If using JSON output, default is stdout.</span></span>
<span class="line"><span>                   If using HTML or CSV output, default is a file in the working directory with a name based on the test URL and date.</span></span>
<span class="line"><span>                   If using multiple outputs, --output-path is appended with the standard extension for each output type. &quot;reports/my-run&quot; -&gt; &quot;reports/my-run.report.html&quot;, &quot;reports/my-run.report.json&quot;, etc.</span></span>
<span class="line"><span>                   Example: --output-path=./lighthouse-results.html  [string]</span></span>
<span class="line"><span>  --view         Open HTML report in your browser  [boolean] [default: false]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  --version                            Show version number  [boolean]</span></span>
<span class="line"><span>  --help                               Show help  [boolean]</span></span>
<span class="line"><span>  --cli-flags-path                     The path to a JSON file that contains the desired CLI flags to apply. Flags specified at the command line will still override the file-based ones.</span></span>
<span class="line"><span>  --locale                             The locale/language the report should be formatted in</span></span>
<span class="line"><span>  --blocked-url-patterns               Block any network requests to the specified URL patterns  [array]</span></span>
<span class="line"><span>  --disable-storage-reset              Disable clearing the browser cache and other storage APIs before a run  [boolean]</span></span>
<span class="line"><span>  --throttling-method                  Controls throttling method  [string] [choices: &quot;devtools&quot;, &quot;provided&quot;, &quot;simulate&quot;]</span></span>
<span class="line"><span>  --throttling</span></span>
<span class="line"><span>  --throttling.rttMs                   Controls simulated network RTT (TCP layer)</span></span>
<span class="line"><span>  --throttling.throughputKbps          Controls simulated network download throughput</span></span>
<span class="line"><span>  --throttling.requestLatencyMs        Controls emulated network RTT (HTTP layer)</span></span>
<span class="line"><span>  --throttling.downloadThroughputKbps  Controls emulated network download throughput</span></span>
<span class="line"><span>  --throttling.uploadThroughputKbps    Controls emulated network upload throughput</span></span>
<span class="line"><span>  --throttling.cpuSlowdownMultiplier   Controls simulated + emulated CPU throttling</span></span>
<span class="line"><span>  --extra-headers                      Set extra HTTP Headers to pass with request</span></span>
<span class="line"><span>  --precomputed-lantern-data-path      Path to the file where lantern simulation data should be read from, overwriting the lantern observed estimates for RTT and server latency.  [string]</span></span>
<span class="line"><span>  --lantern-data-output-path           Path to the file where lantern simulation data should be written to, can be used in a future run with the \`precomputed-lantern-data-path\` flag.  [string]</span></span>
<span class="line"><span>  --plugins                            Run the specified plugins  [array]</span></span>
<span class="line"><span>  --channel  [string] [default: &quot;cli&quot;]</span></span>
<span class="line"><span>  --chrome-ignore-default-flags  [boolean] [default: false]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Examples:</span></span>
<span class="line"><span>  lighthouse  --view                                                                          Opens the HTML report in a browser after the run completes</span></span>
<span class="line"><span>  lighthouse  --config-path=./myconfig.js                                                     Runs Lighthouse with your own configuration: custom audits, report generation, etc.</span></span>
<span class="line"><span>  lighthouse  --output=json --output-path=./report.json --save-assets                         Save trace, screenshots, and named JSON report.</span></span>
<span class="line"><span>  lighthouse  --screenEmulation.disabled --throttling-method=provided --no-emulatedUserAgent  Disable device emulation and all throttling</span></span>
<span class="line"><span>  lighthouse  --chrome-flags=&quot;--window-size=412,660&quot;                                          Launch Chrome with a specific window size</span></span>
<span class="line"><span>  lighthouse  --quiet --chrome-flags=&quot;--headless&quot;                                             Launch Headless Chrome, turn off logging</span></span>
<span class="line"><span>  lighthouse  --extra-headers &quot;{\\&quot;Cookie\\&quot;:\\&quot;monster=blue\\&quot;, \\&quot;x-men\\&quot;:\\&quot;wolverine\\&quot;}&quot;        Stringify&#39;d JSON HTTP Header key/value pairs to send in requests</span></span>
<span class="line"><span>  lighthouse  --extra-headers=./path/to/file.json                                             Path to JSON file of HTTP Header key/value pairs to send in requests</span></span>
<span class="line"><span>  lighthouse  --only-categories=performance,pwa                                               Only run the specified categories. Available categories: accessibility, best-practices, performance, pwa, seo</span></span>
<span class="line"><span></span></span>
<span class="line"><span>For more information on Lighthouse, see https://developers.google.com/web/tools/lighthouse/.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/GoogleChrome/lighthouse" target="_blank" rel="noopener noreferrer">https://github.com/GoogleChrome/lighthouse</a></p>`,15)]))}const d=s(t,[["render",l]]),c=JSON.parse('{"path":"/posts/Data/2020-06-03-data-analysis-09-lighthouse.html","title":"数据分析-09-lighthouse 性能工具","lang":"zh-CN","frontmatter":{"title":"数据分析-09-lighthouse 性能工具","date":"2020-06-03T00:00:00.000Z","categories":["Data"],"tags":["data","data-analysis","monitor","apm","sh"],"published":true,"description":"是什么？ Automated auditing, performance metrics, and best practices for the web. https://developer.chrome.com/docs/lighthouse/overview/ 入门 install usage 运行 By default, Lighthouse w...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Data/2020-06-03-data-analysis-09-lighthouse.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"数据分析-09-lighthouse 性能工具"}],["meta",{"property":"og:description","content":"是什么？ Automated auditing, performance metrics, and best practices for the web. https://developer.chrome.com/docs/lighthouse/overview/ 入门 install usage 运行 By default, Lighthouse w..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"data"}],["meta",{"property":"article:tag","content":"data-analysis"}],["meta",{"property":"article:tag","content":"monitor"}],["meta",{"property":"article:tag","content":"apm"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2020-06-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据分析-09-lighthouse 性能工具\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.28,"words":985},"filePathRelative":"posts/Data/2020-06-03-data-analysis-09-lighthouse.md","localizedDate":"2020年6月3日","excerpt":"\\n<p>Automated auditing, performance metrics, and best practices for the web.</p>\\n<blockquote>\\n<p><a href=\\"https://developer.chrome.com/docs/lighthouse/overview/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://developer.chrome.com/docs/lighthouse/overview/</a></p>\\n</blockquote>\\n<h1>入门</h1>\\n<h2>install</h2>","autoDesc":true}');export{d as comp,c as data};
