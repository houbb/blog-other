import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as e}from"./app-uJE4P3e0.js";const p={};function l(t,s){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="python-编写命令行工具" tabindex="-1"><a class="header-anchor" href="#python-编写命令行工具"><span>python 编写命令行工具</span></a></h1><p>你一定用过很多 linux 的命令行工具，并且觉得这些工具很酷。</p><p>Python 能编写这些工具吗？</p><p>答案是肯定的。今天我们就来看看如何用 python 编写命令行工具。</p><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><p>如何接受cmd中输入的参数，需要用到的就是命令行解析工具。</p><p>python中有很多命令行解析库，主要有如下几种</p><ol><li><p>sys.argv</p></li><li><p>argparse 库</p></li><li><p>click 库</p></li><li><p>fire 库（这是一个神器）</p></li></ol><h1 id="sys-argv" tabindex="-1"><a class="header-anchor" href="#sys-argv"><span>sys.argv</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>可以把sys.argv理解成一个list</p><p>其中第一个元素是代码所在的module，比如代码是在cmd.py文件夹下编辑，</p><p>在命令行中运行python <a href="http://cmd.py" target="_blank" rel="noopener noreferrer">cmd.py</a></p><p>此时sys.argv[0]<a href="http://xn--cmd-ww0f445b.py" target="_blank" rel="noopener noreferrer">就是cmd.py</a></p><p>后面的元素是我们在命令行中给它加入的参数</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>我们看一下下面例子</p><p>在cmd.py文件中输入下面内容</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys.argv</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <a href="http://cmd.py" target="_blank" rel="noopener noreferrer">cmd.py</a> 所在文件夹中打开cmd（本文之后所有在cmd中输入都指的是在这个文件夹下的cmd），输入</p><p>测试日志。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>PS D:\\python\\30-clis\\arg&gt; python .\\cmd.py</span></span>
<span class="line"><span>[&#39;.\\\\cmd.py&#39;]</span></span>
<span class="line"><span>PS D:\\python\\30-clis\\arg&gt; python .\\cmd.py  a b cv d</span></span>
<span class="line"><span>[&#39;.\\\\cmd.py&#39;, &#39;a&#39;, &#39;b&#39;, &#39;cv&#39;, &#39;d&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以根据各个参数进行单独的处理。</p><p>但是这样直接处理的方式存在下面的问题：</p><ol><li><p>一个个解析参数太麻烦了，无法对象化，使用很麻烦</p></li><li><p>参数的校验等等问题，需要每个开发者去单独处理</p></li><li><p>命令的文档等等怎么处理。一个个去路由写吗？很不优雅</p></li></ol><p>这些问题，肯定会有人已经帮我们处理好了。</p><p>下面我们来看看这些方法：</p><h1 id="命令行的常见概念" tabindex="-1"><a class="header-anchor" href="#命令行的常见概念"><span>命令行的常见概念</span></a></h1><p>这里以 powershell 为例子。</p><h2 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令"><span>基本命令</span></a></h2><p>比如最常用的 <code>ls</code> 命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就可以罗列当前路径下的文件列表</p><h2 id="帮助文档" tabindex="-1"><a class="header-anchor" href="#帮助文档"><span>帮助文档</span></a></h2><p>当然，我们还需要知道其他的功能。</p><p>比如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>help ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>日志如下</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>PS C:\\Users\\binbin.hou&gt; help ls</span></span>
<span class="line"><span></span></span>
<span class="line"><span>名称</span></span>
<span class="line"><span>    Get-ChildItem</span></span>
<span class="line"><span></span></span>
<span class="line"><span>语法</span></span>
<span class="line"><span>    Get-ChildItem [[-Path] ] [[-Filter] ]  []</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Get-ChildItem [[-Filter] ]  []</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>别名</span></span>
<span class="line"><span>    gci</span></span>
<span class="line"><span>    ls</span></span>
<span class="line"><span>    dir</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>备注</span></span>
<span class="line"><span>    Get-Help 在此计算机上找不到该 cmdlet 的帮助文件。它仅显示部分帮助。</span></span>
<span class="line"><span>        -- 若要下载并安装包含此 cmdlet 的模块的帮助文件，请使用 Update-Help。</span></span>
<span class="line"><span>        -- 若要联机查看此 cmdlet 的帮助主题，请键入: &quot;Get-Help Get-ChildItem -Online&quot; 或</span></span>
<span class="line"><span>           转到 https://go.microsoft.com/fwlink/?LinkID=113308。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊化使用" tabindex="-1"><a class="header-anchor" href="#特殊化使用"><span>特殊化使用</span></a></h2><p>有时候我们希望递归查看文件，或者查看文件的详细信息。</p><p>就可以通过参数来指定。</p><p>大部分的工具都是这种套路。</p><h1 id="cli" tabindex="-1"><a class="header-anchor" href="#cli"><span>CLI</span></a></h1><p>必须在 <a href="http://setup.py" target="_blank" rel="noopener noreferrer">setup.py</a> 中指定</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    classifiers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;Programming Language :: Python :: 3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;License :: OSI Approved :: Apache Software License&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;Operating System :: OS Independent&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # CLI 必须指定信息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    entry_points </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;console_scripts&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &#39;emoji_cli = emoji_cli:main&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zhuanlan.zhihu.com/p/31274256" target="_blank" rel="noopener noreferrer">python命令行解析工具</a></p><p><a href="https://www.jianshu.com/p/d3d6e5dfdbe9" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/d3d6e5dfdbe9</a></p><h1 id="参考资料-1" tabindex="-1"><a class="header-anchor" href="#参考资料-1"><span>参考资料</span></a></h1><p><a href="http://www.jintiankansha.me/t/Witvtkdd9r" target="_blank" rel="noopener noreferrer">一文读懂：从 Python 打包到 CLI 工具</a></p>`,51)]))}const d=n(p,[["render",l]]),c=JSON.parse('{"path":"/posts/Lang/2018-02-14-python-31-clis-31.html","title":"Python-31-clis 命令行工具编写","lang":"zh-CN","frontmatter":{"title":"Python-31-clis 命令行工具编写","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","python3","clis","lang","sh"],"published":true,"description":"python 编写命令行工具 你一定用过很多 linux 的命令行工具，并且觉得这些工具很酷。 Python 能编写这些工具吗？ 答案是肯定的。今天我们就来看看如何用 python 编写命令行工具。 实现方式 如何接受cmd中输入的参数，需要用到的就是命令行解析工具。 python中有很多命令行解析库，主要有如下几种 sys.argv argparse...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2018-02-14-python-31-clis-31.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python-31-clis 命令行工具编写"}],["meta",{"property":"og:description","content":"python 编写命令行工具 你一定用过很多 linux 的命令行工具，并且觉得这些工具很酷。 Python 能编写这些工具吗？ 答案是肯定的。今天我们就来看看如何用 python 编写命令行工具。 实现方式 如何接受cmd中输入的参数，需要用到的就是命令行解析工具。 python中有很多命令行解析库，主要有如下几种 sys.argv argparse..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"python3"}],["meta",{"property":"article:tag","content":"clis"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python-31-clis 命令行工具编写\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.55,"words":765},"filePathRelative":"posts/Lang/2018-02-14-python-31-clis-31.md","localizedDate":"2018年2月14日","excerpt":"\\n<p>你一定用过很多 linux 的命令行工具，并且觉得这些工具很酷。</p>\\n<p>Python 能编写这些工具吗？</p>\\n<p>答案是肯定的。今天我们就来看看如何用 python 编写命令行工具。</p>\\n<h2>实现方式</h2>\\n<p>如何接受cmd中输入的参数，需要用到的就是命令行解析工具。</p>\\n<p>python中有很多命令行解析库，主要有如下几种</p>\\n<ol>\\n<li>\\n<p>sys.argv</p>\\n</li>\\n<li>\\n<p>argparse 库</p>\\n</li>\\n<li>\\n<p>click 库</p>\\n</li>\\n<li>\\n<p>fire 库（这是一个神器）</p>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,c as data};
