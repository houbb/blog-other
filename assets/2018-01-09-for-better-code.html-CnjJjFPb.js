import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as a}from"./app-uJE4P3e0.js";const n={};function p(c,e){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="追求代码质量" tabindex="-1"><a class="header-anchor" href="#追求代码质量"><span>追求代码质量</span></a></h1><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="noopener noreferrer">追求代码质量</a></p></blockquote><h1 id="不要被覆盖报告所迷惑" tabindex="-1"><a class="header-anchor" href="#不要被覆盖报告所迷惑"><span>不要被覆盖报告所迷惑</span></a></h1><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-cq01316/" target="_blank" rel="noopener noreferrer">不要被覆盖报告所迷惑</a></p></blockquote><p>个人觉得这个更像是清单报告，而不是什么质量保证。</p><ul><li>覆盖率</li></ul><p>100% 的测试覆盖率，也无法保证没有 BUG，只能说是更少的 BUG。</p><h1 id="fit" tabindex="-1"><a class="header-anchor" href="#fit"><span>FIT</span></a></h1><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-cq02286/" target="_blank" rel="noopener noreferrer">决心采用 FIT</a></p></blockquote><p><a href="http://fit.c2.com/" target="_blank" rel="noopener noreferrer">FIT</a> 是一个测试平台，<br> 可以帮助需求编写人员和把需求变成可执行代码的人员之间的沟通。</p><p>FIT 的优美之处在于，它让组织的消费者或业务端能够尽早参与测试过程（例如，在开发期间）。</p><p>JUnit 的力量在于编码过程中的单元测试，而 FIT 是更高层次的测试工具，用来判断规划的需求实现的正确性。</p><h1 id="监视圈复杂度" tabindex="-1"><a class="header-anchor" href="#监视圈复杂度"><span>监视圈复杂度</span></a></h1><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-cq03316/index.html?ca=drs-" target="_blank" rel="noopener noreferrer">监视圈复杂度</a></p></blockquote><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p><strong>监视圈复杂度</strong>是在我前面提到的那些研究期间开创的，它可以精确地测量路径复杂度。</p><p>通过利用某一方法路由不同的路径，这一基于整数的度量可适当地描述方法复杂度。</p><p>实际上，过去几年的各种研究已经确定：圈复杂度（或 CC）大于 10 的方法存在很大的出错风险。</p><p>因为 CC 通过某一方法来表示路径，这是用来确定某一方法到达 100% 的覆盖率将需要多少测试用例的一个好方法。</p><h2 id="分而治之" tabindex="-1"><a class="header-anchor" href="#分而治之"><span>分而治之</span></a></h2><p>在面对指示高圈复杂度值的报告时，第一个行动是检验所有相应测试的存在。</p><p>如果存在一些测试，测试的数量是多少？</p><p>除了极少数代码库以外，几乎所有代码库实际上都有多个测试用例用于某个方法（实际上，为一个方法编写如此多的测试用例可能会花费很长时间）。</p><p>但即使是很小的一点进步，它也是减少方法中存在缺陷风险的一个伟大开始。</p><h1 id="软件架构的代码质量" tabindex="-1"><a class="header-anchor" href="#软件架构的代码质量"><span>软件架构的代码质量</span></a></h1><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-cq04256/index.html" target="_blank" rel="noopener noreferrer">软件架构的代码质量</a></p></blockquote><h2 id="传入耦合-ca" tabindex="-1"><a class="header-anchor" href="#传入耦合-ca"><span>传入耦合( CA )</span></a></h2><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/project/better-code/2018-01-09-better-code-ComponentDiagram-excep.png" alt="2018-01-09-better-code-ComponentDiagram-excep.png" tabindex="0" loading="lazy"><figcaption>2018-01-09-better-code-ComponentDiagram-excep.png</figcaption></figure><p>如图所示，exception 包具有一个值为 4 的传入耦合（或者叫做 Ca），这并非是件坏事。</p><p>异常层次结构很少会出现很大的改变。监视 exception 包的传入耦合是个好主意，然而，由于彻底改变了这个包中的行为或契约，所以将引起它的四个依赖包全都出现连锁反应。</p><h2 id="传出耦合-ce" tabindex="-1"><a class="header-anchor" href="#传出耦合-ce"><span>传出耦合( CE )</span></a></h2><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/project/better-code/2018-01-09-better-code-ComponentDiagram-efferentcoup.png" alt="2018-01-09-better-code-ComponentDiagram-efferentcoup.png" tabindex="0" loading="lazy"><figcaption>2018-01-09-better-code-ComponentDiagram-efferentcoup.png</figcaption></figure><p><code>com.acme.ascp.dao</code> 包完全是具体的；因此它的抽象性为 0。</p><p>这表示其传出耦合包含 <code>com.acme.ascp.dao</code> 的组件自己会变得脆弱，因为 <code>com.acme.ascp.dao</code> 包与 3 个附加的包具有传出耦合。</p><p>如果它们中的一个（比如说 <code>com.acme.ascp.util</code>）发生更改，将会在 <code>com.acme.ascp.dao</code> 中发生连锁反应。</p><p>因为 dao 无法通过接口或抽象类隐藏注入细节，所以任何更改都可能影响它的依赖组件。</p>',36)]))}const d=t(n,[["render",p]]),h=JSON.parse('{"path":"/posts/Project/2018-01-09-for-better-code.html","title":"For Better Code","lang":"zh-CN","frontmatter":{"title":"For Better Code","date":"2018-01-09T00:00:00.000Z","categories":["Project"],"tags":["project","stay hungry"],"published":true,"description":"追求代码质量 追求代码质量 不要被覆盖报告所迷惑 不要被覆盖报告所迷惑 个人觉得这个更像是清单报告，而不是什么质量保证。 覆盖率 100% 的测试覆盖率，也无法保证没有 BUG，只能说是更少的 BUG。 FIT 决心采用 FIT FIT 是一个测试平台， 可以帮助需求编写人员和把需求变成可执行代码的人员之间的沟通。 FIT 的优美之处在于，它让组织的消...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Project/2018-01-09-for-better-code.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"For Better Code"}],["meta",{"property":"og:description","content":"追求代码质量 追求代码质量 不要被覆盖报告所迷惑 不要被覆盖报告所迷惑 个人觉得这个更像是清单报告，而不是什么质量保证。 覆盖率 100% 的测试覆盖率，也无法保证没有 BUG，只能说是更少的 BUG。 FIT 决心采用 FIT FIT 是一个测试平台， 可以帮助需求编写人员和把需求变成可执行代码的人员之间的沟通。 FIT 的优美之处在于，它让组织的消..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/houbb/resource/master/img/project/better-code/2018-01-09-better-code-ComponentDiagram-excep.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"project"}],["meta",{"property":"article:tag","content":"stay hungry"}],["meta",{"property":"article:published_time","content":"2018-01-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"For Better Code\\",\\"image\\":[\\"https://raw.githubusercontent.com/houbb/resource/master/img/project/better-code/2018-01-09-better-code-ComponentDiagram-excep.png\\",\\"https://raw.githubusercontent.com/houbb/resource/master/img/project/better-code/2018-01-09-better-code-ComponentDiagram-efferentcoup.png\\"],\\"datePublished\\":\\"2018-01-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.76,"words":828},"filePathRelative":"posts/Project/2018-01-09-for-better-code.md","localizedDate":"2018年1月9日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://www.ibm.com/developerworks/cn/java/j-cq/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">追求代码质量</a></p>\\n</blockquote>\\n<h1>不要被覆盖报告所迷惑</h1>\\n<blockquote>\\n<p><a href=\\"https://www.ibm.com/developerworks/cn/java/j-cq01316/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">不要被覆盖报告所迷惑</a></p>\\n</blockquote>","autoDesc":true}');export{d as comp,h as data};
