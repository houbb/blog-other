import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CEDSurVN.js";const t={};function l(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-01-overview" target="_blank" rel="noopener noreferrer">test fuzz-01-模糊测试（Fuzz Testing）</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-02-jqf-intro" target="_blank" rel="noopener noreferrer">test fuzz-02-模糊测试 JQF + Zest Semantic Fuzzing for Java</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-03-atheris-intro" target="_blank" rel="noopener noreferrer">test fuzz-03-模糊测试 Atheris A Coverage-Guided, Native Python Fuzzer</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-04-jazzer-intro" target="_blank" rel="noopener noreferrer">test fuzz-04-模糊测试 jazzer Coverage-guided, in-process fuzzing for the JVM</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-05-kelinci-intro" target="_blank" rel="noopener noreferrer">test fuzz-05-模糊测试 kelinci AFL-based fuzzing for Java</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-06-AFL" target="_blank" rel="noopener noreferrer">test fuzz-06-模糊测试 AFL american fuzzy lop - a security-oriented fuzzer</a></p><p><a href="https://houbb.github.io/2016/04/26/test-fuzz-testing-07-libfuzzer" target="_blank" rel="noopener noreferrer">test fuzz-07-模糊测试 libfuzzer</a></p><h1 id="jqf" tabindex="-1"><a class="header-anchor" href="#jqf"><span>JQF</span></a></h1><p>JQF是Java的一种反馈导向的模糊测试平台（类似于AFL/LibFuzzer，但针对JVM字节码）。</p><p>JQF使用<em>基于属性的测试</em>的抽象，使得编写模糊驱动程序作为参数化JUnit测试方法变得很容易。</p><p>JQF建立在<a href="https://github.com/pholser/junit-quickcheck" target="_blank" rel="noopener noreferrer">junit-quickcheck</a>之上。</p><p>JQF通过使用<strong>Zest</strong>等<strong>基于覆盖引导的</strong>模糊算法，使运行junit-quickcheck风格的参数化单元测试具有强大的能力。</p><p>[Zest][ISSTA&#39;19 paper]是一种算法，通过偏向于生成<em>语义有效</em>的输入来引导覆盖引导的模糊测试；即，在最大化代码覆盖的同时满足结构和语义属性的输入。</p><p>Zest的目标是发现传统模糊测试工具无法发现的深层语义错误，这些工具主要只强调错误处理逻辑。</p><p>默认情况下，JQF通过简单的命令运行Zest：<code>mvn jqf:fuzz</code>。</p><p>JQF是一个模块化的框架，支持以下可插拔的模糊测试前端，称为<em>引导</em>：</p><ul><li>使用<a href="http://lcamtuf.coredump.cx/afl" target="_blank" rel="noopener noreferrer">AFL</a>进行二进制模糊测试 (<a href="https://github.com/rohanpadhye/jqf/wiki/Fuzzing-with-AFL" target="_blank" rel="noopener noreferrer">教程</a>)</li><li>使用**<a href="http://arxiv.org/abs/1812.00078" target="_blank" rel="noopener noreferrer">Zest</a>**进行语义模糊测试 [[ISSTA&#39;19 paper]] (<a href="https://github.com/rohanpadhye/jqf/wiki/Fuzzing-with-Zest" target="_blank" rel="noopener noreferrer">教程 1</a>) (<a href="https://github.com/rohanpadhye/jqf/wiki/Fuzzing-a-Compiler" target="_blank" rel="noopener noreferrer">教程 2</a>)</li><li>使用**<a href="https://github.com/carolemieux/perffuzz" target="_blank" rel="noopener noreferrer">PerfFuzz</a>**进行复杂性模糊测试 [[ISSTA&#39;18 paper]]</li><li>使用**<a href="https://github.com/sameerreddy13/rlcheck" target="_blank" rel="noopener noreferrer">RLCheck</a>**进行强化学习（基于JQF的一个分支） [[ICSE&#39;20 paper]]</li><li>使用**<a href="https://github.com/cmu-pasta/mu2" target="_blank" rel="noopener noreferrer">Mu2</a>**进行突变分析引导的模糊测试 [[ISSTA&#39;23 paper]]</li></ul><p>JQF在<a href="#trophies">发现许多广泛使用的开源软件中的错误</a>方面取得了成功，如OpenJDK、Apache Maven和Google Closure Compiler。</p><h3 id="zest-研究论文" tabindex="-1"><a class="header-anchor" href="#zest-研究论文"><span>Zest 研究论文</span></a></h3><p>在您的研究中引用Zest时，请引用我们的[ISSTA&#39;19论文]：</p><blockquote><p>Rohan Padhye, Caroline Lemieux, Koushik Sen, Mike Papadakis, and Yves Le Traon. 2019. <strong>Semantic Fuzzing with Zest</strong>. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA’19), July 15–19, 2019, Beijing, China. ACM, New York, NY, USA, 12 pages. <a href="https://doi.org/10.1145/3293882.3330576" target="_blank" rel="noopener noreferrer">https://doi.org/10.1145/3293882.3330576</a></p></blockquote><h4 id="jqf-工具论文" tabindex="-1"><a class="header-anchor" href="#jqf-工具论文"><span>JQF 工具论文</span></a></h4><p>如果您正在使用JQF框架构建新的模糊测试工具，请引用我们的[ISSTA&#39;19工具论文]如下：</p><blockquote><p>Rohan Padhye, Caroline Lemieux, and Koushik Sen. 2019. <strong>JQF: Coverage-Guided Property-Based Testing in Java</strong>. In Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA ’19), July 15–19, 2019, Beijing, China. ACM, New York, NY, USA, 4 pages. <a href="https://doi.org/10.1145/3293882.3339002" target="_blank" rel="noopener noreferrer">https://doi.org/10.1145/3293882.3339002</a></p></blockquote><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><h3 id="什么是结构感知模糊测试" tabindex="-1"><a class="header-anchor" href="#什么是结构感知模糊测试"><span>什么是<em>结构感知模糊测试</em>？</span></a></h3><p>像<a href="http://lcamtuf.coredump.cx/afl" target="_blank" rel="noopener noreferrer">AFL</a>和<a href="https://llvm.org/docs/LibFuzzer.html" target="_blank" rel="noopener noreferrer">libFuzzer</a>这样的二进制模糊测试工具将输入视为字节序列。如果测试程序期望高度结构化的输入，例如XML文档或JavaScript程序，则对字节数组进行变异通常会导致语法无效的输入；测试程序的核心部分保持未经测试。</p><p><strong>结构感知模糊测试</strong>工具利用对输入格式的领域特定知识，通过构造产生<em>语法有效</em>的输入。有一些关于使用libFuzzer进行<a href="https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md" target="_blank" rel="noopener noreferrer">C++</a>和<a href="https://rust-fuzz.github.io/book/cargo-fuzz/structure-aware-fuzzing.html" target="_blank" rel="noopener noreferrer">Rust</a>程序结构感知模糊测试的很好的文章。</p><h3 id="什么是基于生成器的模糊测试-quickcheck" tabindex="-1"><a class="header-anchor" href="#什么是基于生成器的模糊测试-quickcheck"><span>什么是<em>基于生成器的</em>模糊测试（QuickCheck）？</span></a></h3><p>结构感知模糊测试工具需要一种理解输入结构的方法。其他一些工具使用输入格式的声明性规范，例如<a href="https://embed.cs.utah.edu/csmith/" target="_blank" rel="noopener noreferrer">上下文无关文法</a>或<a href="https://github.com/google/libprotobuf-mutator" target="_blank" rel="noopener noreferrer">协议缓冲区</a>。<strong>JQF</strong>使用QuickCheck的命令式方法来指定输入空间：任意的<em><strong>生成器</strong></em>程序，其任务是生成单个随机输入。</p><p><code>Generator</code>提供了生成类型为<code>T</code>的随机实例的方法。例如，对于类型为<code>Calendar</code>的生成器，它返回随机生成的<code>Calendar</code>对象。可以轻松编写更复杂类型的生成器，比如<br><a href="examples/src/main/java/edu/berkeley/cs/jqf/examples/xml/XmlDocumentGenerator.java">XML文档</a>，<br><a href="examples/src/main/java/edu/berkeley/cs/jqf/examples/js/JavaScriptCodeGenerator.java">JavaScript程序</a>，<br><a href="examples/src/main/java/edu/berkeley/cs/jqf/examples/bcel/JavaClassGenerator.java">JVM类文件</a>，SQL查询，HTTP请求等<a href="https://github.com/pholser/junit-quickcheck/tree/master/examples/src/test/java/com/pholser/junit/quickcheck/examples" target="_blank" rel="noopener noreferrer">等等</a> - 这就是<strong>基于生成器的模糊测试</strong>。然而，仅仅对类型为<code>T</code>的随机输入进行采样通常不是很有效，因为生成器不知道它产生的输入是否有效。</p><h3 id="什么是语义模糊测试-zest" tabindex="-1"><a class="header-anchor" href="#什么是语义模糊测试-zest"><span>什么是<em>语义模糊测试</em>（Zest）？</span></a></h3><p>JQF支持**[<em>Zest算法</em>][ISSTA&#39;19 paper]，该算法使用代码覆盖和输入有效性反馈来偏向于生成结构化输入，从而揭示深层次的语义错误。</p><p>JQF使用字节码插装提取代码覆盖，使用JUnit的<a href="https://junit.org/junit4/javadoc/4.12/org/junit/Assume.html" target="_blank" rel="noopener noreferrer"><code>Assume</code></a> API提取输入有效性。</p><p>如果没有违反假设，输入就是有效的。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>以下是用于检查<a href="https://commons.apache.org/proper/commons-collections/" target="_blank" rel="noopener noreferrer">Apache Commons Collections</a>中<a href="https://commons.apache.org/proper/commons-collections/apidocs/org/apache/commons/collections4/trie/PatriciaTrie.html" target="_blank" rel="noopener noreferrer">PatriciaTrie</a>类属性的JUnit-Quickcheck测试。该属性测试如果<code>PatriciaTrie</code>使用输入的JDK <code>Map</code>初始化，并且如果输入映射已经包含一个键，则新构建的<code>PatriciaTrie</code>中也应存在该键。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JQF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PatriciaTrieTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Fuzz</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  /* 此方法的参数将由JQF自动生成 */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testMap2Trie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 键应存在于映射中</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assumeTrue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">containsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key));   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果这个谓词不为真，测试无效</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用输入\`map\`创建新的trie</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Trie</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> trie</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PatriciaTrie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 该键也应存在于trie中</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertTrue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">trie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">containsKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key));  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当map = {&quot;x&quot;: 1, &quot;x\\0&quot;: 2}和key = &quot;x&quot;时失败</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>mvn jqf:fuzz</code>将导致JQF重复调用<code>testMap2Trie()</code>方法，并自动生成<code>map</code>和<code>key</code>的值。大约在平均5秒后（~5,000个输入），JQF将报告断言违规。它发现了<a href="https://issues.apache.org/jira/browse/COLLECTIONS-714" target="_blank" rel="noopener noreferrer">在<code>PatriciaTrie</code>的实现中的一个bug</a>，截至v4.4尚未解决。对<code>map</code>和<code>key</code>值的随机抽样不太可能找到失败的测试用例，这是一个非常特殊的极端情况（请参阅上述代码中断言旁边的注释）。JQF使用名为[<strong>Zest</strong>][ISSTA&#39;19 paper]的覆盖引导调用很容易找到此违规。要将此示例作为独立的Maven项目运行，请查看<a href="https://github.com/rohanpadhye/jqf-zest-example" target="_blank" rel="noopener noreferrer">jqf-zest-example存储库</a>。</p><p>在上面的示例中，<code>Map</code>和<code>String</code>的生成器是由JUnitQuickCheck自动生成的。也可以手动为结构化输入指定生成器。请参阅下面的<a href="#%E6%95%99%E7%A8%8B">教程</a>。</p><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档</span></a></h2><ul><li><a href="https://github.com/rohanpadhye/JQF/wiki/JQF-Maven-Plugin" target="_blank" rel="noopener noreferrer">JQF Maven插件</a>文档展示了如何运行<code>mvn jqf:fuzz</code>和<code>mvn jqf:repro</code>。</li><li><a href="https://github.com/rohanpadhye/JQF/wiki/Writing-a-JQF-test" target="_blank" rel="noopener noreferrer">编写JQF测试</a>演示了为JQF创建基于JUnit的参数化测试方法的过程。</li><li><a href="https://github.com/rohanpadhye/jqf/wiki/The-Guidance-interface" target="_blank" rel="noopener noreferrer">The Guidance interface</a> 文档展示了JQF内部的工作原理，对于希望在JQF之上构建自定义引导算法的研究人员很有用。</li><li><a href="https://rohanpadhye.github.io/JQF/apidocs" target="_blank" rel="noopener noreferrer">API文档</a>在每个主要版本发布时都会发布，对于希望扩展JQF的研究人员也很有用。</li></ul><h3 id="教程" tabindex="-1"><a class="header-anchor" href="#教程"><span>教程</span></a></h3><ul><li><a href="https://github.com/rohanpadhye/jqf/wiki/Fuzzing-with-Zest" target="_blank" rel="noopener noreferrer">Zest 101</a>: 一个使用命令行脚本模糊测试独立的玩具程序的基础教程。演示了为<code>Calendar</code>对象编写测试驱动程序和结构化输入生成器的过程。</li><li><a href="https://github.com/rohanpadhye/jqf/wiki/Fuzzing-a-Compiler" target="_blank" rel="noopener noreferrer">使用Zest模糊测试编译器</a>: 一个模糊测试一个非常复杂程序的教程，即<a href="https://github.com/google/closure-compiler" target="_blank" rel="noopener noreferrer">Google Closure Compiler</a>，使用JavaScript程序的生成器。本教程使用<a href="https://github.com/rohanpadhye/jqf/wiki/JQF-Maven-Plugin" target="_blank" rel="noopener noreferrer">JQF Maven插件</a>。</li><li><a href="https://github.com/rohanpadhye/jqf/wiki/Fuzzing-with-AFL" target="_blank" rel="noopener noreferrer">使用AFL进行模糊测试</a>: 一个使用AFL二进制模糊测试引擎模糊测试解析二进制数据（如PNG图像文件）的Java程序的教程。</li><li><a href="https://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing/java-fuzzing-example" target="_blank" rel="noopener noreferrer">使用ZestCLI进行模糊测试</a>: 使用ZestCLI进行Java程序的模糊测试教程。</li></ul><h3 id="持续模糊测试" tabindex="-1"><a class="header-anchor" href="#持续模糊测试"><span>持续模糊测试</span></a></h3><p><a href="https://docs.gitlab.com/ee/user/application_security/coverage_fuzzing/" target="_blank" rel="noopener noreferrer">GitLab</a>支持在CI/CD中运行JQF（<a href="https://gitlab.com/gitlab-org/security-products/demos/coverage-fuzzing/java-fuzzing-example" target="_blank" rel="noopener noreferrer">教程</a>），尽管他们最近推出了自己的定制Java模糊测试工具。</p><h2 id="基于jqf的研究和工具" tabindex="-1"><a class="header-anchor" href="#基于jqf的研究和工具"><span>基于JQF的研究和工具</span></a></h2><ul><li><strong><a href="https://github.com/rohanpadhye/jqf-zest-example" target="_blank" rel="noopener noreferrer">Zest</a></strong> 🍝 [[ISSTA&#39;19 paper]] - 语义模糊测试</li><li><strong><a href="https://github.com/UCLA-SEAL/BigFuzz" target="_blank" rel="noopener noreferrer">BigFuzz</a></strong> 🍝 [[ASE&#39;20 paper]] - Spark模糊测试</li><li><strong><a href="https://github.com/hub-se/MoFuzz" target="_blank" rel="noopener noreferrer">MoFuzz</a></strong> [<a href="https://doi.org/10.1145/3324884.3416668" target="_blank" rel="noopener noreferrer">ASE&#39;20 paper</a>] - 基于模型的软件测试</li><li><strong><a href="https://github.com/sameerreddy13/rlcheck" target="_blank" rel="noopener noreferrer">RLCheck</a></strong> 🍝 [[ICSE&#39;20 paper]] - 强化学习</li><li><strong><a href="https://github.com/vasumv/bonsai-fuzzing" target="_blank" rel="noopener noreferrer">Bonsai</a></strong> 🍝 [[ICSE&#39;21 paper]] - 简明测试生成</li><li><strong><a href="https://github.com/neu-se/CONFETTI" target="_blank" rel="noopener noreferrer">Confetti</a></strong> [<a href="https://doi.org/10.1145/3510003.3510628" target="_blank" rel="noopener noreferrer">ICSE&#39;22 paper</a>] - 具有全局提示的混合/污点跟踪</li><li><strong><a href="https://github.com/hub-se/BeDivFuzz" target="_blank" rel="noopener noreferrer">BeDivFuzz</a></strong> [<a href="https://doi.org/10.1145/3510003.3510182" target="_blank" rel="noopener noreferrer">ICSE&#39;22 paper</a>]- 行为多样性</li><li><strong><a href="https://github.com/ODDFuzz/ODDFuzz" target="_blank" rel="noopener noreferrer">ODDFuzz</a></strong> [<a href="https://arxiv.org/pdf/2304.04233.pdf" target="_blank" rel="noopener noreferrer">IEEE S&amp;P&#39;23 paper</a>] - 反序列化漏洞</li><li><strong><a href="https://github.com/GCMiner/GCMiner" target="_blank" rel="noopener noreferrer">GCMiner</a></strong> [<a href="https://arxiv.org/pdf/2303.07593.pdf" target="_blank" rel="noopener noreferrer">ICSE&#39;23 paper</a>] - Gadget链挖掘</li><li><strong><a href="https://github.com/purseclab/intender" target="_blank" rel="noopener noreferrer">Intender</a></strong> [<a href="https://www.usenix.org/system/files/sec23fall-prepub-285_kim-jiwon.pdf" target="_blank" rel="noopener noreferrer">USENIX Security&#39;23 paper</a>] - 基于意图的网络</li><li><strong><a href="https://github.com/cmu-pasta/mu2" target="_blank" rel="noopener noreferrer">Mu2</a></strong> 🍝 [[ISSTA&#39;23 paper]] - 作为引导的变异测试</li><li><strong><a href="http://dx.doi.org/10.1007/s11390-021-1693-1" target="_blank" rel="noopener noreferrer">TOAST</a></strong> [<a href="https://link.springer.com/article/10.1007/s11390-021-1693-1" target="_blank" rel="noopener noreferrer">JCST&#39;22 paper</a>] - 测试动态软件更新</li><li><strong><a href="https://github.com/PLaSE-UNIST/poracle-tool" target="_blank" rel="noopener noreferrer">Poracle</a></strong> [<a href="http://www.jooyongyi.com/papers/TOSEM23.pdf" target="_blank" rel="noopener noreferrer">TOSEM&#39;23 paper</a>] - 使用差异模糊测试进行补丁测试</li><li><strong><a href="https://arxiv.org/abs/2209.04026" target="_blank" rel="noopener noreferrer">SPIDER</a></strong> 🍝 [<a href="https://arxiv.org/abs/2209.04026" target="_blank" rel="noopener noreferrer">arxiv preprint</a>] - SDN中的有状态性能问题</li><li><strong><a href="https://github.com/akashpatil7/FuzzDiff" target="_blank" rel="noopener noreferrer">FuzzDiff</a></strong> [<a href="https://www.scss.tcd.ie/publications/theses/diss/2022/TCD-SCSS-DISSERTATION-2022-134.pdf" target="_blank" rel="noopener noreferrer">Dissertation</a>] - 动态程序等效性检查</li></ul><p>🍝 = 涉及至少一个原始JQF作者。</p><h2 id="联系开发人员" tabindex="-1"><a class="header-anchor" href="#联系开发人员"><span>联系开发人员</span></a></h2><p>如果您在JQF中发现了错误，或在使用JQF时遇到问题，请在<a href="https://github.com/rohanpadhye/jqf/issues" target="_blank" rel="noopener noreferrer">问题跟踪器</a>上打开问题。您还可以使用此平台发布功能请求。</p><p>如果是某种模糊测试紧急情况，您随时可以发送电子邮件给主要开发者：<a href="https://rohan.padhye.org" target="_blank" rel="noopener noreferrer">Rohan Padhye</a>。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍下-jqf" tabindex="-1"><a class="header-anchor" href="#详细介绍下-jqf"><span>详细介绍下 JQF</span></a></h2><p>Java QuickCheck Fuzzing（JQF）是一种用于Java程序的模糊测试工具。</p><p>模糊测试是一种软件测试方法，通过向程序输入随机或半随机的数据来检测程序中的错误和漏洞。</p><p>JQF是基于Java的QuickCheck库的一个扩展，它专门用于模糊测试Java程序。</p><p>以下是JQF的一些关键特性和概念：</p><ol><li><p><strong>基于QuickCheck：</strong> JQF构建在QuickCheck理念之上，QuickCheck是一种属性驱动测试（Property-Based Testing）框架，最初是Haskell编程语言的一部分。QuickCheck允许开发人员通过定义属性和生成器来描述程序的预期行为，并生成大量的测试用例进行测试。</p></li><li><p><strong>模糊测试：</strong> JQF使用模糊测试技术，通过生成具有随机或半随机输入的测试用例来探索程序的行为。这有助于发现潜在的边界情况和错误，提高程序的鲁棒性。</p></li><li><p><strong>生成器：</strong> JQF使用生成器来生成随机输入。生成器是一种描述输入空间的代码，可以生成各种可能的输入。开发人员可以根据他们的需求自定义生成器，以便更好地测试程序的不同路径。</p></li><li><p><strong>状态空间探索：</strong> JQF支持状态空间的探索，以找到程序中可能的问题。这有助于发现潜在的漏洞和错误，即使它们位于非常大的状态空间中。</p></li><li><p><strong>支持JUnit：</strong> JQF可以与JUnit测试框架集成，使得将模糊测试集成到现有的测试套件中变得更加容易。开发人员可以使用JUnit的断言来定义属性，然后由JQF生成测试用例并执行。</p></li><li><p><strong>高度可定制：</strong> JQF是一个灵活的工具，允许用户根据他们的需求进行定制。开发人员可以定义自己的生成器、属性和测试策略，以适应他们的具体应用场景。</p></li></ol><p>在使用JQF时，开发人员通常会定义一些属性，描述程序的预期行为。</p><p>然后，JQF将生成大量的输入，并检查这些属性是否满足。</p><p>如果发现不满足的情况，JQF将生成包含有问题的输入的最小化版本，以帮助开发人员更容易地诊断和修复问题。</p><h2 id="详细介绍一下-状态空间探索" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-状态空间探索"><span>详细介绍一下 状态空间探索</span></a></h2><p>状态空间探索是一种软件测试和验证方法，旨在检查程序或系统在不同输入组合下的各种状态和路径。</p><p>它通常用于发现潜在的错误、漏洞或未经测试的程序行为。</p><p>在软件开发中，程序的状态空间是指所有可能的状态组合，包括程序内部变量、外部输入和环境变量。</p><p>状态空间探索的目标是尽可能广泛地覆盖这个状态空间，以确保程序在各种情况下的正确性和鲁棒性。</p><p>下面是关于状态空间探索的一些关键概念和方法：</p><ol><li><p><strong>状态：</strong> 程序的状态是指在某一时间点上所有相关的内部和外部变量的值。状态可以包括变量的当前值、数据结构的内容以及其他相关信息。</p></li><li><p><strong>状态空间：</strong> 程序的状态空间是所有可能的状态组合的集合。这包括程序内部的状态和外部环境的状态。状态空间通常是庞大而复杂的，因为它考虑了所有可能的输入、执行路径和环境条件。</p></li><li><p><strong>路径：</strong> 在程序执行期间，从一个状态到另一个状态的转变构成了一个路径。路径包括了程序的执行流程和可能的决策点。</p></li><li><p><strong>状态空间探索方法：</strong></p><ul><li><p><strong>随机测试：</strong> 随机测试是一种简单的状态空间探索方法，通过使用随机生成的输入来测试程序。这通常是一种快速发现错误的方法，但覆盖状态空间可能有限。</p></li><li><p><strong>符号执行：</strong> 符号执行是一种静态分析方法，通过符号值代替实际输入值来探索程序路径。这允许在没有实际运行程序的情况下分析所有可能的路径。</p></li><li><p><strong>模糊测试：</strong> 模糊测试是一种动态测试方法，通过使用随机或半随机生成的输入来测试程序。它可以帮助发现程序在不同输入组合下的不稳定或错误行为。</p></li><li><p><strong>模型检测：</strong> 模型检测使用有限状态机或时序逻辑来描述系统规范，并在这些规范下检查状态空间。它可以自动验证系统是否满足指定的属性。</p></li></ul></li><li><p><strong>最小化和简化：</strong> 一旦发现了状态空间中的错误，测试工程师通常会尝试最小化或简化导致错误的输入和路径，以便更容易理解、报告和修复问题。</p></li></ol><p>状态空间探索的挑战在于，状态空间通常是无限的，而测试资源是有限的。</p><p>因此，有效的状态空间探索方法需要使用智能的技术和算法来提高测试效率，并优先考虑可能导致错误的关键路径和状态。</p><h2 id="jqf-有哪些核心概念" tabindex="-1"><a class="header-anchor" href="#jqf-有哪些核心概念"><span>JQF 有哪些核心概念？</span></a></h2><p>Java QuickCheck Fuzzing (JQF) 的核心概念主要基于 QuickCheck 和模糊测试的思想，同时结合了适用于 Java 程序的特定实现。</p><p>以下是 JQF 的一些核心概念：</p><ol><li><p><strong>QuickCheck：</strong> QuickCheck 是一个属性驱动的测试框架，最初为 Haskell 开发。其核心思想是通过属性描述程序的期望行为，然后生成大量的随机测试用例来验证这些属性。JQF 借鉴了 QuickCheck 的思想，使得 Java 开发者能够利用这种属性驱动的测试方法。</p></li><li><p><strong>生成器（Generators）：</strong> 生成器是 JQF 中的关键概念之一。它们用于生成随机输入数据，这些数据将用于测试程序。开发者可以定义自己的生成器，以确保测试能够覆盖程序的各种输入情况。</p></li><li><p><strong>属性（Properties）：</strong> 属性是描述程序行为的断言，用于验证程序是否满足特定的规范。在 JQF 中，开发者可以使用 JUnit 样式的注解来定义属性，然后 JQF 将利用模糊测试生成输入，验证这些属性是否被满足。</p></li><li><p><strong>状态空间探索：</strong> JQF 支持对程序状态空间的探索。通过生成大量的随机测试用例，JQF 尝试覆盖尽可能多的程序路径和状态，以帮助发现潜在的错误。</p></li><li><p><strong>策略（Strategies）：</strong> 策略是 JQF 中的控制生成器和输入的方式。开发者可以定义策略来指导 JQF 如何生成测试用例。这包括如何选择生成器以及如何调整生成器的参数。</p></li><li><p><strong>Shrinking：</strong> 当发现测试失败时，JQF 将会执行收缩操作（shrinking），以找到导致测试失败的最小输入。这有助于开发者更容易地理解和修复问题。</p></li><li><p><strong>JUnit 集成：</strong> JQF 可以与 JUnit 测试框架集成。这意味着开发者可以使用熟悉的 JUnit 注解来定义属性，并将 JQF 的模糊测试集成到他们的测试套件中。</p></li></ol><p>总体而言，JQF 提供了一种结合属性驱动测试和模糊测试的方式，以帮助发现 Java 程序中的潜在错误。</p><p>通过生成大量的随机测试用例，并在属性验证中使用它们，JQF 提供了一种高效的测试方法，有助于提高程序的鲁棒性和质量。</p><h2 id="详细介绍一下-jqf-中的-shrinking-以及具体的例子" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jqf-中的-shrinking-以及具体的例子"><span>详细介绍一下 JQF 中的 Shrinking，以及具体的例子</span></a></h2><p>在 JQF（Java QuickCheck Fuzzing）中，Shrinking 是一种用于最小化失败的测试用例的技术。当属性验证失败时，Shrinking 尝试找到导致失败的最小输入，以便开发者更容易地理解和修复问题。Shrinking 通过缩小测试用例的规模，移除对失败的属性来实现。</p><p>以下是 JQF 中 Shrinking 的概述和一个简单的例子：</p><h3 id="jqf-中-shrinking-的概述" tabindex="-1"><a class="header-anchor" href="#jqf-中-shrinking-的概述"><span>JQF 中 Shrinking 的概述：</span></a></h3><ol><li><p><strong>最小化失败的测试用例：</strong> 当属性验证失败时，JQF 将尝试最小化导致失败的测试用例。这意味着 JQF 将会逐步减小输入的规模，直到找到导致失败的最小输入。</p></li><li><p><strong>Shrinking 过程：</strong> Shrinking 过程是一个迭代过程，每一步都会尝试去除一个或多个输入值，以检查属性是否仍然失败。如果属性仍然失败，Shrinking 将继续缩小输入，直到找到最小的导致失败的输入。</p></li><li><p><strong>帮助调试：</strong> Shrinking 的目标是帮助开发者更容易地理解失败的属性。通过提供最小输入，开发者可以更轻松地诊断和修复问题。</p></li></ol><h3 id="jqf-shrinking-的例子" tabindex="-1"><a class="header-anchor" href="#jqf-shrinking-的例子"><span>JQF Shrinking 的例子：</span></a></h3><p>假设我们有一个简单的整数除法函数，但是它在除数为零时会失败：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IntegerDivider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> dividend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> divisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (divisor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IllegalArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Divisor cannot be zero&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dividend </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> divisor;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望测试这个函数，确保它在除数不为零的情况下正常工作。我们可以使用 JQF 进行模糊测试，同时观察 Shrinking 过程：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IntegerDividerTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> divisionWorksForNonZeroDivisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> dividend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> divisor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Assume</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">that</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(divisor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 排除除数为零的情况</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> IntegerDivider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dividend, divisor);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 断言：对于非零除数，除法应该正常工作</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 <code>Assume.that(divisor != 0)</code> 来排除除数为零的情况。</p><p>如果属性验证失败，JQF 将开始 Shrinking 过程，尝试找到最小的输入，以满足属性的失败条件。</p><p>通过运行这个测试，我们可以观察到 Shrinking 过程。</p><p>JQF 将在失败的情况下尝试最小化输入，逐步减小 <code>dividend</code> 和 <code>divisor</code> 的值，直到找到最小的导致失败的输入。</p><p>Shrinking 的过程在 JQF 中是自动的，这有助于提高测试用例的可读性和可维护性。</p><p>开发者可以更轻松地理解和修复测试失败，而无需手动调整输入。</p><h2 id="详细介绍一下-jqf-中的-策略-strategies-以及具体的例子" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jqf-中的-策略-strategies-以及具体的例子"><span>详细介绍一下 JQF 中的 策略（Strategies），以及具体的例子</span></a></h2><p>在 JQF（Java QuickCheck Fuzzing）中，策略（Strategies）是一种用于指导生成器（Generators）和输入的方式的概念。</p><p>使用策略，开发者可以定制模糊测试的行为，控制生成测试用例的方式，以适应特定的测试场景或需求。</p><p>以下是 JQF 中策略的概述和一个简单的例子：</p><h3 id="jqf-中策略的概述" tabindex="-1"><a class="header-anchor" href="#jqf-中策略的概述"><span>JQF 中策略的概述：</span></a></h3><ol><li><p><strong>QuickTheories 库中的 Strategies：</strong> JQF 使用 QuickTheories 库，该库提供了一组强大的策略，用于控制生成器的行为。策略可以包括生成器的组合、过滤、映射等操作，以及其他指导模糊测试的方法。</p></li><li><p><strong>自定义策略：</strong> JQF 允许开发者定义自己的策略，以适应特定的测试需求。这可以通过实现 QuickTheories 中相应的接口或使用提供的工厂方法来实现。</p></li><li><p><strong>影响生成器的行为：</strong> 策略可以影响生成器的行为，包括生成器的选择、生成器的参数设置等。通过使用策略，开发者可以更精确地控制测试用例的生成过程。</p></li></ol><h3 id="jqf-策略的例子" tabindex="-1"><a class="header-anchor" href="#jqf-策略的例子"><span>JQF 策略的例子：</span></a></h3><p>假设我们有一个需要测试的简单的字符串处理函数，它将字符串的每个字符转换为大写：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringProcessor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (input </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望测试这个函数的性能，确保它对于任意非空字符串都能正常工作。我们可以使用 JQF 的策略来生成非空字符串：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.core.Gen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.generators.Generate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.generators.SourceDSL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringProcessorTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toUpperCaseWorksForNonNullStrings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;nonNullStrings&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> StringProcessor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(input);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 断言：对于任意非空字符串，转换为大写后应该不为空</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Provide</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Arbitrary</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nonNullStrings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用 QuickTheories 的策略生成非空字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arbitraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">alpha</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofMinLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用了 <code>nonNullStrings</code> 方法来定义一个生成非空字符串的策略。<code>Arbitraries.strings().alpha().ofMinLength(1)</code> 是一个策略，它表示生成包含字母字符的字符串，最小长度为 1。</p><p><code>@ForAll(&quot;nonNullStrings&quot;)</code> 注解标识了属性方法参数，表示该参数将由名为 <code>nonNullStrings</code> 的策略生成。这样，JQF 将使用定义的策略生成大量的非空字符串，用于测试 <code>toUpperCase</code> 方法。</p><p>通过使用策略，我们可以更灵活地控制生成器的行为，确保测试用例的覆盖范围和质量。</p><p>在实际应用中，策略可以根据测试需求进行更复杂的定制。</p><h2 id="详细介绍一下-jqf-中的-属性-properties-以及具体的例子" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jqf-中的-属性-properties-以及具体的例子"><span>详细介绍一下 JQF 中的 属性（Properties），以及具体的例子</span></a></h2><p>在 JQF（Java QuickCheck Fuzzing）中，属性（Properties）是一种用于描述程序行为的断言。</p><p>属性是测试的核心，它定义了程序在某个输入或输入集合上应该满足的特定规范。</p><p>通过定义属性，JQF 可以使用模糊测试生成大量的随机测试用例，并验证这些属性是否为真。</p><p>以下是 JQF 中属性的概述和一个简单的例子：</p><h3 id="jqf-中属性的概述" tabindex="-1"><a class="header-anchor" href="#jqf-中属性的概述"><span>JQF 中属性的概述：</span></a></h3><ol><li><p><strong>JUnit Annotations：</strong> 在 JQF 中，属性通常使用 JUnit 的注解来定义。常用的注解包括 <code>@Property</code>、<code>@ForAll</code> 等，这些注解用于标识属性方法和定义输入。</p></li><li><p><strong>属性方法：</strong> 属性是一个带有 <code>@Property</code> 注解的方法，该方法包含了对程序行为的断言。属性方法的返回类型通常是布尔值，表示属性是否为真。</p></li><li><p><strong>生成器注解：</strong> <code>@ForAll</code> 注解用于标识属性方法的参数，并指定输入的生成器。JQF 将使用这些生成器生成随机测试用例，传递给属性方法进行验证。</p></li><li><p><strong>断言：</strong> 属性方法中包含断言语句，用于检查程序的行为是否符合预期。如果断言失败，JQF 将记录失败的测试用例，并在需要时进行最小化，以找到导致问题的最小输入。</p></li></ol><h3 id="jqf-属性的例子" tabindex="-1"><a class="header-anchor" href="#jqf-属性的例子"><span>JQF 属性的例子：</span></a></h3><p>假设我们有一个简单的整数加法器类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleAdder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望测试这个加法器，确保它满足加法的交换性质。</p><p>我们可以使用 JQF 的属性来实现这个测试：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleAdderTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> additionIsCommutative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SimpleAdder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a, b);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SimpleAdder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b, a);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 断言：加法应该满足交换性质</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>additionIsCommutative</code> 方法是一个属性方法，使用 <code>@Property</code> 注解标识。</p><p>该方法接受两个整数参数，由 <code>@ForAll</code> 注解标识，表示这两个参数是由 JQF 自动生成的随机整数。</p><p>属性方法内部执行了加法操作，并使用断言验证加法的交换性质。</p><p>如果属性为真，测试通过；否则，JQF 将记录失败的测试用例，并在需要时进行最小化，以找到导致问题的最小输入。</p><p>通过这种方式，JQF 可以在大量的随机测试用例中验证程序的属性，从而发现可能的错误或不一致性。</p><p>在实际应用中，属性可以更加复杂，以涵盖程序的更多方面和规范。</p><h2 id="详细介绍一下-jqf-中的-生成器-generators-以及具体的例子" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jqf-中的-生成器-generators-以及具体的例子"><span>详细介绍一下 JQF 中的 生成器（Generators），以及具体的例子</span></a></h2><p>在 JQF（Java QuickCheck Fuzzing）中，生成器（Generators）是用于生成随机输入数据的关键组件。这些生成器负责产生测试用例，以便覆盖程序的各种可能输入。在 JQF 中，使用了 QuickTheories 库，它是 QuickCheck 风格的生成器库，提供了强大的生成器功能。</p><p>以下是 JQF 中生成器的概述和一个简单的例子：</p><h3 id="jqf-中的生成器概述" tabindex="-1"><a class="header-anchor" href="#jqf-中的生成器概述"><span>JQF 中的生成器概述：</span></a></h3><ol><li><p><strong>QuickTheories 库：</strong> JQF 使用 QuickTheories 作为其生成器库。QuickTheories 提供了丰富的 API，允许开发者创建各种类型的生成器，包括基本数据类型、集合、自定义对象等。</p></li><li><p><strong>基本生成器：</strong> QuickTheories 提供了一系列用于生成基本数据类型（如整数、浮点数、字符等）的生成器。这些生成器能够生成不同范围和分布的随机值。</p></li><li><p><strong>组合生成器：</strong> 开发者可以使用 QuickTheories 的组合生成器来创建更复杂的输入。这包括生成器的组合、映射、过滤等操作，使得生成器能够生成复合结构的数据。</p></li><li><p><strong>自定义生成器：</strong> JQF 允许开发者定义自己的生成器，以适应特定的测试需求。这通过实现 QuickTheories 的 <code>Gen</code> 接口或使用提供的工厂方法来实现。</p></li></ol><h3 id="jqf-生成器的例子" tabindex="-1"><a class="header-anchor" href="#jqf-生成器的例子"><span>JQF 生成器的例子：</span></a></h3><p>假设我们有一个简单的类，代表一个二维坐标点：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Getters and setters...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想要测试一个函数，该函数接受两个坐标点并计算它们之间的欧氏距离：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DistanceCalculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> calculateDistance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Point</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Point</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dx</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sqrt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dy);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 JQF 生成器来生成测试用例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DistanceCalculatorTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> distanceCalculationIsAlwaysNonNegative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;generatePoints&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Point</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;generatePoints&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Point</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> p2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> distance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> DistanceCalculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">calculateDistance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(p1, p2);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> distance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Provide</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Arbitrary</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> generatePoints</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用 QuickTheories 的生成器创建坐标点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arbitraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">zip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arbitraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), Point</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>generatePoints</code> 方法是一个自定义生成器，它使用 QuickTheories 提供的生成器 <code>Arbitraries.integers().all()</code> 来生成两个整数，然后使用这两个整数创建一个 <code>Point</code> 对象。<code>@ForAll(&quot;generatePoints&quot;)</code> 注解表示这两个点是由 <code>generatePoints</code> 方法生成的。</p><p>通过这样的方式，JQF 将生成大量的随机坐标点对，用于测试 <code>DistanceCalculator</code> 类的 <code>calculateDistance</code> 方法，并验证其欧氏距离始终是非负的。</p><p>这是一个简单的例子，演示了如何使用 JQF 的生成器来生成随机测试用例。在实际应用中，生成器可以更复杂，以涵盖程序的更多可能输入。</p><h2 id="详细介绍一下-jqf-中的-quickcheck-的思想-以及具体的例子" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jqf-中的-quickcheck-的思想-以及具体的例子"><span>详细介绍一下 JQF 中的 QuickCheck 的思想，以及具体的例子</span></a></h2><p>QuickCheck 是一种属性驱动测试（Property-Based Testing）的框架，最初是由 Haskell 社区引入的。</p><p>其核心思想是通过属性（Properties）描述程序的期望行为，然后生成大量的随机测试用例来验证这些属性。QuickCheck 的目标是使测试更全面、更自动化，以帮助发现代码中的潜在错误。</p><p>以下是 QuickCheck 的核心思想和其在 JQF 中的应用：</p><ol><li><p><strong>属性描述程序行为：</strong> 在 QuickCheck 中，开发者通过编写属性来描述程序的行为。属性是一种断言，它定义了程序在某个输入下应该具备的特定性质。例如，一个属性可能是一个关于排序算法的断言，指明排序后的结果应该是有序的。</p></li><li><p><strong>生成随机测试用例：</strong> QuickCheck 使用生成器（Generators）来生成大量的随机测试用例。生成器负责创建输入数据，确保测试用例覆盖了程序的各种可能输入。这样，开发者无需手动编写大量的测试用例，而是通过定义生成器和属性，QuickCheck 将自动生成并运行测试。</p></li><li><p><strong>自动化测试过程：</strong> QuickCheck 的测试过程是自动化的。开发者定义属性和生成器后，框架负责生成大量输入，运行测试，并报告属性是否被满足。这种自动化的方法有助于更全面地覆盖程序的状态空间。</p></li><li><p><strong>发现边界情况：</strong> 由于测试用例是随机生成的，QuickCheck 有助于发现程序中的边界情况和边缘情况。这包括输入的极端值，可能导致程序行为异常的情况。</p></li></ol><p>在 JQF 中，QuickCheck 的思想得到了继承和扩展。JQF 提供了对 Java 程序的支持，使得开发者能够利用 QuickCheck 的属性驱动测试方法来模糊测试他们的 Java 代码。</p><p>以下是一个简单的 JQF QuickCheck 示例，假设我们有一个排序函数：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.core.Gen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.generators.Generate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.generators.SourceDSL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SortingExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 实现排序算法，这里简单起见使用 Arrays.sort</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(array);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> array;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以编写一个 JQF QuickCheck 属性：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.core.Gen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.generators.Generate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.quicktheories.generators.SourceDSL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SortingExampleQuickCheck</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sortedArrayShouldBeSorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">inputArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用排序函数进行排序</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sortedArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SortingExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(inputArray);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 验证排序后的数组是否是有序的</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i  sortedArray[i]) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>sortedArrayShouldBeSorted</code> 方法是一个属性，它验证排序后的数组是否是有序的。</p><p><code>@ForAll</code> 注解表示该属性对所有生成的输入都适用。</p><p>JQF 将使用 QuickCheck 的思想，自动生成大量的随机测试用例，并验证这个属性是否始终成立。</p><p>如果属性在某个测试用例中失败，JQF 还会尝试最小化输入，以找到导致问题的最小输入。</p><p>这有助于开发者更容易地理解和修复问题。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/rohanpadhye/jqf" target="_blank" rel="noopener noreferrer">https://github.com/rohanpadhye/jqf</a></p>`,162)]))}const k=s(t,[["render",l]]),d=JSON.parse('{"path":"/posts/tests/2016-04-26-test-fuzz-testing-02-jqf-intro.html","title":"test fuzz-02-模糊测试 JQF + Zest Semantic Fuzzing for Java","lang":"zh-CN","frontmatter":{"title":"test fuzz-02-模糊测试 JQF + Zest Semantic Fuzzing for Java","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["java","test"],"published":true,"description":"拓展阅读 开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) 开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) test fuzz-01-模糊测试（Fuzz Testing） te...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-fuzz-testing-02-jqf-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test fuzz-02-模糊测试 JQF + Zest Semantic Fuzzing for Java"}],["meta",{"property":"og:description","content":"拓展阅读 开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) 开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) test fuzz-01-模糊测试（Fuzz Testing） te..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test fuzz-02-模糊测试 JQF + Zest Semantic Fuzzing for Java\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":26.46,"words":7939},"filePathRelative":"posts/tests/2016-04-26-test-fuzz-testing-02-jqf-intro.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://github.com/houbb/data-factory\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p>\\n<p><a href=\\"https://github.com/houbb/junitperf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p>","autoDesc":true}');export{k as comp,d as data};
