import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as p,o as i}from"./app-CEDSurVN.js";const l={};function s(n,t){return i(),a("div",null,t[0]||(t[0]=[p('<h1 id="调度的概念" tabindex="-1"><a class="header-anchor" href="#调度的概念"><span>调度的概念</span></a></h1><h2 id="_1-调度的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-调度的基本概念"><span>1. 调度的基本概念</span></a></h2><p>在多道程序系统中，进程的数量往往多于处理机的个数，进程争用处理机的情况就在所难免。</p><p>处理机调度是对处理机进行分配，就是从就绪队列中，按照一定的算法（公平、髙效）选择一个进程并将处理机分配给它运行，以实现进程并发地执行。</p><p>处理机调度是多道程序操作系统的基础，它是操作系统设计的核心问题。</p><h2 id="_2-调度的层次" tabindex="-1"><a class="header-anchor" href="#_2-调度的层次"><span>2. 调度的层次</span></a></h2><p>一个作业从提交开始直到完成，往往要经历以下三级调度，如图2-4所示。</p><ol><li>作业调度。</li></ol><p>又称高级调度。其主要任务是按一定的原则从外存上处于后备状态的作业中挑选一个（或多个）作业，给它（们）分配内存、输入/输出设备等必要的资源，并建立相应的进程，以使它（们）获得竞争处理机的权利。简言之，就是内存与辅存之间的调度。对于每个作业只调入一次、调出一次。</p><p>多道批处理系统中大多配有作业调度，而其他系统中通常不需要配置作业调度。作业调度的执行频率较低，通常为几分钟一次。</p><ol start="2"><li>中级调度。</li></ol><p>又称内存调度。引入中级调度是为了提高内存利用率和系统吞吐量。为此，应使那些暂时不能运行的进程，调至外存等待，把此时的进程状态称为挂起状态。当它们已具备运行条件且内存又稍有空闲时，由中级调度来决定，把外存上的那些已具备运行条件的就绪进程，再重新调入内存，并修改其状态为就绪状态，挂在就绪队列上等待。</p><ol start="3"><li>进程调度。</li></ol><p>又称为低级调度，其主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。进程调度是操作系统中最基本的一种调度，在一般操作系统中都必须配置进程调度。进程调度的频率很高，一般几十毫秒一次。</p><figure><img src="http://c.biancheng.net/cpp/uploads/allimg/140629/1-140629144600329.jpg" alt="任务调度" tabindex="0" loading="lazy"><figcaption>任务调度</figcaption></figure><h2 id="_3-三级调度的联系" tabindex="-1"><a class="header-anchor" href="#_3-三级调度的联系"><span>3. 三级调度的联系</span></a></h2><p>作业调度从外存的后备队列中选择一批作业进入内存，为它们建立进程，这些进程被送入就绪队列，进程调度从就绪队列中选出一个进程，并把其状态改为运行状态，把CPU分配给它。</p><p>中级调度是为了提高内存的利用率，系统将那些暂时不能运行的进程挂起来。当内存空间宽松时，通过中级调度选择具备运行条件的进程，将其唤醒。</p><ol><li><p>作业调度为进程活动做准备，进程调度使进程正常活动起来，中级调度将暂时不能运行的进程挂起，中级调度处于作业调度和进程调度之间。</p></li><li><p>作业调度次数少，中级调度次数略多，进程调度频率最高。</p></li><li><p>进程调度是最基本的，不可或缺。</p></li></ol><h1 id="调度的时机、切换与过程" tabindex="-1"><a class="header-anchor" href="#调度的时机、切换与过程"><span>调度的时机、切换与过程</span></a></h1><p>进程调度和切换程序是操作系统内核程序。</p><p>当请求调度的事件发生后，才可能会运行进程调度程序，当调度了新的就绪进程后，才会去进行进程间的切换。</p><p>理论上这三件事情应该顺序执行，但在实际设计中，在操作系统内核程序运行时，如果某时发生了引起进程调度的因素，并不一定能够马上进行调度与切换。</p><h2 id="不能切换的场景" tabindex="-1"><a class="header-anchor" href="#不能切换的场景"><span>不能切换的场景</span></a></h2><p>现代操作系统中，不能进行进程的调度与切换的情况有以下几种情况。</p><ol><li><p>在处理中断的过程中：中断处理过程复杂，在实现上很难做到进程切换，而且中断处理是系统工作的一部分，逻辑上不属于某一进程，不应被剥夺处理机资源。</p></li><li><p>进程在操作系统内核程序临界区中：进入临界区后，需要独占式地访问共享数据，理论上必须加锁，以防止其他并行程序进入，在解锁前不应切换到其他进程运行，以加快该共享数据的释放。</p></li><li><p>其他需要完全屏蔽中断的原子操作过程中：如加锁、解锁、中断现场保护、恢复等原子操作。在原子过程中，连中断都要屏蔽，更不应该进行进程调度与切换。</p></li></ol><p>如果在上述过程中发生了引起调度的条件，并不能马上进行调度和切换，应置系统的请求调度标志，直到上述过程结束后才进行相应的调度与切换。</p><h2 id="应该切换的场景" tabindex="-1"><a class="header-anchor" href="#应该切换的场景"><span>应该切换的场景</span></a></h2><p>应该进行进程调度与切换的情况有：</p><ol><li><p>当发生引起调度条件，且当前进程无法继续运行下去时，可以马上进行调度与切换。如果操作系统只在这种情况下进行进程调度，就是非剥夺调度。</p></li><li><p>当中断处理结束或自陷处理结束后，返回被中断进程的用户态程序执行现场前，若置上请求调度标志，即可马上进行进程调度与切换。如果操作系统支持这种情况下的运行调度程序，就实现了剥夺方式的调度。</p></li></ol><p>进程切换往往在调度完成后立刻发生，它要求保存原进程当前切换点的现场信息，恢复被调度进程的现场信息。</p><p>现场切换时，操作系统内核将原进程的现场信息推入到当前进程的内核堆栈来保存它们，并更新堆栈指针。</p><p>内核完成从新进程的内核栈中装入新进程的现场信息、更新当前运行进程空间指针、重设PC寄存器等相关工作之后，开始运行新的进程。</p><h2 id="进程调度方式" tabindex="-1"><a class="header-anchor" href="#进程调度方式"><span>进程调度方式</span></a></h2><p>所谓进程调度方式是指当某一个进程正在处理机上执行时，若有某个更为重要或紧迫的进程需要处理，即有优先权更髙的进程进入就绪队列，此时应如何分配处理机。</p><p>通常有以下两种进程调度方式：</p><ol><li>非剥夺调度方式，又称非抢占方式。</li></ol><p>是指当一个进程正在处理机上执行时，即使有某个更为重要或紧迫的进程进入就绪队列，仍然让正在执行的进程继续执行，直到该进程完成或发生某种事件而进入阻塞状态时，才把处理机分配给更为重要或紧迫的进程。</p><p>在非剥夺调度方式下，一旦把CPU分配给一个进程，那么该进程就会保持CPU直到终止或转换到等待状态。这种方式的优点是实现简单、系统开销小，适用于大多数的批处理系统，但它不能用于分时系统和大多数的实时系统。</p><ol start="2"><li>剥夺调度方式，又称抢占方式。</li></ol><p>是指当一个进程正在处理机上执行时，若有某个更为重要或紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给这个更为重要或紧迫的进程。</p><p>釆用剥夺式的调度，对提高系统吞吐率和响应效率都有明显的好处。但“剥夺”不是一种任意性行为，必须遵循一定的原则，主要有：优先权、短进程优先和时间片原则等。</p><h1 id="调度的基本准则" tabindex="-1"><a class="header-anchor" href="#调度的基本准则"><span>调度的基本准则</span></a></h1><p>不同的调度算法具有不同的特性，在选择调度算法时，必须考虑算法所具有的特性。</p><h2 id="评价标准" tabindex="-1"><a class="header-anchor" href="#评价标准"><span>评价标准</span></a></h2><p>为了比较处理机调度算法的性能，人们提出很多评价准则，下面介绍主要的几种：</p><ol><li>CPU利用率。</li></ol><p>CPU是计算机系统中最重要和昂贵的资源之一，所以应尽可能使CPU 保持“忙”状态，使这一资源利用率最髙。</p><ol start="2"><li>系统吞吐量。</li></ol><p>表示单位时间内CPU完成作业的数量。长作业需要消耗较长的处理机时间，因此会降低系统的吞吐量。</p><p>而对于短作业，它们所需要消耗的处理机时间较短，因此能提高系统的吞吐量。调度算法和方式的不同，也会对系统的吞吐量产生较大的影响。</p><ol start="3"><li>周转时间。</li></ol><p>是指从作业提交到作业完成所经历的时间，包括作业等待、在就绪队列中排队、在处迤机上运行以及进行输入/输出操作所花费时间的总和。</p><p>作业的周转时间可用公式表示如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>周转时间 = 作业完成时间 - 作业提交时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>平均周转时间是指多个作业周转时间的平均值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>平均周转时间 = (作业1的周转时间 + … + 作业 n 的周转时间) / n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>带权周转时间是指作业周转时间与作业实际运行时间的比值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>带权周转时间 = 作业周转时间 / 作业实际运行时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>平均带权周转时间是指多个作业带权周转时间的平均值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>平均带权周转时间 = (作业1的带权周转时间 + … + 作业 n 的带权周转时间) / n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>等待时间。</li></ol><p>是指进程处于等处理机状态时间之和，等待时间越长，用户满意度越低。处理机调度算法实际上并不影响作业执行或输入/输出操作的时间，只影响作业在就绪队列中等待所花的时间。因此，衡量一个调度算法优劣常常只需简单地考察等待时间。</p><ol start="5"><li>响应时间。</li></ol><p>是指从用户提交请求到系统首次产生响应所用的时间。在交互式系统中，周转时间不可能是最好的评价准则，一般釆用响应时间作为衡量调度算法的重要准则之一。</p><p>从用户角度看，调度策略应尽量降低响应时间，使响应时间处在用户能接受的范围之内。</p><p>要想得到一个满足所有用户和系统要求的算法几乎是不可能的。</p><p>设计调度程序，一方面要满足特定系统用户的要求（如某些实时和交互进程快速响应要求)，另一方面要考虑系统整体效率（如减少整个系统进程平均周转时间），同时还要考虑调度算法的开销。</p><h1 id="操作系统典型调度算法" tabindex="-1"><a class="header-anchor" href="#操作系统典型调度算法"><span>操作系统典型调度算法</span></a></h1><p>在操作系统中存在多种调度算法，其中有的调度算法适用于作业调度，有的调度算法适用于进程调度，有的调度算法两者都适用。</p><p>下面介绍几种常用的调度算法。</p><h2 id="先来先服务-fcfs-调度算法" tabindex="-1"><a class="header-anchor" href="#先来先服务-fcfs-调度算法"><span>先来先服务(FCFS)调度算法</span></a></h2><p>FCFS调度算法是一种最简单的调度算法，该调度算法既可以用于作业调度也可以用于进程调度。</p><p>在作业调度中，算法每次从后备作业队列中选择最先进入该队列的一个或几个作业，将它们调入内存，分配必要的资源，创建进程并放入就绪队列。</p><p>在进程调度中，FCFS调度算法每次从就绪队列中选择最先进入该队列的进程，将处理机分配给它，使之投入运行，直到完成或因某种原因而阻塞时才释放处理机。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><p>下面通过一个实例来说明FCFS调度算法的性能。</p><p>假设系统中有4个作业，它们的提交时间分别是8、8.4、8.8、9，运行时间依次是2、1、0.5、0.2，系统釆用FCFS调度算法，这组作业的平均等待时间、平均周转时间和平均带权周转时间见表2-3。</p><ul><li>表 2-3 FCFS调度算法的性能</li></ul><table><thead><tr><th style="text-align:left;">作业号</th><th style="text-align:left;">提交时间</th><th style="text-align:left;">运行时间</th><th style="text-align:left;">开始时间</th><th style="text-align:left;">等待时间</th><th style="text-align:left;">完成时间</th><th style="text-align:left;">周转时间</th><th style="text-align:left;">带权周转时间</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">8</td><td style="text-align:left;">2</td><td style="text-align:left;">8</td><td style="text-align:left;">0</td><td style="text-align:left;">10</td><td style="text-align:left;">2</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">8.4</td><td style="text-align:left;">1</td><td style="text-align:left;">10</td><td style="text-align:left;">1.6</td><td style="text-align:left;">11</td><td style="text-align:left;">2.6</td><td style="text-align:left;">2.6</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">8.8</td><td style="text-align:left;">0.5</td><td style="text-align:left;">11</td><td style="text-align:left;">2.2</td><td style="text-align:left;">11.5</td><td style="text-align:left;">2.7</td><td style="text-align:left;">5.4</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">9</td><td style="text-align:left;">0.2</td><td style="text-align:left;">11.5</td><td style="text-align:left;">2.5</td><td style="text-align:left;">11.7</td><td style="text-align:left;">2.7</td><td style="text-align:left;">13.5</td></tr></tbody></table><p>平均等待时间 t = (0+1.6+2.2+2.5)/4=1.575</p><p>平均周转时间 T = (2+2.6+2.7+2.7)/4=2.5</p><p>平均带权周转时间 W = (1+2.6+5.牡13.5)/4=5.625</p><p>FCFS调度算法属于不可剥夺算法。</p><p>从表面上看，它对所有作业都是公平的，但若一个长作业先到达系统，就会使后面许多短作业等待很长时间，因此它不能作为分时系统和实时系统的主要调度策略。</p><p>但它常被结合在其他调度策略中使用。例如，在使用优先级作为调度策略的系统中，往往对多个具有相同优先级的进程按FCFS原则处理。</p><p>FCFS调度算法的特点是算法简单，但效率低；对长作业比较有利，但对短作业不利（相对SJF和高响应比）；有利于CPU繁忙型作业，而不利于I/O繁忙型作业。</p><h2 id="短作业优先-sjf-调度算法" tabindex="-1"><a class="header-anchor" href="#短作业优先-sjf-调度算法"><span>短作业优先(SJF)调度算法</span></a></h2><p>短作业（进程）优先调度算法是指对短作业（进程）优先调度的算法。</p><p>短作业优先(SJF)调度算法是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。</p><p>而短进程优先(SPF)调度算法，则是从就绪队列中选择一个估计运行时间最短的进程，将处理机分配给它，使之立即执行，直到完成或发生某事件而阻塞时，才释放处理机。</p><p>例如，考虑表2-3中给出的一组作业，若系统釆用短作业优先调度算法，其平均等待时间、平均周转时间和平均带权周转时间见表2-4。</p><ul><li>表2-4 SJF调度算法的性能</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1004/191300_9774cb78_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>输入图片说明</figcaption></figure><p>平均等待时间 t = (0+2.3+1.4+1)/4=1.175</p><p>平均周转时间 T = (2+3.3+1.9+1.2)/4=2.1</p><p>平均带权周转时间 W = (1+3.3+3.8+6)/4=3.525</p><p>SJF调度算法也存在不容忽视的缺点：</p><p>该算法对长作业不利，由表2-3和表2-4可知，SJF调度算法中长作业的周转时间会增加。更严重的是，如果有一长作业进入系统的后备队列，由于调度程序总是优先调度那些 (即使是后进来的）短作业，将导致长作业长期不被调度（“饥饿”现象，注意区分“死锁”。后者是系统环形等待，前者是调度策略问题）。</p><p>该算法完全未考虑作业的紧迫程度，因而不能保证紧迫性作业会被及时处理。</p><p>由于作业的长短只是根据用户所提供的估计执行时间而定的，而用户又可能会有意或无意地缩短其作业的估计运行时间，致使该算法不一定能真正做到短作业优先调度。</p><p>注意，SJF调度算法的平均等待时间、平均周转时间最少。</p><h2 id="优先级调度算法" tabindex="-1"><a class="header-anchor" href="#优先级调度算法"><span>优先级调度算法</span></a></h2><p>优先级调度算法又称优先权调度算法，该算法既可以用于作业调度，也可以用于进程调度，该算法中的优先级用于描述作业运行的紧迫程度。</p><p>在作业调度中，优先级调度算法每次从后备作业队列中选择优先级最髙的一个或几个作业，将它们调入内存，分配必要的资源，创建进程并放入就绪队列。</p><p>在进程调度中，优先级调度算法每次从就绪队列中选择优先级最高的进程，将处理机分配给它，使之投入运行。</p><h3 id="是否抢占" tabindex="-1"><a class="header-anchor" href="#是否抢占"><span>是否抢占</span></a></h3><p>根据新的更高优先级进程能否抢占正在执行的进程，可将该调度算法分为：</p><p>非剥夺式优先级调度算法。当某一个进程正在处理机上运行时，即使有某个更为重要或紧迫的进程进入就绪队列，仍然让正在运行的进程继续运行，直到由于其自身的原因而主动让出处理机时（任务完成或等待事件），才把处理机分配给更为重要或紧迫的进程。</p><p>剥夺式优先级调度算法。当一个进程正在处理机上运行时，若有某个更为重要或紧迫的进程进入就绪队列，则立即暂停正在运行的进程，将处理机分配给更重要或紧迫的进程。</p><h3 id="优先级是否变更" tabindex="-1"><a class="header-anchor" href="#优先级是否变更"><span>优先级是否变更</span></a></h3><p>而根据进程创建后其优先级是否可以改变，可以将进程优先级分为以下两种：</p><p>静态优先级。优先级是在创建进程时确定的，且在进程的整个运行期间保持不变。确定静态优先级的主要依据有进程类型、进程对资源的要求、用户要求。</p><p>动态优先级。在进程运行过程中，根据进程情况的变化动态调整优先级。动态调整优先级的主要依据为进程占有CPU时间的长短、就绪进程等待CPU时间的长短。</p><h2 id="高响应比优先调度算法" tabindex="-1"><a class="header-anchor" href="#高响应比优先调度算法"><span>高响应比优先调度算法</span></a></h2><p>高响应比优先调度算法主要用于作业调度，该算法是对FCFS调度算法和SJF调度算法的一种综合平衡，同时考虑每个作业的等待时间和估计的运行时间。</p><p>在每次进行作业调度时，先计算后备作业队列中每个作业的响应比，从中选出响应比最高的作业投入运行。</p><p>响应比的变化规律可描述为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>响应比_RP = (等待时间 + 要求服务时间) / 要求服务时间;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据公式可知：</p><p>当作业的等待时间相同时，则要求服务时间越短，其响应比越高，有利于短作业。</p><p>当要求服务时间相同时，作业的响应比由其等待时间决定，等待时间越长，其响应比越高，因而它实现的是先来先服务。</p><p>对于长作业，作业的响应比可以随等待时间的增加而提高，当其等待时间足够长时，其响应比便可升到很高，从而也可获得处理机。克服了饥饿状态，兼顾了长作业。</p><h2 id="时间片轮转调度算法" tabindex="-1"><a class="header-anchor" href="#时间片轮转调度算法"><span>时间片轮转调度算法</span></a></h2><p>时间片轮转调度算法主要适用于分时系统。</p><p>在这种算法中，系统将所有就绪进程按到达时间的先后次序排成一个队列，进程调度程序总是选择就绪队列中第一个进程执行，即先来先服务的原则，但仅能运行一个时间片，如100ms。</p><p>在使用完一个时间片后，即使进程并未完成其运行，它也必须释放出（被剥夺）处理机给下一个就绪的进程，而被剥夺的进程返回到就绪队列的末尾重新排队，等候再次运行。</p><p>在时间片轮转调度算法中，时间片的大小对系统性能的影响很大。</p><p>如果时间片足够大，以至于所有进程都能在一个时间片内执行完毕，则时间片轮转调度算法就退化为先来先服务调度算法。</p><p>如果时间片很小，那么处理机将在进程间过于频繁切换，使处理机的开销增大，而真正用于运行用户进程的时间将减少。因此时间片的大小应选择适当。</p><p>时间片的长短通常由以下因素确定：系统的响应时间、就绪队列中的进程数目和系统的处理能力。</p><h2 id="多级反馈队列调度算法-集合了前几种算法的优点" tabindex="-1"><a class="header-anchor" href="#多级反馈队列调度算法-集合了前几种算法的优点"><span>多级反馈队列调度算法（集合了前几种算法的优点）</span></a></h2><p>多级反馈队列调度算法是时间片轮转调度算法和优先级调度算法的综合和发展，如图2-5 所示。</p><p>通过动态调整进程优先级和时间片大小，多级反馈队列调度算法可以兼顾多方面的系统目标。</p><p>例如，为提高系统吞吐量和缩短平均周转时间而照顾短进程；为获得较好的I/O设备利用率和缩短响应时间而照顾I/O型进程；同时，也不必事先估计进程的执行时间。</p><figure><img src="https://images.gitee.com/uploads/images/2020/1004/191837_ec7d1a97_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>输入图片说明</figcaption></figure><h3 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h3><p>多级反馈队列调度算法的实现思想如下：</p><p>（1）应设置多个就绪队列，并为各个队列赋予不同的优先级，第1级队列的优先级最高，第2级队列次之，其余队列的优先级逐次降低。</p><p>（2）赋予各个队列中进程执行时间片的大小也各不相同，在优先级越高的队列中，每个进程的运行时间片就越小。例如，第2级队列的时间片要比第1级队列的时间片长一倍， ……第i+1级队列的时间片要比第i级队列的时间片长一倍。</p><p>（3）当一个新进程进入内存后，首先将它放入第1级队列的末尾，按FCFS原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第2级队列的末尾，再同样地按FCFS 原则等待调度执行；如果它在第2级队列中运行一个时间片后仍未完成，再以同样的方法放入第3级队列……如此下去，当一个长进程从第1级队列依次降到第 n 级队列后，在第 n 级队列中便釆用时间片轮转的方式运行。</p><p>（4）仅当第1级队列为空时，调度程序才调度第2级队列中的进程运行；仅当第1 ~ (i-1)级队列均为空时，才会调度第i级队列中的进程运行。如果处理机正在执行第i级队列中的某进程时，又有新进程进入优先级较高的队列（第 1 ~ (i-1)中的任何一个队列），则此时新进程将抢占正在运行进程的处理机，即由调度程序把正在运行的进程放回到第i级队列的末尾，把处理机分配给新到的更高优先级的进程。</p><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><p>多级反馈队列的优势有：</p><p>终端型作业用户：短作业优先。</p><p>短批处理作业用户：周转时间较短。</p><p>长批处理作业用户：经过前面几个队列得到部分执行，不会长期得不到处理。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="http://c.biancheng.net/cpp/html/2579.html" target="_blank" rel="noopener noreferrer">操作系统的基本概念</a></p><p><a href="https://lgwain.gitbooks.io/os/content/unit11.html" target="_blank" rel="noopener noreferrer">https://lgwain.gitbooks.io/os/content/unit11.html</a></p>',150)]))}const r=e(l,[["render",s]]),o=JSON.parse('{"path":"/posts/OS/2020-10-04-os-03-schedule.html","title":"操作系统学习(3)处理机调度：调度的概念、时机、切换、过程以及调度方式和基本准则","lang":"zh-CN","frontmatter":{"title":"操作系统学习(3)处理机调度：调度的概念、时机、切换、过程以及调度方式和基本准则","date":"2020-10-04T00:00:00.000Z","categories":["OS"],"tags":["os","sf"],"published":true,"description":"调度的概念 1. 调度的基本概念 在多道程序系统中，进程的数量往往多于处理机的个数，进程争用处理机的情况就在所难免。 处理机调度是对处理机进行分配，就是从就绪队列中，按照一定的算法（公平、髙效）选择一个进程并将处理机分配给它运行，以实现进程并发地执行。 处理机调度是多道程序操作系统的基础，它是操作系统设计的核心问题。 2. 调度的层次 一个作业从提交开...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/OS/2020-10-04-os-03-schedule.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"操作系统学习(3)处理机调度：调度的概念、时机、切换、过程以及调度方式和基本准则"}],["meta",{"property":"og:description","content":"调度的概念 1. 调度的基本概念 在多道程序系统中，进程的数量往往多于处理机的个数，进程争用处理机的情况就在所难免。 处理机调度是对处理机进行分配，就是从就绪队列中，按照一定的算法（公平、髙效）选择一个进程并将处理机分配给它运行，以实现进程并发地执行。 处理机调度是多道程序操作系统的基础，它是操作系统设计的核心问题。 2. 调度的层次 一个作业从提交开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://c.biancheng.net/cpp/uploads/allimg/140629/1-140629144600329.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"os"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-10-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统学习(3)处理机调度：调度的概念、时机、切换、过程以及调度方式和基本准则\\",\\"image\\":[\\"http://c.biancheng.net/cpp/uploads/allimg/140629/1-140629144600329.jpg\\",\\"https://images.gitee.com/uploads/images/2020/1004/191300_9774cb78_508704.png\\",\\"https://images.gitee.com/uploads/images/2020/1004/191837_ec7d1a97_508704.png\\"],\\"datePublished\\":\\"2020-10-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":20.12,"words":6035},"filePathRelative":"posts/OS/2020-10-04-os-03-schedule.md","localizedDate":"2020年10月4日","excerpt":"\\n<h2>1. 调度的基本概念</h2>\\n<p>在多道程序系统中，进程的数量往往多于处理机的个数，进程争用处理机的情况就在所难免。</p>\\n<p>处理机调度是对处理机进行分配，就是从就绪队列中，按照一定的算法（公平、髙效）选择一个进程并将处理机分配给它运行，以实现进程并发地执行。</p>\\n<p>处理机调度是多道程序操作系统的基础，它是操作系统设计的核心问题。</p>\\n<h2>2. 调度的层次</h2>\\n<p>一个作业从提交开始直到完成，往往要经历以下三级调度，如图2-4所示。</p>\\n<ol>\\n<li>作业调度。</li>\\n</ol>\\n<p>又称高级调度。其主要任务是按一定的原则从外存上处于后备状态的作业中挑选一个（或多个）作业，给它（们）分配内存、输入/输出设备等必要的资源，并建立相应的进程，以使它（们）获得竞争处理机的权利。简言之，就是内存与辅存之间的调度。对于每个作业只调入一次、调出一次。</p>","autoDesc":true}');export{r as comp,o as data};
