import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o}from"./app-CEDSurVN.js";const n={};function p(s,e){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>大家好，我是老马。</p><p>在开始之前，我们对测试平台做一个基本的设想。</p><p>商业上可以参考：apifox 之类的测试工具。</p><p>我们如果想实现，最好是二开，而不是全部从零开始做。</p><h1 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么？</span></a></h1><p>测试平台是一个用于测试和验证软件或硬件系统功能的环境或工具集合。</p><p>它为开发人员、测试人员和质量保证团队提供了一个集中的空间，能够有效地执行各种测试，如功能测试、性能测试、负载测试等，确保软件或硬件在真实使用环境中的可靠性、稳定性和性能。</p><p>测试平台的主要目的是提高测试的效率和质量，减少人工干预，帮助团队在开发过程中尽早发现并解决潜在问题。</p><h1 id="核心能力" tabindex="-1"><a class="header-anchor" href="#核心能力"><span>核心能力</span></a></h1><p>测试平台的核心能力包括以下几个方面：</p><p>最新核的两个主要能力：</p><h2 id="自动化测试能力" tabindex="-1"><a class="header-anchor" href="#自动化测试能力"><span>自动化测试能力</span></a></h2><ul><li><p>功能自动化：自动化执行功能测试，验证软件的每个功能是否按预期工作。</p></li><li><p>回归自动化：在软件修改后自动执行测试，确保新改动没有破坏现有功能。</p></li><li><p>性能自动化：对应用程序的响应时间、负载能力等进行自动化测试，确保其在高并发环境下的稳定性。</p></li></ul><h2 id="高效的测试用例管理" tabindex="-1"><a class="header-anchor" href="#高效的测试用例管理"><span>高效的测试用例管理</span></a></h2><ul><li><p>测试用例设计与管理：允许用户设计、编辑、存储和管理测试用例，确保测试覆盖各个功能点。</p></li><li><p>用例执行与跟踪：支持测试用例的执行并提供详细的执行记录，帮助跟踪哪些用例通过、哪些失败。</p></li><li><p>测试结果报告：生成清晰的测试报告，展示执行情况、问题的分布和趋势等，便于团队评估软件质量。</p></li></ul><p>下面是与其他平台打通的能力：</p><h2 id="持续集成与持续交付-ci-cd-支持" tabindex="-1"><a class="header-anchor" href="#持续集成与持续交付-ci-cd-支持"><span>持续集成与持续交付（CI/CD）支持</span></a></h2><ul><li><p>与CI/CD工具链（如Jenkins、GitLab CI、Travis CI等）紧密集成，能够在每次代码提交或构建时自动执行测试。</p></li><li><p>支持测试结果的自动反馈，将失败的测试报告发送到开发人员，便于快速修复。</p></li></ul><h2 id="缺陷管理与跟踪" tabindex="-1"><a class="header-anchor" href="#缺陷管理与跟踪"><span>缺陷管理与跟踪</span></a></h2><ul><li><p>集成缺陷管理工具（如JIRA、Bugzilla、Trello等），自动将测试过程中发现的问题转化为缺陷，并跟踪缺陷的状态和修复进度。</p></li><li><p>提供全面的错误报告和日志，帮助开发团队定位问题。</p></li></ul><p>这些核心能力共同作用，使得测试平台能够在开发过程中提供高效、可靠、持续的测试支持，确保软件质量和性能达到预期目标。</p><h1 id="测试平台的好处" tabindex="-1"><a class="header-anchor" href="#测试平台的好处"><span>测试平台的好处</span></a></h1><p>测试平台最大的好处个人理解应该是自动化，节省人力。</p><p>可视化+报表，可以和 DevOps 工具结合，便于数据反馈+持续改进。</p><p>主要体现在：</p><h2 id="提高测试效率" tabindex="-1"><a class="header-anchor" href="#提高测试效率"><span>提高测试效率</span></a></h2><ul><li><p>自动化执行：测试平台支持自动化测试，能够大幅减少手动测试的工作量。测试用例可以自动执行，并在每次代码提交后自动运行回归测试，快速反馈测试结果。</p></li><li><p>快速反馈：通过与持续集成（CI）工具的集成，测试平台可以在代码变更后迅速执行相关测试，并提供即时反馈，帮助开发人员尽早发现和修复问题。</p></li></ul><h2 id="降低成本" tabindex="-1"><a class="header-anchor" href="#降低成本"><span>降低成本</span></a></h2><ul><li><p>减少人工测试成本：通过自动化测试，平台减少了手动测试的时间和成本，使团队能够将更多资源投入到开发和创新中。</p></li><li><p>提前发现问题：测试平台能够在开发周期的早期发现问题，降低后期修复缺陷的成本。及早发现的问题通常更容易修复，且修复成本较低。</p></li></ul><h2 id="提高跨团队协作" tabindex="-1"><a class="header-anchor" href="#提高跨团队协作"><span>提高跨团队协作</span></a></h2><ul><li><p>统一的测试环境：测试平台为开发、测试、运维等团队提供了统一的测试环境，使得团队之间的协作更加高效。不同团队可以共享测试用例、结果和报告，确保开发和测试的无缝衔接。</p></li><li><p>缺陷追踪与沟通：集成的缺陷管理工具可以帮助开发和测试人员有效沟通，减少误解，提高问题解决的效率。</p></li></ul><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p><p>我是老马，期待与你的下次相遇。</p><h1 id="测试专题系列" tabindex="-1"><a class="header-anchor" href="#测试专题系列"><span>测试专题系列</span></a></h1><h2 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试"><span>单元测试</span></a></h2><p><a href="https://houbb.github.io/2016/04/26/test-00-overview" target="_blank" rel="noopener noreferrer">test-00-测试知识系统学习，如何设计一个测试框架?</a></p><p><a href="https://houbb.github.io/2016/04/26/test-01-junit-framework" target="_blank" rel="noopener noreferrer">test-01-java 单元测试框架 junit 入门介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-02-junit5-framework" target="_blank" rel="noopener noreferrer">test-02-java 单元测试框架 junit5 入门介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-03-testng-framework" target="_blank" rel="noopener noreferrer">test-03-java 单元测试框架 testNG 入门介绍</a></p><p><a href="https://houbb.github.io/2018/06/24/junit5-01-hello" target="_blank" rel="noopener noreferrer">junit5 系列</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><h2 id="断言" tabindex="-1"><a class="header-anchor" href="#断言"><span>断言</span></a></h2><p><a href="https://houbb.github.io/2016/04/26/test-assert-00-overview" target="_blank" rel="noopener noreferrer">test assert-00-单元测试中的断言</a></p><p><a href="https://houbb.github.io/2016/04/26/test-assert-01-google-truth" target="_blank" rel="noopener noreferrer">test assert-01-Google Truth 断言</a></p><p><a href="https://houbb.github.io/2016/04/26/test-assert-02-power-assert-js" target="_blank" rel="noopener noreferrer">test assert-02-power-assert-js 断言</a></p><p><a href="https://houbb.github.io/2016/04/26/test-assert-03-assertj" target="_blank" rel="noopener noreferrer">test assert-03-assertj AssertJ - Fluent Assertions for Java 断言</a></p><p><a href="https://houbb.github.io/2016/04/26/test-assert-04-harmcrest" target="_blank" rel="noopener noreferrer">test assert-04-Java (and original) version of Hamcrest 断言</a></p><h2 id="测试用例生成" tabindex="-1"><a class="header-anchor" href="#测试用例生成"><span>测试用例生成</span></a></h2><p><a href="https://houbb.github.io/2016/04/26/test-gen-case-01-overview" target="_blank" rel="noopener noreferrer">test-01-test case generate 单元测试用例代码生成</a></p><p><a href="https://houbb.github.io/2016/04/26/test-gen-case-02-EvoSuite-intro" target="_blank" rel="noopener noreferrer">test-02-test case generate 测试用例生成 EvoSuite 介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-gen-case-03-randoop-intro" target="_blank" rel="noopener noreferrer">test-03-test case generate 测试用例生成 Randoop 介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-gen-case-03-randoop-quick-start" target="_blank" rel="noopener noreferrer">test-03-test case generate 测试用例生成 Randoop 快速开始入门例子</a></p><p><a href="https://houbb.github.io/2016/04/26/test-gen-case-04-tcases-intro" target="_blank" rel="noopener noreferrer">test-04-test case generate 测试用例生成 tcases A model-based test case generator</a></p><p><a href="https://houbb.github.io/2016/04/26/test-gen-case-04-tcases-quick-start" target="_blank" rel="noopener noreferrer">test-04-test case generate 测试用例生成 tcases 快速开始</a></p><h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock"><span>MOCK</span></a></h2><p><a href="https://houbb.github.io/2016/04/26/test-mock-01-overview" target="_blank" rel="noopener noreferrer">test mock-01-什么是 mock? Mockito/EasyMock/PowerMock/JMockit/Spock mock 框架对比</a></p><p><a href="https://houbb.github.io/2016/04/26/test-mock-02-easymock" target="_blank" rel="noopener noreferrer">test mock-02-easymock 入门介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-mock-03-wiremock" target="_blank" rel="noopener noreferrer">test mock-03-wiremock 模拟 HTTP 服务的开源工具 flexible and open source API mocking</a></p><p><a href="https://houbb.github.io/2016/04/26/test-mock-04-hoverfly" target="_blank" rel="noopener noreferrer">test mock-04-hoverfly Easy Creation of Stub Http Servers for Testing</a></p><p><a href="https://houbb.github.io/2016/04/26/test-mock-05-mockserver" target="_blank" rel="noopener noreferrer">test mock-05-mockserver mock-server/hoverfly/wiremock 对比</a></p><p><a href="https://houbb.github.io/2016/04/26/test-mock-06-mountebank" target="_blank" rel="noopener noreferrer">test mock-06-mountebank Over the wire test doubles mock-server/hoverfly/wiremock/mountbank 对比表格</a></p><h2 id="测试混沌工程" tabindex="-1"><a class="header-anchor" href="#测试混沌工程"><span>测试混沌工程</span></a></h2><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-01-overview" target="_blank" rel="noopener noreferrer">ChaosBlade-01-测试混沌工程平台整体介绍</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-02-chaosblade-box-intro" target="_blank" rel="noopener noreferrer">ChaosBlade-02-Chaosblade-box：一个具有丰富场景的混沌工程平台</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-03-chaosblade-exec-jvm-intro" target="_blank" rel="noopener noreferrer">ChaosBlade-03-Chaosblade-exec-jvm 对 Java 应用实施混沌实验的 chaosblade 执行器</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-04-chaosblade-chat" target="_blank" rel="noopener noreferrer">ChaosBlade-04-Chaosblade chat 聊一聊 Chaosblade</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-05-chaos-enginnering-intro" target="_blank" rel="noopener noreferrer">ChaosBlade-05-混沌工程（Chaos Engineering）介绍</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-06-chaos-principle" target="_blank" rel="noopener noreferrer">ChaosBlade-06-混沌工程准则 PRINCIPLES OF CHAOS ENGINEERING POC</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-07-chaos-tool-chaos-monkey" target="_blank" rel="noopener noreferrer">ChaosBlade-07-混沌工程开源工具 Chaos Monkey</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-08-chaos-tool-chaos-monkey-for-sb" target="_blank" rel="noopener noreferrer">ChaosBlade-08-混沌工程开源工具 Chaos Monkey for Spring Boot</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-09-usage" target="_blank" rel="noopener noreferrer">ChaosBlade-09-混沌工程有哪些成功的应用？</a></p><h2 id="ui-测试" tabindex="-1"><a class="header-anchor" href="#ui-测试"><span>ui 测试</span></a></h2><p><a href="https://houbb.github.io/2016/04/26/test-ui-00-overview" target="_blank" rel="noopener noreferrer">test ui-01-UI 页面测试概览 overview</a></p><p><a href="https://houbb.github.io/2016/04/26/test-ui-01-Selenium" target="_blank" rel="noopener noreferrer">test ui-01-UI 测试组件之 Selenium 入门介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-ui-02-appium" target="_blank" rel="noopener noreferrer">test ui-02-UI 测试组件之 Appium 入门介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-ui-03-cypress" target="_blank" rel="noopener noreferrer">test ui-03-cypress 入门介绍</a></p><p><a href="https://houbb.github.io/2016/04/26/test-ui-04-testcomplete" target="_blank" rel="noopener noreferrer">test ui-04-testcomplete 入门介绍</a></p><h2 id="性能测试" tabindex="-1"><a class="header-anchor" href="#性能测试"><span>性能测试</span></a></h2><p><a href="https://houbb.github.io/2016/04/26/test-perf-01-jmeter" target="_blank" rel="noopener noreferrer">test perf-01-性能测试之 JMeter</a></p><p><a href="https://houbb.github.io/2016/04/26/test-perf-02-loadrunner" target="_blank" rel="noopener noreferrer">test perf-02-性能测试之 LoadRunner</a></p><p><a href="https://houbb.github.io/2016/04/26/test-perf-03-gatling" target="_blank" rel="noopener noreferrer">test perf-03-性能测试之 Gatling</a></p><p><a href="https://houbb.github.io/2016/04/26/test-perf-04-locust-io" target="_blank" rel="noopener noreferrer">test perf-04-性能测试之 locust</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://support.smartbear.com/testcomplete/docs/tutorials/getting-started/first-test/web/index.html" target="_blank" rel="noopener noreferrer">https://support.smartbear.com/testcomplete/docs/tutorials/getting-started/first-test/web/index.html</a></p>',88)]))}const l=t(n,[["render",p]]),b=JSON.parse('{"path":"/posts/tests/2016-04-27-test-plateform-01-overview.html","title":"test plateform-01-测试平台概览","lang":"zh-CN","frontmatter":{"title":"test plateform-01-测试平台概览","date":"2016-04-27T00:00:00.000Z","categories":["Test"],"tags":["plateform","system-design","DevOps","test"],"published":true,"description":"前言 大家好，我是老马。 在开始之前，我们对测试平台做一个基本的设想。 商业上可以参考：apifox 之类的测试工具。 我们如果想实现，最好是二开，而不是全部从零开始做。 是什么？ 测试平台是一个用于测试和验证软件或硬件系统功能的环境或工具集合。 它为开发人员、测试人员和质量保证团队提供了一个集中的空间，能够有效地执行各种测试，如功能测试、性能测试、负...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-27-test-plateform-01-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test plateform-01-测试平台概览"}],["meta",{"property":"og:description","content":"前言 大家好，我是老马。 在开始之前，我们对测试平台做一个基本的设想。 商业上可以参考：apifox 之类的测试工具。 我们如果想实现，最好是二开，而不是全部从零开始做。 是什么？ 测试平台是一个用于测试和验证软件或硬件系统功能的环境或工具集合。 它为开发人员、测试人员和质量保证团队提供了一个集中的空间，能够有效地执行各种测试，如功能测试、性能测试、负..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"plateform"}],["meta",{"property":"article:tag","content":"system-design"}],["meta",{"property":"article:tag","content":"DevOps"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test plateform-01-测试平台概览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.77,"words":2030},"filePathRelative":"posts/tests/2016-04-27-test-plateform-01-overview.md","localizedDate":"2016年4月27日","excerpt":"\\n<p>大家好，我是老马。</p>\\n<p>在开始之前，我们对测试平台做一个基本的设想。</p>\\n<p>商业上可以参考：apifox 之类的测试工具。</p>\\n<p>我们如果想实现，最好是二开，而不是全部从零开始做。</p>\\n<h1>是什么？</h1>\\n<p>测试平台是一个用于测试和验证软件或硬件系统功能的环境或工具集合。</p>\\n<p>它为开发人员、测试人员和质量保证团队提供了一个集中的空间，能够有效地执行各种测试，如功能测试、性能测试、负载测试等，确保软件或硬件在真实使用环境中的可靠性、稳定性和性能。</p>\\n<p>测试平台的主要目的是提高测试的效率和质量，减少人工干预，帮助团队在开发过程中尽早发现并解决潜在问题。</p>","autoDesc":true}');export{l as comp,b as data};
