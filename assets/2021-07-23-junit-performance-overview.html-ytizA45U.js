import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as e}from"./app-CEDSurVN.js";const n={};function l(p,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="三高人群" tabindex="-1"><a class="header-anchor" href="#三高人群"><span>三高人群</span></a></h1><p>作为一名开发者，我们最常听到的就是编程界的三高：</p><p>高性能、高并发、高可用。</p><p>听起来非常高大上，但是性能到底如何呢？又该如何评定呢？</p><p>这次我们谈一谈性能测试，看一看到底什么样才叫做高性能。</p><p>本文主要从以下几个方面进行讨论。</p><p>（1）性能测试是什么？</p><p>（2）为什么需要性能测试？</p><p>（3）性能测试如何做？</p><p>（4）有哪些性能测试的工具</p><h1 id="性能测试是什么" tabindex="-1"><a class="header-anchor" href="#性能测试是什么"><span>性能测试是什么？</span></a></h1><p>老马曾经说过，你想理解一件事物，首先必须先定义它。</p><p>这里直接引用一下百科中的定义：</p><blockquote><p>性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。</p></blockquote><p>性能测试的定义也不难理解，往往定义本身阐述了性能测试的作用。</p><h1 id="为什么需要性能测试" tabindex="-1"><a class="header-anchor" href="#为什么需要性能测试"><span>为什么需要性能测试？</span></a></h1><p>如果你是一名开发、测试，平时接手过不少需求，可能性能测试接触的也不多。</p><p>每一个需求，都有对应的功能性需求和肺功能性需求。</p><p>功能性需求是产品需求文档中最直接的，需要实现的功能目标。简称，能用就行。</p><p>非功能性需求则要宽泛的多，架构设计是否合理？是否便于后期拓展？是否便于监控？代码实现是否优雅？文档注释是否完整？</p><p>就像你写了一只鸟，鸟头做螺旋桨非能飞起来，但是在架构设计上可能是不合理的。</p><figure><img src="https://img-blog.csdnimg.cn/463f331c132d434eb6cc0656960c3961.jpg" alt="飞起来" tabindex="0" loading="lazy"><figcaption>飞起来</figcaption></figure><p>一个查询功能，用户点击查询，10S 种才返回数据，功能上是满足的，但是性能上是不能接受的。</p><p>线上的交易功能平时各方面都很棒，节假日高峰期直接系统就瘫痪了。</p><p>那如何避免这些问题出现在生产上呢？</p><p>这就需要上线之前，首先做好对应的性能测试，避免再生产上出现问题，带来严重的生产事故。</p><p>性能要高，性能要硬，性能测试，又高又硬！</p><figure><img src="https://img-blog.csdnimg.cn/bf5fce0de3a9450782dcadb5cba0adf5.jpg" alt="又高又硬" tabindex="0" loading="lazy"><figcaption>又高又硬</figcaption></figure><h1 id="如何做好性能测试" tabindex="-1"><a class="header-anchor" href="#如何做好性能测试"><span>如何做好性能测试</span></a></h1><p>做一件事情之前，我们首先要确定好自己的目标。</p><p>性能测试，到底要测试什么？</p><p>有些类似于开发过程中的需求分析，常见的测试指标如下。</p><h2 id="测试指标" tabindex="-1"><a class="header-anchor" href="#测试指标"><span>测试指标</span></a></h2><h3 id="响应时间" tabindex="-1"><a class="header-anchor" href="#响应时间"><span>响应时间</span></a></h3><p>响应时间是指某个请求或操作从发出到接收到反馈所消耗的时间，包括应用服务器（客户端）处理时间、网络传输时间以及数据库服务器处理时间。</p><p>作为用户而言，在页面点击查询，等待了多久才能获取结果，这个就是响应时间。</p><p>用户不关心你后端经过了多少个服务，慢就是原罪。</p><p>对于微服务系统，链路监控就显得比较重要。可以帮助我们快速定位到底慢在哪里。</p><h3 id="tps-qps" tabindex="-1"><a class="header-anchor" href="#tps-qps"><span>TPS/QPS</span></a></h3><p>TPS（Transaction Per Second）是指单位时间（每秒）系统处理的事务量。</p><p>我看网上还有很多类似的概念：点击量/点击率、吞吐量/吞吐率、PV/UV，这里不做赘述。</p><p>个人看来本质上 TPS/QPS 就是去压测你应用的极限，当访问量较大的时候，程序能否活下来？</p><p>这里主要涉及到两个概念：高性能和高可用。</p><p>我们后面会简单讨论下这两点。</p><h2 id="测试准备" tabindex="-1"><a class="header-anchor" href="#测试准备"><span>测试准备</span></a></h2><p>明确了测试指标之后，就需要进行测试的准备。</p><p>环境准备：比如你想压测数据库，那就需要准备对应配置的数据库资源。</p><p>脚本的准备：数据初始化脚本，调用脚本等。</p><p>这个可以类比开发过程中的代码开发。</p><p>ps: 性能压测一般不是很常用，所以环境准备流程会比较长，这一点需要注意。</p><h2 id="测试报告" tabindex="-1"><a class="header-anchor" href="#测试报告"><span>测试报告</span></a></h2><p>当进行测试之后，测试的结果一定要给出一份报告出来。</p><p>是否通过压测要求？</p><p>最高的 QPS 是多少？</p><p>这样开发可以根据这份报告进行相应的优化。</p><h1 id="如何提升程序性能" tabindex="-1"><a class="header-anchor" href="#如何提升程序性能"><span>如何提升程序性能</span></a></h1><p>提升性能的内容写一本书也不为过，这里简单罗列一些最常用的几点：</p><p>（1）慢 SQL</p><p>一般程序如果响应时间较长，可以首先看一下慢 SQL。</p><p>看下是否需要增加索引，或者进行 SQL 优化。</p><p>（2）缓存</p><p>针对查询，性能提升最显著的就是引入缓存。</p><p>当然，引入缓存会使架构变得复杂，这一点要结合自己的实际业务。</p><p>（3）硬件升级</p><p>如果程序优化的空间比较小，可以考虑升级一下硬件资源。</p><p>比如服务器配置翻倍，数据库配置翻倍。</p><p>什么？你说公司没钱升级？</p><p>没钱升级做什么压测？</p><p>这个时候测试报告的作用就显露了，直接用数据说话。</p><p>直接说 QPS 达不到生产要求，程序优化的空间很小，推荐硬件升级配置，升级到多少。</p><p>做人，要以德服人。</p><p>做测试，要用数据说话。</p><figure><img src="https://img-blog.csdnimg.cn/0e3b5722771241d09a2f970ee284e445.jpg" alt="以德服人" tabindex="0" loading="lazy"><figcaption>以德服人</figcaption></figure><h1 id="常用的性能测试工具" tabindex="-1"><a class="header-anchor" href="#常用的性能测试工具"><span>常用的性能测试工具</span></a></h1><p>测试最常用的工具当属 jmeter。</p><p>除此之外，还有一些其他的工具：</p><p>LoadRunner、QALoad、SilkPerformer和Rational Performance Tester。</p><p>下面对几个工具做下简单介绍</p><h2 id="jmeter" tabindex="-1"><a class="header-anchor" href="#jmeter"><span>jmeter</span></a></h2><p>Apache JMeter 可以用于测试静态和动态资源(Web动态应用程序)的性能。</p><p>它可以用于模拟服务器、服务器组、网络或对象上的负载，以测试其强度或分析不同负载类型下的总体性能。</p><h2 id="loadrunner" tabindex="-1"><a class="header-anchor" href="#loadrunner"><span>LoadRunner</span></a></h2><p>将负载测试集成到开发工具中:IDE、jUnit、nUnit、Jenkins、Selenium和Microsoft Visual Studio。</p><p>从12.55版本开始，您可以运行您的JMeter脚本，并在任何性能测试中集成JMeter和附加的脚本类型。</p><p>ps: 这个设计理念就非常好，可以和成熟的工具进行整合。站在巨人的肩膀上。</p><h2 id="qaload" tabindex="-1"><a class="header-anchor" href="#qaload"><span>QALoad</span></a></h2><p>QALoad是客户/服务器系统、企业资源配置（ERP）和电子商务应用的自动化负载测试工具。</p><p>QALoad可以模拟成百上千的用户并发执行关键业务而完成对应用程序的测试，并针对所发现问题对系统性能进行优化，确保应用的成功部署。</p><p>ps: 这个工具本人没有接触过。</p><h2 id="silkperformer" tabindex="-1"><a class="header-anchor" href="#silkperformer"><span>SilkPerformer</span></a></h2><p>SilkPerformerV可以让你在使用前，就能够预测企业电子商务环境的行为—不受电子商务应用规模和复杂性影响。</p><p>可视化的用户化、负载条件下可视化的内容校验、实时的性能监视和强大的管理报告可以帮助您迅速将问题隔离，这样，通过最小化测试周期、优化性能以及确保可伸缩性，加快了投入市场的时间，并保证了系统的可靠性。</p><h2 id="rational-performance-tester" tabindex="-1"><a class="header-anchor" href="#rational-performance-tester"><span>Rational Performance Tester</span></a></h2><p>作为 DevOps 方法的一部分，IBM Rational Performance Tester 帮助软件测试团队更早、更频繁地进行测试。</p><p>它验证 Web 和服务器应用程序的可扩展性，确定系统性能瓶颈的存在和原因，并减少负载测试。</p><p>您的软件测试团队可以快速执行性能测试，分析负载对应用程序的影响。</p><p>ps: 这一款工具有 IBM 提供，质量值得信赖。</p><h1 id="为开发量身定做的性能测试工具" tabindex="-1"><a class="header-anchor" href="#为开发量身定做的性能测试工具"><span>为开发量身定做的性能测试工具</span></a></h1><p>这么多工具可供使用，相信读到这里的小伙伴已经找到了自己心仪的测试工具。</p><p>别急，下面专门为做 java 开发的小伙伴们推荐一款性能测试工具。</p><p>男人有男人的浪漫，开发者当然也要有开发者的浪漫。</p><p>【男人的浪.jpg】</p><h2 id="junitperf" tabindex="-1"><a class="header-anchor" href="#junitperf"><span>junitperf</span></a></h2><p>作为一名开发者，老马平时单元测试使用 junit 最多。</p><p>所以一直希望找到一款基于 junit 的性能压测工具，后来也确实找到了。</p><blockquote><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">https://github.com/houbb/junitperf</a> 是一款为 java 开发者设计的性能测试框架。</p></blockquote><h2 id="为什么使用" tabindex="-1"><a class="header-anchor" href="#为什么使用"><span>为什么使用?</span></a></h2><ul><li><p>可以和 Junit5 完美契合。</p></li><li><p>使用简单，便于项目开发过程中的测试实用。</p></li><li><p>提供拓展，用户可进行自定义开发。</p></li></ul><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li><p>支持 I18N</p></li><li><p>支持多种报告生成方式，支持自定义</p></li><li><p>Junt5 完美支持，便于 Java 开发者使用</p></li></ul><h2 id="使用入门" tabindex="-1"><a class="header-anchor" href="#使用入门"><span>使用入门</span></a></h2><h3 id="maven-引入" tabindex="-1"><a class="header-anchor" href="#maven-引入"><span>maven 引入</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    com.github.houbb</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    junitperf</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    2.0.7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="入门例子" tabindex="-1"><a class="header-anchor" href="#入门例子"><span>入门例子</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">JunitPerfConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">duration</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> helloTest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello Junit5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解说明" tabindex="-1"><a class="header-anchor" href="#注解说明"><span>注解说明</span></a></h3><p><code>@JunitPerfConfig</code> 指定测试时的属性配置。(必填项)</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">threads</td><td style="text-align:left;">执行时使用多少线程执行</td><td style="text-align:left;">int</td><td style="text-align:left;">1</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">warmUp</td><td style="text-align:left;">准备时间</td><td style="text-align:left;">long</td><td style="text-align:left;">0</td><td style="text-align:left;">单位：毫秒</td></tr><tr><td style="text-align:left;">duration</td><td style="text-align:left;">执行时间</td><td style="text-align:left;">long</td><td style="text-align:left;">60_000(1分钟)</td><td style="text-align:left;">单位：毫秒</td></tr><tr><td style="text-align:left;">latencyStatistics</td><td style="text-align:left;">统计实现</td><td style="text-align:left;">StatisticsCalculator</td><td style="text-align:left;">DefaultStatisticsCalculator</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">reporter</td><td style="text-align:left;">报告实现</td><td style="text-align:left;">Reporter</td><td style="text-align:left;">ConsoleReporter</td><td style="text-align:left;"></td></tr></tbody></table><p>使用如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 2个线程运行。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 准备时间：1000ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 运行时间: 2000ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@throws</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> InterruptedException</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> if any</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">JunitPerfConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">threads</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> warmUp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> duration</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2000</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> junitPerfConfigTest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;junitPerfConfigTest&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@JunitPerfRequire</code> 指定测试时需要达到的要求。(选填项)</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">min</td><td style="text-align:left;">最佳的运行耗时</td><td style="text-align:left;">float</td><td style="text-align:left;">-1</td><td style="text-align:left;">最快的运行耗时如果高于这个值，则视为失败。单位：毫秒</td></tr><tr><td style="text-align:left;">max</td><td style="text-align:left;">平均的运行耗时</td><td style="text-align:left;">float</td><td style="text-align:left;">-1</td><td style="text-align:left;">最坏的运行耗时如果高于这个值，则视为失败。单位：毫秒</td></tr><tr><td style="text-align:left;">average</td><td style="text-align:left;">平均的运行耗时</td><td style="text-align:left;">float</td><td style="text-align:left;">-1</td><td style="text-align:left;">平均的运行耗时如果高于这个值，则视为失败。单位：毫秒</td></tr><tr><td style="text-align:left;">timesPerSecond</td><td style="text-align:left;">每秒的最小执行次数</td><td style="text-align:left;">int</td><td style="text-align:left;">0</td><td style="text-align:left;">如果低于这个最小执行次数，则视为失败。</td></tr><tr><td style="text-align:left;">percentiles</td><td style="text-align:left;">对于执行耗时的限定</td><td style="text-align:left;">String[]</td><td style="text-align:left;">{}</td><td style="text-align:left;">percentiles={&quot;20:220&quot;, &quot;30:250&quot;}。20% 的数据执行耗时不得超过 220ms;30% 的数据执行耗时不得超过 250ms;</td></tr></tbody></table><p>使用如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 配置：2个线程运行。准备时间：1000ms。运行时间: 2000ms。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 要求：最快不可低于 210ms, 最慢不得低于 250ms, 平均不得低于 225ms, 每秒运行次数不得低于 4 次。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 20% 的数据不低于 220ms, 50% 的数据不得低于 230ms;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@throws</span><span style="--shiki-light:#C18401;--shiki-light-font-style:italic;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;"> InterruptedException</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> if any</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">JunitPerfConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">threads</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> warmUp</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> duration</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2000</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">JunitPerfRequire</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">min</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 210</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 250</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> average</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 225</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> timesPerSecond</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> percentiles</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;20:220&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;50:230&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> junitPerfConfigTest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;junitPerfConfigTest&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试报告-1" tabindex="-1"><a class="header-anchor" href="#测试报告-1"><span>测试报告</span></a></h2><p>对应的测试报告生成方式也是多样的，也允许用户自定义。</p><p>基于控台日志：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[INFO] [2020-06-16 20:05:53.618] [c.g.h.j.e.HelloWorldTest.helloTest] - Started at:  2020-06-16 20:05:52.512</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.619] [c.g.h.j.e.HelloWorldTest.helloTest] - Invocations:  9</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.620] [c.g.h.j.e.HelloWorldTest.helloTest] - Success:  9</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.620] [c.g.h.j.e.HelloWorldTest.helloTest] - Errors:  0</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.621] [c.g.h.j.e.HelloWorldTest.helloTest] - Thread Count:  1</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.623] [c.g.h.j.e.HelloWorldTest.helloTest] - Warm up:  0ms</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.623] [c.g.h.j.e.HelloWorldTest.helloTest] - Execution time:  1000ms</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.624] [c.g.h.j.e.HelloWorldTest.helloTest] - Throughput:  9/s (Required: -1/s) - PASSED</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.625] [c.g.h.j.e.HelloWorldTest.helloTest] - Memory cost:  16byte</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.635] [c.g.h.j.e.HelloWorldTest.helloTest] - Min latency:  100.191414ms (Required: -1.0ms) - PASSED</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.635] [c.g.h.j.e.HelloWorldTest.helloTest] - Max latency:  105.2382ms (Required: -1.0ms) - PASSED</span></span>
<span class="line"><span>[INFO] [2020-06-16 20:05:53.636] [c.g.h.j.e.HelloWorldTest.helloTest] - Avg latency:  101.43268ms (Required: -1.0ms) - PASSED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者基于 HTML:</p><figure><img src="https://img-blog.csdnimg.cn/b55cae629d514c61a9826940c4a8d53e.png" alt="junitperf" tabindex="0" loading="lazy"><figcaption>junitperf</figcaption></figure><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>本文对性能测试做了最基本的介绍，让小伙伴们对性能压测有一个最基本的理解。</p><p>测试和开发一样，都是一件费时费力，而且需要认真做才能做好的事情，其中的学问不是一篇就能说清的。</p><p>性能测试工具也比较多，本文重点介绍了专门为 java 开发者打造的 junitperf 工具。</p><p>下一节我们将从源码角度，讲解一下 junitperf 的实现原理。</p><p>我是老马，期待与你的下次重逢。</p><p>开源地址：<a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">https://github.com/houbb/junitperf</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://www.cnblogs.com/coolfiry/p/8193768.html" target="_blank" rel="noopener noreferrer">聊聊API网关的作用</a></p><p><a href="https://baike.baidu.com/item/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/1916148" target="_blank" rel="noopener noreferrer">性能测试</a></p><p><a href="https://blog.csdn.net/u012111923/article/details/80705141" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/u012111923/article/details/80705141</a></p>`,141)]))}const d=s(n,[["render",l]]),k=JSON.parse('{"path":"/posts/test/2021-07-23-junit-performance-overview.html","title":"性能测试到底应该怎么做？","lang":"zh-CN","frontmatter":{"title":"性能测试到底应该怎么做？","date":"2021-07-23T00:00:00.000Z","categories":["Test"],"tags":["test","junit","sh"],"published":true,"description":"三高人群 作为一名开发者，我们最常听到的就是编程界的三高： 高性能、高并发、高可用。 听起来非常高大上，但是性能到底如何呢？又该如何评定呢？ 这次我们谈一谈性能测试，看一看到底什么样才叫做高性能。 本文主要从以下几个方面进行讨论。 （1）性能测试是什么？ （2）为什么需要性能测试？ （3）性能测试如何做？ （4）有哪些性能测试的工具 性能测试是什么？ ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/test/2021-07-23-junit-performance-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"性能测试到底应该怎么做？"}],["meta",{"property":"og:description","content":"三高人群 作为一名开发者，我们最常听到的就是编程界的三高： 高性能、高并发、高可用。 听起来非常高大上，但是性能到底如何呢？又该如何评定呢？ 这次我们谈一谈性能测试，看一看到底什么样才叫做高性能。 本文主要从以下几个方面进行讨论。 （1）性能测试是什么？ （2）为什么需要性能测试？ （3）性能测试如何做？ （4）有哪些性能测试的工具 性能测试是什么？ ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/463f331c132d434eb6cc0656960c3961.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能测试到底应该怎么做？\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/463f331c132d434eb6cc0656960c3961.jpg\\",\\"https://img-blog.csdnimg.cn/bf5fce0de3a9450782dcadb5cba0adf5.jpg\\",\\"https://img-blog.csdnimg.cn/0e3b5722771241d09a2f970ee284e445.jpg\\",\\"https://img-blog.csdnimg.cn/b55cae629d514c61a9826940c4a8d53e.png\\"],\\"datePublished\\":\\"2021-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.15,"words":3046},"filePathRelative":"posts/test/2021-07-23-junit-performance-overview.md","localizedDate":"2021年7月23日","excerpt":"\\n<p>作为一名开发者，我们最常听到的就是编程界的三高：</p>\\n<p>高性能、高并发、高可用。</p>\\n<p>听起来非常高大上，但是性能到底如何呢？又该如何评定呢？</p>\\n<p>这次我们谈一谈性能测试，看一看到底什么样才叫做高性能。</p>\\n<p>本文主要从以下几个方面进行讨论。</p>\\n<p>（1）性能测试是什么？</p>\\n<p>（2）为什么需要性能测试？</p>\\n<p>（3）性能测试如何做？</p>\\n<p>（4）有哪些性能测试的工具</p>\\n<h1>性能测试是什么？</h1>\\n<p>老马曾经说过，你想理解一件事物，首先必须先定义它。</p>\\n<p>这里直接引用一下百科中的定义：</p>","autoDesc":true}');export{d as comp,k as data};
