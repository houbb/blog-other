import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o}from"./app-CEDSurVN.js";const n={};function p(i,e){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="随笔" tabindex="-1"><a class="header-anchor" href="#随笔"><span>随笔</span></a></h1><p><a href="https://houbb.github.io/2024/11/22/note-02-he-tech" target="_blank" rel="noopener noreferrer">从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-03-split-apache-calcite" target="_blank" rel="noopener noreferrer">数据源的统一与拆分</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-execute-mearurement" target="_blank" rel="noopener noreferrer">监控报警系统的指标、规则与执行闭环</a></p><p><a href="https://houbb.github.io/2024/11/22/note-05-is-java-so-old" target="_blank" rel="noopener noreferrer">java 老矣，尚能饭否？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-06-lizhi" target="_blank" rel="noopener noreferrer">一骑红尘妃子笑，无人知是荔枝来!</a></p><h1 id="java-老吗" tabindex="-1"><a class="header-anchor" href="#java-老吗"><span>java 老吗？</span></a></h1><p>去年看了一本书，周志华的《凤凰架构》</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>架构演变最重要的驱动力，或者说这种“从大到小”趋势的最根本的驱动力，始终都是为了方便某个服务能够顺利地“死去”与“重生”而设计的，个体服务的生死更迭，是关系到整个系统能否可靠续存的关键因素。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们无法一步到位设计一个最优秀的架构，适合当前的业务，解决具体的问题、持续演进，才是最好的架构。</p><p>就像生物一样，不断适应环境的演化存活下来，才是最成功的。</p><h1 id="成也萧何败萧何" tabindex="-1"><a class="header-anchor" href="#成也萧何败萧何"><span>成也萧何败萧何</span></a></h1><p>工作中基础过一些语言，比如 java / c# / js / go / python</p><p>那么，java 到底老不老呢？</p><p>冗长的语法，令人备受诟病。于是 jdk 奋发图强，半年一个版本，大部分开发者直接学不动...</p><p>java 的口号是【Write Once，Run Anywhere】</p><p>jvm 在设计之初，为了解决跨平台+内存分配问题+性能监控分析优化，功能不可谓不强大；反射作为元数据处理的有力辅助，动态灵活，底层组件爱不释手。</p><p>但是这 2 样最引以为傲的东西，在云时代的近代，恰恰成为了 java 最大的阻碍。</p><p>jvm 导致启动时占用较多的内存，所以类似于日志采集的 agent 就优先考虑 go 之类的轻量实现；动态反射导致 naive-image 的编译困难。</p><p>2018 年 4 月，Oracle Labs 新公开了一项黑科技：Graal VM，口号是【Run Programs Faster Anywhere】</p><p>这是一个在 HotSpot 虚拟机基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用。</p><figure><img src="https://icyfenix.cn/assets/img/grallvm.d917d5ba.png" alt="Graal VM" tabindex="0" loading="lazy"><figcaption>Graal VM</figcaption></figure><p>java 30 年沉浮，尚且脱骨向前，何况你我呢？</p><h2 id="自己" tabindex="-1"><a class="header-anchor" href="#自己"><span>自己</span></a></h2><p>不同的理念，造就了后续完全不同的路径。</p><p>刚毕业的时候，我是前后端都做的，后来发现前端需求改的过于频繁，且【每个人都自己的审美】。</p><p>于是，后续的几年的都偏向于后端，也就是逻辑与流程。</p><p>不过现在，对于产品的认知也在变化。前后端只是分工不同，对于使用者而言，<strong>完整的产品才有意义</strong>。</p><p>我可以不懂前端开发，但是我必须懂得用户的交互、设计、美学，而这恰恰是我非常欠缺的地方。</p><p><strong>技术只是手段，用完整的服务解决用户的问题才是目的</strong>。</p><p>生物的进化是具有趋同性的，优秀的设计与理念值得共同学习。</p><p>愿大家找到属于自己的演化架构，大道千万条，不同的路上有不同的景色；条条大路通罗马，愿我们终将抵达属于自己的最初的目标！</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p><p>我是老马，期待与你的下次相遇。</p><h1 id="随笔-1" tabindex="-1"><a class="header-anchor" href="#随笔-1"><span>随笔</span></a></h1><p><a href="https://houbb.github.io/2024/11/22/note-02-he-tech" target="_blank" rel="noopener noreferrer">从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-03-split-apache-calcite" target="_blank" rel="noopener noreferrer">数据源的统一与拆分</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-execute-mearurement" target="_blank" rel="noopener noreferrer">监控报警系统的指标、规则与执行闭环</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-items" target="_blank" rel="noopener noreferrer">我们的系统应该配置哪些监控报警项？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-items-self-monitor" target="_blank" rel="noopener noreferrer">监控报警系统如何实现自监控?</a></p><p><a href="https://houbb.github.io/2024/11/22/note-05-is-java-so-old" target="_blank" rel="noopener noreferrer">java 老矣，尚能饭否？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-06-lizhi" target="_blank" rel="noopener noreferrer">一骑红尘妃子笑，无人知是荔枝来!</a></p><p><a href="https://houbb.github.io/2024/11/22/note-07-zhangjuzheng-kaochengfa" target="_blank" rel="noopener noreferrer">张居正的考成法，对我们有何参考价值？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-08-visual" target="_blank" rel="noopener noreferrer">mongodb/redis/neo4j 如何自己打造一个 web 数据库可视化客户端？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-09-devops-how-to-go" target="_blank" rel="noopener noreferrer">DevOps 平台越发展，开发运维越快失业？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-10-opensource-way" target="_blank" rel="noopener noreferrer">开源如何健康长久的发展</a></p><p><a href="https://houbb.github.io/2024/11/22/note-11-pipeline" target="_blank" rel="noopener noreferrer">为什么会有流水线？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-12-positive-negative" target="_blank" rel="noopener noreferrer">既然选择了远方 便只顾风雨兼程</a></p><p><a href="https://houbb.github.io/2024/11/22/note-13-bank-profit" target="_blank" rel="noopener noreferrer">银行是如何挣钱的？</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>',51)]))}const l=t(n,[["render",p]]),b=JSON.parse('{"path":"/posts/Note/2024-11-23-note-05-is-java-so-old.html","title":"java 老矣，尚能饭否？","lang":"zh-CN","frontmatter":{"title":"java 老矣，尚能饭否？","date":"2024-11-23T00:00:00.000Z","categories":["Note"],"tags":["note","sh"],"published":true,"description":"随笔 从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？ 数据源的统一与拆分 监控报警系统的指标、规则与执行闭环 java 老矣，尚能饭否？ 一骑红尘妃子笑，无人知是荔枝来! java 老吗？ 去年看了一本书，周志华的《凤凰架构》 我们无法一步到位设计一个最优秀的架构，适合当前的业务，解决具体的问题、持续演进，才是最好的架构。 就像生物一样，不...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Note/2024-11-23-note-05-is-java-so-old.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"java 老矣，尚能饭否？"}],["meta",{"property":"og:description","content":"随笔 从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？ 数据源的统一与拆分 监控报警系统的指标、规则与执行闭环 java 老矣，尚能饭否？ 一骑红尘妃子笑，无人知是荔枝来! java 老吗？ 去年看了一本书，周志华的《凤凰架构》 我们无法一步到位设计一个最优秀的架构，适合当前的业务，解决具体的问题、持续演进，才是最好的架构。 就像生物一样，不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://icyfenix.cn/assets/img/grallvm.d917d5ba.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"note"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2024-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java 老矣，尚能饭否？\\",\\"image\\":[\\"https://icyfenix.cn/assets/img/grallvm.d917d5ba.png\\"],\\"datePublished\\":\\"2024-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.91,"words":1172},"filePathRelative":"posts/Note/2024-11-23-note-05-is-java-so-old.md","localizedDate":"2024年11月23日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2024/11/22/note-02-he-tech\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？</a></p>\\n<p><a href=\\"https://houbb.github.io/2024/11/22/note-03-split-apache-calcite\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据源的统一与拆分</a></p>\\n<p><a href=\\"https://houbb.github.io/2024/11/22/note-04-indicator-rule-execute-mearurement\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">监控报警系统的指标、规则与执行闭环</a></p>","autoDesc":true}');export{l as comp,b as data};
