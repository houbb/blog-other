import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CEDSurVN.js";const e={};function r(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2016/04/26/test-perf-01-jmeter" target="_blank" rel="noopener noreferrer">Apache jmeter</a></p><p><a href="https://houbb.github.io/2016/04/26/test-perf-02-loadrunner" target="_blank" rel="noopener noreferrer">LoadRunner</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-overview" target="_blank" rel="noopener noreferrer">性能测试到底应该怎么做？</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit4" target="_blank" rel="noopener noreferrer">junit4 90% 的人都不知道的特性，详解 junitperf 的实现原理</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-jmh" target="_blank" rel="noopener noreferrer">Benchmark 性能测试框架 JMH</a></p><p><a href="https://houbb.github.io/2019/04/01/test-tool-wrk" target="_blank" rel="noopener noreferrer">WRK-测试利器</a></p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下性能测试" tabindex="-1"><a class="header-anchor" href="#详细介绍一下性能测试"><span>详细介绍一下性能测试</span></a></h2><p>性能测试是软件测试的一种类型，旨在评估系统、应用程序或服务在特定负载和条件下的性能表现。</p><p>性能测试的目标是确保系统在不同压力下能够满足用户需求，同时保持稳定性和可靠性。以下是性能测试的一些重要方面和方法：</p><h3 id="_1-性能测试的类型" tabindex="-1"><a class="header-anchor" href="#_1-性能测试的类型"><span>1. <strong>性能测试的类型：</strong></span></a></h3><h4 id="_1-1-负载测试-load-testing" tabindex="-1"><a class="header-anchor" href="#_1-1-负载测试-load-testing"><span>1.1 <strong>负载测试（Load Testing）：</strong></span></a></h4><ul><li><strong>目的：</strong> 评估系统在正常负载下的性能。</li><li><strong>特点：</strong> 增加并发用户数，观察系统响应时间、吞吐量等指标。</li></ul><h4 id="_1-2-压力测试-stress-testing" tabindex="-1"><a class="header-anchor" href="#_1-2-压力测试-stress-testing"><span>1.2 <strong>压力测试（Stress Testing）：</strong></span></a></h4><ul><li><strong>目的：</strong> 评估系统在极限负载下的性能。</li><li><strong>特点：</strong> 将系统推向其极限，观察系统在极端条件下的表现，检测系统的崩溃点。</li></ul><h4 id="_1-3-耐久性测试-endurance-testing" tabindex="-1"><a class="header-anchor" href="#_1-3-耐久性测试-endurance-testing"><span>1.3 <strong>耐久性测试（Endurance Testing）：</strong></span></a></h4><ul><li><strong>目的：</strong> 评估系统在持续负载下的性能。</li><li><strong>特点：</strong> 持续一段时间的负载，检测系统在长时间运行后是否存在性能退化。</li></ul><h4 id="_1-4-并发测试-concurrency-testing" tabindex="-1"><a class="header-anchor" href="#_1-4-并发测试-concurrency-testing"><span>1.4 <strong>并发测试（Concurrency Testing）：</strong></span></a></h4><ul><li><strong>目的：</strong> 评估系统在多个用户同时操作下的性能。</li><li><strong>特点：</strong> 同时模拟多个用户执行相同或不同的操作，观察系统的响应。</li></ul><h4 id="_1-5-配置测试-configuration-testing" tabindex="-1"><a class="header-anchor" href="#_1-5-配置测试-configuration-testing"><span>1.5 <strong>配置测试（Configuration Testing）：</strong></span></a></h4><ul><li><strong>目的：</strong> 评估系统在不同硬件、网络配置下的性能。</li><li><strong>特点：</strong> 模拟不同配置的环境，检查系统在这些配置下的表现。</li></ul><h3 id="_2-性能测试的关键指标" tabindex="-1"><a class="header-anchor" href="#_2-性能测试的关键指标"><span>2. <strong>性能测试的关键指标：</strong></span></a></h3><h4 id="_2-1-响应时间-response-time" tabindex="-1"><a class="header-anchor" href="#_2-1-响应时间-response-time"><span>2.1 <strong>响应时间（Response Time）：</strong></span></a></h4><ul><li>衡量从发送请求到接收到响应所花费的时间。</li></ul><h4 id="_2-2-吞吐量-throughput" tabindex="-1"><a class="header-anchor" href="#_2-2-吞吐量-throughput"><span>2.2 <strong>吞吐量（Throughput）：</strong></span></a></h4><ul><li>衡量系统在单位时间内处理的请求数量。</li></ul><h4 id="_2-3-并发用户数-concurrency-load-level" tabindex="-1"><a class="header-anchor" href="#_2-3-并发用户数-concurrency-load-level"><span>2.3 <strong>并发用户数（Concurrency/Load Level）：</strong></span></a></h4><ul><li>同时访问系统的用户数量。</li></ul><h4 id="_2-4-资源利用率-resource-utilization" tabindex="-1"><a class="header-anchor" href="#_2-4-资源利用率-resource-utilization"><span>2.4 <strong>资源利用率（Resource Utilization）：</strong></span></a></h4><ul><li>CPU、内存、磁盘等资源的利用率。</li></ul><h4 id="_2-5-错误率-error-rate" tabindex="-1"><a class="header-anchor" href="#_2-5-错误率-error-rate"><span>2.5 <strong>错误率（Error Rate）：</strong></span></a></h4><ul><li>请求失败或产生错误的百分比。</li></ul><h3 id="_3-性能测试的步骤" tabindex="-1"><a class="header-anchor" href="#_3-性能测试的步骤"><span>3. <strong>性能测试的步骤：</strong></span></a></h3><h4 id="_3-1-制定测试计划" tabindex="-1"><a class="header-anchor" href="#_3-1-制定测试计划"><span>3.1 <strong>制定测试计划：</strong></span></a></h4><ul><li>定义测试的目标、范围、测试环境和测试数据。</li></ul><h4 id="_3-2-设计测试场景" tabindex="-1"><a class="header-anchor" href="#_3-2-设计测试场景"><span>3.2 <strong>设计测试场景：</strong></span></a></h4><ul><li>确定要模拟的用户行为、负载模型和业务流程。</li></ul><h4 id="_3-3-设置测试环境" tabindex="-1"><a class="header-anchor" href="#_3-3-设置测试环境"><span>3.3 <strong>设置测试环境：</strong></span></a></h4><ul><li>部署系统、配置测试工具、准备测试数据。</li></ul><h4 id="_3-4-执行测试" tabindex="-1"><a class="header-anchor" href="#_3-4-执行测试"><span>3.4 <strong>执行测试：</strong></span></a></h4><ul><li>执行设计的测试场景，监控关键性能指标。</li></ul><h4 id="_3-5-收集和分析结果" tabindex="-1"><a class="header-anchor" href="#_3-5-收集和分析结果"><span>3.5 <strong>收集和分析结果：</strong></span></a></h4><ul><li>收集测试结果，分析性能数据，识别性能瓶颈。</li></ul><h4 id="_3-6-优化和重新测试" tabindex="-1"><a class="header-anchor" href="#_3-6-优化和重新测试"><span>3.6 <strong>优化和重新测试：</strong></span></a></h4><ul><li>根据分析结果进行系统优化，然后重新执行性能测试。</li></ul><h3 id="_4-性能测试工具" tabindex="-1"><a class="header-anchor" href="#_4-性能测试工具"><span>4. <strong>性能测试工具：</strong></span></a></h3><h4 id="_4-1-apache-jmeter" tabindex="-1"><a class="header-anchor" href="#_4-1-apache-jmeter"><span>4.1 <strong>Apache JMeter：</strong></span></a></h4><ul><li>用于模拟多用户并发访问的开源性能测试工具。</li></ul><h4 id="_4-2-loadrunner" tabindex="-1"><a class="header-anchor" href="#_4-2-loadrunner"><span>4.2 <strong>LoadRunner：</strong></span></a></h4><ul><li>由Micro Focus提供，支持多种协议，用于负载和性能测试。</li></ul><h4 id="_4-3-gatling" tabindex="-1"><a class="header-anchor" href="#_4-3-gatling"><span>4.3 <strong>Gatling：</strong></span></a></h4><ul><li>基于Scala编写的开源性能测试工具，适用于轻量级负载测试。</li></ul><h4 id="_4-4-locust" tabindex="-1"><a class="header-anchor" href="#_4-4-locust"><span>4.4 <strong>Locust：</strong></span></a></h4><ul><li>用Python编写的开源性能测试工具，支持分布式负载测试。</li></ul><h3 id="_5-性能测试的挑战" tabindex="-1"><a class="header-anchor" href="#_5-性能测试的挑战"><span>5. <strong>性能测试的挑战：</strong></span></a></h3><h4 id="_5-1-真实性" tabindex="-1"><a class="header-anchor" href="#_5-1-真实性"><span>5.1 <strong>真实性：</strong></span></a></h4><ul><li>如何模拟真实用户的行为和环境。</li></ul><h4 id="_5-2-可伸缩性" tabindex="-1"><a class="header-anchor" href="#_5-2-可伸缩性"><span>5.2 <strong>可伸缩性：</strong></span></a></h4><ul><li>能否在增加负载时保持系统的性能。</li></ul><h4 id="_5-3-环境复杂性" tabindex="-1"><a class="header-anchor" href="#_5-3-环境复杂性"><span>5.3 <strong>环境复杂性：</strong></span></a></h4><ul><li>测试环境和真实生产环境的差异。</li></ul><h4 id="_5-4-测试数据的准备" tabindex="-1"><a class="header-anchor" href="#_5-4-测试数据的准备"><span>5.4 <strong>测试数据的准备：</strong></span></a></h4><ul><li>如何准备具有代表性的测试数据。</li></ul><p>性能测试是确保软件系统能够满足用户需求的关键步骤，通过模拟各种使用情况，发现潜在问题并改进系统性能。</p><h2 id="常见的类似-apache-jmeter-的性能压测开源工具有哪些" tabindex="-1"><a class="header-anchor" href="#常见的类似-apache-jmeter-的性能压测开源工具有哪些"><span>常见的类似 apache jmeter 的性能压测开源工具有哪些？</span></a></h2><p>除了Apache JMeter之外，还有一些其他开源的性能测试和负载测试工具可供选择。以下是一些常见的类似JMeter的性能压测开源工具：</p><ol><li><p><strong>Gatling:</strong></p><ul><li><strong>语言：</strong> Scala</li><li><strong>特点：</strong> 基于异步非阻塞的设计，适用于轻量级和高并发场景。支持DSL（领域特定语言）进行测试脚本编写。</li></ul></li><li><p><strong>Locust:</strong></p><ul><li><strong>语言：</strong> Python</li><li><strong>特点：</strong> 分布式负载测试工具，使用Python编写，具有简洁的脚本编写方式。易于学习和使用。</li></ul></li><li><p><strong>Tsung:</strong></p><ul><li><strong>语言：</strong> Erlang</li><li><strong>特点：</strong> 分布式负载测试工具，支持HTTP、WebDAV、SOAP、WebSocket等协议。使用XML进行测试场景配置。</li></ul></li><li><p><strong>Artillery:</strong></p><ul><li><strong>语言：</strong> JavaScript</li><li><strong>特点：</strong> 现代的负载测试工具，使用JavaScript编写测试脚本，支持HTTP、WebSocket等协议。可通过插件扩展功能。</li></ul></li><li><p><strong>Vegeta:</strong></p><ul><li><strong>语言：</strong> Go</li><li><strong>特点：</strong> 简单而高效的负载测试工具，使用Go编写。适用于快速的HTTP性能测试。</li></ul></li><li><p><strong>Siege:</strong></p><ul><li><strong>语言：</strong> C</li><li><strong>特点：</strong> 轻量级的HTTP负载测试工具，支持并发请求、事务计数等。使用C编写，适用于基本的性能测试需求。</li></ul></li><li><p><strong>K6:</strong></p><ul><li><strong>语言：</strong> JavaScript</li><li><strong>特点：</strong> 现代负载测试工具，支持JavaScript脚本编写，可以在本地或云端执行。适用于开发者进行性能测试。</li></ul></li><li><p><strong>Locust:</strong></p><ul><li><strong>语言：</strong> Python</li><li><strong>特点：</strong> 分布式负载测试工具，使用Python编写，具有简洁的脚本编写方式。易于学习和使用。</li></ul></li></ol><p>这些工具各有特点，选择取决于具体的测试需求、团队技能和项目特点。</p><p>它们可以用于模拟不同协议、处理各种负载，并提供详细的测试结果和报告，帮助开发人员和测试人员评估系统的性能。</p><h2 id="如果是-java-语言-类似-apache-jmeter-的性能压测开源工具有哪些" tabindex="-1"><a class="header-anchor" href="#如果是-java-语言-类似-apache-jmeter-的性能压测开源工具有哪些"><span>如果是 java 语言，类似 apache jmeter 的性能压测开源工具有哪些？</span></a></h2><p>如果你使用Java语言，并且希望找到类似Apache JMeter的性能压测工具，有一些专注于Java的工具可供选择。以下是一些在Java生态系统中流行的性能测试工具：</p><ol><li><p><strong>Apache JMeter:</strong></p><ul><li><strong>特点：</strong> 面向Java开发者，支持多种协议，图形用户界面易于使用。</li></ul></li><li><p><strong>Gatling:</strong></p><ul><li><strong>特点：</strong> 基于Scala编写，但可以用于Java。具有异步和事件驱动的设计，适用于高并发场景。</li></ul></li><li><p><strong>Apache Benchmark (ab):</strong></p><ul><li><strong>特点：</strong> Apache软件基金会的工具，用于测试Apache HTTP服务器性能。通过命令行使用。</li></ul></li><li><p><strong>Grinder:</strong></p><ul><li><strong>特点：</strong> 使用Jython或Clojure编写脚本，分布式负载测试工具，适用于测试Java应用程序。</li></ul></li><li><p><strong>Tsung:</strong></p><ul><li><strong>特点：</strong> 使用Erlang编写，支持分布式测试。适用于HTTP、WebDAV、SOAP、WebSocket等协议。</li></ul></li><li><p><strong>Artillery:</strong></p><ul><li><strong>特点：</strong> 使用JavaScript编写，支持HTTP、WebSocket等协议。现代且可扩展的负载测试工具。</li></ul></li><li><p><strong>K6:</strong></p><ul><li><strong>特点：</strong> 使用JavaScript编写，支持本地和云端执行。适用于开发者进行性能测试。</li></ul></li></ol><p>这些工具都有各自的特点和优势，你可以根据项目需求、团队技能以及工具的适用性进行选择。</p><p>无论选择哪个工具，都需要根据具体场景和目标进行适当的配置和调整。</p><h2 id="对比表格" tabindex="-1"><a class="header-anchor" href="#对比表格"><span>对比表格</span></a></h2><p>下面是包含Apache JMeter在内的一些性能测试工具的简要对比表格：</p><table><thead><tr><th><strong>特性/工具</strong></th><th><strong>Apache JMeter</strong></th><th><strong>Gatling</strong></th><th><strong>Apache Benchmark (ab)</strong></th><th><strong>Tsung</strong></th><th><strong>Locust</strong></th><th><strong>Artillery</strong></th></tr></thead><tbody><tr><td><strong>编写语言</strong></td><td>Java</td><td>Scala (支持 Java DSL)</td><td>C</td><td>Erlang</td><td>Python</td><td>JavaScript</td></tr><tr><td><strong>协议支持</strong></td><td>多种协议（HTTP, HTTPS, FTP, JDBC等）</td><td>HTTP, HTTPS, WebSocket</td><td>HTTP</td><td>HTTP, WebDAV, SOAP, PostgreSQL</td><td>HTTP, WebSocket</td><td>HTTP, WebSocket</td></tr><tr><td><strong>分布式测试</strong></td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td><strong>脚本语法</strong></td><td>GUI、JMX 文件、支持 BeanShell 脚本</td><td>DSL (Domain-Specific Language)</td><td>命令行参数</td><td>XML</td><td>Python</td><td>YAML/JavaScript</td></tr><tr><td><strong>易用性</strong></td><td>相对复杂，GUI 提供图形化界面</td><td>相对复杂，学习曲线较陡</td><td>简单，适用于基本测试</td><td>适中</td><td>简单</td><td>适中</td></tr><tr><td><strong>社区支持</strong></td><td>大</td><td>较大</td><td>大</td><td>适中</td><td>不错</td><td>适中</td></tr><tr><td><strong>可扩展性</strong></td><td>非常高，支持插件系统</td><td>非常高，支持自定义插件</td><td>有限</td><td>有限</td><td>适中</td><td>中等</td></tr></tbody></table><p>这个对比表格提供了一些常见的特性和优缺点。在选择性能测试工具时，建议根据您的具体需求、团队技能和项目背景来进行更详细的比较。</p><h2 id="介绍一下-java-microbenchmark-harness-jmh" tabindex="-1"><a class="header-anchor" href="#介绍一下-java-microbenchmark-harness-jmh"><span>介绍一下 Java Microbenchmark Harness (JMH)</span></a></h2><p>Java Microbenchmark Harness（JMH）是一款由OpenJDK（Java开发工具包的开源实现）提供的微基准测试框架。</p><p>JMH旨在帮助Java开发者编写和执行精准、可靠的微基准测试，用于度量Java代码片段的性能。</p><p>以下是关于JMH的一些重要信息：</p><h3 id="_1-特点和目的" tabindex="-1"><a class="header-anchor" href="#_1-特点和目的"><span>1. <strong>特点和目的：</strong></span></a></h3><ul><li><p><strong>准确性：</strong> JMH专注于提供准确的测量结果，避免一些常见的微基准测试陷阱。</p></li><li><p><strong>隔离性：</strong> JMH尽量确保测试的隔离性，避免外部因素对测试结果的影响。</p></li><li><p><strong>统计学分析：</strong> JMH提供统计学分析，以便更好地理解和解释测试结果。</p></li><li><p><strong>丰富的测试选项：</strong> JMH支持丰富的测试选项，例如迭代次数、线程数、预热阶段等，以满足不同测试需求。</p></li></ul><h3 id="_2-使用方法" tabindex="-1"><a class="header-anchor" href="#_2-使用方法"><span>2. <strong>使用方法：</strong></span></a></h3><h4 id="_2-1-注解" tabindex="-1"><a class="header-anchor" href="#_2-1-注解"><span>2.1 <strong>注解：</strong></span></a></h4><p>JMH使用注解来标记测试方法和基准测试类。例如，<code>@Benchmark</code>注解用于标记基准测试方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> myBenchmark</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Benchmark code here</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-模式-mode" tabindex="-1"><a class="header-anchor" href="#_2-2-模式-mode"><span>2.2 <strong>模式（Mode）：</strong></span></a></h4><p>JMH支持多种模式，例如<code>Throughput</code>（吞吐量）、<code>AverageTime</code>（平均执行时间）、<code>SampleTime</code>（采样时间）等，用于测量不同方面的性能。</p><h4 id="_2-3-选项-options" tabindex="-1"><a class="header-anchor" href="#_2-3-选项-options"><span>2.3 <strong>选项（Options）：</strong></span></a></h4><p>JMH提供丰富的选项，包括迭代次数、线程数、预热阶段等，以便更灵活地配置测试环境。</p><h4 id="_2-4-运行" tabindex="-1"><a class="header-anchor" href="#_2-4-运行"><span>2.4 <strong>运行：</strong></span></a></h4><p>可以使用JMH的命令行工具或通过Maven插件来运行测试。JMH会生成详细的测试报告，包括各种统计信息和分析结果。</p><h3 id="_3-示例代码" tabindex="-1"><a class="header-anchor" href="#_3-示例代码"><span>3. <strong>示例代码：</strong></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.openjdk.jmh.annotations.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyBenchmark</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> baseline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Baseline measurement</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> measure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RunnerException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Options</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> opt</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OptionsBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyBenchmark</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSimpleName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Runner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(opt).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-集成到maven项目中" tabindex="-1"><a class="header-anchor" href="#_4-集成到maven项目中"><span>4. <strong>集成到Maven项目中：</strong></span></a></h3><p>可以通过Maven插件集成JMH到Maven项目中，方便执行测试。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            org.openjdk.jmh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            jmh-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            1.32</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-参考资源" tabindex="-1"><a class="header-anchor" href="#_5-参考资源"><span>5. <strong>参考资源：</strong></span></a></h3><ul><li><a href="https://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener noreferrer">JMH官方网站</a></li><li><a href="https://github.com/openjdk/jmh" target="_blank" rel="noopener noreferrer">JMH GitHub仓库</a></li></ul><p>JMH是一个强大的工具，尤其适用于需要精确测量和分析Java代码性能的场景。通过使用JMH，开发者可以更准确地了解和比较不同代码实现的性能，以便进行优化和改进。</p><h2 id="类似-java-jmh-的压测开源框架有哪些" tabindex="-1"><a class="header-anchor" href="#类似-java-jmh-的压测开源框架有哪些"><span>类似 java JMH 的压测开源框架有哪些？</span></a></h2><p>除了Java Microbenchmark Harness (JMH)之外，还有一些其他类似的性能测试和压测开源框架，每个框架都有其独特的特点和适用场景。以下是一些常见的类似JMH的压测开源框架：</p><ol><li><p><strong>Apache Benchmark (ab):</strong></p><ul><li><strong>语言：</strong> C</li><li><strong>特点：</strong> Apache软件基金会的工具，用于测试HTTP服务器性能。通过命令行使用，适用于简单的HTTP性能测试。</li></ul></li><li><p><strong>Vegeta:</strong></p><ul><li><strong>语言：</strong> Go</li><li><strong>特点：</strong> 简单而高效的负载测试工具，支持HTTP。使用Go编写，适用于快速的HTTP性能测试。</li></ul></li><li><p><strong>Hey:</strong></p><ul><li><strong>语言：</strong> Go</li><li><strong>特点：</strong> 另一个用Go编写的HTTP性能测试工具，具有简单的命令行接口。</li></ul></li><li><p><strong>Tsung:</strong></p><ul><li><strong>语言：</strong> Erlang</li><li><strong>特点：</strong> 分布式负载测试工具，支持多种协议，包括HTTP、WebDAV、SOAP、WebSocket等。</li></ul></li><li><p><strong>Locust:</strong></p><ul><li><strong>语言：</strong> Python</li><li><strong>特点：</strong> 分布式负载测试工具，使用Python编写，支持通过代码定义用户行为。</li></ul></li><li><p><strong>Artillery:</strong></p><ul><li><strong>语言：</strong> JavaScript</li><li><strong>特点：</strong> 现代的负载测试工具，使用JavaScript编写，支持HTTP、WebSocket等协议。可通过插件扩展功能。</li></ul></li><li><p><strong>k6:</strong></p><ul><li><strong>语言：</strong> JavaScript</li><li><strong>特点：</strong> 现代负载测试工具，使用JavaScript编写，支持本地和云端执行。适用于开发者进行性能测试。</li></ul></li><li><p><strong>Wrk:</strong></p><ul><li><strong>语言：</strong> C</li><li><strong>特点：</strong> 高性能HTTP压测工具，使用Lua脚本配置。适用于HTTP性能测试。</li></ul></li></ol><p>这些工具可以根据具体的需求和技术栈选择。有些工具可能更适合特定的协议或场景，而有些则可能更通用。</p><p>根据项目的具体情况，可以选择合适的工具进行性能测试和压测。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>chat</p>`,112)]))}const o=i(e,[["render",r]]),d=JSON.parse('{"path":"/posts/tests/2016-04-26-test-perf-00-overview.html","title":"test perf-00-性能测试概览 overview","lang":"zh-CN","frontmatter":{"title":"test perf-00-性能测试概览 overview","date":"2016-04-26T00:00:00.000Z","categories":["Java"],"tags":["java","performance","test"],"published":true,"description":"拓展阅读 Apache jmeter LoadRunner Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 性能测试到底应该怎么做？ 基于 junit5 实现 junitperf 源码分析 junit4 90% 的人都不知道的特性，详解 junitperf...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-perf-00-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test perf-00-性能测试概览 overview"}],["meta",{"property":"og:description","content":"拓展阅读 Apache jmeter LoadRunner Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 性能测试到底应该怎么做？ 基于 junit5 实现 junitperf 源码分析 junit4 90% 的人都不知道的特性，详解 junitperf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"performance"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test perf-00-性能测试概览 overview\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.49,"words":3146},"filePathRelative":"posts/tests/2016-04-26-test-perf-00-overview.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/04/26/test-perf-01-jmeter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Apache jmeter</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/04/26/test-perf-02-loadrunner\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LoadRunner</a></p>\\n<p><a href=\\"https://github.com/houbb/junitperf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p>","autoDesc":true}');export{o as comp,d as data};
