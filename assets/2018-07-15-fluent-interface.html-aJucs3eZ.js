import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="fluent-接口-链式调用" tabindex="-1"><a class="header-anchor" href="#fluent-接口-链式调用"><span>Fluent 接口(链式调用)</span></a></h1><p>自从Martin Fowler谈到fluent接口以来，人们就开始到处都有链接方法，为每个可能的用例创建fluent API(或dsl)。<br> 原则上，几乎所有类型的 <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">DSL</a> 都可以映射到Java。</p><p>让我们来看看如何做到这一点。</p><h1 id="dsl-rules" tabindex="-1"><a class="header-anchor" href="#dsl-rules"><span>DSL rules</span></a></h1><p>DSL(领域特定语言)通常是由大致类似于这些的规则构建的:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. SINGLE-WORD</span></span>
<span class="line"><span>2. PARAMETERISED-WORD parameter</span></span>
<span class="line"><span>3. WORD1 [ OPTIONAL-WORD ]</span></span>
<span class="line"><span>4. WORD2 { WORD-CHOICE-A | WORD-CHOICE-B }</span></span>
<span class="line"><span>5. WORD3 [ , WORD3 ... ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/design/2018-07-16-grammar.png" alt="2018-07-16-grammar.png" tabindex="0" loading="lazy"><figcaption>2018-07-16-grammar.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Grammar  ::= &#39;SINGLE-WORD&#39;</span></span>
<span class="line"><span>           | &#39;PARAMETERISED-WORD&#39; &#39;(&#39; [A-Z]+ &#39;)&#39;</span></span>
<span class="line"><span>           | &#39;WORD1&#39; &#39;OPTIONAL-WORD&#39;?</span></span>
<span class="line"><span>           | &#39;WORD2&#39; ( &#39;WORD-CHOICE-A&#39; | &#39;WORD-CHOICE-B&#39; )</span></span>
<span class="line"><span>           | &#39;WORD3&#39;+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="java-实现" tabindex="-1"><a class="header-anchor" href="#java-实现"><span>Java 实现</span></a></h1><p>使用Java接口，对上述DSL进行建模非常简单。从本质上讲，你必须遵循以下转换规则:</p><ul><li><p>每个DSL“关键字”都变成了一个Java方法。</p></li><li><p>每一个DSL“连接”都成为一个接口</p></li><li><p>当您有一个“强制”选择(您不能跳过下一个关键字)时，该选择的每个关键字都是当前接口中的一个方法。如果只有一个关键字是可能的，那么只有一个方法</p></li><li><p>当您有一个“可选”关键字时，当前接口扩展下一个关键字/方法</p></li><li><p>当您有一个“重复”的关键字时，表示可重复关键字的方法将返回接口本身，而不是下一个接口。</p></li><li><p>每个DSL子定义都成为一个参数。这将允许递归性</p></li></ul><p>注意，也可以使用类而不是接口对上述DSL进行建模。<br> 但是，只要您希望重用类似的关键字，方法的多重继承就会非常方便，而且使用接口可能会更好。</p><p>通过设置这些规则，您可以随意重复它们来创建任意复杂的dsl，比如jOOQ。当然，您必须以某种方式实现所有接口，但这是另一回事。</p><p>以下是上述规则如何翻译成Java:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Initial interface, entry point of the DSL</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Depending on your DSL&#39;s nature, this can also be a class with static</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// methods which can be static imported making your DSL even more fluent</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  End</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singleWord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  End</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> parameterisedWord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> parameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Intermediate1</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> word1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Intermediate2</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> word2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Intermediate3</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Terminating interface, might also contain methods like execute();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> End</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Intermediate DSL &quot;step&quot; extending the interface that is returned</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// by optionalWord(), to make that method &quot;optional&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Intermediate1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> End</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  End</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> optionalWord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Intermediate DSL &quot;step&quot; providing several choices (similar to Start)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Intermediate2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  End</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> wordChoiceA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  End</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> wordChoiceB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Intermediate interface returning itself on word3(), in order to allow</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// for repetitions. Repetitions can be ended any time because this </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// interface extends End</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Intermediate3</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> End</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Intermediate3</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的语法定义，我们现在可以直接在Java中使用这个DSL。以下是所有可能的结构:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Start</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> start </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singleWord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parameterisedWord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">optionalWord</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wordChoiceA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wordChoiceB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">word3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><p>在过去的7年里，Fluent-Api 一直是一种炒作。</p><p>马丁·福勒(Martin Fowler)已经成为一个被大量引用的人，并获得了大部分的学分，即使之前有流利的api。</p><p>在Java .lang中可以看到Java最古老的“fluent api”之一。</p><p>StringBuffer，允许将任意对象附加到字符串中。但是fluent API最大的好处是能够轻松地将“外部dsl”映射到Java中，并将其实现为任意复杂度的“内部dsl”。</p><h1 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h1><p><a href="https://martinfowler.com/bliki/FluentInterface.html" target="_blank" rel="noopener noreferrer">FluentInterface</a></p><p><a href="https://blog.jooq.org/2012/01/05/the-java-fluent-api-designer-crash-course/" target="_blank" rel="noopener noreferrer">the-java-fluent-api-designer-crash-course</a></p>`,25)]))}const k=s(l,[["render",t]]),d=JSON.parse('{"path":"/posts/Design/2018-07-15-fluent-interface.html","title":"Fluent Interface","lang":"zh-CN","frontmatter":{"title":"Fluent Interface","date":"2018-07-16T00:00:00.000Z","categories":["Design"],"tags":["design"],"published":true,"description":"Fluent 接口(链式调用) 自从Martin Fowler谈到fluent接口以来，人们就开始到处都有链接方法，为每个可能的用例创建fluent API(或dsl)。 原则上，几乎所有类型的 DSL 都可以映射到Java。 让我们来看看如何做到这一点。 DSL rules DSL(领域特定语言)通常是由大致类似于这些的规则构建的: 2018-07-...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Design/2018-07-15-fluent-interface.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Fluent Interface"}],["meta",{"property":"og:description","content":"Fluent 接口(链式调用) 自从Martin Fowler谈到fluent接口以来，人们就开始到处都有链接方法，为每个可能的用例创建fluent API(或dsl)。 原则上，几乎所有类型的 DSL 都可以映射到Java。 让我们来看看如何做到这一点。 DSL rules DSL(领域特定语言)通常是由大致类似于这些的规则构建的: 2018-07-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/houbb/resource/master/img/design/2018-07-16-grammar.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:published_time","content":"2018-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Fluent Interface\\",\\"image\\":[\\"https://raw.githubusercontent.com/houbb/resource/master/img/design/2018-07-16-grammar.png\\"],\\"datePublished\\":\\"2018-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"posts/Design/2018-07-15-fluent-interface.md","localizedDate":"2018年7月16日","excerpt":"\\n<p>自从Martin Fowler谈到fluent接口以来，人们就开始到处都有链接方法，为每个可能的用例创建fluent API(或dsl)。<br>\\n原则上，几乎所有类型的 <a href=\\"https://en.wikipedia.org/wiki/Domain-specific_language\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">DSL</a> 都可以映射到Java。</p>\\n<p>让我们来看看如何做到这一点。</p>\\n<h1>DSL rules</h1>\\n<p>DSL(领域特定语言)通常是由大致类似于这些的规则构建的:</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>1. SINGLE-WORD</span></span>\\n<span class=\\"line\\"><span>2. PARAMETERISED-WORD parameter</span></span>\\n<span class=\\"line\\"><span>3. WORD1 [ OPTIONAL-WORD ]</span></span>\\n<span class=\\"line\\"><span>4. WORD2 { WORD-CHOICE-A | WORD-CHOICE-B }</span></span>\\n<span class=\\"line\\"><span>5. WORD3 [ , WORD3 ... ]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,d as data};
