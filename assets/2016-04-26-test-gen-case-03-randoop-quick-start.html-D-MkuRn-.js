import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-CEDSurVN.js";const t={};function l(p,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><blockquote><p><a href="https://houbb.github.io/2018/06/24/junit5-01-hello" target="_blank" rel="noopener noreferrer">junit5 系列</a></p></blockquote><blockquote><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p></blockquote><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><h1 id="拓展阅读-1" tabindex="-1"><a class="header-anchor" href="#拓展阅读-1"><span>拓展阅读</span></a></h1><p><a href="https://github.com/houbb/evosuite-learn" target="_blank" rel="noopener noreferrer">自动生成测试用例</a></p><h1 id="randoop" tabindex="-1"><a class="header-anchor" href="#randoop"><span>Randoop</span></a></h1><p>Randoop是用于Java的单元测试生成器，它可以自动为你的类创建JUnit格式的单元测试。</p><p>Randoop手册详细说明了如何安装和运行Randoop。</p><p>Randoop的工作原理是通过反馈导向的随机测试生成。</p><p>这种技术会为被测试类伪随机但智能地生成一系列方法/构造函数调用序列。Randoop执行生成的序列，并利用执行结果创建捕获程序行为的断言。Randoop从代码序列和断言中创建测试用例。</p><p>Randoop可用于两个目的：发现程序中的错误以及创建回归测试，以在将来警告您更改程序行为。</p><p>Randoop将测试生成和测试执行相结合，形成一种高效的测试生成技术。Randoop甚至在广泛使用的库中发现了以前未知的错误，包括Sun和IBM的JDKs以及核心.NET组件。Randoop在工业界仍在使用，例如在ABB公司。</p><h2 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档：</span></a></h2><ul><li>Randoop用户手册</li></ul><p>对于Randoop的开发者/贡献者：</p><ul><li>Randoop开发者手册</li><li>Randoop API文档</li><li>项目创意页面（供贡献者/研究者使用）</li><li>有关Randoop的科学论文</li></ul><h2 id="randoop的-net版本" tabindex="-1"><a class="header-anchor" href="#randoop的-net版本"><span>Randoop的.NET版本：</span></a></h2><p>使用Microsoft的.NET平台的Randoop版本可在<a href="https://github.com/abb-iss/Randoop.NET%E6%89%BE%E5%88%B0%E3%80%82Randoop.NET%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E9%87%8D%E6%96%B0%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8F%8D%E9%A6%88%E5%AF%BC%E5%90%91%E7%9A%84%E6%B5%8B%E8%AF%95%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E3%80%82%E4%B8%8EMicrosoft" target="_blank" rel="noopener noreferrer">https://github.com/abb-iss/Randoop.NET找到。Randoop.NET是一种从头开始重新实现的反馈导向的测试生成工具。与Microsoft</a> Research的原始版本相比，上述链接是ABB公司更新的Randoop.NET版本：</p><ul><li>修复了一些错误。</li><li>添加了新功能，尤其是用于更有效的回归测试的回归断言，用于删除或替换程序集中特定方法调用的方法转换器，以及更丰富的调试信息收集。</li><li>添加了一个GUI，作为VS2010插件。</li></ul><h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h1><p>编写测试是重要的，但也是困难且耗时的任务。Randoop可以自动生成Java类的单元测试。</p><p>Randoop在许多应用场景中取得了成功，特别是在库类（例如java.util）中。Randoop在ABB和Microsoft等公司以及开源项目中都得到了使用。</p><p>以下是Randoop生成的一个JUnit测试用例，该测试用例揭示了OpenJDK中的一个错误（手动添加了注释）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 此测试表明JDK集合类可以创建一个与自身不相等的对象。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    LinkedList</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LinkedList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> o1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(o1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // TreeSet是一个有序集合。根据API文档，此构造函数调用应该引发</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ClassCastException，因为列表元素不可比较。但是构造函数却默默地（且问题地）接受了列表。</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    TreeSet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TreeSet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(list)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Set</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">synchronizedSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(t1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 到这一步，我们成功地创建了一个违反相等性自反性的集合（s1）：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 它与自身不相等！这个断言在OpenJDK上运行时失败。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s1, s1);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Randoop生成两种类型的测试：</p><ol><li>发现错误的错误揭示测试，用于检测当前代码中的缺陷。</li><li>用于检测未来错误的回归测试。</li></ol><h1 id="randoop的典型使用方式如下" tabindex="-1"><a class="header-anchor" href="#randoop的典型使用方式如下"><span>Randoop的典型使用方式如下：</span></a></h1><ol><li><p>如果Randoop输出了任何发现错误的测试，首先修复底层的缺陷，然后重新运行Randoop，重复这个过程，直到Randoop不再输出发现错误的测试。</p></li><li><p>将回归测试添加到项目的测试套件中。</p></li><li><p>每当更改项目时运行回归测试。这些测试将通知您程序行为的更改。</p></li><li><p>如果有任何测试失败，将测试用例最小化，然后调查失败原因。</p></li><li><p>如果测试失败指示您引入了代码缺陷，请修复该缺陷。</p></li><li><p>如果测试失败指示测试过于脆弱或具体（例如，某个方法的输出值已更改，但新值与旧值一样可接受），则忽略该测试。</p></li><li><p>如果忽略了任何测试（或者如果添加了新代码需要测试），那么重新运行Randoop以生成新的回归测试套件，以替换旧的套件。</p></li></ol><p>论文《Scaling up automated test generation: Automatically generating maintainable regression unit tests for programs》提供了有关如何在项目的整个生命周期内使用Randoop生成的测试的其他建议。</p><p>一个典型的程序员只会检查很少量的Randoop测试，仅当它们失败并且显示了缺陷或回归失败时，而且通常只会检查它们的最小化版本。</p><p>典型的程序员永远不会手动修改Randoop测试。</p><h1 id="安装randoop的步骤如下" tabindex="-1"><a class="header-anchor" href="#安装randoop的步骤如下"><span>安装Randoop的步骤如下：</span></a></h1><ol><li><p>Randoop支持Java 8、Java 11、Java 17或Java 19的JVM。</p></li><li><p>下载并解压文件 <code>randoop-4.3.2.zip</code>。本手册使用 <code>\${RANDOOP_PATH}</code> 表示解压后的存档路径，使用 <code>\${RANDOOP_JAR}</code> 表示在解压存档中 <code>randoop-all-4.3.2.jar</code> 的位置。</p></li><li><p>或者，如果您想查看或使用源代码，请按照Randoop开发者手册的“入门”部分的说明进行操作。</p></li><li><p>您可能希望加入 <code>randoop-discuss@googlegroups.com</code> 邮件列表，以便收到有关新发布的通知。</p></li></ol><h1 id="运行randoop" tabindex="-1"><a class="header-anchor" href="#运行randoop"><span>运行Randoop</span></a></h1><p>可以通过调用其主类 <code>randoop.main.Main</code> 来实现：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> randoop.main.Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> command</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> args...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Randoop支持三个命令：</p><ol><li><p><code>gentests</code> 生成单元测试。详细信息请参见<a href="https://randoop.github.io/randoop/manual/#running-randoop-generating-tests" target="_blank" rel="noopener noreferrer">生成测试</a>。示例用法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx3000m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -classpath</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myclasspath:</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RANDOOP_JAR</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> randoop.main.Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gentests</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --testclass=java.util.TreeSet</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --output-limit=100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（但请注意，使用 <code>--testclass</code> 命令行参数仅指定一个被测试的类是非常不寻常的。）</p></li><li><p><code>minimize</code> 最小化失败的JUnit测试套件。详细信息请参见<a href="https://randoop.github.io/randoop/manual/#running-randoop-minimizing-tests" target="_blank" rel="noopener noreferrer">最小化失败的JUnit测试套件</a>. 示例用法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -cp</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RANDOOP_JAR</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> randoop.main.Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> minimize</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --suitepath=ErrorTest0.java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --suiteclasspath=myclasspath</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><code>help</code> 打印使用消息。详细信息请参见<a href="https://randoop.github.io/randoop/manual/#running-randoop-getting-help" target="_blank" rel="noopener noreferrer">获取帮助</a>。示例用法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -classpath</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RANDOOP_JAR</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> randoop.main.Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -classpath</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RANDOOP_JAR</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> randoop.main.Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gentests</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -classpath</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RANDOOP_JAR</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> randoop.main.Main</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> minimize</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（在Windows上，调整classpath，例如使用分号而不是冒号作为分隔符。）</p></li></ol><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/EvoSuite/evosuite" target="_blank" rel="noopener noreferrer">https://github.com/EvoSuite/evosuite</a></p><p><a href="https://www.evosuite.org/documentation/maven-plugin/" target="_blank" rel="noopener noreferrer">https://www.evosuite.org/documentation/maven-plugin/</a></p><p><a href="https://randoop.github.io/randoop/manual/index.html" target="_blank" rel="noopener noreferrer">https://randoop.github.io/randoop/manual/index.html</a></p>`,44)]))}const o=s(t,[["render",l]]),d=JSON.parse('{"path":"/posts/tests/2016-04-26-test-gen-case-03-randoop-quick-start.html","title":"test-03-test case generate 测试用例生成 Randoop 快速开始入门例子","lang":"zh-CN","frontmatter":{"title":"test-03-test case generate 测试用例生成 Randoop 快速开始入门例子","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","test","generate"],"published":true,"description":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 拓展...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-gen-case-03-randoop-quick-start.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test-03-test case generate 测试用例生成 Randoop 快速开始入门例子"}],["meta",{"property":"og:description","content":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 拓展..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"generate"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test-03-test case generate 测试用例生成 Randoop 快速开始入门例子\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.44,"words":1633},"filePathRelative":"posts/tests/2016-04-26-test-gen-case-03-randoop-quick-start.md","localizedDate":"2016年4月26日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2018/06/24/junit5-01-hello\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">junit5 系列</a></p>\\n</blockquote>\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2021/07/23/junit-performance-junit5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基于 junit5 实现 junitperf 源码分析</a></p>\\n</blockquote>","autoDesc":true}');export{o as comp,d as data};
