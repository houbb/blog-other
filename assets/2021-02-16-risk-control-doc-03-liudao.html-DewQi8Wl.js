import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CEDSurVN.js";const e={};function p(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h1><p>当前互联网企业存在很多业务风险，有些风险（比如薅羊毛）虽然没有sql注入漏洞利用来的直接，但是一直被羊毛党、刷单党光顾的企业长期生存下来的几率会很低！</p><p>账号：垃圾注册、撞库、盗号等<br> 交易：盗刷、恶意占用资源、篡改交易金额等<br> 活动：薅羊毛<br> 短信：短信轰炸</p><h1 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍"><span>项目介绍</span></a></h1><p>实时业务风控系统是分析风险事件，根据场景动态调整规则，实现自动精准预警风险的系统。</p><p>本项目只提供实时风控系统框架基础和代码模板。</p><h2 id="需要解决的问题" tabindex="-1"><a class="header-anchor" href="#需要解决的问题"><span>需要解决的问题</span></a></h2><p>哪些是风险事件，注册、登录、交易、活动等事件，需要业务埋点配合提供实时数据接入<br> 什么样的事件是有风险的，风险分析需要用到统计学，对异常用户的历史数据做统计分析，找出异于正常用户的特征<br> 实时性，风险事件的分析必须毫秒级响应，有些场景下需要尽快拦截，能够给用户止损挽回损失<br> 低误报，这需要人工风控经验，对各种场景风险阈值和评分的设置，需要长期不断的调整，所以灵活的规则引擎是很重要的<br> 支持对历史数据的回溯，能够发现以前的风险，或许能够找到一些特征供参考</p><h2 id="项目关键字" tabindex="-1"><a class="header-anchor" href="#项目关键字"><span>项目关键字</span></a></h2><p>轻量级，可扩展，实时的Java业务风控系统<br> 基于Spring boot构建，配置文件能少则少<br> 使用drools规则引擎管理风控规则，原则上可以动态配置规则<br> 使用redis、mongodb做风控计算和事件储存，历史事件支持水平扩展</p><h1 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h1><h2 id="统计学" tabindex="-1"><a class="header-anchor" href="#统计学"><span>统计学</span></a></h2><p>次数统计，比如1分钟内某账号的登录次数，可以用来分析盗号等<br> 频数统计，比如1小时内某ip上出现的账号，可以用来分析黄牛党等<br> 最大统计，比如用户交易金额比历史交易都大，可能有风险<br> 最近统计，比如最近一次交易才过数秒，可能机器下单<br> 行为习惯，比如用户常用登录地址，用户经常登录时间段，可以用来分析盗号等<br> 抽象：某时间段，在条件维度（可以是多个维度复合）下，利用统计方法统计结果维度的值。充分发挥你的想象吧！</p><h2 id="实时计算" tabindex="-1"><a class="header-anchor" href="#实时计算"><span>实时计算</span></a></h2><p>要将任意维度的历史数据（可能半年或更久）实时统计出结果，需要将数据提前安装特殊结果准备好（由于事件的维度数量不固定的，选取统计的维度也是随意的，所以不是在关系数据库中建几个索引就能搞定的），需要利用空间换时间，来降低时间复杂度。</p><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>redis</span></a></h3><p>redis中数据结构sortedset，是个有序的集合，集合中只会出现最新的唯一的值。利用sortedset的天然优势，做频数统计非常有利。</p><p>比如1小时内某ip上出现的账号数量统计：</p><p>保存维度</p><p>ZADD key score member（时间复杂度:O(M*log(N))， N 是有序集的基数， M 为成功添加的新成员的数量），key=ip，score=时间（比如20160807121314），member=账号。存储时略耗性能。 结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  1.1.1.1</span></span>
<span class="line"><span>  	|--账号1		20160807121314</span></span>
<span class="line"><span>  	|--账号2		20160807121315</span></span>
<span class="line"><span>  	|--账号n		20160807121316</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  2.2.2.2</span></span>
<span class="line"><span>  	|--账号3		20160807121314</span></span>
<span class="line"><span>  	|--账号4		20160807121315</span></span>
<span class="line"><span>  	|--账号m		20160807121316</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算频数</p><p>ZCOUNT key min max（时间复杂度:O(1)），key=ip，min=起始时间，max=截止时间。计算的性能消耗极少，优势明显</p><p>redis lua</p><p>把保存维度，计算频数，过期维度数据等操作，使用lua脚本结合在一起，可以减少网络IO，提高性能</p><h3 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb"><span>mongodb</span></a></h3><p>mongodb本身的聚合函数统计维度，支持很多比如：max，min，sum，avg，first，last，标准差，采样标准差，复杂的统计方法可以在基础聚合函数上建立，比如行为习惯：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDB</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getCollection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(collectionName).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aggregate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                    match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(match)													--匹配条件维度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    , </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> field, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Accumulators</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))				--求值维度的次数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    , </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$gte&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, minCount))) --过滤，超过minCount才统计</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    , </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_count&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))								--对次数进行倒叙排列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议在mongodb聚合的维度上建立索引，这样可以使用内存计算，速度较快。</p><p>redis性能优于mongodb，所以使用场景较多的频数计算默认在redis中运行，参考代码DimensionService.distinctCountWithRedis方法。</p><p>但是redis为了性能牺牲了很多空间，数据重复存储，会占用很多内存。</p><h2 id="风控流程" tabindex="-1"><a class="header-anchor" href="#风控流程"><span>风控流程</span></a></h2><ul><li><p>黑名单</p></li><li><p>白名单</p></li><li><p>从细颗粒到粗颗粒，依次执行1和2，将所有黑白名单遍历</p></li><li><p>风控规则</p></li><li><p>阈值预警</p></li><li><p>保存事件</p></li></ul><h1 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置"><span>项目配置</span></a></h1><p>应用配置：application.properties<br> 日志配置：logback.xml<br> 规则配置：rules/*.drl，规则都是用java语言编写。默认配置了登录事件的部分规则</p><p>drl文件说明：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>	package rules;										--规则包路径</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	import com.example.riskcontrol.model.LoginEvent		--引入类</span></span>
<span class="line"><span>	import com.example.riskcontrol.service.DimensionService</span></span>
<span class="line"><span>	import com.example.riskcontrol.model.EnumTimePeriod</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	global DimensionService dimensionService			--引入外部服务</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	rule &quot;98_login_ip&quot;          						--规则名称，全局唯一</span></span>
<span class="line"><span>	    salience 98										--规则优先级，值越大越先执行</span></span>
<span class="line"><span>	    lock-on-active true								--事件不重复执行该规则</span></span>
<span class="line"><span>	    when											--条件判断，是否需要进入action</span></span>
<span class="line"><span>	        event:LoginEvent()							--判断事件对象是否是LoginEvent类</span></span>
<span class="line"><span>	    then											--action</span></span>
<span class="line"><span>	        int count  = dimensionService.distinctCount(event,new String[]{LoginEvent.OPERATEIP},EnumTimePeriod.LASTHOUR,LoginEvent.MOBILE);		--近1小时内该事件ip上出现的mobile数量统计</span></span>
<span class="line"><span>	        if(event.addScore(count,20,10,1)){										--如果统计结果超过20个，则记10分，并且结果每超1个，再多记1分</span></span>
<span class="line"><span>	            dimensionService.insertRiskEvent(event,&quot;近1小时内同ip出现多个mobile,count=&quot;+count);  --记录风险事件日志</span></span>
<span class="line"><span>	        }		</span></span>
<span class="line"><span>	end													--结束规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>drools 的详细文档，请参考官方 <a href="http://docs.jboss.org/drools/release/6.4.0.Final/drools-docs/html_single/index.html" target="_blank" rel="noopener noreferrer">http://docs.jboss.org/drools/release/6.4.0.Final/drools-docs/html_single/index.html</a></p><h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>TODO</span></a></h1><p>扩展黑白名单，ip，手机号，设备指纹等；<br> 扩展维度信息，比如手机号地域运营商，ip地域运营商，ip出口类型，设备指纹，Referer，ua，密码hash，征信等，维度越多，可以建立规则越多，风控越精准；<br> 扩展风控规则，针对需要解决的场景问题，添加特定规则，分值也应根据自身场景来调整。<br> 将用户的行为轨迹综合考虑，建立复合场景的规则条件。比如：登录-&gt;活动-&gt;订单-&gt;支付，将事件关联分析综合考虑；<br> 减少漏报和误报。当然，这将是个漫长的过程；</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/ysrc/Liudao" target="_blank" rel="noopener noreferrer">https://github.com/ysrc/Liudao</a></p>`,42)]))}const d=i(e,[["render",p]]),o=JSON.parse('{"path":"/posts/Biz/2021-02-16-risk-control-doc-03-liudao.html","title":"风控资料汇总-03-“六道”实时业务风控系统","lang":"zh-CN","frontmatter":{"title":"风控资料汇总-03-“六道”实时业务风控系统","date":"2021-02-14T00:00:00.000Z","categories":["BIZ"],"tags":["biz","risk","risk-control","sh"],"published":true,"description":"背景 当前互联网企业存在很多业务风险，有些风险（比如薅羊毛）虽然没有sql注入漏洞利用来的直接，但是一直被羊毛党、刷单党光顾的企业长期生存下来的几率会很低！ 账号：垃圾注册、撞库、盗号等 交易：盗刷、恶意占用资源、篡改交易金额等 活动：薅羊毛 短信：短信轰炸 项目介绍 实时业务风控系统是分析风险事件，根据场景动态调整规则，实现自动精准预警风险的系统。 ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Biz/2021-02-16-risk-control-doc-03-liudao.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"风控资料汇总-03-“六道”实时业务风控系统"}],["meta",{"property":"og:description","content":"背景 当前互联网企业存在很多业务风险，有些风险（比如薅羊毛）虽然没有sql注入漏洞利用来的直接，但是一直被羊毛党、刷单党光顾的企业长期生存下来的几率会很低！ 账号：垃圾注册、撞库、盗号等 交易：盗刷、恶意占用资源、篡改交易金额等 活动：薅羊毛 短信：短信轰炸 项目介绍 实时业务风控系统是分析风险事件，根据场景动态调整规则，实现自动精准预警风险的系统。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"biz"}],["meta",{"property":"article:tag","content":"risk"}],["meta",{"property":"article:tag","content":"risk-control"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"风控资料汇总-03-“六道”实时业务风控系统\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.61,"words":1683},"filePathRelative":"posts/Biz/2021-02-16-risk-control-doc-03-liudao.md","localizedDate":"2021年2月14日","excerpt":"\\n<p>当前互联网企业存在很多业务风险，有些风险（比如薅羊毛）虽然没有sql注入漏洞利用来的直接，但是一直被羊毛党、刷单党光顾的企业长期生存下来的几率会很低！</p>\\n<p>账号：垃圾注册、撞库、盗号等<br>\\n交易：盗刷、恶意占用资源、篡改交易金额等<br>\\n活动：薅羊毛<br>\\n短信：短信轰炸</p>\\n<h1>项目介绍</h1>\\n<p>实时业务风控系统是分析风险事件，根据场景动态调整规则，实现自动精准预警风险的系统。</p>\\n<p>本项目只提供实时风控系统框架基础和代码模板。</p>\\n<h2>需要解决的问题</h2>\\n<p>哪些是风险事件，注册、登录、交易、活动等事件，需要业务埋点配合提供实时数据接入<br>\\n什么样的事件是有风险的，风险分析需要用到统计学，对异常用户的历史数据做统计分析，找出异于正常用户的特征<br>\\n实时性，风险事件的分析必须毫秒级响应，有些场景下需要尽快拦截，能够给用户止损挽回损失<br>\\n低误报，这需要人工风控经验，对各种场景风险阈值和评分的设置，需要长期不断的调整，所以灵活的规则引擎是很重要的<br>\\n支持对历史数据的回溯，能够发现以前的风险，或许能够找到一些特征供参考</p>","autoDesc":true}');export{d as comp,o as data};
