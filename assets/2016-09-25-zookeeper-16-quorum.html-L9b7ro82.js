import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,o as a}from"./app-CEDSurVN.js";const l={};function r(p,e){return a(),i("div",null,e[0]||(e[0]=[n(`<h1 id="zookeeper与仲裁模式" tabindex="-1"><a class="header-anchor" href="#zookeeper与仲裁模式"><span>ZooKeeper与仲裁模式</span></a></h1><p>到⽬前为⽌，我们⼀直基于独⽴模式配置的服务器端。如果服务器启动，服务就启动了，但如果服务器故障，整个服务也因此⽽关闭。这⾮常不符合可靠的协作服务的承诺。出于可靠性，我们需要运⾏多个服务器。</p><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p>为了完成这些，我们将要使⽤以下配置⽂件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tickTime=2000</span></span>
<span class="line"><span>initLimit=10</span></span>
<span class="line"><span>syncLimit=5</span></span>
<span class="line"><span>dataDir=./data</span></span>
<span class="line"><span>clientPort=2181</span></span>
<span class="line"><span>server.1=127.0.0.1:2222:2223</span></span>
<span class="line"><span>server.2=127.0.0.1:3333:3334</span></span>
<span class="line"><span>server.3=127.0.0.1:4444:4445</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们主要讨论最后三⾏对于server.n项的配置信息。其余配置参数将会在第10章中进⾏说明。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mkdir z1</span></span>
<span class="line"><span>mkdir z1/data</span></span>
<span class="line"><span>mkdir z2</span></span>
<span class="line"><span>mkdir z2/data</span></span>
<span class="line"><span>mkdir z3</span></span>
<span class="line"><span>mkdir z3/data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当启动⼀个服务器时，我们需要知道启动的是哪个服务器。⼀个服务器通过读取data⽬录下⼀个名为myid的⽂件来获取服务器ID信息。可以通过以下命令来创建这些⽂件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>echo 1 &gt; z1/data/myid</span></span>
<span class="line"><span>echo 2 &gt; z2/data/myid</span></span>
<span class="line"><span>echo 3 &gt; z3/data/myid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当服务器启动时，服务器通过配置⽂件中的dataDir参数来查找data⽬录的配置。它通过mydata获得服务器ID，之后使⽤配置⽂件中server.n对应的项来设置端⼜并监听。当在不同的机器上运⾏ZooKeeper服务器进程时，它们可以使⽤相同的客户端端⼜和相同的配置⽂件。但对于这个例⼦，在⼀台服务器上运⾏，我们需要⾃定义每个服务器的客户端端⼜。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ cd z1</span></span>
<span class="line"><span>$ {PATH_TO_ZK}/bin/zkServer.sh start ./z1.cfg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器的⽇志记录为zookeeper.out。因为我们只启动了三个ZooKeeper服务器中的⼀个，所以整个服务还⽆法运⾏。在⽇志中我们将会看到以下形式的记录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>... [myid:1] - INFO [QuorumPeer[myid=1]/...:2181:QuorumPeer@670] - LOOKING</span></span>
<span class="line"><span>... [myid:1] - INFO [QuorumPeer[myid=1]/...:2181:FastLeaderElection@740] -</span></span>
<span class="line"><span>New election. My id = 1, proposed zxid=0x0</span></span>
<span class="line"><span>... [myid:1] - INFO [WorkerReceiver[myid=1]:FastLeaderElection@542] -</span></span>
<span class="line"><span>Notification: 1 ..., LOOKING (my state)</span></span>
<span class="line"><span>... [myid:1] - WARN [WorkerSender[myid=1]:QuorumCnxManager@368] - Cannot</span></span>
<span class="line"><span>open channel to 2 at election address /127.0.0.1:3334</span></span>
<span class="line"><span>Java.net.ConnectException: Connection refused</span></span>
<span class="line"><span>at java.net.PlainSocketImpl.socketConnect(Native Method)</span></span>
<span class="line"><span>at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个服务器疯狂地尝试连接到其他服务器，然后失败，如果我们启动另⼀个服务器，我们可以构成仲裁的法定⼈数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ cd z2</span></span>
<span class="line"><span>$ {PATH_TO_ZK}/bin/zkServer.sh start ./z2.cfg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们观察第⼆个服务器的⽇志记录zookeeper.out，我们将会看到：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>... [myid:2] - INFO [QuorumPeer[myid=2]/...:2182:Leader@345] - LEADING</span></span>
<span class="line"><span>- LEADER ELECTION TOOK - 279</span></span>
<span class="line"><span>... [myid:2] - INFO [QuorumPeer[myid=2]/...:2182:FileTxnSnapLog@240] -</span></span>
<span class="line"><span>Snapshotting: 0x0 to ./data/version-2/snapshot.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该⽇志指出服务器2已经被选举为群⾸。如果我们现在看看服务器1的⽇志，我们会看到：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>... [myid:1] - INFO [QuorumPeer[myid=1]/...:2181:QuorumPeer@738] -</span></span>
<span class="line"><span>FOLLOWING</span></span>
<span class="line"><span>... [myid:1] - INFO [QuorumPeer[myid=1]/...:2181:ZooKeeperServer@162] -</span></span>
<span class="line"><span>Created server ...</span></span>
<span class="line"><span>... [myid:1] - INFO [QuorumPeer[myid=1]/...:2181:Follower@63] - FOLLOWING</span></span>
<span class="line"><span>- LEADER ELECTION TOOK - 212</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器1作为服务器2的追随者被激活。我们现在具有了符合法定仲裁（三分之⼆）的可⽤服务器。</p><p>在此刻服务开始可⽤。我们现在需要配置客户端来连接到服务上。连接字符串需要列出所有组成服务的服务器host：port对。对于这个例⼦，连接串为&quot;127.0.0.1：2181，127.0.0.1：2182，127.0.0.1：2183&quot;（我们包含第三个服务器的信息，即使我们永远不启动它，因为这可以说明ZooKeeper⼀些有⽤的属性）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ {PATH_TO_ZK}/bin/zkCli.sh -server 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当连接到服务器后，我们会看到以下形式的消息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[myid:] - INFO [...] - Session establishment</span></span>
<span class="line"><span>complete on server localhost/127.0.0.1:2182 ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意⽇志消息中的端⼜号，在本例中的2182。如果通过Ctrl-C来停⽌客户端并重启多次它，我们将会看到端⼜号在218102182之间来回变化。我们也许还会注意到尝试2183端⼜后连接失败的消息，之后为成功连接到某⼀个服务器端⼜的消息。</p><h1 id="简单的负载均衡" tabindex="-1"><a class="header-anchor" href="#简单的负载均衡"><span>简单的负载均衡</span></a></h1><p>客户端以随机顺序连接到连接串中的服务器。这样可以用ZooKeeper来实现⼀个简单的负载均衡。不过，客户端⽆法指定优先选择的服务器来进⾏连接。</p><p>例如，如果我们有5个ZooKeeper服务器的⼀个集合，其中3个在美国西海岸，另外两个在美国东海岸，为了确保客户端只连接到本地服务器上，我们可以使在东海岸客户端的连接串中只出现东海岸的服务器，在西海岸客户端的连接串中只有西海岸的服务器。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>《Zookeeper分布式过程协同技术详解》</p>`,30)]))}const o=s(l,[["render",r]]),c=JSON.parse('{"path":"/posts/zookeeper/2016-09-25-zookeeper-16-quorum.html","title":"ZooKeeper-16-qourum 仲裁模式","lang":"zh-CN","frontmatter":{"title":"ZooKeeper-16-qourum 仲裁模式","date":"2016-09-25T00:00:00.000Z","categories":["Apache"],"tags":["zookeeper","config-center"],"published":true,"description":"ZooKeeper与仲裁模式 到⽬前为⽌，我们⼀直基于独⽴模式配置的服务器端。如果服务器启动，服务就启动了，但如果服务器故障，整个服务也因此⽽关闭。这⾮常不符合可靠的协作服务的承诺。出于可靠性，我们需要运⾏多个服务器。 配置文件 为了完成这些，我们将要使⽤以下配置⽂件： 我们主要讨论最后三⾏对于server.n项的配置信息。其余配置参数将会在第10章中...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/zookeeper/2016-09-25-zookeeper-16-quorum.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"ZooKeeper-16-qourum 仲裁模式"}],["meta",{"property":"og:description","content":"ZooKeeper与仲裁模式 到⽬前为⽌，我们⼀直基于独⽴模式配置的服务器端。如果服务器启动，服务就启动了，但如果服务器故障，整个服务也因此⽽关闭。这⾮常不符合可靠的协作服务的承诺。出于可靠性，我们需要运⾏多个服务器。 配置文件 为了完成这些，我们将要使⽤以下配置⽂件： 我们主要讨论最后三⾏对于server.n项的配置信息。其余配置参数将会在第10章中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"zookeeper"}],["meta",{"property":"article:tag","content":"config-center"}],["meta",{"property":"article:published_time","content":"2016-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ZooKeeper-16-qourum 仲裁模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.78,"words":1134},"filePathRelative":"posts/zookeeper/2016-09-25-zookeeper-16-quorum.md","localizedDate":"2016年9月25日","excerpt":"\\n<p>到⽬前为⽌，我们⼀直基于独⽴模式配置的服务器端。如果服务器启动，服务就启动了，但如果服务器故障，整个服务也因此⽽关闭。这⾮常不符合可靠的协作服务的承诺。出于可靠性，我们需要运⾏多个服务器。</p>\\n<h2>配置文件</h2>\\n<p>为了完成这些，我们将要使⽤以下配置⽂件：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>tickTime=2000</span></span>\\n<span class=\\"line\\"><span>initLimit=10</span></span>\\n<span class=\\"line\\"><span>syncLimit=5</span></span>\\n<span class=\\"line\\"><span>dataDir=./data</span></span>\\n<span class=\\"line\\"><span>clientPort=2181</span></span>\\n<span class=\\"line\\"><span>server.1=127.0.0.1:2222:2223</span></span>\\n<span class=\\"line\\"><span>server.2=127.0.0.1:3333:3334</span></span>\\n<span class=\\"line\\"><span>server.3=127.0.0.1:4444:4445</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,c as data};
