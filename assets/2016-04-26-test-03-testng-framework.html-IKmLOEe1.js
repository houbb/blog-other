import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as e,o as a}from"./app-uJE4P3e0.js";const n={};function l(r,s){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/06/24/junit5-01-hello" target="_blank" rel="noopener noreferrer">junit5 系列</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><h1 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h1><p>TestNG是一个受到JUnit和NUnit启发的测试框架，引入了一些新功能，使其更强大且更易于使用，例如：</p><ul><li>注解。</li><li>使用各种可用策略在任意大的线程池中运行测试（每个方法在自己的线程中，每个测试类一个线程等）。</li><li>测试代码的多线程安全性。</li><li>灵活的测试配置。</li><li>支持数据驱动测试（使用@DataProvider）。</li><li>支持参数。</li><li>强大的执行模型（不再需要TestSuite）。</li><li>受多种工具和插件支持（Eclipse、IDEA、Maven等）。</li><li>嵌入BeanShell以提供更大的灵活性。</li><li>运行时和日志记录的默认JDK函数（无依赖）。</li><li>用于应用服务器测试的依赖方法。<br> TestNG被设计用于涵盖所有测试类别：单元测试、功能测试、端到端测试、集成测试等...</li></ul><p>我开始使用TestNG是因为我对JUnit的一些不足感到沮丧，我在我的博客中记录了其中的一些问题，可以在这里和这里阅读。</p><p>阅读这些条目可能会让您更好地了解我尝试通过TestNG实现的目标。</p><p>您还可以查看主要功能的快速概述以及描述一个非常具体的示例的文章，其中多个TestNG功能的组合提供了一个直观且易于维护的测试设计。</p><p>以下是一个非常简单的测试示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> example1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.testng.annotations.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 当此测试被实例化时将被调用的代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">groups</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fast&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> aFastTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;快速测试&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">groups</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;slow&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> aSlowTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;慢速测试&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;setUp()&quot; 方法将在构建测试类后、在运行任何测试方法之前被调用。</p><p>在这个例子中，我们将运行 &quot;fast&quot; 组，因此将调用 &quot;aFastTest()&quot; 方法，而 &quot;aSlowTest()&quot; 方法将被跳过。</p><p>需要注意的一些重要事项：</p><ul><li>无需扩展类或实现接口。</li><li>即使上述示例使用了JUnit的约定，方法可以使用任何你喜欢的名称；关键是注解告诉TestNG它们的用途。</li><li>一个测试方法可以属于一个或多个组。</li></ul><p>在将测试类编译到构建目录之后，可以使用命令行、Ant 任务（如下所示）或XML文件来调用测试：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 Ant 来调用它：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ant</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，您可以浏览测试结果：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test-output</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ndex.html（在Windows上）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="要求" tabindex="-1"><a class="header-anchor" href="#要求"><span>要求</span></a></h2><p>TestNG 版本在v7.5及以下：JDK 8 或更高版本。</p><p>TestNG 版本在v7.6.0及以上：JDK 11 或更高版本。</p><h2 id="邮件列表" tabindex="-1"><a class="header-anchor" href="#邮件列表"><span>邮件列表</span></a></h2><p>用户邮件列表可以在 Google Groups 上找到。<br> 如果您有兴趣参与TestNG的开发，请加入开发者邮件列表。<br> 如果您只关注了解TestNG的新版本，可以加入低频的TestNG公告邮件列表。<br> 项目位置<br> 如果您有兴趣为TestNG或其中一个IDE插件做贡献，您将在以下位置找到它们：</p><ul><li>TestNG</li><li>Eclipse插件</li><li>IDEA IntelliJ插件</li><li>Visual Studio Code插件</li></ul><h2 id="bug-报告" tabindex="-1"><a class="header-anchor" href="#bug-报告"><span>Bug 报告</span></a></h2><p>如果您认为发现了一个 bug，这是如何报告的方法：</p><ol><li>创建一个小项目，使我们能够重现此 bug。在大多数情况下，一个或两个Java源文件和一个testng.xml文件应该足够了。然后，您可以将其压缩并通过电子邮件发送到 testng-dev 邮件列表，或在开源托管站点（如 GitHub）上提供，然后通过电子邮件通知 testng-dev，以便我们知晓。请确保该项目是自包含的，以便我们可以立即构建它（删除对外部或专有框架的依赖等）。</li><li>如果您观察到的 bug 是在 Eclipse 插件上，请确保您的示例项目包含 .project 和 .classpath 文件。</li><li>提交 bug 报告。<br> 有关更多信息，您可以下载 TestNG，阅读手册或浏览顶部的链接。</li></ol><h1 id="testng" tabindex="-1"><a class="header-anchor" href="#testng"><span>testNG</span></a></h1><p>TestNG是一个旨在简化各种测试需求的测试框架，从单元测试（在其他类的隔离环境中测试一个类）到集成测试（测试由多个类、多个包甚至多个外部框架（如应用服务器）组成的整个系统）。</p><p>编写测试通常是一个三步过程：</p><ol><li>编写测试的业务逻辑并在代码中插入TestNG注解。</li><li>在testng.xml文件或build.xml文件中添加关于测试的信息（例如类名、希望运行的组等）。</li><li>运行TestNG。</li></ol><p>在欢迎页面上可以找到一个快速示例。<br> 本文档中使用的概念如下：</p><ul><li>一个Suite由一个XML文件表示。它可以包含一个或多个测试，并由\`\`标签定义。</li><li>一个Test由\`\`表示，可以包含一个或多个TestNG类。</li><li>一个TestNG类是一个包含至少一个TestNG注解的Java类。它由\`\`标签表示，可以包含一个或多个测试方法。</li><li>一个测试方法是在源代码中由<code>@Test</code>注解的Java方法。</li><li>通过<code>@BeforeXXX</code>和<code>@AfterXXX</code>注解可以配置TestNG测试，这允许在某个特定点之前和之后执行一些Java逻辑，这些点可以是上述任何项目。</li></ul><p>本手册的其余部分将解释以下内容：</p><ul><li>所有注解的列表及简要说明。这将让您了解TestNG提供的各种功能，但您可能想要查阅每个注解专用部分以了解详细信息。</li><li>testng.xml文件的描述、语法及其中可以指定的内容。</li><li>各种功能的详细列表以及如何结合注解和testng.xml来使用它们。</li></ul><h1 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h1><p>以下是TestNG中可用注解的快速概述，以及它们的属性。</p><p>配置TestNG类的注解：</p><ul><li><strong>@BeforeSuite：</strong> 该注解的方法将在运行此套件中的所有测试之前运行。</li><li><strong>@AfterSuite：</strong> 该注解的方法将在运行此套件中的所有测试之后运行。</li><li><strong>@BeforeTest：</strong> 该注解的方法将在运行属于\`\`标签内的类的任何测试方法之前运行。</li><li><strong>@AfterTest：</strong> 该注解的方法将在运行属于\`\`标签内的类的所有测试方法之后运行。</li><li><strong>@BeforeGroups：</strong> 这个配置方法将在运行属于这些组中任何一个的第一个测试方法之前运行。保证在调用属于这些组中任何一个的第一个测试方法之前运行。</li><li><strong>@AfterGroups：</strong> 这个配置方法将在运行属于这些组中任何一个的最后一个测试方法之后运行。保证在调用属于这些组中任何一个的最后一个测试方法之后运行。</li><li><strong>@BeforeClass：</strong> 该注解的方法将在当前类中的第一个测试方法被调用之前运行。</li><li><strong>@AfterClass：</strong> 该注解的方法将在当前类中的所有测试方法被运行之后运行。</li><li><strong>@BeforeMethod：</strong> 该注解的方法将在每个测试方法之前运行。</li><li><strong>@AfterMethod：</strong> 该注解的方法将在每个测试方法之后运行。</li></ul><p>在TestNG类的超类中的注解行为</p><p>将这些注解放在TestNG类的超类上时，这些注解也会被继承。这对于例如将多个测试类的测试设置集中在一个共同的超类中是有用的。</p><p>在这种情况下，TestNG保证在继承顺序中执行“@Before”方法（从最高超类开始，然后沿着继承链向下移动），并且“@After”方法以相反的顺序执行（沿着继承链向上移动）。</p><ul><li><p><strong>alwaysRun：</strong> 对于@Before方法（beforeSuite、beforeTest、beforeTestClass和beforeTestMethod，但不是beforeGroups）：如果设置为true，无论它属于哪个组，都将运行此配置方法。对于@After方法（afterSuite、afterClass等）：如果设置为true，则即使先前调用的一个或多个方法失败或被跳过，也将运行此配置方法。</p></li><li><p><strong>dependsOnGroups：</strong> 该方法依赖的组的列表。</p></li><li><p><strong>dependsOnMethods：</strong> 该方法依赖的方法的列表。</p></li><li><p><strong>enabled：</strong> 是否启用此类/方法上的方法。</p></li><li><p><strong>groups：</strong> 此类/方法所属的组列表。</p></li><li><p><strong>inheritGroups：</strong> 如果为true，则此方法将属于@Test注解在类级别指定的组。</p></li><li><p><strong>onlyForGroups：</strong> 仅适用于@BeforeMethod和@AfterMethod。如果指定了，则只有在相应的测试方法属于列出的组之一时，才会调用此设置/拆卸方法。</p></li><li><p><strong>@DataProvider：</strong> 将方法标记为为测试方法提供数据。被标记的方法必须返回一个Object[]数组，其中每个Object[]可以分配给测试方法的参数列表。希望从此DataProvider接收数据的@Test方法需要使用一个dataProvider的名称，该名称等于此注解的名称。</p><ul><li><strong>name：</strong> 此数据提供程序的名称。如果未提供，将自动将此数据提供程序的名称设置为方法的名称。</li><li><strong>parallel：</strong> 如果设置为true，使用此数据提供程序生成的测试将并行运行。默认值为false。</li></ul></li><li><p><strong>@Factory：</strong> 将方法标记为一个工厂，该工厂返回将由TestNG用作测试类的对象。该方法必须返回Object[]。</p></li><li><p><strong>@Listeners：</strong> 定义测试类上的监听器。</p><ul><li><strong>value：</strong> 一个扩展org.testng.ITestNGListener的类数组。</li></ul></li><li><p><strong>@Parameters：</strong> 描述如何将参数传递给@Test方法。</p><ul><li><strong>value：</strong> 用于填充此方法的参数的变量列表。</li></ul></li><li><p><strong>@Test：</strong> 将类或方法标记为测试的一部分。</p><ul><li><strong>alwaysRun：</strong> 如果设置为true，此测试方法将始终运行，即使它依赖于失败的方法。</li><li><strong>dataProvider：</strong> 此测试方法的数据提供程序的名称。</li><li><strong>dataProviderClass：</strong> 查找数据提供程序的类。如果未指定，将在当前测试方法的类或其基类的类上查找数据提供程序。如果指定了此属性，则数据提供程序方法需要在指定的类上是静态的。</li><li><strong>dependsOnGroups：</strong> 该方法依赖的组的列表。</li><li><strong>dependsOnMethods：</strong> 该方法依赖的方法的列表。</li><li><strong>description：</strong> 此方法的描述。</li><li><strong>enabled：</strong> 是否启用此类/方法上的方法。</li><li><strong>expectedExceptions：</strong> 测试方法预计引发的异常列表。如果引发的异常与此列表中的异常不同，或者未引发异常，则将标记此测试为失败。</li><li><strong>groups：</strong> 此类/方法所属的组列表。</li><li><strong>invocationCount：</strong> 应调用此方法的次数。</li><li><strong>invocationTimeOut：</strong> 此测试的累积时间（以毫秒为单位）的最大时间。如果未指定invocationCount，则将忽略此属性。</li><li><strong>priority：</strong> 此测试方法的优先级。较低的优先级将首先安排。</li><li><strong>successPercentage：</strong> 期望从此方法获得成功的百分比。</li><li><strong>singleThreaded：</strong> 如果设置为true，则保证此测试类的所有方法都将在同一线程中运行，即使使用parallel=&quot;methods&quot;运行测试。此属性仅可在类级别使用，如果在方法级别使用，则将被忽略。</li><li><strong>timeOut：</strong> 此测试应运行的最长时间（以毫秒为单位）。</li><li><strong>threadPoolSize：</strong> 为此方法指定的线程池大小。将以invocationCount指定的次数从多个线程调用该方法。请注意：如果未指定invocationCount，则将忽略此属性。</li></ul></li></ul><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="q-详细介绍一下-testng" tabindex="-1"><a class="header-anchor" href="#q-详细介绍一下-testng"><span>Q: 详细介绍一下 testNG</span></a></h2><p>TestNG（Test Next Generation）是一个用于测试Java程序的测试框架。</p><p>它设计用于简化不同种类测试（单元测试、集成测试等）的编写和执行过程。</p><p>以下是关于TestNG的详细介绍：</p><h3 id="_1-注解支持" tabindex="-1"><a class="header-anchor" href="#_1-注解支持"><span>1. <strong>注解支持：</strong></span></a></h3><ul><li>TestNG 使用注解来标识测试方法，例如 <code>@Test</code> 标注用于标识测试方法，<code>@BeforeTest</code> 和 <code>@AfterTest</code> 标注用于在测试之前和之后执行的方法。</li></ul><h3 id="_2-测试套件-test-suites" tabindex="-1"><a class="header-anchor" href="#_2-测试套件-test-suites"><span>2. <strong>测试套件（Test Suites）：</strong></span></a></h3><ul><li>TestNG 允许你将测试方法组织成测试套件，这是一种逻辑上的组织方式，用于执行一系列相关的测试。</li></ul><h3 id="_3-测试参数化" tabindex="-1"><a class="header-anchor" href="#_3-测试参数化"><span>3. <strong>测试参数化：</strong></span></a></h3><ul><li>TestNG 支持测试方法的参数化，通过 <code>@Parameters</code> 注解可以为测试方法提供不同的输入参数。</li></ul><h3 id="_4-依赖测试" tabindex="-1"><a class="header-anchor" href="#_4-依赖测试"><span>4. <strong>依赖测试：</strong></span></a></h3><ul><li>TestNG 允许通过 <code>dependsOnMethods</code> 或 <code>dependsOnGroups</code> 属性指定测试方法之间的依赖关系，确保测试方法按照指定的顺序执行。</li></ul><h3 id="_5-测试分组" tabindex="-1"><a class="header-anchor" href="#_5-测试分组"><span>5. <strong>测试分组：</strong></span></a></h3><ul><li>可以使用 <code>@Test(groups = &quot;groupname&quot;)</code> 将测试方法分组，以便在测试套件中选择性地执行特定组的测试。</li></ul><h3 id="_6-并发测试" tabindex="-1"><a class="header-anchor" href="#_6-并发测试"><span>6. <strong>并发测试：</strong></span></a></h3><ul><li>TestNG 支持并发测试，你可以配置测试套件中的测试以并行执行，提高测试执行效率。</li></ul><h3 id="_7-丰富的监听器支持" tabindex="-1"><a class="header-anchor" href="#_7-丰富的监听器支持"><span>7. <strong>丰富的监听器支持：</strong></span></a></h3><ul><li>TestNG 提供了许多监听器接口，你可以实现这些接口以定制测试执行期间的行为，例如，在测试开始或结束时执行一些操作。</li></ul><h3 id="_8-报告生成" tabindex="-1"><a class="header-anchor" href="#_8-报告生成"><span>8. <strong>报告生成：</strong></span></a></h3><ul><li>TestNG 生成详细的测试报告，包括测试运行的概要、通过和失败的测试用例、执行时间等信息。</li></ul><h3 id="_9-支持数据驱动测试" tabindex="-1"><a class="header-anchor" href="#_9-支持数据驱动测试"><span>9. <strong>支持数据驱动测试：</strong></span></a></h3><ul><li>TestNG 支持数据驱动测试，通过 <code>@DataProvider</code> 注解，可以从外部数据源（例如Excel、XML）提供测试数据。</li></ul><h3 id="_10-集成容易" tabindex="-1"><a class="header-anchor" href="#_10-集成容易"><span>10. <strong>集成容易：</strong></span></a></h3><ul><li>TestNG 易于集成到各种构建工具（如Maven、Gradle）和持续集成系统（如Jenkins）中，方便与其他工具协同使用。</li></ul><h3 id="_11-灵活的测试配置" tabindex="-1"><a class="header-anchor" href="#_11-灵活的测试配置"><span>11. <strong>灵活的测试配置：</strong></span></a></h3><ul><li>TestNG 提供了灵活的配置选项，可以通过XML配置文件或通过注解进行配置。</li></ul><h3 id="_12-支持并行和分布式测试" tabindex="-1"><a class="header-anchor" href="#_12-支持并行和分布式测试"><span>12. <strong>支持并行和分布式测试：</strong></span></a></h3><ul><li>TestNG 支持在多个线程中并行执行测试，也支持分布式测试执行。</li></ul><p>总体来说，TestNG 是一个功能强大、灵活且易于使用的测试框架，广泛用于Java应用程序的单元测试和集成测试。</p><p>其强大的功能使得开发人员能够更轻松地组织、执行和分析测试，从而提高测试的效率和质量。</p><h2 id="testng-的入门案例-包含-maven-引入" tabindex="-1"><a class="header-anchor" href="#testng-的入门案例-包含-maven-引入"><span>testNG 的入门案例，包含 maven 引入</span></a></h2><p>maven 依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.testng</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        testng</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        7.3.0 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类，和 junit 差不多：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.testng.Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.testng.annotations.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestNGExampleTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testAddition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 测试相加方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用断言验证结果</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Addition failed: Expected 5, but got &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testSubtraction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 测试相减方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用断言验证结果</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assertTrue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Subtraction failed: Expected result to be greater than 0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 实际的相加方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 实际的相减方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为什么已经有-junit4-了-还会有-testng-呢" tabindex="-1"><a class="header-anchor" href="#为什么已经有-junit4-了-还会有-testng-呢"><span>为什么已经有 junit4 了，还会有 testNG 呢？</span></a></h2><p>JUnit 4 和 TestNG 都是用于Java应用程序测试的流行测试框架，它们有一些相似之处，但也有一些不同之处，导致在某些情况下选择使用 TestNG。</p><p>以下是一些原因：</p><ol><li><p><strong>更灵活的测试配置：</strong> TestNG 提供了更灵活的测试配置选项，可以通过 XML 文件进行配置，允许开发人员更细粒度地控制测试的执行方式，包括并发测试、测试组、测试套件等。</p></li><li><p><strong>注解的丰富性：</strong> TestNG 提供了更多的注解，例如 <code>@BeforeSuite</code>、<code>@AfterSuite</code>、<code>@BeforeTest</code>、<code>@AfterTest</code> 等，使测试方法的组织更加灵活。TestNG 的注解支持更丰富的测试生命周期管理。</p></li><li><p><strong>参数化测试：</strong> TestNG 提供了更强大的参数化测试支持，通过 <code>@DataProvider</code> 注解，可以更轻松地实现数据驱动测试。</p></li><li><p><strong>依赖测试：</strong> TestNG 具有更强大的依赖测试支持，可以通过 <code>dependsOnMethods</code> 或 <code>dependsOnGroups</code> 属性指定测试方法之间的依赖关系，确保测试方法按照指定的顺序执行。</p></li><li><p><strong>测试分组和套件：</strong> TestNG 提供了更灵活的测试分组和测试套件功能，可以按照不同的维度组织测试，更容易管理和执行特定组的测试。</p></li><li><p><strong>并发测试：</strong> TestNG 内置支持并发测试，可以配置测试套件中的测试以并行执行，提高测试效率。</p></li><li><p><strong>监听器支持：</strong> TestNG 提供了丰富的监听器接口，可以通过实现这些接口定制测试执行期间的行为，例如，在测试开始或结束时执行一些操作。</p></li><li><p><strong>软断言（Soft Assertions）：</strong> TestNG 支持软断言，即使在断言失败时，测试方法仍然会继续执行，方便查看所有断言失败的情况。</p></li><li><p><strong>跳过测试：</strong> TestNG 允许在测试方法上使用 <code>@Test(enabled = false)</code> 来标记测试方法为禁用状态，而不需要注释掉整个方法。</p></li></ol><p>虽然JUnit 4也是一个强大而成熟的测试框架，但在一些特定场景下，开发人员可能会更喜欢 TestNG 的一些特性和灵活性。</p><h2 id="java-除了-junit-junit5-testng-还有其他测试框架吗" tabindex="-1"><a class="header-anchor" href="#java-除了-junit-junit5-testng-还有其他测试框架吗"><span>java 除了 junit/junit5/testNG 还有其他测试框架吗？</span></a></h2><p>除了 JUnit、JUnit 5 和 TestNG 之外，Java 中还有一些其他测试框架，每个框架都有其独特的特性和优势。</p><p>以下是一些其他常见的 Java 测试框架：</p><ol><li><p><strong>Spock:</strong></p><ul><li>基于 Groovy 语言的测试框架，结合了灵活的语法和强大的功能，支持行为驱动开发（BDD）风格的测试。</li></ul></li><li><p><strong>TestNG 2:</strong></p><ul><li>TestNG 的后续版本，进一步增强了 TestNG 的功能和灵活性。</li></ul></li><li><p><strong>JUnit Pioneer:</strong></p><ul><li>一个基于 JUnit 5 平台的扩展，提供一些额外的功能和工具。</li></ul></li><li><p><strong>AssertJ:</strong></p><ul><li>不是一个测试框架，而是一个断言库。它提供了丰富而直观的断言，用于提高测试代码的可读性。</li></ul></li><li><p><strong>TestFX:</strong></p><ul><li>用于测试 JavaFX 应用程序的框架，支持图形用户界面（GUI）测试。</li></ul></li><li><p><strong>Mockito:</strong></p><ul><li>虽然不是完整的测试框架，但是 Mockito 用于模拟对象，是一个非常流行的单元测试工具。它可以与 JUnit 或 TestNG 一起使用。</li></ul></li><li><p><strong>Arquillian:</strong></p><ul><li>主要用于企业级 Java 应用程序的集成测试，支持在容器中运行测试，例如在 Java EE 容器中进行测试。</li></ul></li><li><p><strong>RestAssured:</strong></p><ul><li>专注于测试 RESTful API 的库，提供了简单而强大的 API 以进行 HTTP 请求和验证响应。</li></ul></li><li><p><strong>Cucumber:</strong></p><ul><li>用于支持行为驱动开发（BDD）的框架，采用自然语言编写测试场景。</li></ul></li><li><p><strong>Karate:</strong></p></li></ol><ul><li>结合了 API 测试、UI 测试和性能测试的框架，具有自己的领域特定语言（DSL）。</li></ul><h2 id="谈一谈你对-testng-更加深入的理解" tabindex="-1"><a class="header-anchor" href="#谈一谈你对-testng-更加深入的理解"><span>谈一谈你对 testNG 更加深入的理解？</span></a></h2><p>更深入的关于 TestNG 的信息：</p><ol><li><p><strong>Suite 和 Test：</strong> TestNG 中的测试被组织成测试套件（Suite），而测试套件由一个或多个测试（Test）组成。测试套件和测试的组织结构可以在 XML 配置文件中进行定义。</p></li><li><p><strong>参数化测试：</strong> TestNG 提供了强大的参数化测试功能，可以使用 <code>@Parameters</code> 注解将不同的参数传递给测试方法。这使得同一测试方法可以多次运行，每次使用不同的输入参数。</p></li><li><p><strong>数据驱动测试：</strong> TestNG 支持数据驱动测试，可以通过数据提供者（DataProvider）或者通过 <code>@Factory</code> 注解来实现。这使得测试方法可以使用来自不同数据源的输入进行多次执行。</p></li><li><p><strong>监听器和报告：</strong> TestNG 具有丰富的监听器接口，可以通过实现这些接口来监听测试执行过程中的不同事件。同时，TestNG 自动生成详细的测试报告，这些报告包含了测试执行的结果、用时、失败原因等信息。</p></li><li><p><strong>测试分组和依赖：</strong> TestNG 允许测试方法分组，方便按照功能或业务逻辑进行组织。通过 <code>dependsOnMethods</code> 或 <code>dependsOnGroups</code> 属性，可以指定测试方法之间的依赖关系，确保测试方法按照指定的顺序执行。</p></li><li><p><strong>并发测试：</strong> TestNG 具有内置的并发测试支持，可以通过在测试套件或测试方法上设置 <code>parallel</code> 属性来实现并行执行测试，提高测试效率。</p></li><li><p><strong>软断言：</strong> TestNG 支持软断言，这允许在测试方法中执行多个断言，即使一个断言失败，仍然继续执行余下的测试，并在所有断言完成后一次性报告失败。</p></li><li><p><strong>Factory 和监听器的结合使用：</strong> TestNG 中的 <code>@Factory</code> 注解和监听器的结合使用，可以动态生成测试类实例，使测试更加灵活。</p></li></ol><h2 id="给出-junit-junit5-testng-等常见-java-测试框架的对比表格-越详细越好" tabindex="-1"><a class="header-anchor" href="#给出-junit-junit5-testng-等常见-java-测试框架的对比表格-越详细越好"><span>给出 junit/junit5/testNG 等常见 java 测试框架的对比表格，越详细越好</span></a></h2><p>以下是JUnit、JUnit 5和TestNG等常见Java测试框架的对比表格。</p><table><thead><tr><th>功能/特性</th><th>JUnit 4</th><th>JUnit 5</th><th>TestNG</th></tr></thead><tbody><tr><td><strong>注解</strong></td><td><code>@Test</code>, <code>@Before</code>, <code>@After</code>, <code>@Ignore</code>, etc.</td><td><code>@Test</code>, <code>@BeforeEach</code>, <code>@AfterEach</code>, <code>@BeforeAll</code>, <code>@AfterAll</code>, etc.</td><td><code>@Test</code>, <code>@BeforeSuite</code>, <code>@AfterSuite</code>, <code>@BeforeTest</code>, <code>@AfterTest</code>, etc.</td></tr><tr><td><strong>参数化测试</strong></td><td>使用 <code>@Parameters</code> 注解</td><td>支持参数化测试方法，通过 <code>@ParameterizedTest</code> 和 <code>@ValueSource</code> 等注解</td><td>支持参数化测试方法，通过 <code>@Parameters</code> 注解</td></tr><tr><td><strong>断言</strong></td><td>使用 JUnit 提供的 <code>Assert</code> 类</td><td>使用 JUnit 5 提供的 <code>Assertions</code> 类</td><td>使用 TestNG 提供的 <code>Assert</code> 类</td></tr><tr><td><strong>测试生命周期</strong></td><td>单一测试生命周期（<code>@Before</code>和<code>@After</code>在每个测试方法前后执行）</td><td>更灵活的测试生命周期，可以使用 <code>@BeforeEach</code>、<code>@AfterEach</code>、<code>@BeforeAll</code>、<code>@AfterAll</code></td><td>更灵活的测试生命周期，支持 <code>@BeforeSuite</code>、<code>@AfterSuite</code>、<code>@BeforeTest</code>、<code>@AfterTest</code> 等</td></tr><tr><td><strong>依赖测试</strong></td><td>通过方法名指定依赖关系</td><td>使用 <code>dependsOnMethods</code> 属性指定测试方法的依赖关系</td><td>使用 <code>dependsOnMethods</code> 或 <code>dependsOnGroups</code> 属性指定测试方法或测试组之间的依赖关系</td></tr><tr><td><strong>并发测试</strong></td><td>不直接支持并发测试</td><td>支持并发测试，可以配置测试类或测试方法并发执行</td><td>支持并发测试，可以在测试套件或测试方法级别设置并发数</td></tr><tr><td><strong>测试分组</strong></td><td>通过命名规则或自定义注解进行分组</td><td>使用 <code>@Tag</code> 注解进行分组</td><td>使用 <code>@Test(groups = &quot;groupname&quot;)</code> 进行分组</td></tr><tr><td><strong>测试套件</strong></td><td>不直接支持测试套件</td><td>使用 <code>@RunWith</code> 注解和 <code>@Suite</code> 注解支持测试套件</td><td>支持通过 XML 文件配置测试套件</td></tr><tr><td><strong>数据驱动测试</strong></td><td>通常通过参数化测试实现</td><td>支持参数化测试和动态测试（通过 <code>@TestFactory</code> 实现）</td><td>支持数据驱动测试，通过 <code>@DataProvider</code> 注解提供测试数据</td></tr><tr><td><strong>监听器</strong></td><td>通过实现 <code>TestWatcher</code> 接口等实现</td><td>支持扩展 <code>TestExecutionListener</code> 接口和 <code>@ExtendWith</code> 注解</td><td>提供了丰富的监听器接口，通过实现这些接口实现监听功能</td></tr><tr><td><strong>报告生成</strong></td><td>需要依赖第三方插件，如 Ant 或 Maven 插件</td><td>支持通过插件生成报告，如 Maven Surefire 插件</td><td>自动生成详细的 HTML 报告</td></tr><tr><td><strong>软断言</strong></td><td>不支持软断言</td><td>不支持软断言，但可以通过异常处理实现类似的效果</td><td>支持软断言，即使在断言失败时，测试方法仍然会继续执行</td></tr><tr><td><strong>开发者社区</strong></td><td>巨大且成熟</td><td>正在逐渐增长，对于新项目可能还没有 JUnit 4 大</td><td>成熟且广泛使用，拥有强大的社区支持</td></tr></tbody></table><h2 id="给出-testng-的学习资料-包含网址" tabindex="-1"><a class="header-anchor" href="#给出-testng-的学习资料-包含网址"><span>给出 testNG 的学习资料，包含网址</span></a></h2><p>TestNG 是一个流行的 Java 测试框架，用于编写和运行测试。</p><p>以下是一些学习 TestNG 的资源，包括网址：</p><ol><li><p><strong>官方文档</strong>:</p><ul><li><a href="https://testng.org/doc/documentation-main.html" target="_blank" rel="noopener noreferrer">TestNG 官方文档</a> - TestNG 的官方文档是学习的首要资源，包含了详细的教程、示例和配置说明。</li></ul></li><li><p><strong>教程和博客</strong>:</p><ul><li><a href="https://www.tutorialspoint.com/testng/index.htm" target="_blank" rel="noopener noreferrer">TestNG 教程</a> - Tutorialspoint 上的 TestNG 教程提供了简单易懂的指导。</li><li><a href="https://www.mkyong.com/tutorials/testng-tutorials/" target="_blank" rel="noopener noreferrer">Mkyong 的 TestNG 教程</a> - Mkyong 提供了一系列 TestNG 相关的教程和例子。</li><li><a href="https://www.guru99.com/all-about-testng-and-selenium.html" target="_blank" rel="noopener noreferrer">TestNG 教程 - Guru99</a> - Guru99 上的 TestNG 教程覆盖了与 Selenium 结合使用的方面。</li></ul></li><li><p><strong>视频教程</strong>:</p><ul><li><a href="https://www.youtube.com/playlist?list=PLqq-6Pq4lTTZSKAFG6aCDVDP86Qx4lNas" target="_blank" rel="noopener noreferrer">YouTube 上的 TestNG 教程</a> - YouTube 上有许多 TestNG 的视频教程，这个播放列表是其中之一。</li></ul></li><li><p><strong>GitHub 示例</strong>:</p><ul><li><a href="https://github.com/cbeust/testng" target="_blank" rel="noopener noreferrer">TestNG 示例项目</a> - TestNG 的官方 GitHub 存储库包含了示例项目和源代码，可以帮助你深入了解框架的使用。</li></ul></li><li><p><strong>书籍</strong>:</p><ul><li>《Java程序员面试宝典》 - 这本书中包含了有关 TestNG 的基础知识和示例。</li></ul></li></ol><p>请注意，网址和资源可能会随时间变化，建议使用最新版本的 TestNG，并检查相关资源的更新。</p><p>希望这些资源能帮助你更好地学习和使用 TestNG。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://testng.org/doc/documentation-main.html" target="_blank" rel="noopener noreferrer">https://testng.org/doc/documentation-main.html</a></p>`,108)]))}const d=i(n,[["render",l]]),o=JSON.parse('{"path":"/posts/tests/2016-04-26-test-03-testng-framework.html","title":"test-03-java 单元测试框架 testNG 入门介绍","lang":"zh-CN","frontmatter":{"title":"test-03-java 单元测试框架 testNG 入门介绍","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","test"],"published":true,"description":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 快速...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/tests/2016-04-26-test-03-testng-framework.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test-03-java 单元测试框架 testNG 入门介绍"}],["meta",{"property":"og:description","content":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 快速..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test-03-java 单元测试框架 testNG 入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":20.68,"words":6205},"filePathRelative":"posts/tests/2016-04-26-test-03-testng-framework.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2018/06/24/junit5-01-hello\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">junit5 系列</a></p>\\n<p><a href=\\"https://houbb.github.io/2021/07/23/junit-performance-junit5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基于 junit5 实现 junitperf 源码分析</a></p>\\n<p><a href=\\"https://github.com/houbb/data-factory\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p>","autoDesc":true}');export{d as comp,o as data};
