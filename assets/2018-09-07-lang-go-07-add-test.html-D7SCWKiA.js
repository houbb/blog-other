import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-uJE4P3e0.js";const e={};function l(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="chat-介绍如何添加测试用例" tabindex="-1"><a class="header-anchor" href="#chat-介绍如何添加测试用例"><span>chat 介绍如何添加测试用例</span></a></h1><p>在 Go 语言中，编写测试用例是一个很常见的实践，Go 提供了内置的测试框架来方便编写、运行和管理测试代码。</p><p>下面是一个简单的步骤指南，演示如何在 Go 中编写测试用例：</p><ol><li><p><strong>创建测试文件：</strong> 首先，在你的项目目录下创建一个与要测试的文件相同的目录，并在该目录下创建一个以 <code>_test.go</code> 结尾的文件，用于编写测试代码。例如，如果你要测试一个名为 <code>myfunc.go</code> 的文件，那么测试文件可以命名为 <code>myfunc_test.go</code>。</p></li><li><p><strong>导入测试所需的包：</strong> 在测试文件的开头，和正常的 Go 文件一样，你需要导入测试所需的包和被测试的文件。</p></li><li><p><strong>编写测试函数：</strong> 在测试文件中，你需要编写测试函数，这些函数的命名约定是以 <code>Test</code> 开头，后面跟着被测试函数的名字。这些函数应该接受一个名为 <code>t *testing.T</code> 的参数，用于处理测试相关的逻辑。</p></li><li><p><strong>编写测试逻辑：</strong> 在测试函数中，你可以使用 <code>t</code> 参数调用 <code>t.Run</code> 和各种断言函数来测试你的代码。常用的断言函数有 <code>t.Errorf</code>、<code>t.Fatalf</code>、<code>t.Log</code> 和 <code>t.FailNow</code> 等，用于报告错误和记录日志。</p></li><li><p><strong>运行测试：</strong> 使用 Go 提供的 <code>go test</code> 命令来运行测试。在命令行中，进入到包含测试文件的目录，并执行 <code>go test</code> 命令。Go 会自动查找并运行测试文件中的测试函数。</p></li></ol><p>以下是一个简单的示例，演示了如何在 Go 中编写和运行测试用例：</p><p>假设你有一个名为 <code>math.go</code> 的文件，其中包含一个用于加法的函数：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// math.go</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mymath</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，你可以在同一目录下创建一个 <code>math_test.go</code> 文件来编写测试用例：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// math_test.go</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> mymath</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;testing&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TestAdd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">testing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    result</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Errorf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Expected 5, but got </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用命令行在该目录下运行测试：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Go 会执行测试用例，并显示测试结果。</p><p>这只是一个简单的示例，实际编写测试用例可能涉及到更多的测试场景、边界条件和断言。</p><p>但基本的流程和步骤是类似的。通过编写测试用例，你可以确保你的代码在不同场景下能够正常工作，从而提高代码的质量和稳定性。</p><h1 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h1><p>现在您已经将代码放到了稳定的位置（顺便说一下，做得很好），添加一个测试。</p><p>在开发过程中测试代码可能会暴露出在您进行更改时出现的错误。</p><p>在本主题中，您将添加 Hello 函数的测试。</p><p>注意：本主题是从创建 Go 模块开始的多部分教程的一部分。</p><p>Go 对单元测试的内置支持使您可以更轻松地进行测试。</p><p>具体来说，使用命名约定、Go 的测试包和 go test 命令，您可以快速编写和执行测试。</p><h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码"><span>测试代码</span></a></h2><p>在greetings目录中，创建一个名为greetings_test.go的文件。</p><p>以 <strong>_test.go 结尾的文件名告诉 go test 命令该文件包含测试函数</strong>。</p><p>在 greetings_test.go 中，粘贴以下代码并保存文件。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> greetings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;testing&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;regexp&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// TestHelloName calls greetings.Hello with a name, checking</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// for a valid return value.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TestHelloName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">testing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Gladys&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    want</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> regexp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MustCompile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\\b\`</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`\\b\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Gladys&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">want</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MatchString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatalf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`Hello(&quot;Gladys&quot;) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%q</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, want match for </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%#q</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, nil\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">want</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// TestHelloEmpty calls greetings.Hello with an empty string,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// checking for an error.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TestHelloEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">testing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Fatalf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`Hello(&quot;&quot;) = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%q</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, want &quot;&quot;, error\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此代码中，您：</p><ul><li><p>在与您正在测试的代码相同的包中实现测试功能。</p></li><li><p>创建两个测试函数来测试greetings.Hello 函数。 测试函数名称的形式为 TestName，其中 Name 表示有关特定测试的信息。 此外，测试函数将指向测试包的testing.T 类型的指针作为参数。 您可以使用此参数的方法来报告和记录测试。</p></li></ul><p>实施两个测试：</p><ul><li><p>TestHelloName 调用 Hello 函数，传递一个名称值，该函数应该能够返回有效的响应消息。 如果调用返回错误或意外响应消息（不包含您传入的名称），则可以使用 t 参数的 Fatalf 方法将消息打印到控制台并结束执行。</p></li><li><p>TestHelloEmpty 使用空字符串调用 Hello 函数。 此测试旨在确认您的错误处理是否有效。 如果调用返回非空字符串或没有错误，则可以使用 t 参数的 Fatalf 方法将消息打印到控制台并结束执行。</p></li></ul><h2 id="执行测试" tabindex="-1"><a class="header-anchor" href="#执行测试"><span>执行测试</span></a></h2><p>在greetings目录下的命令行中，运行go test命令来执行测试。</p><p><code>go test</code> 命令执行测试文件（名称以 _test.go 结尾）中的测试函数（名称以 Test 开头）。</p><p>您可以添加 -v 标志来获取列出所有测试及其结果的详细输出。</p><p>测试应该通过。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>:\\_go\\01-modules\\greetings</span></span>
<span class="line"><span>λ go test</span></span>
<span class="line"><span>PASS</span></span>
<span class="line"><span>ok      example.com/greetings   1.167s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>D:\\_go\\01-modules\\greetings</span></span>
<span class="line"><span>λ go test -v</span></span>
<span class="line"><span>=== RUN   TestHelloName</span></span>
<span class="line"><span>--- PASS: TestHelloName (0.00s)</span></span>
<span class="line"><span>=== RUN   TestHelloEmpty</span></span>
<span class="line"><span>--- PASS: TestHelloEmpty (0.00s)</span></span>
<span class="line"><span>PASS</span></span>
<span class="line"><span>ok      example.com/greetings   0.061s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，你可以修改测试用例，让其不通过看一下。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://go.dev/doc/tutorial/add-a-test" target="_blank" rel="noopener noreferrer">https://go.dev/doc/tutorial/add-a-test</a></p>`,39)]))}const d=i(e,[["render",l]]),r=JSON.parse('{"path":"/posts/Lang/2018-09-07-lang-go-07-add-test.html","title":"Go Lang-07-Add a test 添加测试","lang":"zh-CN","frontmatter":{"title":"Go Lang-07-Add a test 添加测试","date":"2018-09-07T00:00:00.000Z","categories":["Lang"],"tags":["go","lang","sh"],"published":true,"description":"chat 介绍如何添加测试用例 在 Go 语言中，编写测试用例是一个很常见的实践，Go 提供了内置的测试框架来方便编写、运行和管理测试代码。 下面是一个简单的步骤指南，演示如何在 Go 中编写测试用例： 创建测试文件： 首先，在你的项目目录下创建一个与要测试的文件相同的目录，并在该目录下创建一个以 _test.go 结尾的文件，用于编写测试代码。例如，...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2018-09-07-lang-go-07-add-test.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Go Lang-07-Add a test 添加测试"}],["meta",{"property":"og:description","content":"chat 介绍如何添加测试用例 在 Go 语言中，编写测试用例是一个很常见的实践，Go 提供了内置的测试框架来方便编写、运行和管理测试代码。 下面是一个简单的步骤指南，演示如何在 Go 中编写测试用例： 创建测试文件： 首先，在你的项目目录下创建一个与要测试的文件相同的目录，并在该目录下创建一个以 _test.go 结尾的文件，用于编写测试代码。例如，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go Lang-07-Add a test 添加测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.61,"words":1382},"filePathRelative":"posts/Lang/2018-09-07-lang-go-07-add-test.md","localizedDate":"2018年9月7日","excerpt":"\\n<p>在 Go 语言中，编写测试用例是一个很常见的实践，Go 提供了内置的测试框架来方便编写、运行和管理测试代码。</p>\\n<p>下面是一个简单的步骤指南，演示如何在 Go 中编写测试用例：</p>\\n<ol>\\n<li>\\n<p><strong>创建测试文件：</strong> 首先，在你的项目目录下创建一个与要测试的文件相同的目录，并在该目录下创建一个以 <code>_test.go</code> 结尾的文件，用于编写测试代码。例如，如果你要测试一个名为 <code>myfunc.go</code> 的文件，那么测试文件可以命名为 <code>myfunc_test.go</code>。</p>\\n</li>\\n<li>\\n<p><strong>导入测试所需的包：</strong> 在测试文件的开头，和正常的 Go 文件一样，你需要导入测试所需的包和被测试的文件。</p>\\n</li>\\n<li>\\n<p><strong>编写测试函数：</strong> 在测试文件中，你需要编写测试函数，这些函数的命名约定是以 <code>Test</code> 开头，后面跟着被测试函数的名字。这些函数应该接受一个名为 <code>t *testing.T</code> 的参数，用于处理测试相关的逻辑。</p>\\n</li>\\n<li>\\n<p><strong>编写测试逻辑：</strong> 在测试函数中，你可以使用 <code>t</code> 参数调用 <code>t.Run</code> 和各种断言函数来测试你的代码。常用的断言函数有 <code>t.Errorf</code>、<code>t.Fatalf</code>、<code>t.Log</code> 和 <code>t.FailNow</code> 等，用于报告错误和记录日志。</p>\\n</li>\\n<li>\\n<p><strong>运行测试：</strong> 使用 Go 提供的 <code>go test</code> 命令来运行测试。在命令行中，进入到包含测试文件的目录，并执行 <code>go test</code> 命令。Go 会自动查找并运行测试文件中的测试函数。</p>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,r as data};
