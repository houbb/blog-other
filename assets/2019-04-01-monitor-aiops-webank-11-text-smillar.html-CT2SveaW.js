import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as n}from"./app-CEDSurVN.js";const i={};function p(c,e){return n(),a("div",null,e[0]||(e[0]=[r('<h1 id="webank-系列" tabindex="-1"><a class="header-anchor" href="#webank-系列"><span>webank 系列</span></a></h1><p>智能运维系列（一）| AIOps 的崛起与实践：<a href="https://www.infoq.cn/article/fqUfkjhecOla1zKUKycN" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/fqUfkjhecOla1zKUKycN</a><br> 智能运维系列（二）| 智能化监控领域探索：<a href="https://www.infoq.cn/article/Qta6VCyjvHdoiJg5wKze" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/Qta6VCyjvHdoiJg5wKze</a><br> 智能运维系列（三）| 浅析智能异常检测：“慧识图”核心算法：<a href="https://www.infoq.cn/article/mryjNLXOlujV7fkQFUaL" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/mryjNLXOlujV7fkQFUaL</a><br> 智能运维系列（四）| 曝光交易路径：<a href="https://www.infoq.cn/article/a72WeEMuM1O63iX1w0ZK" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/a72WeEMuM1O63iX1w0ZK</a><br> 智能运维系列（五）| 浅析基于知识图谱的根因分析系统：<a href="https://www.infoq.cn/article/cUYWKqYxrBamV7GwVVjM" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/cUYWKqYxrBamV7GwVVjM</a><br> 智能运维系列（六）| 如何通过智能化手段将运维管理要求落地？：<a href="https://www.infoq.cn/article/Wj4PJBg41SlA0fl6glIv" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/Wj4PJBg41SlA0fl6glIv</a><br> 智能运维系列（七）| 化繁为简：业务异常的根因定位方法概述：<a href="https://cloud.tencent.com/developer/news/665441" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/news/665441</a><br> 智能运维系列（八）| 事件指纹库：构建异常案例的“博物馆” <a href="https://www.infoq.cn/article/4hxfwtcfonjz7jjrfxzq" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/4hxfwtcfonjz7jjrfxzq</a><br> 智能运维系列（九）| 基于交易树的根因告警定位方法 <a href="https://www.infoq.cn/article/t1ytbqmbkp7xxdajkv1p" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/t1ytbqmbkp7xxdajkv1p</a><br> 智能运维系列（十）| 浅析根因告警的系统分析法 <a href="https://www.infoq.cn/article/m78zwql2nc4sdpapcxpg" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/m78zwql2nc4sdpapcxpg</a><br> 智能运维系列（十一）| 日志文本异常聚类及相似度检测 <a href="https://www.infoq.cn/article/kynuvjmfxhtommvdo35t" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/kynuvjmfxhtommvdo35t</a></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>互联网公司在实际运营过程中，所维护的各项业务随时可能会遇到各种各样的问题，将各系统的运行日志记录在文件中，从而方便排查和定位问题，是目前普遍采用的做法。</p><p>但是，在目前已经广泛流行的分布式架构的系统中，复杂的配置仍然缺乏灵活性，很难形成统一的标准，且对运维人员不够友好。</p><p>因此，微众技术团队提出了基于机器学习算法进行日志分类、聚类、并转化为时间序列的日志异常检测解决方案。</p><p>本文收录在专题《智能时代下的运维》系列 。</p><p>互联网公司在实际运营过程中，所维护的各项业务随时可能会遇到各种各样的问题，将各系统的运行日志记录在文件中，从而方便排查和定位问题，是目前普遍采用的做法。</p><p>但是，在实际应用过程中，日志中有用的信息隐藏在冗余的日志文本中，目前常用的处理机制很难从中提炼有价值的信息。</p><p>为了解决以上痛点，目前业界较为良好的开源日志处理框架 ELK 可以解决了部分需求。</p><p>总的来讲，ELK 的解决方案是通过在采集端配置预设的日志正则表达式模板，将匹配到的日志解析成各种范式，然后在后台进行时间、日志级别、主机 ip 地址等维度的汇总，从而实现日志的解析和统计功能。</p><p>图 1 ELK 的处理方案，采用配置模板进行日志解析</p><figure><img src="https://static001.infoq.cn/resource/image/f5/a3/f519cf970c789cdcd304f915864b77a3.png" alt="ELK" tabindex="0" loading="lazy"><figcaption>ELK</figcaption></figure><p>另外，阿里云也有类似的解决方案。</p><p>阿里云的解决方案在 ELK 中更进了一步，即通过设置一个“日志分类灵敏度”的功能控件，来决定应该以什么样的粒度来进行日志的聚类和收敛。</p><p>图 2 阿里云 LiveTail 日志聚类解决方案</p><figure><img src="https://static001.infoq.cn/resource/image/a3/52/a37dda0b54ddc5cb98649ea640220452.png" alt="聚类" tabindex="0" loading="lazy"><figcaption>聚类</figcaption></figure><p>但是，无论是 ELK 还是阿里云，仍然需要用户配置日志模板。在目前已经广泛流行的分布式架构的系统中，复杂的配置仍然缺乏灵活性，很难形成统一的标准，且对运维人员不够友好。</p><p>另一方面，根据模板生成的日志汇总数据仍然缺乏很好的自说明性，即汇总的数据除非有良好的注释信息，否则对代码逻辑缺乏详细了解的开发运维人员在看到信息时，仍然很难判断此时系统是否处于异常状态。</p><p>基于此，我们提出了基于机器学习算法进行日志分类、聚类、并转化为时间序列的日志异常检测解决方案，下面为大家详细介绍。</p><h1 id="基于-tf-idf-的模型" tabindex="-1"><a class="header-anchor" href="#基于-tf-idf-的模型"><span>基于 TF-IDF 的模型</span></a></h1><p>首先，考虑到日志的量级较大，我们先对日志进行聚类处理，将相似的文本收敛到可以处理的量级。</p><p>这里我们将所有重要子系统的日志进行文本清洗，并引入词频和逆文档频率（TF-IDF）的建模方法对文档信息进行数学建模，得到一个语料库。</p><p>然后将清洗后的日志信息在语料库中映射得到其对应的 TF-IDF 向量。</p><p>这时，我们便得到了每条日志在系统中的唯一数字化表达。</p><p>图 3 TF-IDF 原理示意图</p><figure><img src="https://static001.infoq.cn/resource/image/10/d4/10bb29eeb7614636e545d0eb77yye9d4.png" alt="文本相似度" tabindex="0" loading="lazy"><figcaption>文本相似度</figcaption></figure><h1 id="文本相似性算法" tabindex="-1"><a class="header-anchor" href="#文本相似性算法"><span>文本相似性算法</span></a></h1><p>但是，此时系统中仍有上百万条这样的日志，我们需要对这些信息进行收敛。</p><p>这时，我们需要采用一种文本相似度算法来检测每条信息的相似性，从而将日志文本中结构相同、但信息不同的语素归为一类。</p><p>例如，我们在代码中，记录了一条这样一条日志：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">logger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(“你有新的订单，订单 id</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}, 订单编号</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}， 订单金额</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}”, id, No, money)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要想解析并统计该日志，传统的做法是，对该类日志配置一条解析模板，然后通过正则表达式进行解析，然后归为同类日志，再进行统计汇总。</p><p>但是出于灵活性和简化配置的目标，我们希望系统能够自动将这样两条信息识别为一类。</p><p>我们的做法是：采用文本相似度算法进行相似度计算。</p><p>首先采用的方案是编辑距离。编辑距离是 Levenshtein 提出的用于计算字符串相似度的算法。</p><p>编辑距离是指由原字符串 S 变化到目标字符串 D 所需的最少操作次数，其中涉及的操作有：针对单个字符的插入、删除、替换。</p><p>图 4 evenshtein 算法原理图</p><figure><img src="https://static001.infoq.cn/resource/image/ab/2d/ab74e44f40be8yyb2c7f40c247c1002d.png" alt="evenshtein 算法原理图" tabindex="0" loading="lazy"><figcaption>evenshtein 算法原理图</figcaption></figure><p>但是，在生产实践中，编辑距离仍然存在一定的问题，性能消耗过大。</p><p>在生产环境实时检测的场景中，由于日志量巨大， 且需要与库中已有的语料库进行一一比对，所以不能满足实时性的要求。</p><p>所以我们又引入了 Jaccard 距离检测算法。</p><ul><li>图 5 Jaccard 距离公式</li></ul><figure><img src="https://static001.infoq.cn/resource/image/43/97/433df9b30e1bf098915dd1c3b7d6c797.png" alt="Jaccard 距离公式" tabindex="0" loading="lazy"><figcaption>Jaccard 距离公式</figcaption></figure><p>Jaccard 算法的优点在于简洁高效，每检测万条日志文本的平均耗时大概在 300ms 左右，能够极大的满足实时性要求。</p><p>然而，它同时带来的问题是算法过于简单，容易产生一定概率的误判。</p><p>所以，在最终使用的过程中，我们<strong>用 Jaccard 距离进行一次初步的筛选，将相似度相差较大的日志筛选掉；然后再使用编辑距离进行判断，即可大大减少其算法带来的性能消耗，又保证了最终结果的准确性</strong>。</p><ul><li>图 6 文本比对算法流程图</li></ul><figure><img src="https://static001.infoq.cn/resource/image/70/fa/70ec313a31ece59f8da7a12fcce3e3fa.png" alt="算法逻辑" tabindex="0" loading="lazy"><figcaption>算法逻辑</figcaption></figure><p>至此，我们就能对系统中所有的日志进行聚类收敛，从而将系统中产生的所有日志都赋予一条系统唯一 id。</p><h1 id="简单标注后使用分类器" tabindex="-1"><a class="header-anchor" href="#简单标注后使用分类器"><span>简单标注后使用分类器</span></a></h1><p>接下来，我们需要对日志文本进行分类。</p><p>这里首先是一个二分类问题，即日志产生时，是否携带异常信息，且会造成系统异常。</p><p>比如：OOM 类的异常日志一旦产生，则会造成系统的严重问题，此时应给予重点关注；NullPointerException 之类的问题可能会带来一些未知问题，需要 Warning 级别的告警，而一些常见问题则需要给予相对较低的处理优先级。</p><p>最为直观的做法是，根据日志级别进行简单的分级，比如[error]级别的日志即为有异常的日志，[info]级别的日志即为正常的日志。</p><p>但是，由于日志本身非标准化的特点，开发人员在打日志的过程中，没有标准可以参照，不同的开发人员打出的日志往往有着不同的特点；另外，不同的系统也有不同健壮性的特征，同样的日志在有的系统中可能会造成较大的影响，有的则不会。</p><p>基于此，我们需要对日志进行标注，将不同时间段的日志信息进行 safe/critical 的标注，并训练出相应的分类器，对日志文本进行文本分类。</p><p>这里，仍然采用上一步中训练得到的语料库，对每条日志文本进行 TF-IDF 向量化。</p><p>然后将向量化后的数据采用分类算法对其进行分类。我们分别采用了朴素贝叶斯、随机森林、fastCNN、xgboost 等对其进行训练， 最终在朴素贝叶斯和随机森林的分类下取得较好的分类结果。</p><p>最后，我们对聚类和分类后的信息按时间进行汇总，得到时间序列维度的数据，从而可以基于时间维度对不同的日志文本根据统计特征进行异常检测。再通过结合主机性能、网络运行情况等多种指标特征，进行综合指标异常检测及分析。</p><p>在效果方面，以我司 A 类重要级别子系统的数据收敛状况为例来进行讲解。</p><p>重要产品 A 类子系统共 116 个，每天产生的总日志数量平均为 900 万条。经过聚类算法收敛后的日志总量约为 1.5 万条，信息降噪比平均为 99.7%，有效的进行了日志的收敛和信息降噪。</p><p>从分类的准确率来讲，每个分类的平均准确率在 95%左右。</p><figure><img src="https://static001.infoq.cn/resource/image/7c/52/7c061e1438d24b428b2e53d8d4440c52.png" alt="准确率" tabindex="0" loading="lazy"><figcaption>准确率</figcaption></figure><p>以上就是日志文本异常聚类及相似度检测的相关介绍，如果希望了解我们在智能运维中使用的机器学习算法以及支持根因分析的具体方法，请参阅该系列其他文章。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://www.infoq.cn/article/m78zwql2nc4sdpapcxpg" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/m78zwql2nc4sdpapcxpg</a></p>',67)]))}const l=t(i,[["render",p]]),f=JSON.parse('{"path":"/posts/devops/2019-04-01-monitor-aiops-webank-11-text-smillar.html","title":"监控系统 AIOps webbank-11-智能运维系列（十一）| 日志文本异常聚类及相似度检测","lang":"zh-CN","frontmatter":{"title":"监控系统 AIOps webbank-11-智能运维系列（十一）| 日志文本异常聚类及相似度检测","date":"2018-11-25T00:00:00.000Z","categories":["Devops"],"tags":["devops","monitor","apm","ai","aiops","sh"],"published":true,"description":"webank 系列 智能运维系列（一）| AIOps 的崛起与实践：https://www.infoq.cn/article/fqUfkjhecOla1zKUKycN 智能运维系列（二）| 智能化监控领域探索：https://www.infoq.cn/article/Qta6VCyjvHdoiJg5wKze 智能运维系列（三）| 浅析智能异常检测：“慧...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/devops/2019-04-01-monitor-aiops-webank-11-text-smillar.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"监控系统 AIOps webbank-11-智能运维系列（十一）| 日志文本异常聚类及相似度检测"}],["meta",{"property":"og:description","content":"webank 系列 智能运维系列（一）| AIOps 的崛起与实践：https://www.infoq.cn/article/fqUfkjhecOla1zKUKycN 智能运维系列（二）| 智能化监控领域探索：https://www.infoq.cn/article/Qta6VCyjvHdoiJg5wKze 智能运维系列（三）| 浅析智能异常检测：“慧..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://static001.infoq.cn/resource/image/f5/a3/f519cf970c789cdcd304f915864b77a3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"monitor"}],["meta",{"property":"article:tag","content":"apm"}],["meta",{"property":"article:tag","content":"ai"}],["meta",{"property":"article:tag","content":"aiops"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-11-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监控系统 AIOps webbank-11-智能运维系列（十一）| 日志文本异常聚类及相似度检测\\",\\"image\\":[\\"https://static001.infoq.cn/resource/image/f5/a3/f519cf970c789cdcd304f915864b77a3.png\\",\\"https://static001.infoq.cn/resource/image/a3/52/a37dda0b54ddc5cb98649ea640220452.png\\",\\"https://static001.infoq.cn/resource/image/10/d4/10bb29eeb7614636e545d0eb77yye9d4.png\\",\\"https://static001.infoq.cn/resource/image/ab/2d/ab74e44f40be8yyb2c7f40c247c1002d.png\\",\\"https://static001.infoq.cn/resource/image/43/97/433df9b30e1bf098915dd1c3b7d6c797.png\\",\\"https://static001.infoq.cn/resource/image/70/fa/70ec313a31ece59f8da7a12fcce3e3fa.png\\",\\"https://static001.infoq.cn/resource/image/7c/52/7c061e1438d24b428b2e53d8d4440c52.png\\"],\\"datePublished\\":\\"2018-11-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":8.77,"words":2632},"filePathRelative":"posts/devops/2019-04-01-monitor-aiops-webank-11-text-smillar.md","localizedDate":"2018年11月25日","excerpt":"\\n<p>智能运维系列（一）| AIOps 的崛起与实践：<a href=\\"https://www.infoq.cn/article/fqUfkjhecOla1zKUKycN\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/fqUfkjhecOla1zKUKycN</a><br>\\n智能运维系列（二）| 智能化监控领域探索：<a href=\\"https://www.infoq.cn/article/Qta6VCyjvHdoiJg5wKze\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/Qta6VCyjvHdoiJg5wKze</a><br>\\n智能运维系列（三）| 浅析智能异常检测：“慧识图”核心算法：<a href=\\"https://www.infoq.cn/article/mryjNLXOlujV7fkQFUaL\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/mryjNLXOlujV7fkQFUaL</a><br>\\n智能运维系列（四）| 曝光交易路径：<a href=\\"https://www.infoq.cn/article/a72WeEMuM1O63iX1w0ZK\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/a72WeEMuM1O63iX1w0ZK</a><br>\\n智能运维系列（五）| 浅析基于知识图谱的根因分析系统：<a href=\\"https://www.infoq.cn/article/cUYWKqYxrBamV7GwVVjM\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/cUYWKqYxrBamV7GwVVjM</a><br>\\n智能运维系列（六）| 如何通过智能化手段将运维管理要求落地？：<a href=\\"https://www.infoq.cn/article/Wj4PJBg41SlA0fl6glIv\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/Wj4PJBg41SlA0fl6glIv</a><br>\\n智能运维系列（七）| 化繁为简：业务异常的根因定位方法概述：<a href=\\"https://cloud.tencent.com/developer/news/665441\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://cloud.tencent.com/developer/news/665441</a><br>\\n智能运维系列（八）| 事件指纹库：构建异常案例的“博物馆” <a href=\\"https://www.infoq.cn/article/4hxfwtcfonjz7jjrfxzq\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/4hxfwtcfonjz7jjrfxzq</a><br>\\n智能运维系列（九）| 基于交易树的根因告警定位方法 <a href=\\"https://www.infoq.cn/article/t1ytbqmbkp7xxdajkv1p\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/t1ytbqmbkp7xxdajkv1p</a><br>\\n智能运维系列（十）| 浅析根因告警的系统分析法 <a href=\\"https://www.infoq.cn/article/m78zwql2nc4sdpapcxpg\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/m78zwql2nc4sdpapcxpg</a><br>\\n智能运维系列（十一）| 日志文本异常聚类及相似度检测 <a href=\\"https://www.infoq.cn/article/kynuvjmfxhtommvdo35t\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.infoq.cn/article/kynuvjmfxhtommvdo35t</a></p>","autoDesc":true}');export{l as comp,f as data};
