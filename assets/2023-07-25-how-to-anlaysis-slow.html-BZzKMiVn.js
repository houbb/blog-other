import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as p,o as s}from"./app-CEDSurVN.js";const n={};function o(i,e){return s(),t("div",null,e[0]||(e[0]=[p('<h1 id="现象" tabindex="-1"><a class="header-anchor" href="#现象"><span>现象</span></a></h1><p>测试在压测环境，发现因为了升级了一下日志包组件，导致性能下降厉害（30%）。</p><p>需要分析原因？</p><h1 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h1><h2 id="代码是否真的存在问题" tabindex="-1"><a class="header-anchor" href="#代码是否真的存在问题"><span>代码是否真的存在问题</span></a></h2><p>是否所有的性能都下降?</p><p>如果全部下降，则针对升级的部分做代码分析+本地结合 jvisual 分析慢在哪里即可。</p><p>发现不是，那么就针对这一个应用具体分析。</p><p>这里发现就是特定应用的一个压测变慢了。</p><h2 id="qps-下降初步判断" tabindex="-1"><a class="header-anchor" href="#qps-下降初步判断"><span>QPS 下降初步判断</span></a></h2><p>整体看是压测的 QPS 下降。</p><p>随便抽取几笔日志查看，大部分的耗时在 10ms 左右，但是整体压测的平均耗时却是 60ms 左右。</p><p>每一次都是相同的请求参数，除了订单号差异。</p><p>我们要看为什么慢，就去找比较慢的操作才行。</p><p>目前的很多 ELK 等日志体系，对于耗时的模糊匹配支持不友好。</p><h2 id="找到慢日志" tabindex="-1"><a class="header-anchor" href="#找到慢日志"><span>找到慢日志</span></a></h2><p>如果有比较好的工具，直接统计出来。</p><p>如果日志分析工具不够强大，比如我想找耗时 200-299ms 之间的日志。</p><p>可以使用如下的命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>grep &quot;业务关键词&quot; xxx.log | grep &quot;日志关键词2&quot; | egrep &#39;cost=[2][0-9][0-9]&#39; | tail</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>主要是 <code>egrep &#39;cost=[2][0-9][0-9]&#39;</code> 正则 grep 可以把耗时 200-299 的日志找出来，</p><p>然后结合日志，分析整个调用链路。</p><h2 id="慢日志区间定位" tabindex="-1"><a class="header-anchor" href="#慢日志区间定位"><span>慢日志区间定位</span></a></h2><p>找了几笔慢的操作，都发现在 log1 和 log2 间隔非常久。</p><p>查代码，找到 log1 和 log2 的位置，发现是一个 mq 调用。</p><h2 id="是否是-gc" tabindex="-1"><a class="header-anchor" href="#是否是-gc"><span>是否是 GC？</span></a></h2><p>发现 CAT 上这个时间存在 young GC，但是 gc 耗时只有 60ms 左右。</p><p>但是慢操作的耗时介于 60~400ms 的都有。</p><p>所以可以排除是 gc 的问题，而且每一次都是这个位置，gc 不可能每一次都这么巧。</p><p>就算是 gc，那么慢的时间长度应该一致，而不是波动这么大。</p><h2 id="耗时操作的确认" tabindex="-1"><a class="header-anchor" href="#耗时操作的确认"><span>耗时操作的确认</span></a></h2><p>所以怀疑就是 mq 的问题。</p><p>比如 database/cache/rpc/http 这些都值得怀疑。</p><p>不过在怀疑之前，我们可以做一些其他因素的排除，比如把本次新增的功能，比如日志 aop 切面/脱敏等功能全部关闭，排除新的因素影响。</p><p>发现关闭之后压测无变化，所以最后只剩下一个资源问题。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>性能的分析，主要是思路要明确。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>',38)]))}const c=a(n,[["render",o]]),l=JSON.parse('{"path":"/posts/test/2023-07-25-how-to-anlaysis-slow.html","title":"java 应用性能下降，如何分析定位原因？","lang":"zh-CN","frontmatter":{"title":"java 应用性能下降，如何分析定位原因？","date":"2023-07-25T00:00:00.000Z","categories":["Test"],"tags":["test","perf","in-action","linux","sh"],"published":true,"description":"现象 测试在压测环境，发现因为了升级了一下日志包组件，导致性能下降厉害（30%）。 需要分析原因？ 思路 代码是否真的存在问题 是否所有的性能都下降? 如果全部下降，则针对升级的部分做代码分析+本地结合 jvisual 分析慢在哪里即可。 发现不是，那么就针对这一个应用具体分析。 这里发现就是特定应用的一个压测变慢了。 QPS 下降初步判断 整体看是压...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/test/2023-07-25-how-to-anlaysis-slow.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"java 应用性能下降，如何分析定位原因？"}],["meta",{"property":"og:description","content":"现象 测试在压测环境，发现因为了升级了一下日志包组件，导致性能下降厉害（30%）。 需要分析原因？ 思路 代码是否真的存在问题 是否所有的性能都下降? 如果全部下降，则针对升级的部分做代码分析+本地结合 jvisual 分析慢在哪里即可。 发现不是，那么就针对这一个应用具体分析。 这里发现就是特定应用的一个压测变慢了。 QPS 下降初步判断 整体看是压..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"perf"}],["meta",{"property":"article:tag","content":"in-action"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2023-07-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java 应用性能下降，如何分析定位原因？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.21,"words":663},"filePathRelative":"posts/test/2023-07-25-how-to-anlaysis-slow.md","localizedDate":"2023年7月25日","excerpt":"\\n<p>测试在压测环境，发现因为了升级了一下日志包组件，导致性能下降厉害（30%）。</p>\\n<p>需要分析原因？</p>\\n<h1>思路</h1>\\n<h2>代码是否真的存在问题</h2>\\n<p>是否所有的性能都下降?</p>\\n<p>如果全部下降，则针对升级的部分做代码分析+本地结合 jvisual 分析慢在哪里即可。</p>\\n<p>发现不是，那么就针对这一个应用具体分析。</p>\\n<p>这里发现就是特定应用的一个压测变慢了。</p>\\n<h2>QPS 下降初步判断</h2>\\n<p>整体看是压测的 QPS 下降。</p>\\n<p>随便抽取几笔日志查看，大部分的耗时在 10ms 左右，但是整体压测的平均耗时却是 60ms 左右。</p>","autoDesc":true}');export{c as comp,l as data};
