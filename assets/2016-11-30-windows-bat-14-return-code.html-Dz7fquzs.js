import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-CEDSurVN.js";const e={};function l(h,i){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="错误码" tabindex="-1"><a class="header-anchor" href="#错误码"><span>错误码</span></a></h1><p><strong>常见的退出代码及其描述</strong></p><table><thead><tr><th>错误代码</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>程序成功完成。</td></tr><tr><td>1</td><td>不正确的功能。指示在 Windows 命令提示符 cmd.exe 中尝试执行无法识别的命令。</td></tr><tr><td>2</td><td>找不到指定的文件。指示文件无法在指定位置找到。</td></tr><tr><td>3</td><td>找不到指定的路径。指示找不到指定的路径。</td></tr><tr><td>5</td><td>拒绝访问。指示用户对指定资源没有访问权限。</td></tr><tr><td>9009</td><td>0x2331程序未被识别为内部或外部命令、可操作的程序或批处理文件。指示在配置操作时命令、应用程序名称或路径拼写错误。</td></tr><tr><td>2212254950xC0000017-1073741801</td><td>虚拟内存不足。表示 Windows 已耗尽内存。</td></tr><tr><td>32212257860xC000013A-1073741510</td><td>应用程序由于 CTRL+C 终止。表示应用程序已由用户的键盘输入 CTRL+C 或 CTRL+Break，或关闭命令提示符窗口而终止。</td></tr><tr><td>32212257940xC0000142-1073741502</td><td>应用程序无法正确初始化。表示应用程序已在当前用户无访问权限的桌面上启动。另一个可能的原因是 gdi32.dll 或 user32.dll 未能初始化。</td></tr></tbody></table><p>这些错误代码有助于确定命令行执行的结果，并帮助解决问题。</p><h1 id="错误级别" tabindex="-1"><a class="header-anchor" href="#错误级别"><span><strong>错误级别</strong></span></a></h1><p>环境变量 %ERRORLEVEL% 包含最后执行的程序或脚本的返回代码。</p><p>默认情况下，检查 ERRORLEVEL 的方式如下所示。</p><p><strong>语法</strong></p><div class="language-batch line-numbers-mode" data-highlighter="shiki" data-ext="batch" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IF</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> %ERRORLEVEL%</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> NEQ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   DO_Something </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，在批处理文件的末尾使用命令 EXIT /B %ERRORLEVEL% 返回批处理文件的错误代码。</p><p>在批处理文件的末尾使用 EXIT /B 将停止批处理文件的执行。</p><p>在批处理文件的末尾使用 EXIT /B 返回自定义返回代码。</p><p>环境变量 %ERRORLEVEL% 包含批处理文件中最新的错误级别，即最后执行的命令的最新错误代码。在批处理文件中，使用环境变量而不是常量值是一种良好的做法，因为相同的变量在不同计算机上会扩展为不同的值。</p><p>让我们看一个快速示例，演示如何从批处理文件中检查错误代码。</p><p><strong>示例</strong><br> 假设我们有一个名为 Find.cmd 的批处理文件，其中包含以下代码。在代码中，我们明确指定如果找不到名为 lists.txt 的文件，则应将错误级别设置为 7。同样，如果我们发现未定义变量 userprofile，则应将错误级别代码设置为 9。</p><div class="language-batch line-numbers-mode" data-highlighter="shiki" data-ext="batch" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> not</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c:\\lists.txt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> not</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defined</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userprofile </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">exit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们有另一个名为 App.cmd 的文件，首先调用 Find.cmd。现在，如果 Find.cmd 返回一个错误，其中它将错误级别设置为大于 0，那么它将退出程序。在以下批处理文件中，在调用 Find.cnd find 后，它实际上检查错误级别是否大于 0。</p><div class="language-batch line-numbers-mode" data-highlighter="shiki" data-ext="batch" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Find.cmd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> errorlevel</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> gtr</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> “Successful completion”</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong><br> 在上述程序中，可能会有以下情景作为输出:</p><ul><li>如果文件 c:\\lists.txt 不存在，则控制台输出中将不会显示任何内容。</li><li>如果变量 userprofile 不存在，则控制台输出中将不会显示任何内容。</li><li>如果上述两个条件都通过，则在命令提示符中显示字符串 “Successful completion”。</li></ul><h1 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span><strong>循环</strong></span></a></h1><p>在决策制作章节中，我们已经看到了按顺序执行的语句。此外，也可以在批处理脚本中实现控制流的更改。</p><p>然后，它们被分类为控制流语句。</p><table><thead><tr><th>序号</th><th>循环及描述</th></tr></thead><tbody><tr><td>1</td><td>While 语句实现</td></tr><tr><td>2</td><td>For 语句 - 列表实现</td></tr><tr><td>3</td><td>通过范围循环</td></tr><tr><td>4</td><td>经典的 for 循环实现</td></tr><tr><td>5</td><td>循环遍历命令行参数</td></tr><tr><td>6</td><td>Break 语句实现</td></tr></tbody></table><p><strong>While 语句实现</strong></p><p>Batch Script 中没有直接的 while 语句，但是我们可以很容易地通过使用 if 语句和标签来实现这个循环。</p><p><strong>For 语句 - 列表实现</strong></p><p>&quot;FOR&quot; 结构为批处理文件提供了循环功能。以下是与一组值一起使用 &#39;for&#39; 语句的常用构造。</p><p><strong>通过范围循环</strong></p><p>‘for’ 语句还可以移动到一系列值。以下是语句的一般形式。</p><p><strong>经典的 for 循环实现</strong></p><p>以下是大多数编程语言中都可用的经典 ‘for’ 语句。</p><p><strong>循环遍历命令行参数</strong></p><p>‘for’ 语句也可以用于检查命令行参数。以下示例显示了如何使用 ‘for’ 语句循环遍历命令行参数。</p><p><strong>示例</strong></p><div class="language-batch line-numbers-mode" data-highlighter="shiki" data-ext="batch" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ECHO</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IF</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#50A14F;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GOTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> completed </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FOR</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> %%F</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">%1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DO</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> echo</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> %%F</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SHIFT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GOTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Loop </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">completed</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong><br> 假设我们上面的代码存储在一个名为 Test.bat 的文件中。如果批处理文件将命令行参数 1、2 和 3 传递给 Test.bat，则上述命令将产生以下输出。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 </span></span>
<span class="line"><span>2 </span></span>
<span class="line"><span>3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Break 语句实现</strong></p><p>break 语句用于更改任何编程语言中循环内的控制流。break 语句通常用于循环结构，并用于立即终止最内层的循环。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍下-bat-的返回码" tabindex="-1"><a class="header-anchor" href="#详细介绍下-bat-的返回码"><span>详细介绍下 bat 的返回码</span></a></h2><p>在批处理（Batch）文件中，返回码（Exit Code）是一个数字，它表示命令或程序执行完成后的状态。返回码用于指示命令是否成功执行，以及执行的结果是否符合预期。在批处理编程中，返回码非常重要，因为它们允许脚本来根据前一个命令的执行结果进行条件判断和流程控制。</p><h3 id="返回码的基本概念" tabindex="-1"><a class="header-anchor" href="#返回码的基本概念"><span>返回码的基本概念</span></a></h3><ul><li><strong>成功返回码</strong>：通常，返回码 <code>0</code> 表示命令或程序成功执行，没有错误发生。</li><li><strong>错误返回码</strong>：非零返回码通常表示命令执行出错或未能按预期完成。不同的错误返回码可以表示不同类型的错误或状态。</li></ul><h3 id="使用返回码" tabindex="-1"><a class="header-anchor" href="#使用返回码"><span>使用返回码</span></a></h3><p>在批处理文件中，可以使用 <code>errorlevel</code> 变量来引用前一个命令的返回码。这个变量在命令执行后立即更新，可以用来进行条件判断。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">rem</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 执行一个命令，比如dir</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nonExistentFile</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">rem</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 检查返回码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> errorlevel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> The file or directory was not found.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> The command was successful.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，如果 <code>dir</code> 命令成功找到文件或目录，则 <code>errorlevel</code> 将为 <code>0</code>；如果文件或目录不存在，<code>errorlevel</code> 将为 <code>1</code>。</p><h3 id="特殊返回码" tabindex="-1"><a class="header-anchor" href="#特殊返回码"><span>特殊返回码</span></a></h3><ul><li><code>0</code>：成功完成，没有错误。</li><li><code>1</code>：错误发生，通常是通用错误指示。</li><li><code>2</code>：意味着命令被正确解释，但执行时出现错误，如 <code>dir</code> 找不到指定的文件。</li></ul><h3 id="修改返回码" tabindex="-1"><a class="header-anchor" href="#修改返回码"><span>修改返回码</span></a></h3><p>在批处理文件中，可以使用 <code>exit /b</code> 命令来设置批处理脚本的返回码，并从批处理文件中退出。这对于从批处理文件中传递执行状态给调用它的程序或脚本非常有用。</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">rem</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 一些命令...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">rem</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 根据条件设置返回码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> some_condition (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Success</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /b </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Failure</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /b </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>批处理文件的默认返回码是最后一个执行命令的返回码。</li><li>使用 <code>exit</code> 命令（不带 <code>/b</code>）将退出整个批处理脚本，并且不能从批处理文件中传递返回码。</li><li>在批处理文件中，返回码是区分命令执行成功与否的关键，因此正确地使用和解释返回码对于脚本的健壮性至关重要。</li></ul><p>返回码是批处理脚本中进行条件逻辑和错误处理的重要工具，通过它们可以实现更加复杂和灵活的批处理自动化任务。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://www.tutorialspoint.com/batch_script/batch_script_return_code.htm" target="_blank" rel="noopener noreferrer">https://www.tutorialspoint.com/batch_script/batch_script_return_code.htm</a></p>`,60)]))}const p=s(e,[["render",l]]),k=JSON.parse('{"path":"/posts/windows/2016-11-30-windows-bat-14-return-code.html","title":"windows bat 脚本教程-14-return code 返回编码","lang":"zh-CN","frontmatter":{"title":"windows bat 脚本教程-14-return code 返回编码","date":"2016-11-30T00:00:00.000Z","categories":["Windows"],"tags":["windows","shell","bat"],"published":true,"description":"错误码 常见的退出代码及其描述 这些错误代码有助于确定命令行执行的结果，并帮助解决问题。 错误级别 环境变量 %ERRORLEVEL% 包含最后执行的程序或脚本的返回代码。 默认情况下，检查 ERRORLEVEL 的方式如下所示。 语法 通常，在批处理文件的末尾使用命令 EXIT /B %ERRORLEVEL% 返回批处理文件的错误代码。 在批处理文件...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/windows/2016-11-30-windows-bat-14-return-code.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"windows bat 脚本教程-14-return code 返回编码"}],["meta",{"property":"og:description","content":"错误码 常见的退出代码及其描述 这些错误代码有助于确定命令行执行的结果，并帮助解决问题。 错误级别 环境变量 %ERRORLEVEL% 包含最后执行的程序或脚本的返回代码。 默认情况下，检查 ERRORLEVEL 的方式如下所示。 语法 通常，在批处理文件的末尾使用命令 EXIT /B %ERRORLEVEL% 返回批处理文件的错误代码。 在批处理文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"windows"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"bat"}],["meta",{"property":"article:published_time","content":"2016-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"windows bat 脚本教程-14-return code 返回编码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.56,"words":1968},"filePathRelative":"posts/windows/2016-11-30-windows-bat-14-return-code.md","localizedDate":"2016年11月30日","excerpt":"\\n<p><strong>常见的退出代码及其描述</strong></p>\\n<table>\\n<thead>\\n<tr>\\n<th>错误代码</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>0</td>\\n<td>程序成功完成。</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>不正确的功能。指示在 Windows 命令提示符 cmd.exe 中尝试执行无法识别的命令。</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>找不到指定的文件。指示文件无法在指定位置找到。</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>找不到指定的路径。指示找不到指定的路径。</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td>拒绝访问。指示用户对指定资源没有访问权限。</td>\\n</tr>\\n<tr>\\n<td>9009</td>\\n<td>0x2331程序未被识别为内部或外部命令、可操作的程序或批处理文件。指示在配置操作时命令、应用程序名称或路径拼写错误。</td>\\n</tr>\\n<tr>\\n<td>2212254950xC0000017-1073741801</td>\\n<td>虚拟内存不足。表示 Windows 已耗尽内存。</td>\\n</tr>\\n<tr>\\n<td>32212257860xC000013A-1073741510</td>\\n<td>应用程序由于 CTRL+C 终止。表示应用程序已由用户的键盘输入 CTRL+C 或 CTRL+Break，或关闭命令提示符窗口而终止。</td>\\n</tr>\\n<tr>\\n<td>32212257940xC0000142-1073741502</td>\\n<td>应用程序无法正确初始化。表示应用程序已在当前用户无访问权限的桌面上启动。另一个可能的原因是 gdi32.dll 或 user32.dll 未能初始化。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{p as comp,k as data};
