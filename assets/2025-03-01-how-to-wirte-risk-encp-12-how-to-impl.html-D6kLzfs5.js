import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-uJE4P3e0.js";const n={};function h(l,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>你是否存在这样的苦恼，数据需要安全存储，但是每个系统大家自己写，很浪费时间。</p><p>所以老马一直想实现一套完整的加密机解决方案。</p><p>本文主要梳理下如何从零开始实现加密机服务。</p><h1 id="整体思路" tabindex="-1"><a class="header-anchor" href="#整体思路"><span>整体思路</span></a></h1><h2 id="一、架构设计与技术选型" tabindex="-1"><a class="header-anchor" href="#一、架构设计与技术选型"><span>一、架构设计与技术选型</span></a></h2><p>分层架构模型</p><p>接口层：基于Spring Boot构建RESTful API，支持HTTPS双向认证（需集成KeyStore密钥库）</p><p>核心服务层：通过Java Cryptography Architecture（JCA）实现加密引擎，采用SPI机制扩展算法</p><p>密钥管理层：实现三层密钥结构（主密钥→工作密钥→会话密钥），结合HSM硬件模块实现密钥生成与存储</p><p>存储层：使用Redis集群缓存高频密钥，MySQL持久化密钥元数据，采用TDE透明加密技术保护存储介质</p><h2 id="二、加密算法实现要点" tabindex="-1"><a class="header-anchor" href="#二、加密算法实现要点"><span>二、加密算法实现要点</span></a></h2><ol><li><p>对称加密实现</p><ul><li><p>使用<code>Cipher</code>类实现AES-256-GCM，需配置<code>SecureRandom</code>生成真随机IV</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Cipher</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cipher </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;AES/GCM/NoPadding&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ENCRYPT_MODE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, secretKey, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GCMParameterSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, iv));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>SM4算法需集成BouncyCastle Provider，通过<code>Security.addProvider()</code>动态加载</p></li></ul></li><li><p>非对称加密与签名</p><ul><li>RSA密钥对生成采用<code>KeyPairGenerator</code>，密钥长度≥2048位</li><li>SM2数字签名需实现国密规范SM2-with-SM3，参考《GM/T 0003.2-2012》<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Signature</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> signature </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Signature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SM3withSM2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;BC&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">signature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initSign</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(privateKey);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">signature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] sign </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> signature</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sign</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>密钥协商协议</p><ul><li>实现ECDH密钥交换协议，支持P-256和SM2椭圆曲线</li><li>会话密钥派生使用HKDF算法，避免密钥重用</li></ul></li></ol><h4 id="三、密钥全生命周期管理" tabindex="-1"><a class="header-anchor" href="#三、密钥全生命周期管理"><span>三、密钥全生命周期管理</span></a></h4><ol><li><p>生成与存储</p><ul><li>主密钥通过HSM硬件生成并加密存储，工作密钥由主密钥加密后存入数据库</li><li>Java实现密钥托管服务：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">KeyGenerator</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> keyGen </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> KeyGenerator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;AES&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">keyGen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">256</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SecureRandom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SecretKey</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> secretKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> keyGen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">generateKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Cipher</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cipher </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;AESWrap&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">WRAP_MODE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, masterKey);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] wrappedKey </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cipher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(secretKey);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 密钥包装</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>轮换与销毁</p><ul><li>定时任务自动触发密钥轮换，旧密钥标记为<code>DEPRECATED</code>状态</li><li>密钥销毁执行NIST SP 800-88标准，内存清零+物理存储覆写</li></ul></li></ol><h2 id="四、安全合规实现" tabindex="-1"><a class="header-anchor" href="#四、安全合规实现"><span>四、安全合规实现</span></a></h2><ol><li><p>国密标准适配</p></li><li><p>审计与溯源</p></li></ol><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><h2 id="项目推荐" tabindex="-1"><a class="header-anchor" href="#项目推荐"><span>项目推荐</span></a></h2><p>下面是一些日志、加解密、脱敏安全相关的库推荐：</p><table><thead><tr><th style="text-align:left;">项目</th><th style="text-align:left;">介绍</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://github.com/houbb/sensitive-word" target="_blank" rel="noopener noreferrer">sensitive-word</a></td><td style="text-align:left;">高性能敏感词核心库</td></tr><tr><td style="text-align:left;"><a href="https://github.com/houbb/sensitive-word-admin" target="_blank" rel="noopener noreferrer">sensitive-word-admin</a></td><td style="text-align:left;">敏感词控台，前后端分离</td></tr><tr><td style="text-align:left;"><a href="https://github.com/houbb/sensitive" target="_blank" rel="noopener noreferrer">sensitive</a></td><td style="text-align:left;">高性能日志脱敏组件</td></tr><tr><td style="text-align:left;"><a href="https://github.com/houbb/auto-log" target="_blank" rel="noopener noreferrer">auto-log</a></td><td style="text-align:left;">统一日志切面组件，支持全链路traceId</td></tr><tr><td style="text-align:left;"><a href="https://github.com/houbb/encryption-local" target="_blank" rel="noopener noreferrer">encryption-local</a></td><td style="text-align:left;">离线加密机组件</td></tr><tr><td style="text-align:left;"><a href="https://mp.weixin.qq.com/s/2LQuKvll9EIn6pyFjhwacw" target="_blank" rel="noopener noreferrer">encryption</a></td><td style="text-align:left;">加密机标准API+本地客户端</td></tr><tr><td style="text-align:left;"><a href="https://mp.weixin.qq.com/s/2LQuKvll9EIn6pyFjhwacw" target="_blank" rel="noopener noreferrer">encryption-server</a></td><td style="text-align:left;">加密机服务</td></tr></tbody></table><h2 id="拓展阅读-1" tabindex="-1"><a class="header-anchor" href="#拓展阅读-1"><span>拓展阅读</span></a></h2><p><a href="https://mp.weixin.qq.com/s/ba99l_NUHW6Zv8BCBAqfzg" target="_blank" rel="noopener noreferrer">【老马】离线版金融敏感信息加解密组件开源项目encryption-local</a></p><p><a href="https://mp.weixin.qq.com/s/2LQuKvll9EIn6pyFjhwacw" target="_blank" rel="noopener noreferrer">【藏经阁】加密机服务完整解决方案，包含客户端+服务端</a></p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望这个项目可以帮助到你。喜欢的话，可以给原作者一个 star 鼓励一下！</p><p>我是老马，期待与你的下次重逢~</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,28)]))}const k=s(n,[["render",h]]),d=JSON.parse('{"path":"/posts/Team/2025-03-01-how-to-wirte-risk-encp-12-how-to-impl.html","title":"【老马】如何从零开始实现加密机服务 java 技术栈","lang":"zh-CN","frontmatter":{"title":"【老马】如何从零开始实现加密机服务 java 技术栈","date":"2025-03-01T00:00:00.000Z","categories":["Team"],"tags":["team","doc","sh"],"published":true,"description":"前言 你是否存在这样的苦恼，数据需要安全存储，但是每个系统大家自己写，很浪费时间。 所以老马一直想实现一套完整的加密机解决方案。 本文主要梳理下如何从零开始实现加密机服务。 整体思路 一、架构设计与技术选型 分层架构模型 接口层：基于Spring Boot构建RESTful API，支持HTTPS双向认证（需集成KeyStore密钥库） 核心服务层：通...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Team/2025-03-01-how-to-wirte-risk-encp-12-how-to-impl.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"【老马】如何从零开始实现加密机服务 java 技术栈"}],["meta",{"property":"og:description","content":"前言 你是否存在这样的苦恼，数据需要安全存储，但是每个系统大家自己写，很浪费时间。 所以老马一直想实现一套完整的加密机解决方案。 本文主要梳理下如何从零开始实现加密机服务。 整体思路 一、架构设计与技术选型 分层架构模型 接口层：基于Spring Boot构建RESTful API，支持HTTPS双向认证（需集成KeyStore密钥库） 核心服务层：通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"team"}],["meta",{"property":"article:tag","content":"doc"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【老马】如何从零开始实现加密机服务 java 技术栈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.67,"words":802},"filePathRelative":"posts/Team/2025-03-01-how-to-wirte-risk-encp-12-how-to-impl.md","localizedDate":"2025年3月1日","excerpt":"\\n<p>你是否存在这样的苦恼，数据需要安全存储，但是每个系统大家自己写，很浪费时间。</p>\\n<p>所以老马一直想实现一套完整的加密机解决方案。</p>\\n<p>本文主要梳理下如何从零开始实现加密机服务。</p>\\n<h1>整体思路</h1>\\n<h2>一、架构设计与技术选型</h2>\\n<p>分层架构模型</p>\\n<p>接口层：基于Spring Boot构建RESTful API，支持HTTPS双向认证（需集成KeyStore密钥库）</p>\\n<p>核心服务层：通过Java Cryptography Architecture（JCA）实现加密引擎，采用SPI机制扩展算法</p>\\n<p>密钥管理层：实现三层密钥结构（主密钥→工作密钥→会话密钥），结合HSM硬件模块实现密钥生成与存储</p>","autoDesc":true}');export{k as comp,d as data};
