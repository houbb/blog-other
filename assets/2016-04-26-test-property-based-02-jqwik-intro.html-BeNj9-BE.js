import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CEDSurVN.js";const h={};function e(l,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><h1 id="jqwik" tabindex="-1"><a class="header-anchor" href="#jqwik"><span>jqwik</span></a></h1><p>jqwik的发音类似于 &quot;jay quick&quot; [ˈdʒeɪkwɪk]。</p><p>jqwik的主要目的是将属性驱动测试（Property-Based Testing，PBT）引入JVM。</p><p>该库主要专注于Java和Kotlin，同时也支持Groovy。</p><p>属性驱动测试试图将微测试的直观性与随机生成的测试数据的有效性相结合。</p><p>最初受到对函数式编程的普遍热情的推动，PBT现在被认为是任何现代化测试方法的重要组成部分。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><p>属性旨在描述代码的通用不变性或后置条件，给定某些前提条件。</p><p>测试库jqwik将尝试生成许多满足前提条件的值集，希望生成的集合中的一个能够证明错误的假设。</p><p>以下属性涉及于（臭名昭著的）Fizz Buzz Kata的部分实现：</p><p>前提条件：考虑介于1和100之间可被3整除的数字。<br> 后置条件：由fizzBuzz()返回的字符串以Fizz开头。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.stream.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FizzBuzzTests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> every_third_element_starts_with_Fizz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;divisibleBy3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fizzBuzz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">startsWith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Fizz&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Provide</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">	Arbitrary</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> divisibleBy3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arbitraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">between</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fizzBuzz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> IntStream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mapToObj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> divBy3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> divBy5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> divBy3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> divBy5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;FizzBuzz&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">				:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> divBy3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Fizz&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">				:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> divBy5 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Buzz&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">				:</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">collect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collectors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用一些注解，jqwik 试图使程序员尽可能简单地编写和运行属性测试。</p><h1 id="property-based-testing-in-java-introduction" tabindex="-1"><a class="header-anchor" href="#property-based-testing-in-java-introduction"><span>Property-based Testing in Java: Introduction</span></a></h1><p>这是2009年。在进行了大约两个十年的主要面向对象编程之后，对于函数式语言将极大简化编写正确并发程序的说法引起了我的兴趣，我开始研究Clojure、Erlang，最终是Haskell。</p><p>时至今日，2018年，我在并发方面的活动有些减弱，但对软件开发的函数式一面的好奇心一直伴随着我。</p><p>作为一个开发者，我一直在贯彻测试驱动开发的理念，因此当我试图了解“其他人”是如何工作和思考的时候，一个社区对测试的方法是我首先关注的事情之一。</p><p>这就是我了解到函数式编程人员非常喜欢属性测试，与我们面向对象的程序员所称的单元测试相对立。</p><p>这种视角的改变不仅在强类型语言（如Haskell）中可见，而且在动态类型语言（如Erlang）中也可见。</p><p>然而，当涉及赚钱时，Java、Groovy，以及在较小程度上的JavaScript仍然是我的主要工作工具。</p><p>因此，我开始思考属性驱动测试（PBT）是否也可以在这里帮助我。在DuckDuckGo上搜索“Java”和“Property-based Testing”会给你一些结果 - 有些可以追溯到JUnit的Theories-Runner仍然存在的时候 - 但在网上找到的信息远远少于我期望的。一些人，如Nat Price，尝试在Java中实验这种方法，但也仅此而已。</p><p>可以说是一个幸运的巧合，在两年前的这个时候，我离开了JUnit-5核心团队，但决定尝试JUnit平台。</p><p>这就是为什么我创建了一个名为jqwik的测试引擎，专注于属性驱动测试。</p><p>除了深入研究Java对反射的完全混乱的处理方式之外，这项任务还要求我尝试使用不同的方法编写属性，研究其他属性驱动测试库的工作原理，并找到一种将这种新类型的测试整合到我习惯的TDD风格中的方法。</p><p>在接下来的几周中，我将发布一系列博客文章，描述我在这个过程中学到的有关属性驱动测试的本质以及如何在Java中使用它。</p><p>到目前为止，我已经发布了八个部分：</p><ol><li>从示例到属性</li><li>Jqwik和其他工具</li><li>收缩的重要性</li><li>查找好属性的模式</li><li>状态测试</li><li>PBT和测试驱动开发</li><li>如何在Java中规定它！</li><li>基于模型的测试</li><li>Kotlin中的PBT</li></ol><p>希望在我的旅程中再次见到你！</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-jqwik-测试框架" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jqwik-测试框架"><span>详细介绍一下 jqwik 测试框架</span></a></h2><p>jqwik 是一个用于Java的属性驱动测试框架。</p><p>属性驱动测试是一种测试方法，其中测试用例通过描述系统的属性来生成，而不是手动指定输入值。</p><p>这使得测试更加灵活，能够覆盖更广泛的输入空间。</p><p>以下是一些关于jqwik测试框架的详细介绍：</p><h3 id="_1-属性驱动测试-property-based-testing" tabindex="-1"><a class="header-anchor" href="#_1-属性驱动测试-property-based-testing"><span>1. <strong>属性驱动测试（Property-Based Testing）：</strong></span></a></h3><ul><li>jqwik基于属性驱动测试的理念，这是一种测试方法，它基于属性定义和生成输入值，然后验证这些属性是否在所有生成的输入上都成立。</li></ul><h3 id="_2-注解驱动的测试" tabindex="-1"><a class="header-anchor" href="#_2-注解驱动的测试"><span>2. <strong>注解驱动的测试：</strong></span></a></h3><ul><li>jqwik 使用注解来标记测试方法和属性。例如，<code>@Property</code> 注解用于标记属性测试方法。</li></ul><h3 id="_3-随机输入生成" tabindex="-1"><a class="header-anchor" href="#_3-随机输入生成"><span>3. <strong>随机输入生成：</strong></span></a></h3><ul><li>jqwik 通过内置的随机生成器为测试用例生成输入值。这使得测试可以涵盖更广泛的情况，而不仅仅是手动选择特定的输入。</li></ul><h3 id="_4-生成器-generators" tabindex="-1"><a class="header-anchor" href="#_4-生成器-generators"><span>4. <strong>生成器（Generators）：</strong></span></a></h3><ul><li>jqwik 允许自定义生成器，以控制输入值的生成过程。这是在某些情况下非常有用的功能。</li></ul><h3 id="_5-收缩测试用例-shrinking-test-cases" tabindex="-1"><a class="header-anchor" href="#_5-收缩测试用例-shrinking-test-cases"><span>5. <strong>收缩测试用例（Shrinking Test Cases）：</strong></span></a></h3><ul><li>当测试失败时，jqwik 会尝试缩小失败的测试用例，以找到最小的输入集，使得测试仍然失败。这有助于定位问题的根本原因。</li></ul><h3 id="_6-参数化测试" tabindex="-1"><a class="header-anchor" href="#_6-参数化测试"><span>6. <strong>参数化测试：</strong></span></a></h3><ul><li>jqwik 支持参数化测试，允许通过不同的输入组合运行相同的测试方法。</li></ul><h3 id="_7-断言和测试验证" tabindex="-1"><a class="header-anchor" href="#_7-断言和测试验证"><span>7. <strong>断言和测试验证：</strong></span></a></h3><ul><li>jqwik 提供了丰富的断言和验证机制，以确保属性在生成的输入集上成立。</li></ul><h3 id="_8-集成junit-5" tabindex="-1"><a class="header-anchor" href="#_8-集成junit-5"><span>8. <strong>集成JUnit 5：</strong></span></a></h3><ul><li>jqwik 集成了JUnit 5，因此它可以与现有的JUnit测试一起使用。</li></ul><h3 id="_9-丰富的文档和社区支持" tabindex="-1"><a class="header-anchor" href="#_9-丰富的文档和社区支持"><span>9. <strong>丰富的文档和社区支持：</strong></span></a></h3><ul><li>jqwik 拥有详细的文档，以及一个活跃的社区，可以提供支持和解答问题。</li></ul><h3 id="_10-maven-和-gradle-支持" tabindex="-1"><a class="header-anchor" href="#_10-maven-和-gradle-支持"><span>10. <strong>Maven 和 Gradle 支持：</strong></span></a></h3><ul><li>jqwik 可以通过 Maven 或 Gradle 进行集成，使其易于在Java项目中使用。</li></ul><h2 id="什么是-属性驱动测试-property-based-testing-给出具体的例子" tabindex="-1"><a class="header-anchor" href="#什么是-属性驱动测试-property-based-testing-给出具体的例子"><span>什么是 属性驱动测试（Property-Based Testing）？给出具体的例子</span></a></h2><p>属性驱动测试是一种软件测试方法，其中测试用例的设计基于系统或组件的属性而不是具体的输入值。</p><p>测试框架通过生成大量的随机输入，检查这些属性是否对于所有生成的输入都成立，从而提高测试的覆盖范围。</p><p>这种方法通常与随机测试结合使用，以发现更广泛的边界情况和错误。</p><p>以下是一个简单的例子，使用属性驱动测试的方法，假设我们正在测试一个排序算法：</p><h3 id="常规测试" tabindex="-1"><a class="header-anchor" href="#常规测试"><span>常规测试：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testSortAlgorithm</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] inputArray </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] expectedResult </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 调用排序算法</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SortingAlgorithm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(inputArray);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 断言结果是否符合预期</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    assertArrayEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(expectedResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性驱动测试" tabindex="-1"><a class="header-anchor" href="#属性驱动测试"><span>属性驱动测试：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> net.jqwik.api.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SortingPropertiesTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testSortingProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ForAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;randomIntArray&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">inputArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sortedArray</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SortingAlgorithm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(inputArray);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 属性：排序后的数组应该是升序的</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i  </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">randomIntArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arbitraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intArrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofMinLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofMaxLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 jqwik 的 <code>@Property</code> 注解标记测试方法，该方法具有一个输入参数 <code>inputArray</code>，它是通过 <code>randomIntArray</code> 方法生成的随机整数数组。</p><p>我们定义了一个属性，即排序后的数组应该是升序的。通过这个属性，我们不再需要手动指定输入值，而是让测试框架生成大量的随机输入，以验证这个属性是否在所有情况下成立。</p><p>这样的<strong>属性驱动测试方法能够更全面地检查排序算法的正确性，而不仅仅局限于手动选择的一组输入</strong>。</p><h2 id="属性驱动测试-property-based-testing-和常规测试对比-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#属性驱动测试-property-based-testing-和常规测试对比-有什么优缺点"><span>属性驱动测试（Property-Based Testing）和常规测试对比，有什么优缺点？</span></a></h2><p>属性驱动测试（Property-Based Testing）和常规测试方法之间存在一些显著的优缺点差异。以下是它们的比较：</p><h3 id="属性驱动测试的优点" tabindex="-1"><a class="header-anchor" href="#属性驱动测试的优点"><span>属性驱动测试的优点：</span></a></h3><ol><li><p><strong>广泛覆盖：</strong> 属性驱动测试可以生成大量的随机输入，从而更全面地覆盖输入空间，包括边界情况和边缘情况，帮助发现隐藏的错误。</p></li><li><p><strong>自动化：</strong> 由于测试框架会自动生成和执行测试用例，因此减少了手动编写大量测试用例的工作，提高了测试的自动化水平。</p></li><li><p><strong>发现性测试：</strong> 通过引入随机性，属性驱动测试可以发现开发者可能未考虑到的测试场景，帮助发现潜在的问题。</p></li><li><p><strong>灵活性：</strong> 属性驱动测试更加灵活，因为测试用例是通过属性定义而不是具体的输入值，这使得测试更容易适应代码变更。</p></li></ol><h3 id="属性驱动测试的缺点" tabindex="-1"><a class="header-anchor" href="#属性驱动测试的缺点"><span>属性驱动测试的缺点：</span></a></h3><ol><li><p><strong>难以理解：</strong> 对于初学者来说，属性驱动测试可能更难理解，因为它要求开发者定义和理解系统属性，这可能需要更多的学习和实践。</p></li><li><p><strong>不易调试：</strong> 当测试失败时，属性驱动测试可能会给出一个使测试失败的最小输入，但这可能不容易理解，因为这个输入是通过缩小算法生成的。</p></li><li><p><strong>性能开销：</strong> 生成大量的随机测试用例可能导致性能开销，特别是对于复杂的系统，可能需要更多的时间来执行测试。</p></li></ol><h3 id="常规测试的优点" tabindex="-1"><a class="header-anchor" href="#常规测试的优点"><span>常规测试的优点：</span></a></h3><ol><li><p><strong>直观和简单：</strong> 常规测试方法相对来说更直观和简单，开发者只需为特定的输入编写测试用例。</p></li><li><p><strong>易于理解和调试：</strong> 常规测试用例通常更容易理解和调试，因为它们是直接指定的输入和预期输出。</p></li><li><p><strong>定制性高：</strong> 开发者可以根据需要编写特定的测试用例，以检查特定的功能或场景。</p></li></ol><h3 id="常规测试的缺点" tabindex="-1"><a class="header-anchor" href="#常规测试的缺点"><span>常规测试的缺点：</span></a></h3><ol><li><p><strong>覆盖范围有限：</strong> 常规测试方法可能无法覆盖系统的所有可能情况，因为手动编写所有可能的测试用例可能很困难。</p></li><li><p><strong>维护成本高：</strong> 随着系统的增长，手动维护大量的测试用例可能会变得繁琐，尤其是在代码变更时需要更新测试。</p></li><li><p><strong>无法发现隐藏问题：</strong> 常规测试可能无法轻松发现一些隐藏的问题或未考虑到的场景，因为测试用例通常是基于开发者的直觉编写的。</p></li></ol><p>在实际项目中，通常会综合使用这两种测试方法，以发挥它们各自的优势，提高测试的全面性和效率。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://jqwik.net/" target="_blank" rel="noopener noreferrer">https://jqwik.net/</a></p><p><a href="https://blog.johanneslink.net/2018/03/24/property-based-testing-in-java-introduction/" target="_blank" rel="noopener noreferrer">https://blog.johanneslink.net/2018/03/24/property-based-testing-in-java-introduction/</a></p><p><a href="https://jqwik.net/docs/current/user-guide.html" target="_blank" rel="noopener noreferrer">https://jqwik.net/docs/current/user-guide.html</a></p>`,84)]))}const r=s(h,[["render",e]]),d=JSON.parse('{"path":"/posts/tests/2016-04-26-test-property-based-02-jqwik-intro.html","title":"test Property-based Testing-02-jqwik Java的属性驱动测试框架入门介绍","lang":"zh-CN","frontmatter":{"title":"test Property-based Testing-02-jqwik Java的属性驱动测试框架入门介绍","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["java","test"],"published":true,"description":"拓展阅读 开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) 开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) jqwik jqwik的发音类似于 \\"jay quick\\" [ˈdʒ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-property-based-02-jqwik-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test Property-based Testing-02-jqwik Java的属性驱动测试框架入门介绍"}],["meta",{"property":"og:description","content":"拓展阅读 开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) 开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) jqwik jqwik的发音类似于 \\"jay quick\\" [ˈdʒ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test Property-based Testing-02-jqwik Java的属性驱动测试框架入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":9.66,"words":2899},"filePathRelative":"posts/tests/2016-04-26-test-property-based-02-jqwik-intro.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://github.com/houbb/data-factory\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">开源 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p>\\n<p><a href=\\"https://github.com/houbb/junitperf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">开源 Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p>","autoDesc":true}');export{r as comp,d as data};
