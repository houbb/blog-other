import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as a}from"./app-uJE4P3e0.js";const l={};function n(h,i){return a(),s("div",null,i[0]||(i[0]=[e(`<h1 id="用户代码和扩展的相对执行顺序" tabindex="-1"><a class="header-anchor" href="#用户代码和扩展的相对执行顺序"><span>用户代码和扩展的相对执行顺序</span></a></h1><p>当执行包含一个或多个测试方法的测试类时，除了用户提供的测试和生命周期方法外，还会调用许多扩展回调。</p><h2 id="相对顺序" tabindex="-1"><a class="header-anchor" href="#相对顺序"><span>相对顺序</span></a></h2><p>下图说明了用户提供的代码和扩展代码的相对顺序。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BeforeAllCallBack </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeAll</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //(2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        BeforeEachCallBack  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(3)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeEach</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //(4)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                BeforeTestExecutionCallBack </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(5)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //(6)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                    TestExecutionExceptionHandler   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(7)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                BeforeTestExecutionCallBack </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(8)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AfterEach</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //(9)    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        AfterEachCallBack  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(10)    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AfterAll</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //(11)    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">AfterAllCallBack </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//(1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><p>用户提供的测试和生命周期方法用橙色显示，用蓝色显示的扩展提供回调代码。灰色框表示执行单个测试方法，并将对测试类中的每个测试方法重复执行。</p><p>下表进一步解释了用户代码和扩展代码图中的12个步骤。</p><table><thead><tr><th style="text-align:left;">步骤</th><th style="text-align:left;">接口/注解</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.BeforeAllCallback</td><td style="text-align:left;">在执行容器的所有测试之前执行扩展代码</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">@annotation org.junit.jupiter.api.BeforeAll</td><td style="text-align:left;">在执行容器的所有测试之前执行用户代码</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.BeforeEachCallback</td><td style="text-align:left;">在执行每个测试之前执行的扩展代码</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">@annotation org.junit.jupiter.api.BeforeEach</td><td style="text-align:left;">在执行每个测试之前执行的用户代码</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.BeforeTestExecutionCallback</td><td style="text-align:left;">在执行测试之前立即执行的扩展代码</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">@annotation org.junit.jupiter.api.Test</td><td style="text-align:left;">用户代码的实际测试方法</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.TestExecutionExceptionHandler</td><td style="text-align:left;">处理在测试期间抛出的异常的扩展代码</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.AfterTestExecutionCallback</td><td style="text-align:left;">测试执行后立即执行的扩展代码及其相应的异常处理程序</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">@annotation org.junit.jupiter.api.AfterEach</td><td style="text-align:left;">在每次测试执行后执行的用户代码</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.AfterEachCallback</td><td style="text-align:left;">每次测试执行后执行的扩展代码</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;">@annotation org.junit.jupiter.api.AfterAll</td><td style="text-align:left;">在执行容器的所有测试之后执行用户代码</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;">interface org.junit.jupiter.api.extension.AfterAllCallback</td><td style="text-align:left;">在执行容器的所有测试之后执行扩展代码</td></tr></tbody></table><p>在最简单的情况下，只执行实际的测试方法(步骤6);所有其他步骤都是可选的，这取决于用户代码的存在或相应生命周期回调的扩展支持。有关各种生命周期回调的详细信息，请咨询各自的JavaDoc以获得每个注释和扩展。</p>`,10)]))}const d=t(l,[["render",n]]),p=JSON.parse('{"path":"/posts/test/2018-06-25-junit5-28-ex-order.html","title":"Junit5-28-Ex Excution Order","lang":"zh-CN","frontmatter":{"title":"Junit5-28-Ex Excution Order","date":"2018-06-26T00:00:00.000Z","categories":["Test"],"tags":["test","sh"],"published":true,"description":"用户代码和扩展的相对执行顺序 当执行包含一个或多个测试方法的测试类时，除了用户提供的测试和生命周期方法外，还会调用许多扩展回调。 相对顺序 下图说明了用户提供的代码和扩展代码的相对顺序。 步骤 用户提供的测试和生命周期方法用橙色显示，用蓝色显示的扩展提供回调代码。灰色框表示执行单个测试方法，并将对测试类中的每个测试方法重复执行。 下表进一步解释了用户代...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/test/2018-06-25-junit5-28-ex-order.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Junit5-28-Ex Excution Order"}],["meta",{"property":"og:description","content":"用户代码和扩展的相对执行顺序 当执行包含一个或多个测试方法的测试类时，除了用户提供的测试和生命周期方法外，还会调用许多扩展回调。 相对顺序 下图说明了用户提供的代码和扩展代码的相对顺序。 步骤 用户提供的测试和生命周期方法用橙色显示，用蓝色显示的扩展提供回调代码。灰色框表示执行单个测试方法，并将对测试类中的每个测试方法重复执行。 下表进一步解释了用户代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Junit5-28-Ex Excution Order\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.89,"words":566},"filePathRelative":"posts/test/2018-06-25-junit5-28-ex-order.md","localizedDate":"2018年6月26日","excerpt":"\\n<p>当执行包含一个或多个测试方法的测试类时，除了用户提供的测试和生命周期方法外，还会调用许多扩展回调。</p>\\n<h2>相对顺序</h2>\\n<p>下图说明了用户提供的代码和扩展代码的相对顺序。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">BeforeAllCallBack </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(1)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">BeforeAll</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  //(2)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">        BeforeEachCallBack  </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(3)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">BeforeEach</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> //(4)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">                BeforeTestExecutionCallBack </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(5)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">                    @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">Test</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">   //(6)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">                    TestExecutionExceptionHandler   </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(7)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">                BeforeTestExecutionCallBack </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(8)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">            @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">AfterEach</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> //(9)    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">        AfterEachCallBack  </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(10)    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    @</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">AfterAll</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  //(11)    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">AfterAllCallBack </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">//(1)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,p as data};
