import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as o,o as a}from"./app-CEDSurVN.js";const r={};function i(p,t){return a(),n("div",null,t[0]||(t[0]=[o('<h3 id="_14-交互式输入编辑和历史替换" tabindex="-1"><a class="header-anchor" href="#_14-交互式输入编辑和历史替换"><span>14. 交互式输入编辑和历史替换</span></a></h3><p>Python 解释器的某些版本支持编辑当前输入行和历史替换，类似于 Korn shell 和 GNU Bash shell 中的设施。这是使用 GNU Readline 库实现的，该库支持各种编辑样式。这个库有自己的文档，我们这里不会重复。</p><p><strong>14.1. Tab 键补全和历史编辑</strong></p><p>变量和模块名的补全在解释器启动时自动启用，这样 Tab 键就会调用补全函数；它查看 Python 语句名、当前局部变量和可用的模块名。对于点表达式，如 string.a，它将评估表达式直到最后一个 &#39;.&#39;，然后从结果对象的属性中建议补全。注意，如果表达式中包含有 <strong>getattr</strong>() 方法的对象，这可能会执行应用程序定义的代码。默认配置还将你的历史保存到名为 .python_history 的文件中，该文件位于你的用户目录中。下次交互式解释器会话时，历史将再次可用。</p><p><strong>14.2. 交互式解释器的替代方案</strong></p><p>这个设施与解释器的早期版本相比是一个巨大的进步；然而，还有一些遗愿：如果在继续行上建议适当的缩进会很好（解析器知道下一个是否需要缩进标记）。补全机制可能使用解释器的符号表。检查（甚至建议）匹配的括号、引号等的命令也会很有用。</p><p>一个已经存在很长时间的增强交互式解释器的替代方案是 IPython，它具有 Tab 键补全、对象探索和高级历史管理功能。它也可以被彻底定制并嵌入到其他应用程序中。另一个类似的增强交互环境是 bpython。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/3.12/tutorial/interactive.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/3.12/tutorial/interactive.html</a></p>',9)]))}const l=e(r,[["render",i]]),c=JSON.parse(`{"path":"/posts/Lang/2018-02-16-python-learn-v3.12.3-doc-14-interactive.html","title":"Python v3.12.3 学习-14-Interactive Input Editing and History Substitution","lang":"zh-CN","frontmatter":{"title":"Python v3.12.3 学习-14-Interactive Input Editing and History Substitution","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","why-learn","sh"],"published":true,"description":"14. 交互式输入编辑和历史替换 Python 解释器的某些版本支持编辑当前输入行和历史替换，类似于 Korn shell 和 GNU Bash shell 中的设施。这是使用 GNU Readline 库实现的，该库支持各种编辑样式。这个库有自己的文档，我们这里不会重复。 14.1. Tab 键补全和历史编辑 变量和模块名的补全在解释器启动时自动启用...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2018-02-16-python-learn-v3.12.3-doc-14-interactive.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python v3.12.3 学习-14-Interactive Input Editing and History Substitution"}],["meta",{"property":"og:description","content":"14. 交互式输入编辑和历史替换 Python 解释器的某些版本支持编辑当前输入行和历史替换，类似于 Korn shell 和 GNU Bash shell 中的设施。这是使用 GNU Readline 库实现的，该库支持各种编辑样式。这个库有自己的文档，我们这里不会重复。 14.1. Tab 键补全和历史编辑 变量和模块名的补全在解释器启动时自动启用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"why-learn"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python v3.12.3 学习-14-Interactive Input Editing and History Substitution\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.64,"words":492},"filePathRelative":"posts/Lang/2018-02-16-python-learn-v3.12.3-doc-14-interactive.md","localizedDate":"2018年2月14日","excerpt":"<h3>14. 交互式输入编辑和历史替换</h3>\\n<p>Python 解释器的某些版本支持编辑当前输入行和历史替换，类似于 Korn shell 和 GNU Bash shell 中的设施。这是使用 GNU Readline 库实现的，该库支持各种编辑样式。这个库有自己的文档，我们这里不会重复。</p>\\n<p><strong>14.1. Tab 键补全和历史编辑</strong></p>\\n<p>变量和模块名的补全在解释器启动时自动启用，这样 Tab 键就会调用补全函数；它查看 Python 语句名、当前局部变量和可用的模块名。对于点表达式，如 string.a，它将评估表达式直到最后一个 '.'，然后从结果对象的属性中建议补全。注意，如果表达式中包含有 <strong>getattr</strong>() 方法的对象，这可能会执行应用程序定义的代码。默认配置还将你的历史保存到名为 .python_history 的文件中，该文件位于你的用户目录中。下次交互式解释器会话时，历史将再次可用。</p>","autoDesc":true}`);export{l as comp,c as data};
