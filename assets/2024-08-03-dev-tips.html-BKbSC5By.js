import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as p,o}from"./app-CEDSurVN.js";const r={};function n(i,t){return o(),a("div",null,t[0]||(t[0]=[p('<h1 id="提前做紧急预案" tabindex="-1"><a class="header-anchor" href="#提前做紧急预案"><span>提前做紧急预案</span></a></h1><p>针对一个东西做变动时，一定要考虑到最糟糕的情况，比如大量的请求等等。</p><p>做一个类似于丢弃、快速消费掉堆积的方案，而不至于被活活卡死。</p><h1 id="历史信息一定要备份" tabindex="-1"><a class="header-anchor" href="#历史信息一定要备份"><span>历史信息一定要备份</span></a></h1><p>对于一些重要的信息，比如代码、文档、配置、jar 包</p><p>在变更之前，一定要做备份。</p><p>不然会发现覆盖之后出现问题，导致无法快速恢复。</p><p>代码：可以通过 gitlab/github 等，版本控制</p><p>jar 包：结合 CI 工具，保持多少次迭代以内的版本，比如 30 次最近的迭代 war/jar</p><p>配置：配置变更，最好有历史记录+版本控制，可以任意回滚到指定的版本。</p><p>文档：版本控制的文档</p><p>PS: 如果没有对应的工具，就人工提前备份。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>日常整理</p>',14)]))}const m=e(r,[["render",n]]),h=JSON.parse('{"path":"/posts/Awesome/2024-08-03-dev-tips.html","title":"日常运维开发一些踩坑-血的教训","lang":"zh-CN","frontmatter":{"title":"日常运维开发一些踩坑-血的教训","date":"2024-08-03T00:00:00.000Z","categories":["Awesome"],"tags":["awesome","tool","sh"],"published":true,"description":"提前做紧急预案 针对一个东西做变动时，一定要考虑到最糟糕的情况，比如大量的请求等等。 做一个类似于丢弃、快速消费掉堆积的方案，而不至于被活活卡死。 历史信息一定要备份 对于一些重要的信息，比如代码、文档、配置、jar 包 在变更之前，一定要做备份。 不然会发现覆盖之后出现问题，导致无法快速恢复。 代码：可以通过 gitlab/github 等，版本控制...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Awesome/2024-08-03-dev-tips.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"日常运维开发一些踩坑-血的教训"}],["meta",{"property":"og:description","content":"提前做紧急预案 针对一个东西做变动时，一定要考虑到最糟糕的情况，比如大量的请求等等。 做一个类似于丢弃、快速消费掉堆积的方案，而不至于被活活卡死。 历史信息一定要备份 对于一些重要的信息，比如代码、文档、配置、jar 包 在变更之前，一定要做备份。 不然会发现覆盖之后出现问题，导致无法快速恢复。 代码：可以通过 gitlab/github 等，版本控制..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"awesome"}],["meta",{"property":"article:tag","content":"tool"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2024-08-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"日常运维开发一些踩坑-血的教训\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":0.85,"words":256},"filePathRelative":"posts/Awesome/2024-08-03-dev-tips.md","localizedDate":"2024年8月3日","excerpt":"\\n<p>针对一个东西做变动时，一定要考虑到最糟糕的情况，比如大量的请求等等。</p>\\n<p>做一个类似于丢弃、快速消费掉堆积的方案，而不至于被活活卡死。</p>\\n<h1>历史信息一定要备份</h1>\\n<p>对于一些重要的信息，比如代码、文档、配置、jar 包</p>\\n<p>在变更之前，一定要做备份。</p>\\n<p>不然会发现覆盖之后出现问题，导致无法快速恢复。</p>\\n<p>代码：可以通过 gitlab/github 等，版本控制</p>\\n<p>jar 包：结合 CI 工具，保持多少次迭代以内的版本，比如 30 次最近的迭代 war/jar</p>\\n<p>配置：配置变更，最好有历史记录+版本控制，可以任意回滚到指定的版本。</p>","autoDesc":true}');export{m as comp,h as data};
