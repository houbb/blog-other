import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>测试平台最强大的一个设计应该是流程控制。</p><p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p><p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h1 id="执行树流程" tabindex="-1"><a class="header-anchor" href="#执行树流程"><span>执行树流程</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>流程图过于复杂了，我们用一个执行树的结构来替代。可以多级树设置实现对应的能力，要如何设计实现？包含前后端</span></span>
<span class="line"><span></span></span>
<span class="line"><span>核心能力：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1）基本流程控制：if else 循环等</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2）核心调用插件能力：http 接口、dubbo 接口、SQL 执行、mq 请求、shell 脚本、grovvy 脚本、python 脚本...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3）文件能力：文件的上传、scp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4) 通知能力：sms phone email</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非常好，你的这个方向更清晰明确了 —— 你想基于一个**「多级执行树结构」**构建一个强大的、流程可控、插件丰富的自动化测试平台，前后端联动。</p><p>以下是完整的设计思路与实现细节建议，特别适合你当前一个人 Java + Vue 的全栈开发模式。</p><hr><h2 id="✅-一、整体架构总览-执行树驱动的自动化平台" tabindex="-1"><a class="header-anchor" href="#✅-一、整体架构总览-执行树驱动的自动化平台"><span>✅ 一、整体架构总览：执行树驱动的自动化平台</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[Vue 前端执行树编辑器]</span></span>
<span class="line"><span>         │</span></span>
<span class="line"><span>         ▼</span></span>
<span class="line"><span>[Spring Boot 后端 API 服务]</span></span>
<span class="line"><span>         │</span></span>
<span class="line"><span>         ▼</span></span>
<span class="line"><span>[执行引擎：递归执行执行树 + 插件机制]  ← 插件类型支持：HTTP、Dubbo、SQL、MQ、脚本、通知...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-二、执行树结构设计-后端-前端" tabindex="-1"><a class="header-anchor" href="#✅-二、执行树结构设计-后端-前端"><span>✅ 二、执行树结构设计（后端 + 前端）</span></a></h2><h3 id="🌲-什么是执行树-execution-tree" tabindex="-1"><a class="header-anchor" href="#🌲-什么是执行树-execution-tree"><span>🌲 什么是执行树（Execution Tree）？</span></a></h3><p>你可以把每个任务当作一颗树结构，每个节点表示一个<strong>执行单元（Step）</strong>，包含：</p><ul><li>类型（如 HTTP、SQL、IF 等）</li><li>参数（配置）</li><li>子节点（下一个步骤）</li></ul><h3 id="示例-json-表达" tabindex="-1"><a class="header-anchor" href="#示例-json-表达"><span>示例 JSON 表达：</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;if&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;是否登录成功&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;condition&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$.loginResult == true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;children&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;获取用户详情&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;params&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;url&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://api/user/info&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;method&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;headers&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;Authorization&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$.token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;false&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;notify&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;发送失败通知&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;params&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;email&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx@test.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;subject&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;登录失败&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;body&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;请查看日志&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-三、后端设计-spring-boot" tabindex="-1"><a class="header-anchor" href="#✅-三、后端设计-spring-boot"><span>✅ 三、后端设计（Spring Boot）</span></a></h2><h3 id="💡-核心模块划分" tabindex="-1"><a class="header-anchor" href="#💡-核心模块划分"><span>💡 核心模块划分</span></a></h3><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>流程管理模块</td><td>管理树结构、保存/加载 JSON</td></tr><tr><td>执行引擎模块</td><td>遍历树结构，执行每个节点逻辑</td></tr><tr><td>插件机制</td><td>每种 type 由插件处理，独立扩展</td></tr><tr><td>变量上下文</td><td>支持变量提取与传递，表达式支持（推荐 MVEL、JEXL）</td></tr><tr><td>报告模块</td><td>记录每一步执行情况、异常、输出数据</td></tr></tbody></table><hr><h3 id="☕-java-后端核心接口设计-插件执行" tabindex="-1"><a class="header-anchor" href="#☕-java-后端核心接口设计-插件执行"><span>☕ Java 后端核心接口设计（插件执行）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NodeExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> supports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ExecutionResult</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutionContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>TreeNode</code>: 表示当前节点的结构（type、params、子节点等）</li><li><code>ExecutionContext</code>: 上下文，存储变量、全局状态</li><li><code>ExecutionResult</code>: 本次节点执行结果，包括是否成功、是否继续执行、提取出的变量等</li></ul><p>你只需要实现各类 <code>NodeExecutor</code> 插件，比如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HttpExecutor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NodeExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> supports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;http&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(type);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutionResult</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutionContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 取参数、替换变量、发 HTTP 请求、记录响应</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ExecutionResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(...);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过 <code>ExecutorRegistry</code> 自动注册/执行即可。</p><hr><h3 id="🌱-树结构递归执行引擎示意" tabindex="-1"><a class="header-anchor" href="#🌱-树结构递归执行引擎示意"><span>🌱 树结构递归执行引擎示意：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExecutionEngine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExecutionContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        NodeExecutor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> executorRegistry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ExecutionResult</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(root, context);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shouldContinue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TreeNode</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getChildren</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(child, context);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-四、前端设计-vue" tabindex="-1"><a class="header-anchor" href="#✅-四、前端设计-vue"><span>✅ 四、前端设计（Vue）</span></a></h2><h3 id="🌳-执行树编辑器-轻量版本" tabindex="-1"><a class="header-anchor" href="#🌳-执行树编辑器-轻量版本"><span>🌳 执行树编辑器（轻量版本）</span></a></h3><h4 id="ui-实现方式建议" tabindex="-1"><a class="header-anchor" href="#ui-实现方式建议"><span>UI 实现方式建议：</span></a></h4><ul><li>Vue + Element Plus + 树结构组件（如 <code>el-tree</code>, <code>vue-draggable-tree</code>, 或自定义）</li><li>每个节点支持：编辑类型、输入参数、表达式条件、子节点拖拽排序</li><li>表单动态渲染：根据节点 <code>type</code> 展示不同参数组件（http 请求参数、SQL、通知等）</li></ul><h4 id="树结构维护示例" tabindex="-1"><a class="header-anchor" href="#树结构维护示例"><span>树结构维护示例：</span></a></h4><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  id</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  params</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Record</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  children</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TreeNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以将树结构实时转 JSON，提交到后端执行。</p><hr><h2 id="✅-五、核心插件支持类型设计" tabindex="-1"><a class="header-anchor" href="#✅-五、核心插件支持类型设计"><span>✅ 五、核心插件支持类型设计</span></a></h2><table><thead><tr><th>类型</th><th>用法场景</th><th>参数设计</th></tr></thead><tbody><tr><td><code>http</code></td><td>调用接口</td><td>method, url, headers, body, 断言</td></tr><tr><td><code>sql</code></td><td>执行数据库语句</td><td>datasource, sql, 变量提取</td></tr><tr><td><code>dubbo</code></td><td>泛化调用</td><td>interface, method, params</td></tr><tr><td><code>mq</code></td><td>发送/消费消息</td><td>topic, content, groupId</td></tr><tr><td><code>shell</code></td><td>执行 Linux 命令</td><td>command, workingDir</td></tr><tr><td><code>groovy/python</code></td><td>自定义脚本</td><td>code, 输入输出变量</td></tr><tr><td><code>scp</code></td><td>文件上传下载</td><td>host, user, password, remotePath</td></tr><tr><td><code>file-upload</code></td><td>上传测试数据文件</td><td>通过 Vue 实现文件选择，后台存储</td></tr><tr><td><code>notify</code></td><td>发送通知</td><td>email, sms, webhook, 飞书机器人等</td></tr></tbody></table><hr><h2 id="✅-六、上下文变量与表达式系统" tabindex="-1"><a class="header-anchor" href="#✅-六、上下文变量与表达式系统"><span>✅ 六、上下文变量与表达式系统</span></a></h2><ul><li><p>所有执行结果的输出都可放入 <code>ExecutionContext</code> 中，供后续节点引用</p></li><li><p>支持表达式语法如：</p><ul><li><code>\${token}</code>、<code>\${context.varName}</code>、<code>\${$.response.data.id}</code></li></ul></li><li><p>表达式引擎建议：</p><ul><li>Java 推荐使用：<strong><a href="https://github.com/mvel/mvel" target="_blank" rel="noopener noreferrer">MVEL</a></strong> 或 <strong>Apache JEXL</strong></li></ul></li></ul><hr><h2 id="✅-七、通知能力支持" tabindex="-1"><a class="header-anchor" href="#✅-七、通知能力支持"><span>✅ 七、通知能力支持</span></a></h2><table><thead><tr><th>通道</th><th>说明</th></tr></thead><tbody><tr><td>Email</td><td>JavaMailSender，支持 SMTP</td></tr><tr><td>SMS</td><td>阿里云短信、腾讯云短信</td></tr><tr><td>Phone/语音</td><td>阿里云语音通知（也可用外部 API）</td></tr><tr><td>Webhook</td><td>企业微信、钉钉、飞书机器人</td></tr></tbody></table><p>每种通知封装成插件即可调用。</p><hr><h2 id="✅-八、执行结果与报告设计" tabindex="-1"><a class="header-anchor" href="#✅-八、执行结果与报告设计"><span>✅ 八、执行结果与报告设计</span></a></h2><ul><li>每个节点执行完成后记录：开始时间、耗时、输入、输出、是否成功、异常堆栈等</li><li>可以前端树形回放（每个节点有 ✅ / ❌，展开看详情）</li></ul><hr><h2 id="✅-九、推荐开发顺序-适合你一个人" tabindex="-1"><a class="header-anchor" href="#✅-九、推荐开发顺序-适合你一个人"><span>✅ 九、推荐开发顺序（适合你一个人）</span></a></h2><ol><li>✅ 执行树数据结构 + JSON 存储/解析</li><li>✅ 基础执行器：<code>http/sql/if/notify</code></li><li>✅ Vue 页面：树形结构 + 编辑器 + 流程预览</li><li>✅ 上下文变量与提取机制</li><li>✅ 报告与历史运行记录</li><li>✅ 插件持续扩展（dubbo/mq/python/文件）</li></ol><hr><h2 id="✅-十、可选加分点" tabindex="-1"><a class="header-anchor" href="#✅-十、可选加分点"><span>✅ 十、可选加分点</span></a></h2><ul><li>多环境变量支持（QA, PROD）</li><li>流程回放 / 克隆运行</li><li>错误截图 / 告警自愈建议</li><li>权限系统（未来支持团队协作）</li></ul><hr><p>如果你需要，我可以立即为你生成：</p><ul><li>🌱 执行树的 Java 类定义 + 样例执行器</li><li>🌱 Vue 执行树编辑器 demo（拖拽 + 表单编辑）</li><li>🌱 样例执行流程 JSON（支持 IF/HTTP/SQL/通知）</li></ul><p>你想从哪个模块开始搭建？我可以按你选的模块帮你生成代码骨架。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/metersphere/metersphere" target="_blank" rel="noopener noreferrer">https://github.com/metersphere/metersphere</a></p>`,66)]))}const r=i(t,[["render",l]]),k=JSON.parse('{"path":"/posts/tests/2016-04-27-test-plateform-12-chat-flow-control-tree.html","title":"test framework-12-测试平台聊一聊如何设计实现","lang":"zh-CN","frontmatter":{"title":"test framework-12-测试平台聊一聊如何设计实现","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","framework","open-source","plateform","test"],"published":true,"description":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 chat 执行树流程 非常好，你的这个方向更清晰明确了 —— 你想基于一个**「多级执行树结构」**构建一个强大的、流程可控、插件丰富的自动化测试平台，前后端联动。 ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/tests/2016-04-27-test-plateform-12-chat-flow-control-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test framework-12-测试平台聊一聊如何设计实现"}],["meta",{"property":"og:description","content":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 chat 执行树流程 非常好，你的这个方向更清晰明确了 —— 你想基于一个**「多级执行树结构」**构建一个强大的、流程可控、插件丰富的自动化测试平台，前后端联动。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"framework"}],["meta",{"property":"article:tag","content":"open-source"}],["meta",{"property":"article:tag","content":"plateform"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test framework-12-测试平台聊一聊如何设计实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1503},"filePathRelative":"posts/tests/2016-04-27-test-plateform-12-chat-flow-control-tree.md","localizedDate":"2016年4月26日","excerpt":"\\n<p>测试平台最强大的一个设计应该是流程控制。</p>\\n<p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p>\\n<p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p>\\n<h1>chat</h1>\\n<h1>执行树流程</h1>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>流程图过于复杂了，我们用一个执行树的结构来替代。可以多级树设置实现对应的能力，要如何设计实现？包含前后端</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>核心能力：</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>1）基本流程控制：if else 循环等</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>2）核心调用插件能力：http 接口、dubbo 接口、SQL 执行、mq 请求、shell 脚本、grovvy 脚本、python 脚本...</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>3）文件能力：文件的上传、scp</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>4) 通知能力：sms phone email</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,k as data};
