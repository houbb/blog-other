import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="windows-wsl2-启动-http-服务" tabindex="-1"><a class="header-anchor" href="#windows-wsl2-启动-http-服务"><span>windows WSL2 启动 http 服务</span></a></h1><h2 id="nodejs" tabindex="-1"><a class="header-anchor" href="#nodejs"><span>nodejs</span></a></h2><ul><li>app.js</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 引入 http 模块</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 创建一个 HTTP 服务器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> server</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">req</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">     res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">writeHead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Content-Type&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;text/plain&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">     res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello, World! FROM WSL!!!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 响应请求并发送一个字符串</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 服务器监听 3000 端口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">     console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Server running at http://127.0.0.1:3000/&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要指定 0.0.0.0 表示监听任何地址。</p><h2 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ node app.js</span></span>
<span class="line"><span>Server running at http://127.0.0.1:3000/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="windows-浏览器访问" tabindex="-1"><a class="header-anchor" href="#windows-浏览器访问"><span>windows 浏览器访问</span></a></h2><h3 id="查看-wls2-地址" tabindex="-1"><a class="header-anchor" href="#查看-wls2-地址"><span>查看 wls2 地址</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ ip addr show eth0</span></span>
<span class="line"><span>2: eth0:  mtu 1500 qdisc mq state UP group default qlen 1000</span></span>
<span class="line"><span>    link/ether xxx brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span>    inet 172.24.20.97/20 brd 172.24.31.255 scope global eth0</span></span>
<span class="line"><span>    ....</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>172.24.20.97 就是分配的虚拟ip</p><h3 id="浏览器访问" tabindex="-1"><a class="header-anchor" href="#浏览器访问"><span>浏览器访问</span></a></h3><p>直接 windows 下浏览器访问</p><p><a href="http://172.24.20.97:3000/" target="_blank" rel="noopener noreferrer">http://172.24.20.97:3000/</a></p><p>结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hello, World! FROM WSL!!!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="报错解决" tabindex="-1"><a class="header-anchor" href="#报错解决"><span>报错解决</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ node app.js</span></span>
<span class="line"><span>events.js:291</span></span>
<span class="line"><span>      throw er; // Unhandled &#39;error&#39; event</span></span>
<span class="line"><span>      ^</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Error: listen EADDRINUSE: address already in use 0.0.0.0:3000</span></span>
<span class="line"><span>    at Server.setupListenHandle [as _listen2] (net.js:1310:16)</span></span>
<span class="line"><span>    at listenInCluster (net.js:1358:12)</span></span>
<span class="line"><span>    at doListen (net.js:1495:7)</span></span>
<span class="line"><span>    at processTicksAndRejections (internal/process/task_queues.js:85:21)</span></span>
<span class="line"><span>Emitted &#39;error&#39; event on Server instance at:</span></span>
<span class="line"><span>    at emitErrorNT (net.js:1337:8)</span></span>
<span class="line"><span>    at processTicksAndRejections (internal/process/task_queues.js:84:21) {</span></span>
<span class="line"><span>  code: &#39;EADDRINUSE&#39;,</span></span>
<span class="line"><span>  errno: &#39;EADDRINUSE&#39;,</span></span>
<span class="line"><span>  syscall: &#39;listen&#39;,</span></span>
<span class="line"><span>  address: &#39;0.0.0.0&#39;,</span></span>
<span class="line"><span>  port: 3000</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原因-端口查看" tabindex="-1"><a class="header-anchor" href="#原因-端口查看"><span>原因：端口查看</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ netstat -tuln | grep 3000</span></span>
<span class="line"><span>tcp        0      0 0.0.0.0:3000            0.0.0.0:*               LISTEN</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个命令 <code>netstat -tuln | grep 3000</code> 用于显示系统中所有正在监听（LISTEN）指定端口的TCP连接的信息，其中 <code>-tuln</code> 参数用于指定显示TCP连接信息，其中：</p><ul><li><code>-t</code> 表示显示TCP连接。</li><li><code>-u</code> 表示显示UDP连接。</li><li><code>-l</code> 表示仅显示正在监听（LISTEN）的连接。</li><li><code>-n</code> 表示使用数字格式显示地址和端口号，而不是尝试解析成主机名和服务名。</li><li><code>grep 3000</code> 用于过滤出包含 &quot;3000&quot; 的行，以便只显示与3000端口相关的信息。</li></ul><p>命令的输出解释如下：</p><ul><li><code>tcp</code> 表示这是一个TCP连接。</li><li><code>0.0.0.0:3000</code> 表示该服务在所有可用的网络接口（0.0.0.0）上监听3000端口，这意味着该服务可以接受来自任何网络接口的连接请求。</li><li><code>LISTEN</code> 表示该服务正在监听来自客户端的连接请求，处于监听状态。</li><li>第二个 <code>0.0.0.0:*</code> 表示远程地址是任意IP（0.0.0.0），端口号是任意端口（*），这表示服务将接受来自任何IP地址和任何端口的连接。</li></ul><p>因此，这个输出表明有一个TCP服务正在通过3000端口接受来自任何网络接口的连接请求。</p><h2 id="查看端口被谁占用" tabindex="-1"><a class="header-anchor" href="#查看端口被谁占用"><span>查看端口被谁占用：</span></a></h2><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lsof</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :3000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令 <code>lsof -i :3000</code> 用于显示当前正在运行的程序中，哪些程序（或进程）正在监听或连接到指定端口（这里是3000端口）。<code>lsof</code>（list open files）命令是用于查看已经被打开的文件列表，<code>-i :3000</code> 参数用于指定只显示与3000端口相关的信息。</p><p>输出结果解释如下：</p><ul><li><code>COMMAND</code> 列显示了占用该端口的进程的名称（在这里是 <code>node</code>）。</li><li><code>PID</code> 列显示了该进程的进程ID（在这里是 <code>64293</code>）。</li><li><code>USER</code> 列显示了拥有该进程的用户（在这里是 <code>dh</code>）。</li><li><code>FD</code> 列显示了文件描述符（File Descriptor）的编号。在这里，<code>18u</code> 表示该进程的第18个文件描述符是一个网络套接字（Socket）。</li><li><code>TYPE</code> 列显示了文件的类型。在这里，<code>IPv4</code> 表示该套接字是一个IPv4类型的套接字。</li><li><code>DEVICE</code> 列显示了网络设备的信息（在这里不太相关）。</li><li><code>SIZE/OFF</code> 列显示了文件大小或偏移量的信息（在这里不太相关）。</li><li><code>NODE</code> 列显示了节点号（在这里不太相关）。</li><li><code>NAME</code> 列显示了网络套接字的名称或地址。在这里，<code>TCP *:3000</code> 表示该进程正在监听所有网络接口上的3000端口。</li></ul><p>因此，这个输出表明一个名为 <code>node</code> 的进程正在通过3000端口监听来自任何网络接口的连接请求。</p><h2 id="kill" tabindex="-1"><a class="header-anchor" href="#kill"><span>kill</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ lsof -i :3000</span></span>
<span class="line"><span>COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span></span>
<span class="line"><span>node    64293   dh   18u  IPv4 932304      0t0  TCP *:3000 (LISTEN)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">kill</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -9</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64293</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://blog.csdn.net/weixin_40551464/article/details/133577201" target="_blank" rel="noopener noreferrer">如何在windows上安装WSL？以实现windows操作系统运行linux</a></p><p><a href="https://blog.csdn.net/xjyou456/article/details/129654673" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/xjyou456/article/details/129654673</a></p>`,38)]))}const r=i(l,[["render",t]]),k=JSON.parse(`{"path":"/posts/windows/2024-01-03-windows-install-wsl-04-access-from-windows.html","title":"windows wsl2 启动的 http 服务 windows 如何通过浏览器访问？  listen EADDRINUSE address already in use","lang":"zh-CN","frontmatter":{"title":"windows wsl2 启动的 http 服务 windows 如何通过浏览器访问？  listen EADDRINUSE address already in use","date":"2024-01-05T00:00:00.000Z","categories":["Windows"],"tags":["windows","os","linux","wsl","sh"],"published":true,"description":"windows WSL2 启动 http 服务 nodejs app.js 需要指定 0.0.0.0 表示监听任何地址。 启动 windows 浏览器访问 查看 wls2 地址 172.24.20.97 就是分配的虚拟ip 浏览器访问 直接 windows 下浏览器访问 http://172.24.20.97:3000/ 结果： 报错解决 原因：端口查...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/windows/2024-01-03-windows-install-wsl-04-access-from-windows.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"windows wsl2 启动的 http 服务 windows 如何通过浏览器访问？  listen EADDRINUSE address already in use"}],["meta",{"property":"og:description","content":"windows WSL2 启动 http 服务 nodejs app.js 需要指定 0.0.0.0 表示监听任何地址。 启动 windows 浏览器访问 查看 wls2 地址 172.24.20.97 就是分配的虚拟ip 浏览器访问 直接 windows 下浏览器访问 http://172.24.20.97:3000/ 结果： 报错解决 原因：端口查..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"windows"}],["meta",{"property":"article:tag","content":"os"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"wsl"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2024-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"windows wsl2 启动的 http 服务 windows 如何通过浏览器访问？  listen EADDRINUSE address already in use\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.51,"words":1052},"filePathRelative":"posts/windows/2024-01-03-windows-install-wsl-04-access-from-windows.md","localizedDate":"2024年1月5日","excerpt":"\\n<h2>nodejs</h2>\\n<ul>\\n<li>app.js</li>\\n</ul>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">   const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> http</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> require</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'http'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">); </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 引入 http 模块</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">   // 创建一个 HTTP 服务器</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">   const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> server</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> http</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">createServer</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">((</span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">req</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">res</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">     res</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">writeHead</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">200</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, {</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'Content-Type'</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\\">:</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 'text/plain'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">});</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">     res</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">end</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'Hello, World! FROM WSL!!!</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">\\\\n</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">); </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 响应请求并发送一个字符串</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">   });</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">   // 服务器监听 3000 端口</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">   server</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">listen</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">3000</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'0.0.0.0'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, () </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">     console</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">log</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'Server running at http://127.0.0.1:3000/'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">   });</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,k as data};
