import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-CEDSurVN.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="grovvy-中-domain-specific-languages-是什么" tabindex="-1"><a class="header-anchor" href="#grovvy-中-domain-specific-languages-是什么"><span>grovvy 中，Domain-Specific Languages 是什么</span></a></h1><p>在Groovy中，Domain-Specific Languages（领域特定语言）通常指的是针对特定领域的编程语言或语法，旨在提供更高层次的抽象，以便更自然地表达和解决该领域中的问题。</p><p>DSL允许开发人员使用一种更接近领域概念的语言来描述问题和解决方案，从而提高代码的可读性和可维护性。</p><p>Groovy是一种灵活的动态语言，它提供了丰富的语法和特性，使得编写DSL变得相对容易。你可以使用Groovy的闭包、运算符重载、元编程等特性来创建自定义的DSL。</p><p>DSL可以针对特定的业务领域，如配置文件、测试规范、领域建模等。</p><p>Groovy的DSL支持可以通过以下方式实现：</p><ol><li><p>方法调用风格：通过使用Groovy的方法调用语法，可以创建一种更接近自然语言的语法，以便于表达领域特定概念。例如，你可以编写一个DSL，用于描述数据库查询语句，使其更类似于自然语言的方式。</p></li><li><p>闭包：Groovy的闭包是强大的工具，可以用于创建DSL。你可以编写接受闭包作为参数的方法，并使用闭包中的代码来定义DSL的行为。这种方法可以使DSL代码更具可读性和表达力。</p></li><li><p>运算符重载：Groovy允许你对运算符进行重载，从而使DSL代码更具表达力。通过重载运算符，你可以改变原始语言的语义，使其更适合于特定领域。</p></li><li><p>元编程：Groovy支持元编程，允许在运行时动态地修改和扩展DSL。这使得DSL可以适应不同的场景和需求。</p></li></ol><p>总的来说，Groovy中的DSL是通过利用该语言的动态性、灵活性和特定特性来创建一种更接近领域概念的编程语言或语法，从而提供更好的可读性和可维护性。</p><h1 id="_1-命令链-command-chains" tabindex="-1"><a class="header-anchor" href="#_1-命令链-command-chains"><span>1. 命令链 Command chains</span></a></h1><p>Groovy允许在顶层语句的方法调用参数周围省略括号。</p><p>&quot;命令链&quot;特性通过允许我们链式调用这种无需括号的方法调用，既不需要参数周围的括号，也不需要链式调用之间的点号来连接。</p><p>总体思想是，类似于a b c d这样的调用实际上等同于a(b).c(d)。这也适用于多个参数、闭包参数，甚至是命名参数。此外，这样的命令链也可以出现在赋值语句的右侧。</p><p>让我们来看一些由这种新语法支持的示例：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: turn(left).then(right)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">turn left then right</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: take(2.pills).of(chloroquinine).after(6.hours)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">take </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pills of chloroquinine after </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hours</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: paint(wall).with(red, green).and(yellow)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pa</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">int wall with red, green and </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">yellow</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// with named parameters too</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: check(that: margarita).tastes(good)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">check </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">that</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: margarita tastes good</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// with closures as parameters</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: given({}).when({}).then({})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">given { } when { } then { }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在链式命令中也可以使用不带参数的方法，但在这种情况下，需要使用括号：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: select(all).unique().from(names)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">select all </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">unique</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() from names</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的命令链包含奇数个元素，链式命令将由方法/参数组成，并以最后的属性访问结束：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: take(3).cookies</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// and also this: take(3).getCookies()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">take </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cookies</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种命令链的方法打开了在Groovy中编写更广泛的DSL的有趣可能性。</p><p>上述示例演示了基于命令链的DSL的使用，但没有展示如何创建DSL。</p><p>有多种策略可供选择，但为了说明如何创建这样的DSL，我们将展示几个示例，首先是使用映射和闭包：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">square_root </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sqrt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> please</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">the</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">what</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">what</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n)) }]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// equivalent to: please(show).the(square_root).of(100)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">please show the square_root of </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ==&gt; 10.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为第二个示例，考虑如何为简化现有API之一编写DSL。</p><p>也许你需要将此代码提供给客户、业务分析师或可能不是专业Java开发人员的测试人员。</p><p>我们将使用Google Guava库项目中的Splitter，因为它已经具有漂亮的流畅API。</p><p>下面是我们如何使用它的示例：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@Grab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;com.google.guava:guava:r09&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> com.google.common.base.*</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Splitter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;,&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">trimResults</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CharMatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;_&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> as </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_a ,_b_ ,c__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于Java开发人员来说，这段代码读起来相当不错，但如果这不是你的目标受众，或者你需要编写许多类似的语句，它可能会被认为有些冗长。</p><p>再次强调，编写DSL有很多选择。我们将使用映射（Maps）和闭包（Closures）来保持简单。</p><p>我们首先编写一个辅助方法：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@Grab</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;com.google.guava:guava:r09&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> com.google.common.base.*</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">sep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">trimming</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">trimChar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      Splitter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sep).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">trimResults</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CharMatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(trimChar as </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(string).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用以下代码替代我们原始示例中的这一行：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Splitter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;,&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">trimResults</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CharMatcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;_&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> as </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_a ,_b_ ,c__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以这样写：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> split </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_a ,_b_ ,c__&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> on </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;,&#39;</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> trimming </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;_</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="_2-运算符重载" tabindex="-1"><a class="header-anchor" href="#_2-运算符重载"><span>2. 运算符重载</span></a></h1><p>在Groovy中，各种运算符被映射为对象上的常规方法调用。</p><p>这使你可以提供自己的Java或Groovy对象，并利用运算符重载的特性。</p><p>下表描述了Groovy支持的运算符及其对应的方法：</p><p>在Groovy中，以下是支持的运算符及其对应的方法：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">方法</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">plus()</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">minus()</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">multiply()</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">div()</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">mod()</td></tr><tr><td style="text-align:left;">**</td><td style="text-align:left;">power()</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">rightShift()</td></tr><tr><td style="text-align:left;">&gt;&gt;&gt;</td><td style="text-align:left;">rightShiftUnsigned()</td></tr><tr><td style="text-align:left;">&amp;</td><td style="text-align:left;">and()</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">or()</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">xor()</td></tr><tr><td style="text-align:left;">!</td><td style="text-align:left;">not()</td></tr><tr><td style="text-align:left;">~</td><td style="text-align:left;">bitwiseNegate()</td></tr><tr><td style="text-align:left;">==</td><td style="text-align:left;">equals()</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">notEquals()</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">greaterThan()</td></tr><tr><td style="text-align:left;">=</td><td style="text-align:left;">greaterThanOrEqual()</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">compareTo()</td></tr><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">and()</td></tr><tr><td style="text-align:left;">||</td><td style="text-align:left;">or()</td></tr><tr><td style="text-align:left;">?:</td><td style="text-align:left;">elvis()</td></tr><tr><td style="text-align:left;">++</td><td style="text-align:left;">next()</td></tr><tr><td style="text-align:left;">--</td><td style="text-align:left;">previous()</td></tr><tr><td style="text-align:left;">+=</td><td style="text-align:left;">plusAssign()</td></tr><tr><td style="text-align:left;">-=</td><td style="text-align:left;">minusAssign()</td></tr><tr><td style="text-align:left;">*=</td><td style="text-align:left;">multiplyAssign()</td></tr><tr><td style="text-align:left;">/=</td><td style="text-align:left;">divAssign()</td></tr><tr><td style="text-align:left;">%=</td><td style="text-align:left;">modAssign()</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">rightShiftAssign()</td></tr><tr><td style="text-align:left;">&gt;&gt;&gt;=</td><td style="text-align:left;">rightShiftUnsignedAssign()</td></tr><tr><td style="text-align:left;">&amp;=</td><td style="text-align:left;">andAssign()</td></tr><tr><td style="text-align:left;">|=</td><td style="text-align:left;">orAssign()</td></tr><tr><td style="text-align:left;">^=</td><td style="text-align:left;">xorAssign()</td></tr></tbody></table><p>这些运算符对应的方法可用于重载，以根据对象的类型和操作进行自定义行为。</p><h1 id="_3-脚本基类-script-base-classes" tabindex="-1"><a class="header-anchor" href="#_3-脚本基类-script-base-classes"><span>3. 脚本基类 Script base classes</span></a></h1><h2 id="_3-1-script类" tabindex="-1"><a class="header-anchor" href="#_3-1-script类"><span>3.1 Script类</span></a></h2><p>Groovy脚本总是被编译为类。</p><p>例如，一个简单的脚本如下所示：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Hello from Groovy&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译后，它将生成一个扩展抽象类groovy.lang.Script的类。该类包含一个名为run的抽象方法。</p><p>当脚本被编译时，其主体将成为run方法，而脚本中的其他方法将在实现类中找到。</p><p>Script类通过Binding对象提供了与应用程序的基本集成支持，如下面的示例所示：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> binding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Binding</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">()             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//一个binding被用于在脚本和调用类之间共享数据   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> shell</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GroovyShell</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">(binding)    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//可以使用GroovyShell和该binding</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">binding.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">setVariable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;x&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)              </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//输入变量从调用类中设置到binding中    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">binding.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">setVariable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;y&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell.evaluate </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;z=2*x+y&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                //然后对脚本进行求值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> binding.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getVariable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;z&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //z变量已经被&quot;导出&quot;到binding中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一种在调用方和脚本之间共享数据的非常实用的方法，然而在某些情况下可能不足够或不实用。</p><p>为此，Groovy允许您设置自己的基础脚本类。</p><p>基础脚本类必须扩展groovy.lang.Script，并且是单个抽象方法类型：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyBaseClass</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以在编译器配置中声明自定义的脚本基类，例如：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> CompilerConfiguration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">()        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//创建自定义的编译器配置                          </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">config.scriptBaseClass </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;MyBaseClass&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              //将基础脚本类设置为我们自定义的基础脚本类                    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> shell</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> GroovyShell</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">classLoader, config)             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//然后使用该配置创建一个GroovyShell</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//脚本将会扩展基础脚本类，直接访问name属性和greet方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell.evaluate </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;              </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    setName &#39;Judith&#39;                                                    </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    greet()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-basescript注解" tabindex="-1"><a class="header-anchor" href="#_3-2-basescript注解"><span>3.2 @BaseScript注解</span></a></h2><p>作为另一种选择，还可以直接在脚本中使用 <code>@BaseScript</code> 注解：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> groovy.transform.BaseScript</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@BaseScript</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> MyBaseClass</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> baseScript</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">setName </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Judith&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，@BaseScript应该注解一个类型为基础脚本类的变量。</p><p>或者，您可以将基础脚本类设置为@BaseScript注解本身的成员。</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@BaseScript</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">MyBaseClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> groovy.transform.BaseScript</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">setName </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Judith&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">greet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-替代的抽象方法-alternate-abstract-method" tabindex="-1"><a class="header-anchor" href="#_3-3-替代的抽象方法-alternate-abstract-method"><span>3.3 替代的抽象方法 Alternate abstract method</span></a></h2><p>我们已经看到基础脚本类是一种需要实现run方法的单个抽象方法类型。run方法会由脚本引擎自动执行。</p><p>在某些情况下，我们可能希望有一个基类来实现run方法，但提供一个替代的抽象方法供脚本主体使用。</p><p>例如，基础脚本的run方法可能在执行run方法之前进行一些初始化操作。</p><p>可以通过以下方式实现这一点：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyBaseClass</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> scriptBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()            </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//基础脚本类应该定义一个（且只能一个）抽象方法                  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        count++                             </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//run方法可以被重写，在执行脚本主体之前执行某些任务                        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        scriptBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()                        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//run方法调用抽象的scriptBody方法，该方法将委托给用户脚本                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        count                               </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//然后它可以返回与脚本的返回值不同的东西                                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你执行下面的代码：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> shell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">evaluate </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    println &#39;Ok&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后您会发现脚本被执行，但评估的结果是1，这是基类的run方法返回的结果。</p><p>如果使用<code>parse</code>而不是<code>evaluate</code>，情况会更清晰，因为它允许您在同一个脚本实例上多次执行run方法：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> script</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> shell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;println &#39;Ok&#39;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> script.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> script.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_4-为数字添加属性" tabindex="-1"><a class="header-anchor" href="#_4-为数字添加属性"><span>4. 为数字添加属性</span></a></h1><p>在Groovy中，数值类型被视为与其他类型相等。</p><p>因此，可以通过向数字添加属性或方法来增强它们。</p><p>当处理可测量的数量时，这非常方便。有关如何在Groovy中增强现有类的详细信息，请参阅扩展模块部分或分类部分。</p><p>在Groovy中，可以使用TimeCategory来说明这一点：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">use</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TimeCategory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">minute.from.now       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//使用TimeCategory，将一个名为\`minute\`的属性添加到Integer类中。</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hours.ago</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> someDate </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()       </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> someDate </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">months    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//类似地，\`months\`方法返回一个\`groovy.time.DatumDependentDuration\`，该方法可以在计算中使用。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-delegatesto" tabindex="-1"><a class="header-anchor" href="#_5-delegatesto"><span>5. @DelegatesTo</span></a></h1><h2 id="_5-1-在编译时解释委托策略" tabindex="-1"><a class="header-anchor" href="#_5-1-在编译时解释委托策略"><span>5.1. 在编译时解释委托策略</span></a></h2><p><code>@groovy.lang.DelegatesTo</code>是一个文档和编译时注解，旨在：</p><p>为使用闭包作为参数的API提供文档</p><p>为静态类型检查器和编译器提供类型信息</p><p>Groovy语言是构建领域特定语言（DSL）的首选平台。使用闭包，可以很容易地创建自定义控制结构，也可以简单地创建构建器。</p><p>想象一下，您有以下代码：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">email {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    from </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dsl-guru@mycompany.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    to </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;john.doe@waitaminute.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subject </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;The pope has resigned!&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    body {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        p </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Really, the pope has resigned!&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种实现方法是使用构建器策略，这意味着有一个名为email的方法，接受一个闭包作为参数。</p><p>该方法可以将后续的调用委托给实现了from、to、subject和body方法的对象。</p><p>同样，body是一个接受闭包作为参数的方法，并且使用了构建器策略。</p><p>通常，实现这样的构建器的方法如下所示：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> email</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Closure</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> email </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EmailSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> code </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cl.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rehydrate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(email, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    code.resolveStrategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Closure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DELEGATE_ONLY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EmailSpec</code>类实现了<code>from</code>、<code>to</code>等方法。</p><p>通过调用<code>rehydrate</code>，我们创建了闭包的副本，并设置了委托对象（delegate）、所有者（owner）和当前对象（thisObject）的值。</p><p>在这里设置所有者和当前对象并不是非常重要，因为我们将使用<code>DELEGATE_ONLY</code>策略，该策略表示方法调用仅针对闭包的委托对象解析。</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EmailSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;From: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">... </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;To: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> subject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> subject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Subject: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$subject</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Closure</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bodySpec </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> BodySpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> code </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> body.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rehydrate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(bodySpec, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        code.resolveStrategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Closure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DELEGATE_ONLY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EmailSpec</code>类本身具有一个接受闭包的<code>body</code>方法，该闭包被克隆并执行。</p><p>这就是我们在Groovy中称之为构建器模式。</p><p>我们展示的代码的一个问题是<code>email</code>方法的使用者无法获得关于在闭包内部可以调用的方法的任何信息。唯一可能的信息来源是方法的文档。</p><p>这方面有两个问题：首先，文档并不总是编写的，即使编写了文档，也并不总是可用（例如，未下载javadoc）。</p><p>其次，它对IDE没有帮助。真正有趣的是，IDE在进入闭包体后可以通过建议存在于<code>email</code>类上的方法来帮助开发人员。</p><p>此外，如果用户在闭包中调用了<code>EmailSpec</code>类未定义的方法，IDE至少应发出警告（因为很可能在运行时出现错误）。</p><p>上述代码的另一个问题是它与静态类型检查不兼容。类型检查可以让用户在编译时知道方法调用是否被授权，而不是在运行时。</p><p>但如果您尝试对此代码执行类型检查，将会遇到问题：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">email {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    from </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dsl-guru@mycompany.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    to </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;john.doe@waitaminute.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    subject </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;The pope has resigned!&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    body {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        p </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Really, the pope has resigned!&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后类型检查器会知道有一个接受闭包的<code>email</code>方法，但它会对闭包内的每个方法调用发出警告，因为例如<code>from</code>不是类中定义的方法。</p><p>实际上，它在<code>EmailSpec</code>类中定义，它完全没有提示来帮助它知道闭包委托在运行时将是<code>EmailSpec</code>类型：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@groovy.transform.TypeChecked</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sendEmail</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    email {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        from </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dsl-guru@mycompany.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        to </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;john.doe@waitaminute.com&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        subject </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;The pope has resigned!&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        body {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            p </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Really, the pope has resigned!&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译将失败，并出现以下错误：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[Static type checking] - Cannot find matching method MyScript#from(java.lang.String). Please check if the declared type is correct and if the method exists.</span></span>
<span class="line"><span> @ line 31, column 21.</span></span>
<span class="line"><span>                       from &#39;dsl-guru@mycompany.com&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-delegatesto" tabindex="-1"><a class="header-anchor" href="#_5-2-delegatesto"><span>5.2. @DelegatesTo</span></a></h2><p>因此，Groovy 2.1引入了一个名为<code>@DelegatesTo</code>的新注解。</p><p>该注解的目标是解决文档问题，让您的IDE了解闭包体中预期的方法，并通过为编译器提供关于闭包体中方法调用的潜在接收者的提示来解决类型检查问题。</p><p>具体做法是给<code>email</code>方法的闭包参数加上注解：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> email</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@DelegatesTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">EmailSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Closure</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> email </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EmailSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> code </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cl.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rehydrate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(email, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    code.resolveStrategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Closure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DELEGATE_ONLY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这里告诉编译器（或者IDE），当使用闭包调用该方法时，闭包的委托将设置为一个类型为<code>EmailSpec</code>的对象。</p><p>但是仍然存在一个问题：默认的委托策略不是我们方法中使用的策略。</p><p>因此，我们将提供更多信息，并告诉编译器（或者IDE）委托策略也发生了变化：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> email</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@DelegatesTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Closure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DELEGATE_ONLY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">EmailSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Closure</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> email </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EmailSpec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> code </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cl.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rehydrate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(email, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    code.resolveStrategy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Closure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DELEGATE_ONLY</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，无论是IDE还是类型检查器（如果您使用了 <code>@TypeChecked</code> 注解），都将意识到委托对象和委托策略。</p><p>这非常好，因为它不仅可以让IDE提供智能代码补全，还可以在编译时消除仅在运行时才能确定的错误！</p><p>以下代码现在将通过编译：</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>chatGPT</p><p><a href="https://groovy-lang.org/dsls.html" target="_blank" rel="noopener noreferrer">https://groovy-lang.org/dsls.html</a></p>`,126)]))}const d=s(t,[["render",e]]),r=JSON.parse('{"path":"/posts/Lang/2023-05-09-grovvy-07-dsl.html","title":"grovvy-07-Domain-Specific Languages 领域特定语言","lang":"zh-CN","frontmatter":{"title":"grovvy-07-Domain-Specific Languages 领域特定语言","date":"2023-05-09T00:00:00.000Z","categories":["Lang"],"tags":["grovvy","lang","sh"],"published":true,"description":"grovvy 中，Domain-Specific Languages 是什么 在Groovy中，Domain-Specific Languages（领域特定语言）通常指的是针对特定领域的编程语言或语法，旨在提供更高层次的抽象，以便更自然地表达和解决该领域中的问题。 DSL允许开发人员使用一种更接近领域概念的语言来描述问题和解决方案，从而提高代码的可读性...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2023-05-09-grovvy-07-dsl.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"grovvy-07-Domain-Specific Languages 领域特定语言"}],["meta",{"property":"og:description","content":"grovvy 中，Domain-Specific Languages 是什么 在Groovy中，Domain-Specific Languages（领域特定语言）通常指的是针对特定领域的编程语言或语法，旨在提供更高层次的抽象，以便更自然地表达和解决该领域中的问题。 DSL允许开发人员使用一种更接近领域概念的语言来描述问题和解决方案，从而提高代码的可读性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"grovvy"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2023-05-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"grovvy-07-Domain-Specific Languages 领域特定语言\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":12.39,"words":3718},"filePathRelative":"posts/Lang/2023-05-09-grovvy-07-dsl.md","localizedDate":"2023年5月9日","excerpt":"\\n<p>在Groovy中，Domain-Specific Languages（领域特定语言）通常指的是针对特定领域的编程语言或语法，旨在提供更高层次的抽象，以便更自然地表达和解决该领域中的问题。</p>\\n<p>DSL允许开发人员使用一种更接近领域概念的语言来描述问题和解决方案，从而提高代码的可读性和可维护性。</p>\\n<p>Groovy是一种灵活的动态语言，它提供了丰富的语法和特性，使得编写DSL变得相对容易。你可以使用Groovy的闭包、运算符重载、元编程等特性来创建自定义的DSL。</p>\\n<p>DSL可以针对特定的业务领域，如配置文件、测试规范、领域建模等。</p>\\n<p>Groovy的DSL支持可以通过以下方式实现：</p>","autoDesc":true}');export{d as comp,r as data};
