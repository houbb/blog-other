import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as p,o as r}from"./app-uJE4P3e0.js";const n={};function o(s,e){return r(),a("div",null,e[0]||(e[0]=[p('<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>测试平台最强大的一个设计应该是流程控制。</p><p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p><p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p><h1 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流"><span>控制流</span></a></h1><p>我们可以参考 java 的关键词设计。</p><p>这里只关注一些比较重要的流程控制。</p><h2 id="控制流关键字" tabindex="-1"><a class="header-anchor" href="#控制流关键字"><span>控制流关键字</span></a></h2><p>这些关键字用于控制程序的流程：</p><p>if<br> else<br> switch<br> case<br> default<br> for<br> while<br> do<br> break<br> continue<br> return</p><p>初期可以实现最核心的：if else loop</p><h2 id="异常处理关键字" tabindex="-1"><a class="header-anchor" href="#异常处理关键字"><span>异常处理关键字</span></a></h2><p>try<br> catch<br> finally<br> throw<br> throws</p><p>初期可以实现最核心的：throws catch</p><h1 id="并行-串行" tabindex="-1"><a class="header-anchor" href="#并行-串行"><span>并行/串行</span></a></h1><p>有些任务是可以并行的，有些串行。</p><p>支持用户自定义。</p><p>loop 的时候，定义是 concurrent-loop / serial-loop</p><h1 id="能力组件" tabindex="-1"><a class="header-anchor" href="#能力组件"><span>能力组件</span></a></h1><p>拥有了基本的流程控制，接下来我们要实现的就是一些基础的组件能力。</p><p>测试其实和编程类似，我们大概需要做几件事情：</p><p>1）基础环境准备</p><p>2）请求参数构建</p><p>3）执行调用</p><p>4）结果的参数提取+断言</p><ol start="5"><li>后置动作 如报告发送/报警等</li></ol><p>覆盖率+成功率+分析处理 可以作为内置的能力。</p><h2 id="外部请求" tabindex="-1"><a class="header-anchor" href="#外部请求"><span>外部请求</span></a></h2><p>http</p><p>rpc</p><p>mq</p><h2 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h2><p>mysql</p><p>redis</p><p>mongodb</p><p>neo4j</p><p>es</p><p>....</p><h2 id="参数构建" tabindex="-1"><a class="header-anchor" href="#参数构建"><span>参数构建</span></a></h2><p>全局变量</p><p>环境变量</p><p>提取变量</p><h2 id="数据加工" tabindex="-1"><a class="header-anchor" href="#数据加工"><span>数据加工</span></a></h2><p>可以提取为一个单独的模块</p><p>可以对入参统一处理，也可以对出参统一处理。</p><p>对数据进行各种转换等等。</p><h2 id="资源管理" tabindex="-1"><a class="header-anchor" href="#资源管理"><span>资源管理</span></a></h2><p>文件管理 上传/机器同步</p><h2 id="脚本-组" tabindex="-1"><a class="header-anchor" href="#脚本-组"><span>脚本（组）</span></a></h2><p>执行各种 shell / groovy 脚本等</p><h2 id="报告模块" tabindex="-1"><a class="header-anchor" href="#报告模块"><span>报告模块</span></a></h2><p>结果可以和其他通知渠道结合：</p><p>IM</p><p>EMAIL</p><p>SMS</p><p>PHONE</p><h1 id="整体流程的串联" tabindex="-1"><a class="header-anchor" href="#整体流程的串联"><span>整体流程的串联</span></a></h1><p>可以通过 tree 的方式，将上面的流程串联在一起</p><p><a href="https://element.eleme.io/#/zh-CN/component/tree" target="_blank" rel="noopener noreferrer">https://element.eleme.io/#/zh-CN/component/tree</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/metersphere/metersphere" target="_blank" rel="noopener noreferrer">https://github.com/metersphere/metersphere</a></p>',61)]))}const c=t(n,[["render",o]]),l=JSON.parse('{"path":"/posts/tests/2016-04-27-test-plateform-04-flow-control.html","title":"test framework-04-测试平台 flow control 流程控制","lang":"zh-CN","frontmatter":{"title":"test framework-04-测试平台 flow control 流程控制","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","framework","open-source","plateform","test"],"published":true,"description":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 控制流 我们可以参考 java 的关键词设计。 这里只关注一些比较重要的流程控制。 控制流关键字 这些关键字用于控制程序的流程： if else switch cas...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/tests/2016-04-27-test-plateform-04-flow-control.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test framework-04-测试平台 flow control 流程控制"}],["meta",{"property":"og:description","content":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 控制流 我们可以参考 java 的关键词设计。 这里只关注一些比较重要的流程控制。 控制流关键字 这些关键字用于控制程序的流程： if else switch cas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"framework"}],["meta",{"property":"article:tag","content":"open-source"}],["meta",{"property":"article:tag","content":"plateform"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test framework-04-测试平台 flow control 流程控制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.77,"words":532},"filePathRelative":"posts/tests/2016-04-27-test-plateform-04-flow-control.md","localizedDate":"2016年4月26日","excerpt":"\\n<p>测试平台最强大的一个设计应该是流程控制。</p>\\n<p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p>\\n<p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p>\\n<h1>控制流</h1>\\n<p>我们可以参考 java 的关键词设计。</p>\\n<p>这里只关注一些比较重要的流程控制。</p>\\n<h2>控制流关键字</h2>\\n<p>这些关键字用于控制程序的流程：</p>\\n<p>if<br>\\nelse<br>\\nswitch<br>\\ncase<br>\\ndefault<br>\\nfor<br>\\nwhile<br>\\ndo<br>\\nbreak<br>\\ncontinue<br>\\nreturn</p>","autoDesc":true}');export{c as comp,l as data};
