import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const t={};function l(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="补偿方案" tabindex="-1"><a class="header-anchor" href="#补偿方案"><span>补偿方案</span></a></h1><p>为什么需要补偿方案呢？</p><p>有时候可能因为时间差，或者是无法实时获取正确的结果，就需要一套补偿方案。</p><p>补偿方案可以设计的很复杂，比如基于数据库+mq，也可以设计的很简单，比如基于内存+定时任务。</p><p>我们今天主要讲解一个比较简单的设计方案: 内存 + 定时任务。</p><h1 id="整体预期" tabindex="-1"><a class="header-anchor" href="#整体预期"><span>整体预期</span></a></h1><p>可以指定补偿次数</p><p>可以指定补偿的时间间隔？</p><p>可以查询当前补偿的状态 + 对补偿的数据进行 CRUD 管理。（前期可以不需要页面）</p><h2 id="不同的实现策略" tabindex="-1"><a class="header-anchor" href="#不同的实现策略"><span>不同的实现策略</span></a></h2><p>基于内存的</p><p>基于数据库的（允许自定义）</p><h1 id="什么时候需要补偿" tabindex="-1"><a class="header-anchor" href="#什么时候需要补偿"><span>什么时候需要补偿</span></a></h1><p>补偿应该是一个偶发性的动作，如果非常常见，首先应该考虑是不是功能设计有问题，或者程序存在 BUG。</p><p>一般都是存在异常的时候。</p><p>所以我们可以定义一个异常，或者当特定的情况下抛出这个异常。</p><p>ps: 这个设计理念类似于 spring 的事务管理。</p><h2 id="异常的定义" tabindex="-1"><a class="header-anchor" href="#异常的定义"><span>异常的定义</span></a></h2><p>我们专门定义一个异常，用于区分其他的各种异常。</p><p>只有当抛出的是这个异常的时候，才进行处理。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.github.houbb.compensate.api.exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 当需要补偿的时候，需要抛出这个异常。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> binbin.hou</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@since</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 1.0.0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RequireCompensateException</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CompensateException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RequireCompensateException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RequireCompensateException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RequireCompensateException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Throwable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cause</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message, cause);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RequireCompensateException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Throwable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cause</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cause);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RequireCompensateException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Throwable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cause</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> enableSuppression</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> writableStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(message, cause, enableSuppression, writableStackTrace);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="存储的设计" tabindex="-1"><a class="header-anchor" href="#存储的设计"><span>存储的设计</span></a></h1><p>当抛出异常的时候，这个时候上下文信息应该放在那里呢？</p><p>和重试的差异性要如何体现呢？</p><p>这里为了充分的将二者区分开，或者说将二者融合也是一个不错的方案？</p><p>为了简单和后续的自由发展，我们暂时将二者区分开。</p><p>我们认为，补偿甚至是有些类似于 spring 中的熔断等等方法。</p><h2 id="注解定义" tabindex="-1"><a class="header-anchor" href="#注解定义"><span>注解定义</span></a></h2><h2 id="基本属性" tabindex="-1"><a class="header-anchor" href="#基本属性"><span>基本属性</span></a></h2><p>当前补偿次数</p><p>历史</p><p>时间</p><p>入参</p><p>结果</p>`,34)]))}const r=s(t,[["render",l]]),d=JSON.parse('{"path":"/posts/Design/2021-02-07-how-to-compensate.html","title":"如何设计一套补偿方案？","lang":"zh-CN","frontmatter":{"title":"如何设计一套补偿方案？","date":"2021-01-25T00:00:00.000Z","categories":["Design"],"tags":["design","system","sh"],"published":true,"description":"补偿方案 为什么需要补偿方案呢？ 有时候可能因为时间差，或者是无法实时获取正确的结果，就需要一套补偿方案。 补偿方案可以设计的很复杂，比如基于数据库+mq，也可以设计的很简单，比如基于内存+定时任务。 我们今天主要讲解一个比较简单的设计方案: 内存 + 定时任务。 整体预期 可以指定补偿次数 可以指定补偿的时间间隔？ 可以查询当前补偿的状态 + 对补偿...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Design/2021-02-07-how-to-compensate.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"如何设计一套补偿方案？"}],["meta",{"property":"og:description","content":"补偿方案 为什么需要补偿方案呢？ 有时候可能因为时间差，或者是无法实时获取正确的结果，就需要一套补偿方案。 补偿方案可以设计的很复杂，比如基于数据库+mq，也可以设计的很简单，比如基于内存+定时任务。 我们今天主要讲解一个比较简单的设计方案: 内存 + 定时任务。 整体预期 可以指定补偿次数 可以指定补偿的时间间隔？ 可以查询当前补偿的状态 + 对补偿..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"system"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何设计一套补偿方案？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.89,"words":567},"filePathRelative":"posts/Design/2021-02-07-how-to-compensate.md","localizedDate":"2021年1月25日","excerpt":"\\n<p>为什么需要补偿方案呢？</p>\\n<p>有时候可能因为时间差，或者是无法实时获取正确的结果，就需要一套补偿方案。</p>\\n<p>补偿方案可以设计的很复杂，比如基于数据库+mq，也可以设计的很简单，比如基于内存+定时任务。</p>\\n<p>我们今天主要讲解一个比较简单的设计方案: 内存 + 定时任务。</p>\\n<h1>整体预期</h1>\\n<p>可以指定补偿次数</p>\\n<p>可以指定补偿的时间间隔？</p>\\n<p>可以查询当前补偿的状态 + 对补偿的数据进行 CRUD 管理。（前期可以不需要页面）</p>\\n<h2>不同的实现策略</h2>\\n<p>基于内存的</p>\\n<p>基于数据库的（允许自定义）</p>","autoDesc":true}');export{r as comp,d as data};
