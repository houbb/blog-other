import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-01-overview" target="_blank" rel="noopener noreferrer">test 之 jmockit-01-overview</a></p><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-00-intro" target="_blank" rel="noopener noreferrer">jmockit-01-test 之 jmockit 入门使用案例</a></p><p><a href="https://houbb.github.io/2023/05/09/test-mockito-01-overview" target="_blank" rel="noopener noreferrer">mockito-01-overview mockito 简介及入门使用</a></p><p><a href="https://houbb.github.io/2017/10/27/powermock" target="_blank" rel="noopener noreferrer">PowerMock</a></p><p><a href="https://houbb.github.io/2017/11/03/mock-server" target="_blank" rel="noopener noreferrer">Mock Server</a></p><p><a href="https://houbb.github.io/2023/08/08/jvm-chaosblade-01-overview" target="_blank" rel="noopener noreferrer">ChaosBlade-01-测试混沌工程平台整体介绍</a></p><p><a href="https://houbb.github.io/2020/06/04/jvm-sandbox-00-overview" target="_blank" rel="noopener noreferrer">jvm-sandbox 入门简介</a></p><h1 id="hoverfly-java-easy-creation-of-stub-http-servers-for-testing" tabindex="-1"><a class="header-anchor" href="#hoverfly-java-easy-creation-of-stub-http-servers-for-testing"><span>Hoverfly Java - Easy Creation of Stub Http Servers for Testing</span></a></h1><p>Java原生语言绑定的Hoverfly，是一个Go语言代理工具，允许您在单元测试中模拟HTTP服务。</p><p>这个过程的另一个术语是服务虚拟化。</p><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性：</span></a></h2><ul><li>模拟HTTP/HTTPS服务</li><li>基于URL、方法、正文和头部组合的严格或宽松的HTTP请求匹配</li><li>流畅且表达力强的DSL，用于轻松生成模拟服务</li><li>在请求/响应体生成期间将对象自动编组成JSON</li><li>通过捕获实时流量创建模拟</li><li>Hoverfly是一个代理，因此您无需更改发出请求的主机</li><li>单个Hoverfly实例支持多个主机/服务</li><li>自动支持HTTPS，无需额外配置</li><li>支持相互TLS身份验证捕获</li><li>与标准Hoverfly JSON兼容，方便在Java和其他原生语言绑定之间重用数据</li><li>使用外部管理的Hoverfly集群进行API模拟</li><li>请求验证</li><li>响应模板化</li><li>有状态的捕获/模拟</li><li>JUnit 5扩展</li></ul><h1 id="入门例子" tabindex="-1"><a class="header-anchor" href="#入门例子"><span>入门例子</span></a></h1><h2 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>maven</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    io.specto</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    hoverfly-java</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    0.14.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><p>最简单的方法是使用JUnit规则开始。</p><p>在幕后，JVM代理设置将被配置为使用托管的Hoverfly进程，因此您可以像往常一样发出请求，只不过这次Hoverfly会响应而不是真实服务（假设您的HTTP客户端尊重JVM代理设置）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> io.specto.hoverfly.junit.core.SimulationSource.dsl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> io.specto.hoverfly.junit.dsl.HoverflyDsl.service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> io.specto.hoverfly.junit.dsl.ResponseCreators.success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HoverflyExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ClassRule</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HoverflyRule</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hoverflyRule </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> HoverflyRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">inSimulationMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dsl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;www.my-test.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/api/bookings/1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">willReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">success</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">bookingId</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;application/json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shouldBeAbleToGetABookingUsingHoverfly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // When</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ResponseEntity</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> getBookingResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getForEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://www.my-test.com/api/bookings/1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Then</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertThat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">getBookingResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getStatusCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEqualTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(OK);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertThatJSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">getBookingResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBody</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isEqualTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;bookingId</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Continues...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-hoverfly-java" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-hoverfly-java"><span>详细介绍一下 hoverfly java</span></a></h2><p><strong>Hoverfly Java</strong> 是 Hoverfly 服务虚拟化工具的 Java 语言绑定，它允许您在单元测试中模拟 HTTP 和 HTTPS 服务。</p><p>Hoverfly Java 提供了对 Hoverfly 的各种功能的便捷访问，并通过在测试中创建模拟服务来实现更高效的单元测试。</p><p>以下是 Hoverfly Java 的主要特点和功能：</p><h3 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点"><span>主要特点：</span></a></h3><ol><li><p><strong>服务虚拟化：</strong> Hoverfly Java 允许您模拟 HTTP 和 HTTPS 服务，以便在单元测试中隔离和测试您的代码。</p></li><li><p><strong>丰富的匹配：</strong> 提供了灵活的匹配机制，可以基于 URL、方法、请求体和头部组合进行请求的精确匹配。</p></li><li><p><strong>DSL（领域专用语言）：</strong> 使用流畅且表达力强的 DSL，轻松生成和定义模拟服务的规则。</p></li><li><p><strong>自动JSON编组：</strong> 在请求和响应体生成期间，Hoverfly Java 能够自动将对象编组成 JSON，简化了数据处理。</p></li><li><p><strong>流量捕获：</strong> 可以通过捕获实时流量创建模拟，使得创建模拟服务更加方便。</p></li><li><p><strong>支持多个主机/服务：</strong> 单个 Hoverfly Java 实例可以支持多个主机或服务的模拟。</p></li><li><p><strong>HTTPS自动支持：</strong> 无需额外配置，Hoverfly Java 可以自动支持 HTTPS。</p></li><li><p><strong>相互TLS身份验证捕获：</strong> 支持捕获相互TLS身份验证的请求。</p></li><li><p><strong>与其他 Hoverfly JSON 兼容：</strong> Hoverfly Java 生成的数据与标准 Hoverfly JSON 兼容，方便在 Java 和其他语言绑定之间共享数据。</p></li><li><p><strong>JUnit 5扩展：</strong> Hoverfly Java 提供了JUnit 5扩展，简化了在测试中集成 Hoverfly。</p></li></ol><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> io.specto.hoverfly.junit.rule.HoverflyRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.Rule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.io.IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.net.HttpURLConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.net.URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HoverflyExampleTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Rule</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HoverflyRule</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hoverflyRule </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> HoverflyRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">inCaptureOrSimulationMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testWithHoverfly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Make an HTTP request to some service</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        URL</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> URL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://www.example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        HttpURLConnection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (HttpURLConnection) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">openConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Retrieve the response</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> responseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResponseCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Response Code: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> responseCode);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Your assertions based on Hoverfly&#39;s response go here</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例展示了如何使用 Hoverfly Java 的 JUnit 规则在单元测试中创建和使用模拟服务。</p><p>Hoverfly Java 通过简洁的API和DSL提供了一种轻松实现服务虚拟化的方式。</p><h2 id="hoverfly-java-和-wiremock-比较有什么差异点" tabindex="-1"><a class="header-anchor" href="#hoverfly-java-和-wiremock-比较有什么差异点"><span>Hoverfly Java 和 wiremock 比较有什么差异点？</span></a></h2><p><strong>Hoverfly Java</strong> 和 <strong>WireMock</strong> 都是用于服务虚拟化和模拟的工具，但它们有一些区别。</p><p>以下是它们之间的一些差异点：</p><h3 id="_1-实现语言" tabindex="-1"><a class="header-anchor" href="#_1-实现语言"><span>1. <strong>实现语言：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> Hoverfly Java 是 Hoverfly 的 Java 语言绑定，基于 Hoverfly 服务虚拟化工具。</p></li><li><p><strong>WireMock：</strong> WireMock 是使用 Java 编写的独立的服务虚拟化库和服务器。</p></li></ul><h3 id="_2-语法和dsl" tabindex="-1"><a class="header-anchor" href="#_2-语法和dsl"><span>2. <strong>语法和DSL：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> 提供了流畅且表达力强的 DSL（领域专用语言），用于定义和生成模拟服务的规则。</p></li><li><p><strong>WireMock：</strong> 也有自己的 DSL，用于配置服务的模拟和响应。</p></li></ul><h3 id="_3-支持的语言和平台" tabindex="-1"><a class="header-anchor" href="#_3-支持的语言和平台"><span>3. <strong>支持的语言和平台：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> 主要支持 Java 平台，适用于 Java 应用程序的单元测试。</p></li><li><p><strong>WireMock：</strong> 由于其独立性，支持多种语言和平台，并且可以用于各种应用程序和测试场景。</p></li></ul><h3 id="_4-junit集成" tabindex="-1"><a class="header-anchor" href="#_4-junit集成"><span>4. <strong>JUnit集成：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> 提供了JUnit扩展，简化了在测试中集成 Hoverfly 的过程。</p></li><li><p><strong>WireMock：</strong> 也可以与 JUnit 集成，但没有 Hoverfly Java 提供的专用扩展。</p></li></ul><h3 id="_5-流量捕获" tabindex="-1"><a class="header-anchor" href="#_5-流量捕获"><span>5. <strong>流量捕获：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> 具有流量捕获功能，可以通过捕获实时流量来创建模拟服务。</p></li><li><p><strong>WireMock：</strong> 通常需要手动配置 stubs 或使用录制和回放工具来创建模拟服务，相对于 Hoverfly Java 较为简单。</p></li></ul><h3 id="_6-tls和https支持" tabindex="-1"><a class="header-anchor" href="#_6-tls和https支持"><span>6. <strong>TLS和HTTPS支持：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> 提供对相互TLS身份验证的支持，并自动支持 HTTPS。</p></li><li><p><strong>WireMock：</strong> 也支持 HTTPS，但相互TLS身份验证的支持可能需要更多手动配置。</p></li></ul><h3 id="_7-社区和生态系统" tabindex="-1"><a class="header-anchor" href="#_7-社区和生态系统"><span>7. <strong>社区和生态系统：</strong></span></a></h3><ul><li><p><strong>Hoverfly Java：</strong> 相对较新，可能没有 WireMock 那样庞大的社区和生态系统。</p></li><li><p><strong>WireMock：</strong> 是一个成熟且广泛使用的项目，有大量的社区支持和丰富的文档。</p></li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论：</span></a></h3><ul><li><p>如果您的项目主要是 Java 平台，并且您希望通过JUnit轻松集成服务虚拟化，那么选择 Hoverfly Java 可能更为方便。</p></li><li><p>如果您需要一个跨平台的通用解决方案，支持多种语言，并且希望使用一个成熟和广泛使用的工具，那么 WireMock 是一个更全面的选择。</p></li></ul><h2 id="hoverfly-java-的流量捕获是如何实现的" tabindex="-1"><a class="header-anchor" href="#hoverfly-java-的流量捕获是如何实现的"><span>hoverfly java 的流量捕获是如何实现的？</span></a></h2><p><strong>Hoverfly Java</strong> 的流量捕获是通过其模拟模式实现的。</p><p>在模拟模式下，Hoverfly Java 可以捕获实时流量，并根据流量生成模拟服务的规则。</p><p>以下是流量捕获的一般流程：</p><ol><li><strong>选择模式：</strong> 在测试中，通过使用 <code>HoverflyRule.inCaptureMode()</code> 或 <code>HoverflyRule.inCaptureOrSimulationMode()</code>，您可以将 Hoverfly 切换到捕获模式。</li></ol><p>这告诉 Hoverfly 开始捕获实时流量。</p><pre><code>\`\`\`java
import io.specto.hoverfly.junit.rule.HoverflyRule;
import org.junit.Rule;

public class YourApiTest {

    @Rule
    public HoverflyRule hoverflyRule = HoverflyRule.inCaptureMode();

    // Your test methods go here
}
\`\`\`
</code></pre><ol start="2"><li><p><strong>执行测试：</strong> 在测试中执行一些操作，例如调用真实的外部服务，使得 Hoverfly 可以捕获相应的流量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Your test methods go here</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>生成规则：</strong> 当流量捕获完毕后，Hoverfly 会生成相应的规则，这些规则将用于后续的模拟。</p></li><li><p><strong>切换回模拟模式：</strong> 流量捕获完成后，可以将 Hoverfly 切换回模拟模式，以便使用捕获到的规则进行模拟。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Rule</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HoverflyRule</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hoverflyRule </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> HoverflyRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">inCaptureOrSimulationMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>模拟服务：</strong> 现在，您可以使用捕获到的规则运行您的测试，并让 Hoverfly 模拟服务的响应。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Your test methods go here</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>通过这种方式，Hoverfly Java 可以灵活地在捕获和模拟模式之间切换，从而使得在单元测试中实现服务虚拟化变得更加方便。</p><p>在模拟模式下，Hoverfly 使用捕获的规则来模拟服务的响应，而不需要实际调用外部服务。</p><p>这种模式对于隔离测试、并发测试和确保测试稳定性非常有用。</p><h2 id="hoverfly-java-的流量捕获原理-是把所有的请求都存储起来了吗-然后才能实现捕获" tabindex="-1"><a class="header-anchor" href="#hoverfly-java-的流量捕获原理-是把所有的请求都存储起来了吗-然后才能实现捕获"><span>hoverfly java 的流量捕获原理，是把所有的请求都存储起来了吗？然后才能实现捕获？</span></a></h2><p>是的，<strong>Hoverfly Java</strong> 的流量捕获原理是将所有请求都进行存储，然后根据这些存储的请求信息生成模拟服务的规则。</p><p>以下是流量捕获的基本原理：</p><ol><li><p><strong>捕获请求：</strong> 在捕获模式下，Hoverfly Java 拦截所有发出的请求和相应的响应。这包括在测试中通过 HTTP 客户端发起的所有实际请求，通常是与外部服务的通信。</p></li><li><p><strong>存储请求信息：</strong> Hoverfly 将捕获到的每个请求的详细信息（URL、方法、头部、正文等）存储在一个持久化的存储中，以便后续生成模拟规则。</p></li><li><p><strong>生成模拟规则：</strong> 当流量捕获完成后，Hoverfly 使用存储的请求信息来生成一组规则。这些规则描述了在测试期间应该如何模拟服务的响应。规则通常基于捕获到的请求的特定属性（如 URL、方法、头部等）。</p></li><li><p><strong>切换到模拟模式：</strong> 一旦规则生成完成，Hoverfly 可以被切换到模拟模式。在模拟模式下，Hoverfly 使用生成的规则来模拟服务的行为，而不需要实际调用外部服务。</p></li><li><p><strong>执行测试：</strong> 在测试中执行一些操作，例如调用模拟服务，Hoverfly 将返回根据规则生成的模拟响应，而不会实际发出请求到外部服务。</p></li></ol><p>这种捕获和模拟的工作流程使得 Hoverfly 能够在测试中模拟外部服务的行为，而无需实际连接到这些服务。</p><p>这对于在隔离环境中进行单元测试、确保测试的可重复性以及减少对外部服务的依赖是非常有用的。</p><p>然而，也需要注意，流量捕获可能会导致存储大量的请求信息，因此在大规模测试中需要谨慎使用。</p><h2 id="hoverfly-java-的流量捕获是把数据存储在哪里-又是如何匹配数据是否符合配置的-mock-条件呢" tabindex="-1"><a class="header-anchor" href="#hoverfly-java-的流量捕获是把数据存储在哪里-又是如何匹配数据是否符合配置的-mock-条件呢"><span>hoverfly java 的流量捕获是把数据存储在哪里？又是如何匹配数据是否符合配置的 mock 条件呢？</span></a></h2><p>Hoverfly Java 的流量捕获会将数据存储在默认的文件系统中。</p><p>具体来说，它将请求和响应数据存储在 Hoverfly 的工作目录下的 <code>.hoverfly</code> 文件夹中，以便后续的模拟。</p><p>流量匹配是通过 Hoverfly 根据请求和响应中的特定属性进行的。</p><p>匹配条件通常包括 URL、HTTP 方法、请求头、请求体等。</p><p>当您在测试中发起请求时，Hoverfly 将根据存储的捕获数据中的这些属性来寻找匹配的规则。</p><p>具体来说，匹配过程可能包括以下步骤：</p><ol><li><p><strong>URL 匹配：</strong> Hoverfly 将检查请求的 URL 是否与存储的捕获数据中的请求 URL 匹配。</p></li><li><p><strong>HTTP 方法匹配：</strong> 检查请求的 HTTP 方法是否与存储的捕获数据中的请求方法匹配。</p></li><li><p><strong>请求头匹配：</strong> Hoverfly 将检查请求的头部是否与存储的捕获数据中的请求头部匹配。</p></li><li><p><strong>请求体匹配：</strong> 如果请求包含请求体，Hoverfly 将检查请求体是否与存储的捕获数据中的请求体匹配。</p></li><li><p><strong>其他条件匹配：</strong> 根据需要，可能还会检查其他属性，例如查询参数等。</p></li></ol><p>当存在多个规则时，Hoverfly 会选择第一个匹配的规则作为要应用的规则。这种方式允许您定义特定条件下的优先级，确保最匹配的规则被应用。</p><p>总的来说，Hoverfly 使用捕获的请求和响应数据的属性来动态匹配请求，并根据匹配的规则生成相应的模拟响应。</p><p>这种方式使得测试中能够模拟外部服务的行为，从而实现对代码的更加有效的单元测试。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/SpectoLabs/hoverfly-java" target="_blank" rel="noopener noreferrer">https://github.com/SpectoLabs/hoverfly-java</a></p><p><a href="http://hoverfly-java.readthedocs.io/" target="_blank" rel="noopener noreferrer">http://hoverfly-java.readthedocs.io/</a></p>`,82)]))}const k=i(l,[["render",t]]),o=JSON.parse('{"path":"/posts/tests/2016-04-26-test-mock-04-hoverfly.html","title":"test mock-04-hoverfly Easy Creation of Stub Http Servers for Testing","lang":"zh-CN","frontmatter":{"title":"test mock-04-hoverfly Easy Creation of Stub Http Servers for Testing","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["test","mock","sh"],"published":true,"description":"拓展阅读 test 之 jmockit-01-overview jmockit-01-test 之 jmockit 入门使用案例 mockito-01-overview mockito 简介及入门使用 PowerMock Mock Server ChaosBlade-01-测试混沌工程平台整体介绍 jvm-sandbox 入门简介 Hoverfly J...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/tests/2016-04-26-test-mock-04-hoverfly.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test mock-04-hoverfly Easy Creation of Stub Http Servers for Testing"}],["meta",{"property":"og:description","content":"拓展阅读 test 之 jmockit-01-overview jmockit-01-test 之 jmockit 入门使用案例 mockito-01-overview mockito 简介及入门使用 PowerMock Mock Server ChaosBlade-01-测试混沌工程平台整体介绍 jvm-sandbox 入门简介 Hoverfly J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"mock"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test mock-04-hoverfly Easy Creation of Stub Http Servers for Testing\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.14,"words":3041},"filePathRelative":"posts/tests/2016-04-26-test-mock-04-hoverfly.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2023/05/09/test-jmockit-01-overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">test 之 jmockit-01-overview</a></p>\\n<p><a href=\\"https://houbb.github.io/2023/05/09/test-jmockit-00-intro\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">jmockit-01-test 之 jmockit 入门使用案例</a></p>","autoDesc":true}');export{k as comp,o as data};
