import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const l={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="functions" tabindex="-1"><a class="header-anchor" href="#functions"><span>functions</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p><strong>函数</strong></p><p>函数是一组语句，按特定顺序组织在一起以执行特定任务。在批处理脚本中，采用类似的方法将逻辑语句组合在一起形成函数。</p><p>与其他语言一样，批处理脚本中的函数遵循相同的过程 -</p><ul><li>函数声明 - 它告诉编译器关于函数的名称、返回类型和参数。</li><li>函数定义 - 它提供函数的实际主体。</li></ul><p><strong>函数定义</strong></p><p>在批处理脚本中，函数是使用标签语句定义的。当函数新定义时，它可能接受一个或多个值作为输入参数，处理主体中的函数，并将值作为输出返回到函数。</p><p>每个函数都有一个函数名，描述函数执行的任务。要使用函数，您需要使用其名称“调用”该函数，并传递与函数参数类型匹配的输入值（称为参数）。</p><p>以下是一个简单函数的语法。</p><div class="language-batch line-numbers-mode" data-highlighter="shiki" data-ext="batch" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">function_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Do_something </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">EXIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /B </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>function_name 是赋予函数的名称，应该具有一定的意义，以匹配函数实际执行的任务。</p><p>EXIT 语句用于确保函数正确退出。</p><p>以下是一个简单函数的示例。</p><p><strong>示例</strong></p><div class="language-batch line-numbers-mode" data-highlighter="shiki" data-ext="batch" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Display</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /A </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">index</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> The value of index is </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">%index%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">EXIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /B </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h2><p><strong>序号 函数及描述</strong></p><ol><li><p>调用函数<br> 通过使用 call 命令在批处理脚本中调用函数。</p></li><li><p>具有参数的函数<br> 函数可以通过在调用函数时简单地传递参数来使用参数。</p></li><li><p>具有返回值的函数<br> 函数可以通过简单地传递变量名称来使用返回值。</p></li><li><p>函数中的局部变量<br> 函数中的局部变量可用于避免名称冲突，并将变量更改保持在函数范围内。</p></li><li><p>递归函数<br> 完全封装函数的能力，使变量更改保持在函数范围内，并对调用者不可见。</p></li><li><p>文件 I/O<br> 在批处理脚本中，可以执行期望在任何编程语言中执行的正常文件 I/O 操作。</p></li><li><p>创建文件<br> 使用重定向过滤器 &gt; 创建新文件。该过滤器可用于将任何输出重定向到文件。</p></li><li><p>写入文件<br> 写入文件内容也是使用重定向过滤器 &gt; 完成的。该过滤器可用于将任何输出重定向到文件。</p></li><li><p>追加文件<br> 写入文件内容也是使用双重重定向过滤器 &gt;&gt; 完成的。该过滤器可用于将任何输出追加到文件。</p></li><li><p>从文件读取<br> 在批处理脚本中，通过使用 FOR 循环命令来遍历文件中定义的每一行来读取文件。</p></li><li><p>删除文件<br> 对于删除文件，批处理脚本提供了 DEL 命令。</p></li><li><p>重命名文件<br> 对于重命名文件，批处理脚本提供了 REN 或 RENAME 命令。</p></li><li><p>移动文件<br> 对于移动文件，批处理脚本提供了 MOVE 命令。</p></li><li><p>批处理文件 - 管道<br> 管道运算符 (|) 将一个命令的输出（默认情况下为 STDOUT）传递到另一个命令的输入（默认情况下为 STDIN）。</p></li><li><p>批处理文件 - 输入<br> 当运行批处理文件时，它会提供选项来传递命令行参数，然后可以在程序中读取这些参数进行进一步处理。</p></li><li><p>使用 SHIFT 运算符<br> 命令行参数的一个限制是它只能接受到 %9 为止的参数。让我们以此限制为例。</p></li><li><p>文件夹<br> 在批处理脚本中，可以执行期望在任何编程语言中执行的正常基于文件夹的操作。</p></li><li><p>创建文件夹<br> 使用 MD（Make directory）命令创建文件夹。</p></li><li><p>列出文件夹内容<br> 可以使用 dir 命令列出文件夹内容。该命令允许您查看当前目录中可用的文件和目录。</p></li><li><p>删除文件夹<br> 对于删除文件夹，批处理脚本提供了 DEL 命令。</p></li><li><p>重命名文件夹<br> 对于重命名文件夹，批处理脚本提供了 REN 或 RENAME 命令。</p></li><li><p>移动文件夹<br> 对于移动文件夹，批处理脚本提供了 MOVE 命令。</p></li></ol><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-bat-的函数" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-bat-的函数"><span>详细介绍一下 bat 的函数</span></a></h2><p>在批处理（Batch）文件中，并没有传统编程语言中所理解的“函数”概念。不过，批处理提供了一些方法来创建可重复使用的代码块，这些可以被视作批处理的“函数”：</p><h3 id="批处理中的函数模拟" tabindex="-1"><a class="header-anchor" href="#批处理中的函数模拟"><span>批处理中的函数模拟</span></a></h3><ol><li><strong>使用 <code>goto</code> 标签</strong>：批处理文件中可以使用 <code>goto</code> 命令配合标签（label）来模拟函数的行为。代码块的开始部分可以用一个标签标记，然后通过 <code>goto</code> 命令跳转到这个标签来执行代码块。</li></ol><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">rem</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 这里是函数的代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Function code here</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eof</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Before calling function</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MyFunction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>使用 <code>call</code> 命令</strong>：<code>call</code> 命令可以调用批处理文件中的一个部分并执行到该部分结束，然后返回到调用它的行的下一条命令继续执行。</li></ol><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> This is a called function.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Before calling function</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> After calling function</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>使用批处理文件包含</strong>：可以使用 <code>@echo off</code> 命令关闭命令的输出，然后使用 <code>call</code> 命令来包含另一个批处理文件，这可以模拟库或者模块的功能。</li></ol><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mymodule.bat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数传递" tabindex="-1"><a class="header-anchor" href="#参数传递"><span>参数传递</span></a></h3><p>在批处理中模拟函数时，可以通过命令行参数（<code>%1</code>, <code>%2</code>, ...）来传递参数。</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> arg1 arg2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> First argument is: </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">%1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Second argument is: </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">%2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在调用时传入参数：</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> param1 param2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h3><p>批处理没有直接的方法返回值，但可以通过修改环境变量或使用输出文件来传递执行结果。</p><h3 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h3><p>批处理不支持局部变量，但可以使用延迟变量扩展（<code>!variable!</code>）来模拟局部变量的行为。</p><div class="language-bat line-numbers-mode" data-highlighter="shiki" data-ext="bat" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> off</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">setlocal</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> enabledelayedexpansion</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localVar</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localValue&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">MyFunction</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /a </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">localVar</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">echo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> localVar is now: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">!localVar!</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">eof</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>使用 <code>goto</code> 和 <code>call</code> 命令时，要注意避免无限循环或难以理解的代码结构。</li><li>批处理的“函数”不能直接返回值，需要通过变通的方法来实现。</li><li>批处理文件的“函数”在执行完毕后，通常使用 <code>goto :eof</code> 来标记结束，<code>:eof</code> 是一个特殊的标签，表示文件的结尾。</li></ul><p>尽管批处理没有真正的函数，但通过使用标签、<code>call</code> 和 <code>goto</code> 命令，可以创建可重复使用的代码块，这在一定程度上模拟了函数的行为。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://www.tutorialspoint.com/batch_script/batch_script_functions.htm" target="_blank" rel="noopener noreferrer">https://www.tutorialspoint.com/batch_script/batch_script_functions.htm</a></p>`,44)]))}const d=s(l,[["render",t]]),k=JSON.parse('{"path":"/posts/windows/2016-11-30-windows-bat-15-functions.html","title":"windows bat 脚本教程-15-functions 函数","lang":"zh-CN","frontmatter":{"title":"windows bat 脚本教程-15-functions 函数","date":"2016-11-30T00:00:00.000Z","categories":["Windows"],"tags":["windows","shell","bat"],"published":true,"description":"functions 基本概念 函数 函数是一组语句，按特定顺序组织在一起以执行特定任务。在批处理脚本中，采用类似的方法将逻辑语句组合在一起形成函数。 与其他语言一样，批处理脚本中的函数遵循相同的过程 - 函数声明 - 它告诉编译器关于函数的名称、返回类型和参数。 函数定义 - 它提供函数的实际主体。 函数定义 在批处理脚本中，函数是使用标签语句定义的。...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/windows/2016-11-30-windows-bat-15-functions.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"windows bat 脚本教程-15-functions 函数"}],["meta",{"property":"og:description","content":"functions 基本概念 函数 函数是一组语句，按特定顺序组织在一起以执行特定任务。在批处理脚本中，采用类似的方法将逻辑语句组合在一起形成函数。 与其他语言一样，批处理脚本中的函数遵循相同的过程 - 函数声明 - 它告诉编译器关于函数的名称、返回类型和参数。 函数定义 - 它提供函数的实际主体。 函数定义 在批处理脚本中，函数是使用标签语句定义的。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"windows"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"bat"}],["meta",{"property":"article:published_time","content":"2016-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"windows bat 脚本教程-15-functions 函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.79,"words":1737},"filePathRelative":"posts/windows/2016-11-30-windows-bat-15-functions.md","localizedDate":"2016年11月30日","excerpt":"\\n<h2>基本概念</h2>\\n<p><strong>函数</strong></p>\\n<p>函数是一组语句，按特定顺序组织在一起以执行特定任务。在批处理脚本中，采用类似的方法将逻辑语句组合在一起形成函数。</p>\\n<p>与其他语言一样，批处理脚本中的函数遵循相同的过程 -</p>\\n<ul>\\n<li>函数声明 - 它告诉编译器关于函数的名称、返回类型和参数。</li>\\n<li>函数定义 - 它提供函数的实际主体。</li>\\n</ul>\\n<p><strong>函数定义</strong></p>\\n<p>在批处理脚本中，函数是使用标签语句定义的。当函数新定义时，它可能接受一个或多个值作为输入参数，处理主体中的函数，并将值作为输出返回到函数。</p>","autoDesc":true}');export{d as comp,k as data};
