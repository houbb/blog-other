import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="注册拓展" tabindex="-1"><a class="header-anchor" href="#注册拓展"><span>注册拓展</span></a></h1><p>可以通过@ExtendWith以声明方式注册，可以通过@RegisterExtension以编程方式注册，也可以通过Java的ServiceLoader机制自动注册。</p><h1 id="声明扩展注册" tabindex="-1"><a class="header-anchor" href="#声明扩展注册"><span>声明扩展注册</span></a></h1><p>开发人员可以通过使用 <code>@ExtendWith(…)</code> 对测试接口、测试类、测试方法或自定义组合注释进行声明式注册一个或多个扩展，并为要注册的扩展提供类引用。</p><ul><li>指定单个方法</li></ul><p>例如，要为一个特定的测试方法注册一个自定义的 RandomParametersExtension，您可以按照以下方式注释这个测试方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExtendWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RandomParametersExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Random</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定整个类</li></ul><p>要为一个特定类及其子类中的所有测试注册一个定制的RandomParametersExtension，您可以按照以下方式注释这个测试类。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExtendWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RandomParametersExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyTests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多个扩展</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExtendWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FooExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BarExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyFirstTests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为替代方案，多个扩展可以像这样分别注册:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExtendWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FooExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExtendWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BarExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MySecondTests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展登记顺序" tabindex="-1"><a class="header-anchor" href="#扩展登记顺序"><span>扩展登记顺序</span></a></h2><p>通过@ExtendWith以声明的方式注册的扩展将<strong>按照在源代码中声明的顺序执行</strong>。</p><p>例如，MyFirstTests和MySecondTests中的测试执行都将由FooExtension和BarExtension扩展，其顺序完全相同。</p><h1 id="编程扩展注册" tabindex="-1"><a class="header-anchor" href="#编程扩展注册"><span>编程扩展注册</span></a></h1><p>开发人员可以通过使用 <code>@RegisterExtension</code> 在测试类中注释字段来以编程方式注册扩展。</p><p>当扩展通过@ExtendWith以声明的方式注册时，通常只能通过注解进行配置。<br> 相反，当扩展通过@RegisterExtension注册时，可以通过编程方式配置它——例如，为了将参数传递给扩展的构造函数、静态工厂方法或构建器API。</p><blockquote><p>注意</p></blockquote><p>@RegisterExtension 字段不能是 private 或 null(在评估时)，但是可以是静态的，也可以是非静态的。</p><h2 id="静态字段" tabindex="-1"><a class="header-anchor" href="#静态字段"><span>静态字段</span></a></h2><p>如果@RegisterExtension字段是静态的，那么扩展将在通过@ExtendWith在类级注册的扩展之后被注册。</p><p>这种静态扩展并不局限于它们可以实现的扩展api。</p><p>因此，通过静态字段注册的扩展可以实现类级和实例级扩展api，如BeforeAllCallback、AfterAllCallback、TestInstancePostProcessor以及方法级扩展api，如BeforeEachCallback等。</p><p>在下面的示例中，通过使用WebServerExtension支持的构建器模式以编程方式初始化测试类中的服务器字段。</p><p>配置好的WebServerExtension将被自动注册为类级别的扩展——例如，为了在类中的所有测试之前启动服务器，然后在类中的所有测试完成之后停止服务器。</p><p>此外，使用@BeforeAll或@AfterAll注释的静态生命周期方法以及@BeforeEach、@AfterEach和@Test方法可以在必要时通过服务器字段访问扩展的实例。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebServerDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RegisterExtension</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebServerExtension</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> server </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> WebServerExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">enableSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getProductList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        WebClient</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> webClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WebClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> serverUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServerUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Use WebClient to connect to web server using serverUrl and verify response</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">webClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serverUrl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/products&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResponseStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例化字段-instance-fields" tabindex="-1"><a class="header-anchor" href="#实例化字段-instance-fields"><span>实例化字段(Instance Fields)</span></a></h2><p>如果@RegisterExtension字段是非静态的(例如。在测试类被实例化后，在每个注册的TestInstancePostProcessor有机会对测试实例进行后处理之后(潜在地将扩展的实例注入到带注释的字段中)，扩展将被注册。</p><p>因此，如果这样的实例扩展实现了类级或实例级的扩展api，比如BeforeAllCallback、AfterAllCallback或TestInstancePostProcessor，那么这些api就不会受到重视。</p><p>默认情况下，实例扩展将在通过@ExtendWith在方法级别注册的扩展之后注册;<br> 但是，如果测试类配置为 <code>@TestInstance(Lifecycle.PER_CLASS)</code> 语义，则在通过@ExtendWith在方法级注册的扩展名之前注册一个实例扩展名。</p><p>在下面的示例中，通过调用自定义lookUpDocsDir()方法并将结果提供给DocumentationExtension中的静态forPath() factory方法，以编程方式初始化测试类中的docs字段。配置的DocumentationExtension将被自动注册为方法级别的扩展。此外，如果需要，@BeforeEach、@AfterEach和@Test方法可以通过docs字段访问扩展的实例。</p><ul><li>DocumentationDemo.java</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DocumentationDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Path</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lookUpDocsDir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // return path to docs dir</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RegisterExtension</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    DocumentationExtension</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> docs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> DocumentationExtension</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lookUpDocsDir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> generateDocumentation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // use this.docs ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="自动扩展注册" tabindex="-1"><a class="header-anchor" href="#自动扩展注册"><span>自动扩展注册</span></a></h1><p>除了使用注释声明扩展注册和编程扩展注册支持之外，JUnit Jupiter还通过Java的 <code>java.util.ServiceLoader</code>机制支持全局扩展注册。</p><p>允许根据类路径中可用的内容自动检测和自动注册第三方扩展。</p><p>具体地说，可以通过在一个名为 <code>org.junit.jupiter.api.extension.Extension</code> 的文件中提供其完全限定的类名来注册一个自定义扩展。</p><p>扩展名在 <strong>/META-INF/services</strong> 文件夹中，在它所包含的JAR文件中。</p><h2 id="开启自动扩展注册" tabindex="-1"><a class="header-anchor" href="#开启自动扩展注册"><span>开启自动扩展注册</span></a></h2><p>自动检测是一个高级功能，因此默认情况下不启用。要启用它，只需设置 <code>junit.jupiter.extensions.autodetection.enabled </code>启用配置参数为true。</p><p>可以将其作为JVM系统属性提供，作为传递给启动程序的LauncherDiscoveryRequest中的配置参数，或者通过JUnit平台配置文件(详细信息请参见配置参数)。</p><p>例如，要启用扩展的自动检测，可以使用以下系统属性启动JVM。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-Djunit.jupiter.extensions.autodetection.enabled = true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当启用自动检测时，通过ServiceLoader机制发现的扩展将在JUnit Jupiter的全局扩展(例如，对TestInfo、TestReporter等的支持)之后添加到扩展注册表中。</p><h2 id="扩展继承" tabindex="-1"><a class="header-anchor" href="#扩展继承"><span>扩展继承</span></a></h2><p>通过自顶向下的语义在测试类层次结构中继承已注册的扩展。<br> 类似地，在类级注册的扩展在方法级继承。<br> 此外，特定的扩展实现只能为给定的扩展上下文及其父上下文注册一次。</p><p>因此，<strong>任何注册重复扩展实现的尝试都将被忽略</strong>。</p>`,51)]))}const r=i(t,[["render",l]]),d=JSON.parse('{"path":"/posts/test/2018-06-25-junit5-19-ex-register.html","title":"Junit5-19-Ex Register Extension","lang":"zh-CN","frontmatter":{"title":"Junit5-19-Ex Register Extension","date":"2018-06-26T00:00:00.000Z","categories":["Test"],"tags":["test","sh"],"published":true,"description":"注册拓展 可以通过@ExtendWith以声明方式注册，可以通过@RegisterExtension以编程方式注册，也可以通过Java的ServiceLoader机制自动注册。 声明扩展注册 开发人员可以通过使用 @ExtendWith(…) 对测试接口、测试类、测试方法或自定义组合注释进行声明式注册一个或多个扩展，并为要注册的扩展提供类引用。 指定单...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/test/2018-06-25-junit5-19-ex-register.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Junit5-19-Ex Register Extension"}],["meta",{"property":"og:description","content":"注册拓展 可以通过@ExtendWith以声明方式注册，可以通过@RegisterExtension以编程方式注册，也可以通过Java的ServiceLoader机制自动注册。 声明扩展注册 开发人员可以通过使用 @ExtendWith(…) 对测试接口、测试类、测试方法或自定义组合注释进行声明式注册一个或多个扩展，并为要注册的扩展提供类引用。 指定单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Junit5-19-Ex Register Extension\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1458},"filePathRelative":"posts/test/2018-06-25-junit5-19-ex-register.md","localizedDate":"2018年6月26日","excerpt":"\\n<p>可以通过@ExtendWith以声明方式注册，可以通过@RegisterExtension以编程方式注册，也可以通过Java的ServiceLoader机制自动注册。</p>\\n<h1>声明扩展注册</h1>\\n<p>开发人员可以通过使用 <code>@ExtendWith(…)</code> 对测试接口、测试类、测试方法或自定义组合注释进行声明式注册一个或多个扩展，并为要注册的扩展提供类引用。</p>\\n<ul>\\n<li>指定单个方法</li>\\n</ul>\\n<p>例如，要为一个特定的测试方法注册一个自定义的 RandomParametersExtension，您可以按照以下方式注释这个测试方法。</p>","autoDesc":true}');export{r as comp,d as data};
