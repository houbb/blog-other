import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as s}from"./app-CEDSurVN.js";const i={};function n(l,t){return s(),a("div",null,t[0]||(t[0]=[r(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>测试平台最强大的一个设计应该是流程控制。</p><p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p><p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>测试平台中，不同的角色关注的重点其实完全不同。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>比如开发、测试、产品、项目经理、CEO/CTO 等，你会如何针对这种关注点不同来设计系统？但是最好尽可能的简单些？</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非常好的问题！在一个<strong>一体化测试平台</strong>中，不同角色对系统的关注点确实不同，设计时如果一味追求全面，容易造成「信息过载」，对使用者反而不友好。<strong>如何「简洁呈现核心价值」给不同角色</strong>，是设计中的重点。</p><p>下面我将分角色说明他们的关注点、应当提供的功能、以及如何在系统设计中实现「简单却精准的交付」。</p><hr><h2 id="🧑‍💻-1-开发-developer" tabindex="-1"><a class="header-anchor" href="#🧑‍💻-1-开发-developer"><span>🧑‍💻 1. <strong>开发（Developer）</strong></span></a></h2><h3 id="关注点" tabindex="-1"><a class="header-anchor" href="#关注点"><span>关注点：</span></a></h3><ul><li>我的代码有没有被测试？</li><li>最近的接口是否出错？</li><li>能否自助调试测试用例？</li><li>能否快速定位问题？</li></ul><h3 id="系统设计建议" tabindex="-1"><a class="header-anchor" href="#系统设计建议"><span>系统设计建议：</span></a></h3><ul><li>提供<strong>接口/用例自测工具</strong>，可支持一键调试。</li><li>结果页可展示<strong>我提交的代码关联的测试执行情况</strong>。</li><li>在 IDE 中集成（如 VSCode 插件或 webhook 回调）帮助快速反馈。</li><li>日志输出和错误提示足够清晰。</li></ul><hr><h2 id="🧪-2-测试人员-tester" tabindex="-1"><a class="header-anchor" href="#🧪-2-测试人员-tester"><span>🧪 2. <strong>测试人员（Tester）</strong></span></a></h2><h3 id="关注点-1" tabindex="-1"><a class="header-anchor" href="#关注点-1"><span>关注点：</span></a></h3><ul><li>用例是否覆盖齐全？哪些场景还没测？</li><li>本轮测试是否执行完？结果如何？</li><li>执行失败的用例定位原因快不快？</li><li>能否灵活配置数据、断言、环境等？</li></ul><h3 id="系统设计建议-1" tabindex="-1"><a class="header-anchor" href="#系统设计建议-1"><span>系统设计建议：</span></a></h3><ul><li>提供可视化用例管理与<strong>执行树编排工具</strong>。</li><li>测试报告可以按模块/标签聚合统计。</li><li>支持参数化、自定义断言、前后置处理。</li><li>快速过滤失败用例，一键跳转到详细日志/上下文。</li></ul><hr><h2 id="🧑‍💼-3-产品经理-pm" tabindex="-1"><a class="header-anchor" href="#🧑‍💼-3-产品经理-pm"><span>🧑‍💼 3. <strong>产品经理（PM）</strong></span></a></h2><h3 id="关注点-2" tabindex="-1"><a class="header-anchor" href="#关注点-2"><span>关注点：</span></a></h3><ul><li>当前版本回归情况如何？还有哪些风险点？</li><li>哪些功能还没验证完成？</li><li>哪些业务链路未覆盖？</li></ul><h3 id="系统设计建议-2" tabindex="-1"><a class="header-anchor" href="#系统设计建议-2"><span>系统设计建议：</span></a></h3><ul><li>提供<strong>业务维度的测试覆盖视图</strong>（例如根据业务模块统计）。</li><li>用图表展示当前版本测试进度与通过率。</li><li>高亮风险用例（例如经常失败、还未执行、覆盖率低等）。</li><li>报告使用<strong>非技术化的术语</strong>（如「支付链路验证通过」）。</li></ul><hr><h2 id="👨‍💼-4-项目经理-pmo" tabindex="-1"><a class="header-anchor" href="#👨‍💼-4-项目经理-pmo"><span>👨‍💼 4. <strong>项目经理（PMO）</strong></span></a></h2><h3 id="关注点-3" tabindex="-1"><a class="header-anchor" href="#关注点-3"><span>关注点：</span></a></h3><ul><li>当前版本是否按时上线？</li><li>测试执行是否拖进度？影响交付了吗？</li><li>哪些模块经常出错，是否需要资源优化？</li></ul><h3 id="系统设计建议-3" tabindex="-1"><a class="header-anchor" href="#系统设计建议-3"><span>系统设计建议：</span></a></h3><ul><li>提供<strong>版本维度的测试看板</strong>（进度/成功率/阻塞项）。</li><li>自动识别「测试瓶颈」如用例等待执行过久、执行失败率高等。</li><li>整合 CI/CD 流程中各阶段耗时，辅助发现流程卡点。</li><li>报告中聚焦“是否具备上线条件”结论。</li></ul><hr><h2 id="🧑‍💼-5-cto-ceo" tabindex="-1"><a class="header-anchor" href="#🧑‍💼-5-cto-ceo"><span>🧑‍💼 5. <strong>CTO / CEO</strong></span></a></h2><h3 id="关注点-4" tabindex="-1"><a class="header-anchor" href="#关注点-4"><span>关注点：</span></a></h3><ul><li>我们测试质量是否整体变好？</li><li>投入的人力、资源是否带来实际收益？</li><li>风险是否减少了？事故是否少了？</li></ul><h3 id="系统设计建议-4" tabindex="-1"><a class="header-anchor" href="#系统设计建议-4"><span>系统设计建议：</span></a></h3><ul><li><p>提供高层视角的<strong>趋势图/质量雷达图</strong>：</p><ul><li>用例数量、覆盖率、失败率变化</li><li>版本上线前后的回归情况</li><li>测试平台使用率与故障率等指标</li></ul></li><li><p>KPI 指标聚合（例如：月度Bug减少50%，测试效率提升30%）</p></li></ul><hr><h2 id="✅-通用设计建议-保证-简单-精准" tabindex="-1"><a class="header-anchor" href="#✅-通用设计建议-保证-简单-精准"><span>✅ 通用设计建议（保证“简单 + 精准”）</span></a></h2><table><thead><tr><th>策略</th><th>举例</th></tr></thead><tbody><tr><td><strong>多角色仪表盘</strong></td><td>登录后根据角色展示不同首页数据（开发看失败用例、PM看进度）</td></tr><tr><td><strong>维度标签化</strong></td><td>用例、测试、报表可按「版本、模块、业务流程、提交人」等标签聚合</td></tr><tr><td><strong>权限控制 + 可见性控制</strong></td><td>CTO 看到趋势、测试看到执行细节、开发只看到自己相关内容</td></tr><tr><td><strong>智能摘要</strong></td><td>通过 AI 分析日志、历史数据自动生成“结论摘要”供上层决策使用</td></tr><tr><td><strong>集成式提示</strong></td><td>钉钉/飞书/邮件日报，按角色推送不同内容（测试失败报告/测试覆盖率简报）</td></tr></tbody></table><hr><h2 id="🎯-总结" tabindex="-1"><a class="header-anchor" href="#🎯-总结"><span>🎯 总结</span></a></h2><table><thead><tr><th>角色</th><th>核心关注</th><th>系统设计原则</th></tr></thead><tbody><tr><td>开发</td><td>快速调试、准确定位</td><td>提供调试工具、简化用例执行入口</td></tr><tr><td>测试</td><td>高覆盖、快反馈、好维护</td><td>强大执行编排、清晰日志、数据驱动</td></tr><tr><td>产品</td><td>进度掌控、风险预知</td><td>图形化覆盖率、风险提示</td></tr><tr><td>项目经理</td><td>上线条件、效率瓶颈</td><td>看板、流程追踪、任务分派</td></tr><tr><td>CTO/CEO</td><td>成本收益、质量提升</td><td>趋势统计、指标图表、价值证明</td></tr></tbody></table><p>如果你愿意，我可以帮你设计一个<strong>角色权限 + 首页仪表盘展示模型</strong>，帮助你真正落地这些理念。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/metersphere/metersphere" target="_blank" rel="noopener noreferrer">https://github.com/metersphere/metersphere</a></p>`,47)]))}const o=e(i,[["render",n]]),p=JSON.parse('{"path":"/posts/tests/2016-04-27-test-plateform-16-chat-different-user-views.html","title":"test framework-16-测试平台聊一聊不同的用户视角","lang":"zh-CN","frontmatter":{"title":"test framework-16-测试平台聊一聊不同的用户视角","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","framework","open-source","plateform","test"],"published":true,"description":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 chat 非常好的问题！在一个一体化测试平台中，不同角色对系统的关注点确实不同，设计时如果一味追求全面，容易造成「信息过载」，对使用者反而不友好。如何「简洁呈现核心价...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-27-test-plateform-16-chat-different-user-views.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test framework-16-测试平台聊一聊不同的用户视角"}],["meta",{"property":"og:description","content":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 chat 非常好的问题！在一个一体化测试平台中，不同角色对系统的关注点确实不同，设计时如果一味追求全面，容易造成「信息过载」，对使用者反而不友好。如何「简洁呈现核心价..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"framework"}],["meta",{"property":"article:tag","content":"open-source"}],["meta",{"property":"article:tag","content":"plateform"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test framework-16-测试平台聊一聊不同的用户视角\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.36,"words":1307},"filePathRelative":"posts/tests/2016-04-27-test-plateform-16-chat-different-user-views.md","localizedDate":"2016年4月26日","excerpt":"\\n<p>测试平台最强大的一个设计应该是流程控制。</p>\\n<p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p>\\n<p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p>\\n<h1>chat</h1>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>测试平台中，不同的角色关注的重点其实完全不同。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>比如开发、测试、产品、项目经理、CEO/CTO 等，你会如何针对这种关注点不同来设计系统？但是最好尽可能的简单些？</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,p as data};
