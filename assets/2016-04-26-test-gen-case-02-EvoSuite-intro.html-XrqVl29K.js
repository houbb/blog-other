import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-uJE4P3e0.js";const l={};function t(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><blockquote><p><a href="https://houbb.github.io/2018/06/24/junit5-01-hello" target="_blank" rel="noopener noreferrer">junit5 系列</a></p></blockquote><blockquote><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p></blockquote><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><h1 id="拓展阅读-1" tabindex="-1"><a class="header-anchor" href="#拓展阅读-1"><span>拓展阅读</span></a></h1><p><a href="https://github.com/houbb/evosuite-learn" target="_blank" rel="noopener noreferrer">自动生成测试用例</a></p><h1 id="什么是-evosuite" tabindex="-1"><a class="header-anchor" href="#什么是-evosuite"><span>什么是 EvoSuite？</span></a></h1><p>EvoSuite是一个自动生成Java类的JUnit测试套件的工具，其目标是满足代码覆盖率标准，如分支覆盖率。</p><p>它采用基于遗传算法的演化方法来生成测试套件。</p><p>为了提高可读性，生成的单元测试被最小化，并向测试中添加了捕获被测试类当前行为的回归断言。</p><h1 id="使用-evosuite" tabindex="-1"><a class="header-anchor" href="#使用-evosuite"><span>使用 EvoSuite</span></a></h1><p>有不同的方式使用 EvoSuite：</p><h2 id="_1-命令行中使用-evosuite" tabindex="-1"><a class="header-anchor" href="#_1-命令行中使用-evosuite"><span>1. 命令行中使用 EvoSuite</span></a></h2><p>EvoSuite作为一个可执行的jar文件提供，可以通过以下方式调用：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>生成测试套件的命令示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite.jar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [options]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 \`\` 可以是一个类：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或一个包前缀，此时 EvoSuite 尝试为类路径中与该前缀匹配的每个类生成一个测试套件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-prefix</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或一个类路径条目，此时 EvoSuite 尝试为给定类路径条目中的每个类生成一个测试套件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-target</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最重要的选项是设置类路径，使用标准的Java类路径语法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-projectCP</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更多选项，请查阅文档：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite.jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -help</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_2-docker-hub-上使用-evosuite" tabindex="-1"><a class="header-anchor" href="#_2-docker-hub-上使用-evosuite"><span>2. Docker Hub 上使用 EvoSuite</span></a></h2><p>EvoSuite在Docker Hub上提供了一个容器镜像。你可以拉取该镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或手动在本地构建该镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/EvoSuite/evosuite.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dockerfile.java8</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:latest-java-8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dockerfile.java11</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:latest-java-11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以这样调用 EvoSuite：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">UID</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PWD</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:/evosuite</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:-java-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它假设要测试的项目位于调用命令的当前目录中。当前目录 <code>\${PWD}</code> 映射到容器内的 <code>/evosuite</code> 目录。这也是 EvoSuite 的工作目录。所有的结果都将映射回主机系统上的目录。<code>-u \${UID}</code> 确保结果具有与启动命令的用户相同的文件所有权。</p><p>当 EvoSuite 需要在后台运行时，可以使用 <code>-d</code> 代替 <code>-it</code>。</p><h2 id="_3-大规模实验运行器" tabindex="-1"><a class="header-anchor" href="#_3-大规模实验运行器"><span>3. 大规模实验运行器</span></a></h2><p>Docker 镜像还提供了一个标签（<code>evosuite/evosuite:-java--experiment</code>），以便轻松运行大规模实验。可以通过从 Docker Hub 拉取该镜像获取：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:-experiment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或手动在本地构建该镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/EvoSuite/evosuite.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> checkout</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 例如 git checkout v1.1.0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dockerfile.java8-experiment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:-java-8-experiment</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dockerfile.java11-experiment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:-java-11-experiment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实验运行器可以这样调用：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">UID</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PWD</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:/evosuite</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite/evosuite:-java--experiment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它假设当前工作目录下有一个名为 <code>projects</code> 的文件夹，其中包含每个要测试项目的子目录，包含该项目的所有jar文件。当前目录还应包含两个csv文件：</p><ul><li>一个用于实验不同配置的文件，包含两列用于 <code>configuration_name</code> 和 <code>user_configuration</code></li><li>一个用于每个项目的类的文件，包含两列用于 <code>project_name</code>（应与 <code>projects</code> 下的文件夹相同）和 <code>class</code>（应为完整的类路径）</li></ul><p>例如，目录结构的示例为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./projects//</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./projects//</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./projects//</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./configurations.csv</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./projects.csv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>configurations.csv</code> 文件的内容示例为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">configuration_name,user_configuration</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default60,-generateMOSuite</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dalgorithm=DynaMOSA</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dsearch_budget=60</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dassertion_timeout=120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dminimization_timeout=120</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default120,-generateMOSuite</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dalgorithm=DynaMOSA</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dsearch_budget=120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dassertion_timeout=120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dminimization_timeout=120</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>镜像已经提供了 <code>projectCP</code>、<code>class</code>、<code>seed</code> 和输出位置的配置。</p><p><code>projects.csv</code> 文件的内容示例为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">project_name,class</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">,com.project1.application</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>该镜像将实验的输出放置在以下位置（在当前目录内）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./results////logs/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./results////reports//</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./results////tests//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行该镜像时，它将在当前目录中自动生成一个名为 <code>SEEDS</code> 的文件，其中包含它用于实验的种子。如果要复制实验，可以将该文件放回同一位置，而不是创建新的种子，镜像现在将使用这些种子。</p><p>如果要手动设置类路径而不是让脚本为您确定一个，可以在每个项目文件夹内放置名为 &#39;CLASSPATH&#39; 的文件，其中第一行是该项目的</p><p>类路径。</p><p>当 EvoSuite 需要在后台运行时，可以使用 <code>-d</code> 代替 <code>-it</code>。</p><h2 id="_4-eclipse-的-evosuite-插件" tabindex="-1"><a class="header-anchor" href="#_4-eclipse-的-evosuite-插件"><span>4. Eclipse 的 EvoSuite 插件</span></a></h2><p>有一个实验性的Eclipse插件，可以使用以下更新站点进行安装：<a href="http://www.evosuite.org/update" target="_blank" rel="noopener noreferrer">http://www.evosuite.org/update</a></p><p>要了解插件的功能，请查看演示视频。</p><h2 id="_5-maven-的-evosuite-插件" tabindex="-1"><a class="header-anchor" href="#_5-maven-的-evosuite-插件"><span>5. Maven 的 EvoSuite 插件</span></a></h2><p>EvoSuite有一个 Maven 插件，可用于作为构建的一部分生成新的测试用例。这至少具有以下优势：</p><ul><li>可以在连续集成服务器（例如Jenkins）上运行 EvoSuite，几乎没有配置开销</li><li>可以直接将生成的测试放在基于 <code>pom.xml</code> 文件的系统的类路径上</li><li>无需在本地安装 EvoSuite（Maven 将自动处理）</li></ul><p>有关更多详细信息，请查阅文档。</p><h2 id="_6-intellij-的-evosuite-插件" tabindex="-1"><a class="header-anchor" href="#_6-intellij-的-evosuite-插件"><span>6. IntelliJ 的 EvoSuite 插件</span></a></h2><p>请查阅文档。</p><p>获取 EvoSuite<br> EvoSuite的当前版本（主要EvoSuite jar文件和插件）可在 <a href="http://www.evosuite.org/downloads/" target="_blank" rel="noopener noreferrer">http://www.evosuite.org/downloads/</a> 下载。</p><p>要访问源代码，请使用 GitHub 存储库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/EvoSuite/evosuite.git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>构建 EvoSuite<br> EvoSuite使用 Maven。</p><p>要在命令行上构建 EvoSuite，请安装 Maven，然后调用</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要创建一个包含所有依赖项的二进制分发包，可以同样使用 Maven：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要在Eclipse中构建EvoSuite，请确保已安装 M2Eclipse 插件，并将 EvoSuite 作为 Maven 项目导入。这将确保Eclipse使用Maven构建项目。</p><p>更多信息<br> 可以在 <a href="http://www.evosuite.org/documentation/" target="_blank" rel="noopener noreferrer">http://www.evosuite.org/documentation/</a> 上找到使用文档。</p><p>开发者邮件列表托管在 <a href="https://groups.google.com/forum/#!forum/evosuite" target="_blank" rel="noopener noreferrer">https://groups.google.com/forum/#!forum/evosuite</a></p><p>EvoSuite已经导致了一些出版物，所有这些都可以在 <a href="http://www.evosuite.org/publications/" target="_blank" rel="noopener noreferrer">http://www.evosuite.org/publications/</a> 上找到。</p><h1 id="maven-插件使用" tabindex="-1"><a class="header-anchor" href="#maven-插件使用"><span>maven 插件使用</span></a></h1><h2 id="如何配置" tabindex="-1"><a class="header-anchor" href="#如何配置"><span>如何配置</span></a></h2><p>EvoSuite具有Maven插件，可用于在构建过程中生成新的测试用例。</p><p>这至少具有以下优点：</p><ul><li>可以从持续集成服务器（例如Jenkins）上运行EvoSuite，配置开销很小</li><li>生成的测试可以直接放在基于pom.xml文件的系统类路径上</li><li>无需在本地安装EvoSuite（Maven会自动处理）</li></ul><p>要使用插件，需要在目标项目的pom.xml中进行配置。例如：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      org.evosuite.plugins</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      evosuite-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      \${evosuiteVersion}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            prepare</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          process-test-classes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>\${evosuiteVersion}</code>指定要使用的版本（请参阅下载页面以获取最新可用版本）。例如，“1.0.6”：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  1.0.6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了配置插件外，还需要添加EvoSuite运行时，该运行时由生成的测试用例使用。这可以通过在pom.xml中添加以下Maven依赖项来完成：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  org.evosuite</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  evosuite-standalone-runtime</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  \${evosuiteVersion}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用EvoSuite的Java代理时，还需要配置surefire插件以运行EvoSuite测试的初始化监听器。当EvoSuite测试与手动编写的现有测试混合在一起时，这是必需的。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  org.apache.maven.plugins</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  maven-surefire-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  2.17</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        listener</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.evosuite.runtime.InitializingListener</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EvoSuite生成JUnit文件，因此它需要在类路径上具有JUnit。EvoSuite不会自动将其添加为依赖项，以避免与不同版本的冲突。我们建议使用最新版本的JUnit，至少是4.12或更高版本。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  junit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  junit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  4.12</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用"><span>如何使用</span></a></h2><p>EvoSuite Maven插件提供以下目标：<br> 1）“generate” -&gt; 用于使用EvoSuite生成测试用例。将为所有子模块中的所有类生成测试用例。您需要确保代码已编译，例如“mvn compile evosuite:generate”。此目标具有以下参数：</p><ul><li>“memoryInMB”：EvoSuite被允许分配的总兆字节数（默认为800）</li><li>“cores”：EvoSuite可以使用的CPU核心总数（默认为1）</li><li>“timeInMinutesPerClass”：EvoSuite可以为每个类生成测试用例的时间（默认为2分钟）</li></ul><p>2）“info” -&gt; 提供到目前为止所有生成的测试的信息<br> 3）“export” -&gt; 默认情况下，EvoSuite会在“.evosuite”文件夹中创建测试。通过使用“export”，生成的测试将复制到另一个文件夹，可以使用“targetFolder”选项进行设置（默认值为“src/test/java”）。</p><p>注意：如果不使用“mvn evosuite:export”将测试导出到“src/test/java”，那么诸如“mvn test”之类的命令将不会执行这些测试，因为它们的源代码不在构建路径上。您可以使用“build-helper-maven-plugin”插件添加自定义源文件，例如：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  org.codehaus.mojo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  build-helper-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  1.8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      add-test-source</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      generate-test-sources</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        add-test-source</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          \${customFolder}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>\${customFolder}</code>等于“.evosuite/evosuite-tests”，则您无需使用“evosuite:export”（如果这样做，每个测试将出现两次在类路径上，然后会出现编译错误）。注意：另一种方法是覆盖“”以指向\${customFolder}。如果想仅在EvoSuite生成的测试上运行“mvn test”（例如，在Jenkins上具有2个不同配置/配置文件的情况下，一个仅运行现有的手动测试，另一个仅运行EvoSuite生成的测试），这可能很有用。</p><p>4）“clean” -&gt; 删除“.evosuite”文件夹中的所有数据，该文件夹用于存储到目前为止生成的所有最佳测试。<br> 5）“prepare” -&gt; 需要混合运行EvoSuite测试和现有的测试，例如“mvn evosuite:prepare test”。最好只需配置evosuite插件始终运行它，如前所述。</p><p>使用示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DmemoryInMB=2000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dcores=2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite:generate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite:export</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将使用2个核心和2GB内存为所有类生成测试用例，将生成的测试复制到“src/test/java”，然后执行它们。注意：如果项目已经有一些测试，这些测试将作为常规“test”阶段的一部分执行。</p><h2 id="clover问题" tabindex="-1"><a class="header-anchor" href="#clover问题"><span>Clover问题</span></a></h2><p>如果系统已使用Clover进行了仪表化，则使用EvoSuite生成新的测试用例可能会失败。</p><p>如果Clover的运行时库不在类路径上，可能会发生这种情况。</p><p>要么您需要确保所有所需的库都在类路径上，要么只需在调用EvoSuite插件之前进行干净的构建（例如“mvn clean compile”）。</p><p>要求：插件需要Maven 3.1或更高版本。如果没有，它将以难以理解的错误消息失败。</p><p>为确保使用正确的版本，请使用以下插件：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  org.apache.maven.plugins</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  maven-enforcer-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  1.3.1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      enforce-maven-3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        enforce</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            3.1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="介绍一下-evosuite" tabindex="-1"><a class="header-anchor" href="#介绍一下-evosuite"><span>介绍一下 EvoSuite</span></a></h2><p>EvoSuite（Evolutionary Testing for Java）是一种用于生成Java程序的单元测试的工具，它采用了基于遗传算法的搜索策略。</p><p>其主要目标是通过生成高质量的测试用例，提高Java程序的代码覆盖率，从而帮助发现潜在的软件缺陷和错误。</p><p>以下是 EvoSuite 的一些关键特点和工作原理：</p><ol><li><p><strong>基于遗传算法的搜索：</strong> EvoSuite 使用遗传算法来搜索测试用例的空间，以找到最佳的测试用例。这些测试用例旨在执行程序中的不同路径，从而提高测试覆盖率。</p></li><li><p><strong>自动化测试生成：</strong> EvoSuite 是一个自动化测试生成工具，它能够自动生成具有高度覆盖率的单元测试用例。这减轻了开发人员编写测试用例的负担，尤其是对于复杂的代码路径。</p></li><li><p><strong>目标导向测试：</strong> EvoSuite 可以根据开发者的指定，通过优化特定的测试目标，例如语句覆盖、分支覆盖等。这使得开发者能够更灵活地控制测试生成的方向。</p></li><li><p><strong>支持JUnit：</strong> EvoSuite 生成的测试用例遵循JUnit测试框架的标准，因此可以轻松地与常见的Java开发工具和持续集成系统集成。</p></li><li><p><strong>持续演化：</strong> EvoSuite 可以在代码发生变化时重新运行，以确保测试用例仍然有效。这使得它适用于敏捷开发环境，能够在代码迭代的过程中不断改进测试套件。</p></li></ol><p>总体而言，EvoSuite 是一种强大的工具，可以帮助Java开发人员生成高效、全面的测试用例，提高软件的质量和稳定性。</p><p>通过采用进化算法，它能够在搜索空间中寻找最优的测试用例，从而更好地发现潜在的软件问题。</p><p>在这里，我将向你展示一个简单的 Java 示例，演示如何使用 EvoSuite 生成单元测试。首先，确保你已经安装 EvoSuite 工具。</p><h2 id="基于遗传算法的搜索-展开说一下核心原理" tabindex="-1"><a class="header-anchor" href="#基于遗传算法的搜索-展开说一下核心原理"><span>基于遗传算法的搜索，展开说一下核心原理</span></a></h2><p>基于遗传算法的搜索是一种优化算法，用于在搜索空间中寻找最优解。</p><p>这种搜索算法模拟了生物进化的过程，其中良好的解被逐代选择和进化，以产生更好的解。</p><p>以下是基于遗传算法的搜索的核心原理：</p><ol><li><p><strong>表示个体：</strong> 在搜索空间中，每个潜在解都被表示为一个个体。这个表示通常是一个染色体，可以是二进制串、整数串、浮点数串等。</p></li><li><p><strong>初始群体生成：</strong> 算法开始时，生成一个初始群体，其中包含多个个体。这些个体的染色体是随机生成的。</p></li><li><p><strong>适应度评估：</strong> 对于每个个体，通过适应度函数评估其在问题空间中的性能。适应度函数通常根据问题的特定要求而定，目标是能够量化个体的解的好坏程度。</p></li><li><p><strong>选择操作：</strong> 通过选择操作，从当前群体中选择个体用于繁殖下一代。选择操作的概率通常与个体的适应度成正比，适应度高的个体被选中的概率更大。</p></li><li><p><strong>交叉操作：</strong> 选中的个体通过交叉操作产生新个体。交叉操作模拟生物学中的基因重组，从两个父代中生成新的后代，以期望获得两者的优点。</p></li><li><p><strong>变异操作：</strong> 在某些情况下，新个体可能会发生变异，即其染色体的一部分会以一定概率发生变化。这模拟了生物学中的基因突变，引入了一些随机性，有助于搜索空间的广泛探索。</p></li><li><p><strong>生成下一代：</strong> 通过选择、交叉和变异操作，生成新一代个体。这个新一代将替代上一代，并成为下一轮的候选解。</p></li><li><p><strong>终止条件：</strong> 算法迭代执行，生成新一代，直到满足终止条件。终止条件可以是达到预定的迭代次数、适应度阈值等。</p></li><li><p><strong>返回结果：</strong> 一旦算法终止，返回具有最佳适应度的个体作为搜索的最终结果。</p></li></ol><p>遗传算法的优点在于其适用于各种问题，包括组合优化、函数优化、参数调整等。</p><p>然而，对于不同的问题，需要调整算法的参数和操作符，以提高性能。遗传算法的灵活性和全局搜索能力使其在复杂问题中表现出色。</p><h2 id="evosuite-中的核心概念" tabindex="-1"><a class="header-anchor" href="#evosuite-中的核心概念"><span>EvoSuite 中的核心概念</span></a></h2><p>EvoSuite 是一个用于自动生成 Java 程序测试用例的工具，主要基于遗传算法和搜索技术。</p><p>以下是 EvoSuite 中的一些核心概念：</p><ol><li><p><strong>遗传算法：</strong> EvoSuite 的核心算法是基于遗传算法的搜索。遗传算法模拟了生物进化的过程，通过选择、交叉和变异等操作，逐步进化生成适应度更高的测试用例。</p></li><li><p><strong>测试用例生成：</strong> EvoSuite 的主要目标是生成高质量的测试用例，以覆盖 Java 程序中的不同路径和条件。测试用例的生成通过不断演化种群，每个个体都是一个测试用例，以达到最大化代码覆盖率和检测程序中潜在缺陷的目的。</p></li><li><p><strong>目标代码覆盖：</strong> EvoSuite 试图生成能够覆盖目标 Java 代码的测试用例。覆盖率可以包括语句覆盖、分支覆盖等不同层次。通过优化遗传算法的目标函数，EvoSuite 能够在生成测试用例的过程中提高代码覆盖率。</p></li><li><p><strong>遗传算法参数：</strong> EvoSuite 提供了一系列参数，用于调整遗传算法的行为。这些参数包括种群大小、交叉概率、变异概率等。调整这些参数可以影响 EvoSuite 在给定问题上的性能。</p></li><li><p><strong>模糊测试：</strong> EvoSuite 使用模糊测试的思想，通过不断变异和演化测试用例，以尽可能地探索程序的不同执行路径。这有助于发现潜在的错误和边界情况。</p></li><li><p><strong>测试套件生成：</strong> EvoSuite 不仅生成单个测试用例，还致力于生成整个测试套件。测试套件包括多个测试用例，可以全面评估程序的正确性和性能。</p></li><li><p><strong>目标函数：</strong> EvoSuite 使用目标函数来衡量生成的测试用例的质量。目标函数通常包括代码覆盖率、错误检测等方面。通过调整目标函数的权重，可以引导算法生成更符合特定需求的测试用例。</p></li><li><p><strong>覆盖标准：</strong> EvoSuite 支持不同的覆盖标准，包括语句覆盖、分支覆盖等。用户可以根据具体需求选择适当的覆盖标准。</p></li></ol><p>总体而言，EvoSuite 通过将遗传算法应用于测试用例生成，以自动化和优化的方式提高测试用例的质量和代码覆盖率，从而提高 Java 程序的可靠性和稳定性。</p><h2 id="如果让你深入学习-evosuite-你会问哪-10-个问题-为什么" tabindex="-1"><a class="header-anchor" href="#如果让你深入学习-evosuite-你会问哪-10-个问题-为什么"><span>如果让你深入学习 EvoSuite，你会问哪 10 个问题？为什么？</span></a></h2><p>深入学习 EvoSuite 时，可能会提出以下 10 个问题，以便更全面地理解工具的设计、应用和性能：</p><ol><li><p><strong>遗传算法的工作原理是什么？</strong> EvoSuite 的遗传算法是核心搜索机制，深入了解遗传算法的工作原理有助于理解测试用例生成的过程。</p></li><li><p><strong>EvoSuite 是如何定义测试用例的适应度（Fitness）的？</strong> 了解 EvoSuite 如何评估测试用例的好坏，包括覆盖率和其他度量标准。</p></li><li><p><strong>EvoSuite 是如何处理目标代码覆盖的？</strong> 理解 EvoSuite 如何选择和演化测试用例，以达到最大化代码覆盖率的目标。</p></li><li><p><strong>EvoSuite 如何处理 Java 语言的特性，例如异常处理、多线程等？</strong> EvoSuite 在处理复杂的 Java 特性时是否有特殊的处理机制。</p></li><li><p><strong>EvoSuite 支持哪些不同的覆盖标准？</strong> EvoSuite 是否支持语句覆盖、分支覆盖等不同的覆盖标准，以及如何选择和配置这些标准。</p></li><li><p><strong>如何调整 EvoSuite 的参数以优化性能？</strong> 学习如何根据具体问题调整 EvoSuite 的参数，以获得更好的测试用例生成性能。</p></li><li><p><strong>EvoSuite 是否能够生成整个测试套件？</strong> EvoSuite 是否能够生成一组相互独立、全面覆盖的测试用例，以进行系统级的测试。</p></li><li><p><strong>如何处理 EvoSuite 生成的测试用例中可能存在的冗余和不必要的部分？</strong> 是否有机制可以剔除冗余的测试用例，以提高测试效率。</p></li><li><p><strong>EvoSuite 在真实项目中的应用案例有哪些？</strong> 学习 EvoSuite 在实际项目中的应用，了解其在不同领域和项目中的表现。</p></li><li><p><strong>EvoSuite 的未来发展方向是什么？</strong> 了解 EvoSuite 团队对工具未来发展的计划和目标，以便更好地把握工具的前沿动态。</p></li></ol><p>这些问题涵盖了 EvoSuite 的核心原理、设计决策、应用场景和未来发展方向，有助于深入理解和有效利用 EvoSuite 工具。</p><h2 id="evosuite-在真实项目中的应用案例有哪些" tabindex="-1"><a class="header-anchor" href="#evosuite-在真实项目中的应用案例有哪些"><span>EvoSuite 在真实项目中的应用案例有哪些？</span></a></h2><p>EvoSuite 在真实项目中已经有一些应用案例，以下是其中的一些例子：</p><ol><li><p><strong>Apache Commons Math</strong>:</p><ul><li>EvoSuite 被用于测试 Apache Commons Math 项目，该项目是一个提供数学工具的 Java 库。EvoSuite 被用于生成测试用例，以验证库中的各种数学函数和算法。</li></ul></li><li><p><strong>JFreeChart</strong>:</p><ul><li>JFreeChart 是一个用于创建各种类型的图表的 Java 库。EvoSuite 被应用于 JFreeChart 项目，以生成用于测试图表生成和渲染的测试用例。</li></ul></li><li><p><strong>XWiki</strong>:</p><ul><li>XWiki 是一个开源的协作平台和企业 Wiki 系统。EvoSuite 被用于生成测试用例，以确保系统的各个模块的正确性和稳定性。</li></ul></li><li><p><strong>Google Guava</strong>:</p><ul><li>Google Guava 是 Google 提供的一个 Java 核心库扩展项目。EvoSuite 被应用于测试 Guava 中的各种功能，以确保其可靠性和性能。</li></ul></li><li><p><strong>Pitest</strong>:</p><ul><li>Pitest 是一个基于突变测试的 Java 测试工具。EvoSuite 被用于生成测试用例，以用于 Pitest 对代码中的突变进行评估。</li></ul></li></ol><p>这些案例展示了 EvoSuite 在不同领域和项目中的应用，从数学库到图表生成工具再到协作平台，都有对 EvoSuite 的实际应用。这些案例表明 EvoSuite 在提高测试覆盖率、发现潜在缺陷方面具有一定的实用性。</p><h2 id="如何处理-evosuite-生成的测试用例中可能存在的冗余和不必要的部分" tabindex="-1"><a class="header-anchor" href="#如何处理-evosuite-生成的测试用例中可能存在的冗余和不必要的部分"><span>如何处理 EvoSuite 生成的测试用例中可能存在的冗余和不必要的部分？</span></a></h2><p>EvoSuite 生成的测试用例中可能存在冗余和不必要的部分。为了处理这些问题，可以考虑以下几个方面：</p><ol><li><p><strong>配置参数调整</strong>:</p><ul><li>EvoSuite 提供了许多配置参数，通过调整这些参数，你可以影响生成测试用例的策略。一些参数可以帮助你控制生成的测试用例数量和覆盖率，从而减少不必要的冗余。</li></ul></li><li><p><strong>优化搜索策略</strong>:</p><ul><li>EvoSuite 使用遗传算法进行搜索，你可以调整遗传算法的参数，如种群大小、迭代次数等，以优化搜索策略。通过合理调整这些参数，可以更有效地发现高质量的测试用例，减少冗余。</li></ul></li><li><p><strong>手动审查和编辑</strong>:</p><ul><li>手动审查生成的测试用例，识别和删除可能的冗余部分。有时，通过人工的方式检查和编辑测试用例，可以更精细地控制测试套件的质量，并删除不必要的部分。</li></ul></li><li><p><strong>辅助工具使用</strong>:</p><ul><li>可以使用其他辅助工具和静态分析工具来帮助检测和删除冗余的测试用例。这些工具可能会提供有关测试用例覆盖的更深层次的信息，帮助你做出更明智的决策。</li></ul></li><li><p><strong>评估测试质量</strong>:</p><ul><li>运行生成的测试套件并评估覆盖率和其他度量标准。通过分析这些指标，你可以识别不必要的冗余，并进一步调整生成测试用例的策略。</li></ul></li></ol><p>需要注意的是，处理冗余和不必要的测试用例是一个动态的过程，可能需要多次尝试和调整。</p><p>选择适当的方法取决于项目的具体需求和特点。</p><h2 id="evosuite-是否能够生成整个测试套件" tabindex="-1"><a class="header-anchor" href="#evosuite-是否能够生成整个测试套件"><span>EvoSuite 是否能够生成整个测试套件？</span></a></h2><p>是的，EvoSuite 有能力生成整个测试套件。EvoSuite 的目标之一是通过遗传算法搜索空间来生成全面的测试套件，以满足预定义的测试标准和覆盖要求。</p><p>以下是一些关于 EvoSuite 生成整个测试套件的要点：</p><ol><li><p><strong>全面性</strong>:</p><ul><li>EvoSuite 致力于生成全面的测试套件，覆盖目标代码中的不同路径和条件。通过搜索和遗传算法的优化，它尝试找到一组测试用例，以达到既定的测试目标。</li></ul></li><li><p><strong>多目标搜索</strong>:</p><ul><li>EvoSuite 不仅仅是一个单一目标的测试生成工具。它可以同时满足多个测试标准，例如语句覆盖、分支覆盖等。通过调整相应的参数，你可以指定多个目标，以生成满足这些目标的测试套件。</li></ul></li><li><p><strong>度量标准</strong>:</p><ul><li>EvoSuite 使用不同的度量标准来衡量测试套件的质量。你可以选择使用语句覆盖、分支覆盖、线路覆盖等作为评估测试套件全面性的标准。</li></ul></li><li><p><strong>灵活性</strong>:</p><ul><li>EvoSuite 提供了许多配置选项，使你能够调整生成测试套件的方式。这包括遗传算法参数、搜索预算、度量标准等。通过合理调整这些参数，可以更好地满足测试套件的生成需求。</li></ul></li><li><p><strong>质量评估</strong>:</p><ul><li>EvoSuite 生成的测试套件可以通过运行测试并检查覆盖率等指标来进行质量评估。这有助于确保生成的测试套件足够全面，满足预期的测试要求。</li></ul></li></ol><p>需要注意的是，虽然 EvoSuite 可以生成全面的测试套件，但在实际使用中，可能需要进行一些参数调整和质量评估，以确保生成的测试套件符合项目的特定需求。</p><h2 id="如何调整-evosuite-的参数以优化性能" tabindex="-1"><a class="header-anchor" href="#如何调整-evosuite-的参数以优化性能"><span>如何调整 EvoSuite 的参数以优化性能？</span></a></h2><p>调整 EvoSuite 的参数可以对测试生成的性能和效果产生重要影响。以下是一些建议，帮助你调整 EvoSuite 的参数以优化性能：</p><ol><li><p><strong>目标代码路径</strong>:</p><ul><li><p>使用 <code>-class</code> 参数指定要生成测试用例的目标类。这有助于 EvoSuite 集中精力生成特定类的测试用例，提高效率。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> com.example.MyClass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>生成测试用例的数量</strong>:</p><ul><li><p>使用 <code>-Dsearch_budget</code> 参数调整 EvoSuite 的搜索预算，以控制生成的测试用例的数量。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-Dsearch_budget</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">3000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>遗传算法参数</strong>:</p><ul><li><p>EvoSuite 使用遗传算法进行搜索。可以通过调整与遗传算法相关的参数来优化性能。例如，可以调整种群大小 (<code>-Dpopulation</code>) 和迭代次数 (<code>-Dcrossover_rate</code>)。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-Dpopulation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">50</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> -Dcrossover_rate</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">0.8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>超时设置</strong>:</p><ul><li><p>设置生成测试用例的最大超时时间，避免搜索过程耗费过长时间。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-Dglobal_timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">180</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>选择度量标准</strong>:</p><ul><li><p>使用 <code>-Dcriterion</code> 参数选择适当的度量标准，例如语句覆盖 (<code>LINE</code>)、分支覆盖 (<code>BRANCH</code>) 等。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-Dcriterion</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">BRANCH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>禁用模糊测试</strong>:</p><ul><li><p>在某些情况下，禁用模糊测试可能有助于生成更加准确和有针对性的测试用例。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Dno_runtime_dependency</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>其他参数</strong>:</p><ul><li>EvoSuite 支持许多其他参数，可以根据具体需求进行调整。可以查阅 EvoSuite 的文档以获取更多信息。</li></ul></li></ol><p>调整这些参数时，建议进行实验和性能评估，以找到适合项目的最佳配置。</p><p>不同的项目可能需要不同的参数设置，取决于项目的规模、结构和测试要求。</p><h2 id="evosuite-支持哪些不同的覆盖标准" tabindex="-1"><a class="header-anchor" href="#evosuite-支持哪些不同的覆盖标准"><span>EvoSuite 支持哪些不同的覆盖标准？</span></a></h2><p>EvoSuite 支持多种不同的覆盖标准，以帮助开发者评估测试用例的质量和代码的覆盖程度。</p><p>以下是 EvoSuite 支持的一些常见覆盖标准：</p><ol><li><p><strong>语句覆盖（Statement Coverage）</strong>:</p><ul><li>确保每个源代码文件中的语句至少被执行一次。</li></ul></li><li><p><strong>分支覆盖（Branch Coverage）</strong>:</p><ul><li>确保每个决策点（例如 if 语句）的每个分支至少被执行一次。</li></ul></li><li><p><strong>判定覆盖（Decision Coverage）</strong>:</p><ul><li>确保每个决策点的所有可能组合都被测试覆盖。</li></ul></li><li><p><strong>路径覆盖（Path Coverage）</strong>:</p><ul><li>确保源代码中的每个可能执行路径都被测试覆盖。</li></ul></li><li><p><strong>线路覆盖（Line Coverage）</strong>:</p><ul><li>确保源代码的每一行都至少被执行一次。</li></ul></li><li><p><strong>方法覆盖（Method Coverage）</strong>:</p><ul><li>确保每个方法都至少被调用一次。</li></ul></li><li><p><strong>类覆盖（Class Coverage）</strong>:</p><ul><li>确保每个类都至少被使用一次。</li></ul></li><li><p><strong>接口覆盖（Interface Coverage）</strong>:</p><ul><li>确保每个接口都至少被实现一次。</li></ul></li><li><p><strong>异常覆盖（Exception Coverage）</strong>:</p><ul><li>确保每个可能抛出异常的代码路径都被测试覆盖。</li></ul></li><li><p><strong>线程覆盖（Thread Coverage）</strong>:</p><ul><li>对于涉及多线程的代码，确保不同线程的各种执行路径都被测试覆盖。</li></ul></li></ol><p>EvoSuite 使用这些覆盖标准来指导生成测试用例的过程，以最大程度地提高代码的覆盖率。</p><p>开发者可以根据项目需求选择适当的覆盖标准，并使用 EvoSuite 生成相应的测试套件。</p><h2 id="evosuite-如何处理-java-语言的特性-例如异常处理、多线程等" tabindex="-1"><a class="header-anchor" href="#evosuite-如何处理-java-语言的特性-例如异常处理、多线程等"><span>EvoSuite 如何处理 Java 语言的特性，例如异常处理、多线程等？</span></a></h2><p>EvoSuite 在处理 Java 语言的特性时，尤其是异常处理和多线程等方面，采用一些策略来生成测试用例以覆盖这些特性。</p><p>以下是 EvoSuite 处理 Java 语言特性的一些基本方法：</p><ol><li><p><strong>异常处理</strong>:</p><ul><li>EvoSuite 生成的测试用例通常会尝试覆盖目标代码中的异常处理路径。为了达到这个目标，EvoSuite 可以生成一些特定输入，触发代码中的异常，以确保异常处理路径得到测试覆盖。此外，EvoSuite 还可以通过变异测试的方式，引入对异常处理的变异，以增强对异常情况的测试。</li></ul></li><li><p><strong>多线程</strong>:</p><ul><li>对于涉及多线程的代码，EvoSuite 会尝试生成测试用例，以覆盖不同线程执行路径。这包括了在不同线程间传递数据、测试多线程并发执行、覆盖锁定机制等。为了有效测试多线程代码，EvoSuite 可以生成包含不同线程操作的输入序列。</li></ul></li><li><p><strong>状态空间覆盖</strong>:</p><ul><li>EvoSuite 通过遗传算法优化测试用例的生成，以尽可能覆盖 Java 语言的状态空间。这有助于测试特定代码路径的各种状态，包括异常状态和多线程状态。</li></ul></li><li><p><strong>模糊测试</strong>:</p><ul><li>EvoSuite 可以使用模糊测试的技术，生成一些边缘情况或不寻常输入，以验证代码在异常或多线程条件下的行为。这有助于检测可能导致问题的边缘情况。</li></ul></li></ol><p>需要注意的是，尽管 EvoSuite 能够处理 Java 语言的多种特性，但它并不是完美的，有时可能无法涵盖所有边缘情况。</p><p>在生成的测试用例中，开发者可能仍然需要进行手动检查和调整，以确保特定场景和特性得到充分测试。</p><p>EvoSuite 的自动化测试生成工具是一个辅助开发者进行测试的工具，而不是完全取代手动测试的工具。</p><h2 id="evosuite-是如何处理目标代码覆盖的" tabindex="-1"><a class="header-anchor" href="#evosuite-是如何处理目标代码覆盖的"><span>EvoSuite 是如何处理目标代码覆盖的？</span></a></h2><p>EvoSuite 处理目标代码覆盖的过程涉及使用遗传算法来生成测试用例，以确保这些测试用例能够覆盖目标代码的各个部分。</p><p>下面是 EvoSuite 处理目标代码覆盖的基本步骤：</p><ol><li><p><strong>初始化种群</strong>:</p><ul><li>EvoSuite 通过使用遗传算法的基本概念，初始化一个测试用例种群。每个测试用例都是一个个体，由一组输入参数和期望的输出组成。</li></ul></li><li><p><strong>评估适应度</strong>:</p><ul><li>对于每个测试用例，EvoSuite 使用适应度函数来评估其性能。适应度函数通常包括代码覆盖率、错误检测、行为规约等方面，以综合评估测试用例的质量。</li></ul></li><li><p><strong>选择操作</strong>:</p><ul><li>根据测试用例的适应度，EvoSuite 采用选择操作来选择优秀的测试用例，作为下一代种群的父代。选择通常基于适应度值，适应度更高的测试用例更有可能被选择。</li></ul></li><li><p><strong>交叉操作</strong>:</p><ul><li>通过交叉操作，选定的父代测试用例的某些部分（如输入参数）进行交叉，产生新的测试用例。这有助于引入新的变异和组合，提高种群的多样性。</li></ul></li><li><p><strong>变异操作</strong>:</p><ul><li>针对选定的测试用例，EvoSuite 进行变异操作，即对测试用例进行随机修改。这有助于引入新的输入组合和路径，进一步增加测试用例的多样性。</li></ul></li><li><p><strong>重复进化</strong>:</p><ul><li>通过不断进行选择、交叉和变异操作，EvoSuite 的种群逐渐进化。这个过程重复进行，直到达到预定的迭代次数或满足其他停止准则。</li></ul></li><li><p><strong>生成测试报告</strong>:</p><ul><li>EvoSuite 生成测试报告，其中包含生成的测试用例、覆盖率信息、错误检测情况等。这些报告帮助开发者了解测试的效果和覆盖情况。</li></ul></li></ol><p>通过这个基本的遗传算法过程，EvoSuite 能够有效地生成测试用例，以满足开发者的测试需求，包括目标代码的高覆盖率和错误检测。</p><p>这种自动化的测试生成方法有助于加速软件测试过程，尤其是在大型项目中。</p><h2 id="evosuite-是如何定义测试用例的适应度-fitness-的" tabindex="-1"><a class="header-anchor" href="#evosuite-是如何定义测试用例的适应度-fitness-的"><span>EvoSuite 是如何定义测试用例的适应度（Fitness）的？</span></a></h2><p>EvoSuite 通过遗传算法生成测试用例，而测试用例的适应度（Fitness）是在遗传算法中评估个体（即测试用例）性能的指标。</p><p>对于 EvoSuite，适应度的主要目标是评估测试用例的质量，即测试用例是否能够充分地覆盖代码、发现错误等。</p><p>以下是 EvoSuite 中测试用例适应度的一些关键考量因素：</p><ol><li><p><strong>代码覆盖率</strong>:</p><ul><li>EvoSuite 的主要目标之一是生成具有高代码覆盖率的测试用例。这包括语句覆盖、分支覆盖等，以确保测试用例能够执行目标代码的不同路径。</li></ul></li><li><p><strong>错误检测</strong>:</p><ul><li>EvoSuite 试图生成能够发现潜在错误的测试用例。通过模糊测试和遗传算法，EvoSuite 希望找到那些导致应用程序崩溃或产生错误的输入。</li></ul></li><li><p><strong>行为规约（Behavior Specification）</strong>:</p><ul><li>EvoSuite 的适应度函数通常还会考虑应用程序的行为规约，即开发者期望应用程序在某些条件下的行为。这有助于确保生成的测试用例符合开发者的预期。</li></ul></li><li><p><strong>执行时间</strong>:</p><ul><li>考虑到测试用例的执行时间对于实际测试流程的影响，EvoSuite 通常也会关注生成的测试用例的执行效率。生成效率高的测试用例有助于更快地进行测试。</li></ul></li><li><p><strong>路径覆盖</strong>:</p><ul><li>EvoSuite 可能会尝试生成测试用例，以覆盖应用程序中的不同执行路径。这有助于发现隐藏在代码逻辑中的潜在问题。</li></ul></li></ol><p>适应度函数的具体设计可能会根据应用程序的性质和测试需求而有所不同。</p><p>通常，EvoSuite 会将这些考量因素融合在一个综合的适应度函数中，以评估每个生成的测试用例。</p><p>适应度函数的不断优化是 EvoSuite 持续改进的一部分。</p><h2 id="给出-evosuite-的学习资料-包含网址" tabindex="-1"><a class="header-anchor" href="#给出-evosuite-的学习资料-包含网址"><span>给出 EvoSuite 的学习资料，包含网址</span></a></h2><p>以下是 EvoSuite 的一些建议学习资料和相关网址：</p><ol><li><p><strong>官方网站</strong>:</p><ul><li><a href="http://www.evosuite.org/" target="_blank" rel="noopener noreferrer">EvoSuite 官方网站</a>: EvoSuite 的官方网站提供了工具的基本信息、文档和下载链接。</li></ul></li><li><p><strong>GitHub 仓库</strong>:</p><ul><li><a href="https://github.com/EvoSuite/evosuite" target="_blank" rel="noopener noreferrer">EvoSuite GitHub 仓库</a>: EvoSuite 的源代码托管在 GitHub 上，可以查看源码、提交记录以及报告问题。</li></ul></li><li><p><strong>论文和文档</strong>:</p><ul><li><a href="http://www.evosuite.org/documentation/publications/" target="_blank" rel="noopener noreferrer">EvoSuite 论文</a>: EvoSuite 的官方网站上提供了一系列关于 EvoSuite 的学术论文，这些论文对 EvoSuite 的设计和原理有详细介绍。</li></ul></li><li><p><strong>Google Group 论坛</strong>:</p><ul><li><a href="https://groups.google.com/g/evosuite" target="_blank" rel="noopener noreferrer">EvoSuite Google Group</a>: EvoSuite 的论坛，你可以在这里提问、讨论和获取社区的支持。</li></ul></li><li><p><strong>演示和教程视频</strong>:</p><ul><li><a href="https://www.youtube.com/user/evosuite" target="_blank" rel="noopener noreferrer">EvoSuite YouTube 频道</a>: EvoSuite 在 YouTube 上有一些演示和教程视频，对工具的使用进行了实际演示。</li></ul></li><li><p><strong>演示项目</strong>:</p><ul><li><a href="https://github.com/EvoSuite/evosuite-demos" target="_blank" rel="noopener noreferrer">EvoSuite 演示项目</a>: EvoSuite 团队提供了一些演示项目，可用于实际操作和测试 EvoSuite 的功能。</li></ul></li><li><p><strong>EvoSuite 实战教程</strong>:</p><ul><li><a href="https://www.slideshare.net/BenoitBaudry/evosuite-tutorial" target="_blank" rel="noopener noreferrer">EvoSuite 实战教程</a>: 由 EvoSuite 的作者之一编写的 EvoSuite 实战教程，提供了详细的操作步骤。</li></ul></li></ol><p>请注意，这些资源可能随时间而变化，建议通过 EvoSuite 的官方渠道获取最新和最准确的信息。</p><h2 id="给出一个-java-使用-evosuite-的入门例子" tabindex="-1"><a class="header-anchor" href="#给出一个-java-使用-evosuite-的入门例子"><span>给出一个 java 使用 EvoSuite 的入门例子</span></a></h2><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤：</span></a></h3><h4 id="步骤-1-安装-evosuite" tabindex="-1"><a class="header-anchor" href="#步骤-1-安装-evosuite"><span>步骤 1: 安装 EvoSuite</span></a></h4><p>首先，你需要下载 EvoSuite 工具。可以从 EvoSuite 的官方网站（<a href="https://www.evosuite.org/%EF%BC%89%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.evosuite.org/）获取最新版本。</a></p><h4 id="步骤-2-编写-java-代码" tabindex="-1"><a class="header-anchor" href="#步骤-2-编写-java-代码"><span>步骤 2: 编写 Java 代码</span></a></h4><p>创建一个简单的 Java 类，例如 <code>Calculator.java</code>，其中包含一些需要进行测试的方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Calculator.java</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> multiply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArithmeticException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Cannot divide by zero&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤-3-编译-java-代码" tabindex="-1"><a class="header-anchor" href="#步骤-3-编译-java-代码"><span>步骤 3: 编译 Java 代码</span></a></h4><p>使用命令行或集成开发环境（IDE）编译 <code>Calculator.java</code>。确保你已经设置好 Java 编译环境。</p><h4 id="步骤-4-运行-evosuite" tabindex="-1"><a class="header-anchor" href="#步骤-4-运行-evosuite"><span>步骤 4: 运行 EvoSuite</span></a></h4><p>在命令行中运行 EvoSuite，指定要测试的类。以下是一个示例命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite-1.0.7.jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -class</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Calculator</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -projectCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> path/to/compiled/classes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>请将 <code>evosuite-1.0.7.jar</code> 替换为你下载的 EvoSuite 版本。<code>-class Calculator</code> 指定要测试的类，<code>-projectCP path/to/compiled/classes</code> 指定编译后的类路径。</p><h4 id="步骤-5-查看生成的测试用例" tabindex="-1"><a class="header-anchor" href="#步骤-5-查看生成的测试用例"><span>步骤 5: 查看生成的测试用例</span></a></h4><p>EvoSuite 将生成一组 JUnit 测试用例，这些测试用例位于 <code>evosuite-tests</code> 目录中。你可以查看这些文件，了解生成的测试用例覆盖了哪些代码路径。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ls</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> evosuite-tests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过运行这些测试用例，你可以验证 <code>Calculator</code> 类的各个方法的正确性，并检查测试覆盖率。</p><p>这是一个简单的入门例子，展示了如何使用 EvoSuite 生成单元测试。在实际项目中，你可能需要更复杂的配置，具体取决于你的项目结构和测试需求。 EvoSuite 的文档提供了更详细的配置选项和用法说明。</p><h2 id="给出-evosuite-基于-maven-插件的使用例子" tabindex="-1"><a class="header-anchor" href="#给出-evosuite-基于-maven-插件的使用例子"><span>给出 EvoSuite 基于 maven 插件的使用例子</span></a></h2><p>EvoSuite Maven 插件用于在 Maven 构建中生成新的测试用例。以下是 EvoSuite Maven 插件的使用示例：</p><ol><li><strong>在 <code>pom.xml</code> 中添加 EvoSuite Maven 插件依赖：</strong></li></ol><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            org.evosuite.plugins</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            evosuite-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            1.0.6 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        generate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保将 \`\` 标签的值替换为 EvoSuite Maven 插件的最新版本。</p><ol start="2"><li><strong>指定 EvoSuite 插件的配置（可选）：</strong></li></ol><p>您可以在 <code>pom.xml</code> 中为 EvoSuite 插件指定配置，以定制生成测试用例的行为。以下是一个示例：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            org.evosuite.plugins</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            evosuite-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            1.0.6</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        generate</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                com.example.YourClass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                target/classes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，<code>指定了要为其生成测试用例的目标类，而</code> 指定了 EvoSuite 插件用于查找类和依赖项的类路径。</p><ol start="3"><li><strong>运行 Maven 构建：</strong></li></ol><p>在命令行或集成开发环境（IDE）中执行 Maven 构建命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将触发 EvoSuite 插件生成测试用例。</p><p>请注意，上述示例仅包含基本配置，具体配置取决于您的项目结构和测试需求。</p><p>根据您的需求，您可能需要调整插件配置，以满足项目的特定要求。</p><p>EvoSuite 的详细配置选项可以在 <a href="https://www.evosuite.org/documentation/maven-plugin/" target="_blank" rel="noopener noreferrer">EvoSuite Maven 插件文档</a> 中找到。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/EvoSuite/evosuite" target="_blank" rel="noopener noreferrer">https://github.com/EvoSuite/evosuite</a></p><p><a href="https://www.evosuite.org/documentation/maven-plugin/" target="_blank" rel="noopener noreferrer">https://www.evosuite.org/documentation/maven-plugin/</a></p>`,225)]))}const d=s(l,[["render",t]]),o=JSON.parse('{"path":"/posts/tests/2016-04-26-test-gen-case-02-EvoSuite-intro.html","title":"test-02-test case generate 测试用例生成 EvoSuite 介绍","lang":"zh-CN","frontmatter":{"title":"test-02-test case generate 测试用例生成 EvoSuite 介绍","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","test","generate"],"published":true,"description":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 拓展...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/tests/2016-04-26-test-gen-case-02-EvoSuite-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test-02-test case generate 测试用例生成 EvoSuite 介绍"}],["meta",{"property":"og:description","content":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) 拓展..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"generate"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test-02-test case generate 测试用例生成 EvoSuite 介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":33.7,"words":10110},"filePathRelative":"posts/tests/2016-04-26-test-gen-case-02-EvoSuite-intro.md","localizedDate":"2016年4月26日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2018/06/24/junit5-01-hello\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">junit5 系列</a></p>\\n</blockquote>\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2021/07/23/junit-performance-junit5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基于 junit5 实现 junitperf 源码分析</a></p>\\n</blockquote>","autoDesc":true}');export{d as comp,o as data};
