import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as s,o as p}from"./app-uJE4P3e0.js";const i={};function t(r,a){return p(),n("div",null,a[0]||(a[0]=[s(`<h1 id="c-循环" tabindex="-1"><a class="header-anchor" href="#c-循环"><span>C 循环</span></a></h1><p>有的时候，我们可能需要多次执行同一块代码。</p><p>一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p><p>编程语言提供了更为复杂执行路径的多种控制结构。</p><h1 id="循环类型" tabindex="-1"><a class="header-anchor" href="#循环类型"><span>循环类型</span></a></h1><p>C 语言提供了以下几种循环类型。</p><h2 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h2><p>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</p><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h2><p>多次执行一个语句序列，简化管理循环变量的代码。</p><h2 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span>do...while 循环</span></a></h2><p>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</p><h2 id="嵌套循环" tabindex="-1"><a class="header-anchor" href="#嵌套循环"><span>嵌套循环</span></a></h2><p>您可以在 while、for 或 do..while 循环内使用一个或多个循环。</p><p>ps: 个人觉得这里最好不要用这种嵌套的写法，除非有必要。</p><h1 id="循环控制语句" tabindex="-1"><a class="header-anchor" href="#循环控制语句"><span>循环控制语句</span></a></h1><p>循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。</p><p>C 提供了下列的循环控制语句。点击链接查看每个语句的细节。</p><h2 id="break-语句" tabindex="-1"><a class="header-anchor" href="#break-语句"><span>break 语句</span></a></h2><p>终止循环或 switch 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</p><h2 id="continue-语句" tabindex="-1"><a class="header-anchor" href="#continue-语句"><span>continue 语句</span></a></h2><p>告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</p><h2 id="goto-语句" tabindex="-1"><a class="header-anchor" href="#goto-语句"><span>goto 语句</span></a></h2><p>将控制转移到被标记的语句。</p><p>但是不建议在程序中使用 goto 语句。</p><p>ps: 因为这个滥用会导致程序的流程混乱，难以阅读。</p><h1 id="无限循环" tabindex="-1"><a class="header-anchor" href="#无限循环"><span>无限循环</span></a></h1><p>如果条件永远不为假，则循环将变成无限循环。</p><p>for 循环在传统意义上可用于实现无限循环。</p><p>由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#include </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>int main ()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   for( ; ; )</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      printf(&quot;该循环会永远执行下去！\\n&quot;);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当条件表达式不存在时，它被假设为真。</p><p>您也可以设置一个初始值和增量表达式，但是一般情况下，C 程序员偏向于使用 for(;😉 结构来表示一个无限循环。</p><p>注意：您可以按 Ctrl + C 键终止一个无限循环。</p>`,35)]))}const h=e(i,[["render",t]]),c=JSON.parse('{"path":"/posts/C/2020-05-08-c-lang-09-loop.html","title":"C语言学习笔记-09-Loop 循环","lang":"zh-CN","frontmatter":{"title":"C语言学习笔记-09-Loop 循环","date":"2020-05-08T00:00:00.000Z","categories":["C"],"tags":["c","lang","sf"],"published":true,"description":"C 循环 有的时候，我们可能需要多次执行同一块代码。 一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。 编程语言提供了更为复杂执行路径的多种控制结构。 循环类型 C 语言提供了以下几种循环类型。 while 循环 当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。 for 循环 多次执行一个语句序...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/C/2020-05-08-c-lang-09-loop.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"C语言学习笔记-09-Loop 循环"}],["meta",{"property":"og:description","content":"C 循环 有的时候，我们可能需要多次执行同一块代码。 一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。 编程语言提供了更为复杂执行路径的多种控制结构。 循环类型 C 语言提供了以下几种循环类型。 while 循环 当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。 for 循环 多次执行一个语句序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C语言学习笔记-09-Loop 循环\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.05,"words":615},"filePathRelative":"posts/C/2020-05-08-c-lang-09-loop.md","localizedDate":"2020年5月8日","excerpt":"\\n<p>有的时候，我们可能需要多次执行同一块代码。</p>\\n<p>一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p>\\n<p>编程语言提供了更为复杂执行路径的多种控制结构。</p>\\n<h1>循环类型</h1>\\n<p>C 语言提供了以下几种循环类型。</p>\\n<h2>while 循环</h2>\\n<p>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</p>\\n<h2>for 循环</h2>\\n<p>多次执行一个语句序列，简化管理循环变量的代码。</p>\\n<h2>do...while 循环</h2>\\n<p>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</p>","autoDesc":true}');export{h as comp,c as data};
