import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CEDSurVN.js";const l={};function e(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="q-go-不像-java-有-jvm-是如何实现-gc-的" tabindex="-1"><a class="header-anchor" href="#q-go-不像-java-有-jvm-是如何实现-gc-的"><span>Q: go 不像 java 有 jvm，是如何实现 GC 的？</span></a></h2><p>Go 语言与 Java 不同，确实没有像 JVM（Java 虚拟机）那样的运行时环境，但它同样具有垃圾回收（Garbage Collection，GC）机制。</p><p>Go 使用一种称为 &quot;concurrent garbage collector&quot; 的垃圾回收器，也被称为并发垃圾回收器。</p><p>以下是 Go 语言中的垃圾回收是如何实现的：</p><ol><li><p><strong>标记-清扫算法（Mark and Sweep）：</strong> Go 语言的垃圾回收器使用了标记-清扫算法，这是一种比较经典的垃圾回收算法。该算法包括两个主要阶段：</p><ul><li><p><strong>标记阶段：</strong> 在这个阶段，垃圾回收器会遍历程序中的对象，并标记那些仍然可达的对象。可达对象是指那些可以通过程序中的引用链追溯到的对象。</p></li><li><p><strong>清扫阶段：</strong> 在这个阶段，垃圾回收器会清扫并释放那些未被标记的对象，即那些不可达的对象。这些对象被认为是垃圾，可以被回收。</p></li></ul></li><li><p><strong>并发标记（Concurrent Marking）：</strong> Go 的垃圾回收器采用并发标记的方式，意味着垃圾回收过程与程序的执行是同时进行的。这有助于减少垃圾回收对程序性能的影响。在标记阶段，垃圾回收器可以在程序运行的同时标记对象，而不是暂停整个程序。</p></li><li><p><strong>自适应调整（Adaptive Garbage Collection）：</strong> Go 的垃圾回收器是自适应的，它会根据程序的运行情况动态地调整垃圾回收的参数。这种自适应性有助于优化垃圾回收器的性能，使其适应不同的应用场景。</p></li></ol><p>总体而言，Go 的垃圾回收器通过并发标记和自适应调整等技术，实现了高效的垃圾回收，从而避免了传统垃圾回收器可能引起的明显停顿。</p><p>这使得 Go 语言在大规模并发和网络应用方面表现得相当出色。</p><h2 id="q-go-是如何实现反射的-入门例子和原理" tabindex="-1"><a class="header-anchor" href="#q-go-是如何实现反射的-入门例子和原理"><span>Q: go 是如何实现反射的？入门例子和原理</span></a></h2><p>在 Go 语言中，反射（reflection）是一种在运行时检查和操作程序结构、变量和值的机制。Go 的反射包是 <code>reflect</code>，它提供了一组用于在运行时进行类型检查、获取类型信息和动态调用的函数。以下是一个简单的入门例子和一些基本原理：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&quot;reflect&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	Name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  string</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	Age</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   int</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	Title</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 创建一个 Person 的实例</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	p</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John Doe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Engineer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 使用 reflect 包获取对象的类型信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	t</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TypeOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Type:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 使用 reflect 包获取对象的值信息</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	v</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ValueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Value:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 遍历结构体的字段并获取值</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NumField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		field</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		value</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Field: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, Type: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, Value: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%v</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 通过反射修改字段的值</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	field</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> v</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FieldByName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">IsValid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CanSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">31</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Updated Age:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个 <code>Person</code> 结构体，然后创建了一个 <code>Person</code> 类型的实例 <code>p</code>。</p><p>接着，我们使用 <code>reflect</code> 包获取了这个实例的类型信息和值信息，然后遍历结构体的字段，并输出字段的名称、类型和值。</p><p>最后，我们通过反射修改了结构体中的一个字段的值。请注意，通过反射修改字段的值需要检查字段是否有效且是否可被设置，以确保类型安全。</p><p>反射的基本原理是通过 <code>reflect.Type</code> 和 <code>reflect.Value</code> 类型，它们分别表示类型和值。</p><p><code>reflect</code> 包提供了一组函数来检查、比较、获取字段和方法等。反射的使用需要谨慎，因为它在编译时无法进行类型检查，可能导致运行时错误。在实际应用中，应尽量避免滥用反射，只在必要的情况下使用。</p><h2 id="q-go-不是编译时语言吗-为什么可以实现运行时的反射" tabindex="-1"><a class="header-anchor" href="#q-go-不是编译时语言吗-为什么可以实现运行时的反射"><span>Q: go 不是编译时语言吗？为什么可以实现运行时的反射？</span></a></h2><p>Go 是一种静态类型、编译型语言，这意味着在编译时会进行类型检查，并生成与目标平台相关的本地机器码。然而，Go 语言也提供了反射机制，允许在运行时检查和操作程序结构、变量和值。</p><p>这种看似矛盾的现象可以通过以下方式来解释：</p><ol><li><p><strong>Interface{} 类型：</strong> 在 Go 中，<code>interface{}</code> 类型是一种特殊的类型，它可以表示任意类型的值。因为 <code>interface{}</code> 可以容纳任意类型的值，包括用户自定义类型，所以通过将值存储在 <code>interface{}</code> 类型的变量中，可以在运行时动态地获取和处理其类型信息。</p></li><li><p><strong>reflect 包：</strong> Go 的 <code>reflect</code> 包提供了一组函数，允许在运行时获取变量的类型信息、值信息，以及进行动态调用。通过 <code>reflect</code> 包，我们可以获得 <code>reflect.Type</code> 和 <code>reflect.Value</code> 类型，从而实现反射的功能。</p></li></ol><p>虽然 Go 是编译时语言，但反射是通过在运行时处理 <code>interface{}</code> 类型和使用 <code>reflect</code> 包来实现的。这种方式允许程序在运行时动态地获取和操作类型信息，但也带来了一些潜在的性能开销和类型安全问题。在使用反射时，需要注意慎用，并确保遵循最佳实践以维护代码的可读性和性能。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://go.dev/doc/tutorial/govulncheck" target="_blank" rel="noopener noreferrer">https://go.dev/doc/tutorial/govulncheck</a></p>`,23)]))}const r=i(l,[["render",e]]),d=JSON.parse('{"path":"/posts/Lang/2018-09-07-lang-go-13-go-chat-reflect-gc.html","title":"Go Lang-13-go gc 和 reflect 反射如何实现的？","lang":"zh-CN","frontmatter":{"title":"Go Lang-13-go gc 和 reflect 反射如何实现的？","date":"2018-09-07T00:00:00.000Z","categories":["Lang"],"tags":["go","lang","sh"],"published":true,"description":"chat Q: go 不像 java 有 jvm，是如何实现 GC 的？ Go 语言与 Java 不同，确实没有像 JVM（Java 虚拟机）那样的运行时环境，但它同样具有垃圾回收（Garbage Collection，GC）机制。 Go 使用一种称为 \\"concurrent garbage collector\\" 的垃圾回收器，也被称为并发垃圾回收器。...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2018-09-07-lang-go-13-go-chat-reflect-gc.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Go Lang-13-go gc 和 reflect 反射如何实现的？"}],["meta",{"property":"og:description","content":"chat Q: go 不像 java 有 jvm，是如何实现 GC 的？ Go 语言与 Java 不同，确实没有像 JVM（Java 虚拟机）那样的运行时环境，但它同样具有垃圾回收（Garbage Collection，GC）机制。 Go 使用一种称为 \\"concurrent garbage collector\\" 的垃圾回收器，也被称为并发垃圾回收器。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go Lang-13-go gc 和 reflect 反射如何实现的？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.7,"words":1409},"filePathRelative":"posts/Lang/2018-09-07-lang-go-13-go-chat-reflect-gc.md","localizedDate":"2018年9月7日","excerpt":"\\n<h2>Q: go 不像 java 有 jvm，是如何实现 GC 的？</h2>\\n<p>Go 语言与 Java 不同，确实没有像 JVM（Java 虚拟机）那样的运行时环境，但它同样具有垃圾回收（Garbage Collection，GC）机制。</p>\\n<p>Go 使用一种称为 \\"concurrent garbage collector\\" 的垃圾回收器，也被称为并发垃圾回收器。</p>\\n<p>以下是 Go 语言中的垃圾回收是如何实现的：</p>\\n<ol>\\n<li>\\n<p><strong>标记-清扫算法（Mark and Sweep）：</strong> Go 语言的垃圾回收器使用了标记-清扫算法，这是一种比较经典的垃圾回收算法。该算法包括两个主要阶段：</p>\\n<ul>\\n<li>\\n<p><strong>标记阶段：</strong> 在这个阶段，垃圾回收器会遍历程序中的对象，并标记那些仍然可达的对象。可达对象是指那些可以通过程序中的引用链追溯到的对象。</p>\\n</li>\\n<li>\\n<p><strong>清扫阶段：</strong> 在这个阶段，垃圾回收器会清扫并释放那些未被标记的对象，即那些不可达的对象。这些对象被认为是垃圾，可以被回收。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>并发标记（Concurrent Marking）：</strong> Go 的垃圾回收器采用并发标记的方式，意味着垃圾回收过程与程序的执行是同时进行的。这有助于减少垃圾回收对程序性能的影响。在标记阶段，垃圾回收器可以在程序运行的同时标记对象，而不是暂停整个程序。</p>\\n</li>\\n<li>\\n<p><strong>自适应调整（Adaptive Garbage Collection）：</strong> Go 的垃圾回收器是自适应的，它会根据程序的运行情况动态地调整垃圾回收的参数。这种自适应性有助于优化垃圾回收器的性能，使其适应不同的应用场景。</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
