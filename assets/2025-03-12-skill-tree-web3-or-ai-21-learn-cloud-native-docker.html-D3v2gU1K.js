import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as l}from"./app-CEDSurVN.js";const n={};function h(t,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h2 id="web3" tabindex="-1"><a class="header-anchor" href="#web3"><span>web3</span></a></h2><p>大家好，我是老马。</p><p>今天我们聊一下未来3到5年值得学习的方向。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p><p>我是老马，期待与你的下次相遇。</p><hr><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="介绍一下-docker" tabindex="-1"><a class="header-anchor" href="#介绍一下-docker"><span>介绍一下 docker</span></a></h2><h3 id="一、docker-是什么" tabindex="-1"><a class="header-anchor" href="#一、docker-是什么"><span>一、Docker 是什么？</span></a></h3><p>Docker 是一个轻量级容器化平台，允许开发者将应用及其依赖打包成一个标准化的、可移植的“容器”，并可在任何支持 Docker 的环境中运行。<br> 它与传统虚拟机的最大区别在于：</p><ul><li>虚拟机（VM） ：需要完整的操作系统，资源占用大（如 VMware、VirtualBox）。</li><li>Docker 容器：共享主机操作系统内核，仅打包应用和依赖，启动快、资源占用极低。</li></ul><hr><h3 id="二、docker-的核心概念" tabindex="-1"><a class="header-anchor" href="#二、docker-的核心概念"><span>二、Docker 的核心概念</span></a></h3><ol><li><p>镜像（Image）</p><ul><li>只读模板，包含运行应用所需的所有文件、配置和依赖（如一个 Ubuntu 系统镜像）。</li><li>通过 <code>Dockerfile</code> 定义镜像构建步骤（例如安装软件、复制代码）。</li></ul></li><li><p>容器（Container）</p><ul><li>镜像的运行时实例，相当于一个轻量级沙箱环境。</li><li>每个容器独立运行，通过隔离技术（Namespace、Cgroups）保证资源限制与安全。</li></ul></li><li><p>仓库（Registry）</p><ul><li>存储和共享镜像的平台，默认仓库为 <a href="https://hub.docker.com/" target="_blank" rel="noopener noreferrer">Docker Hub</a>。</li><li>类似 GitHub，可上传（<code>docker push</code>）或下载（<code>docker pull</code>）镜像。</li></ul></li></ol><hr><h3 id="三、docker-的核心功能" tabindex="-1"><a class="header-anchor" href="#三、docker-的核心功能"><span>三、Docker 的核心功能</span></a></h3><ol><li><p>环境一致性</p><ul><li>通过容器确保开发、测试、生产环境完全一致，避免“在我机器上能跑”的问题。</li></ul></li><li><p>快速部署与扩展</p><ul><li>秒级启动容器，支持动态扩缩容（结合 Kubernetes 等编排工具）。</li></ul></li><li><p>资源隔离与高效利用</p><ul><li>容器共享主机内核，资源利用率比虚拟机高 90% 以上。</li></ul></li><li><p>微服务支持</p><ul><li>每个微服务可打包为一个容器，独立开发、部署和扩展。</li></ul></li></ol><hr><h3 id="四、docker-的典型使用场景" tabindex="-1"><a class="header-anchor" href="#四、docker-的典型使用场景"><span>四、Docker 的典型使用场景</span></a></h3><ol><li><p>本地开发环境搭建</p><ul><li>一键启动 MySQL、Redis 等服务，无需手动安装配置。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123456</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>持续集成/持续部署（CI/CD）</p><ul><li>在流水线中构建镜像并推送到仓库，实现自动化测试与部署。</li></ul></li><li><p>应用隔离与多版本共存</p><ul><li>同时运行不同版本的 Python 或 Node.js 环境，互不影响。</li></ul></li><li><p>快速交付PaaS/SaaS服务</p><ul><li>如云函数（Serverless）底层依赖容器技术。</li></ul></li></ol><hr><h3 id="五、docker-基本操作命令" tabindex="-1"><a class="header-anchor" href="#五、docker-基本操作命令"><span>五、Docker 基本操作命令</span></a></h3><table><thead><tr><th>功能</th><th>命令示例</th></tr></thead><tbody><tr><td>拉取镜像</td><td><code>docker pull nginx:latest</code></td></tr><tr><td>启动容器</td><td><code>docker run -d -p 80:80 nginx</code></td></tr><tr><td>查看运行中的容器</td><td><code>docker ps</code></td></tr><tr><td>进入容器终端</td><td><code>docker exec -it bash</code></td></tr><tr><td>构建镜像</td><td><code>docker build -t my-app:1.0 .</code></td></tr><tr><td>删除容器</td><td><code>docker rm </code></td></tr><tr><td>查看镜像列表</td><td><code>docker images</code></td></tr></tbody></table><hr><h3 id="六、docker-学习路径建议" tabindex="-1"><a class="header-anchor" href="#六、docker-学习路径建议"><span>六、Docker 学习路径建议</span></a></h3><ol><li><p>入门阶段</p><ul><li>学习 Docker 核心概念（镜像、容器、仓库）。</li><li>掌握常用命令（<code>run</code>, <code>build</code>, <code>ps</code>, <code>exec</code>）。</li><li>实践：在本地部署一个简单的 Web 应用（如 Nginx）。</li></ul></li><li><p>进阶阶段</p><ul><li>编写 Dockerfile 自定义镜像（优化层缓存、多阶段构建）。</li><li>使用 Docker Compose 管理多容器应用（如同时启动 Web + 数据库）。</li><li>学习容器网络与存储配置。</li></ul></li><li><p>生产级实践</p><ul><li>结合 Kubernetes 管理容器集群。</li><li>实施镜像安全扫描（如 Trivy）和镜像仓库权限管理。</li></ul></li></ol><hr><h3 id="七、推荐学习资源" tabindex="-1"><a class="header-anchor" href="#七、推荐学习资源"><span>七、推荐学习资源</span></a></h3><ol><li><p>官方文档</p><ul><li><a href="https://docs.docker.com/" target="_blank" rel="noopener noreferrer">Docker 官方文档</a>：最权威的入门指南和 API 参考。</li></ul></li><li><p>书籍</p><ul><li>《Docker 实践（第2版）》：适合从入门到进阶的实战案例。</li></ul></li><li><p>在线实验</p><ul><li><a href="https://labs.play-with-docker.com/" target="_blank" rel="noopener noreferrer">Play with Docker</a>：免费在线沙箱环境，无需本地安装。</li><li><a href="https://www.katacoda.com/courses/docker" target="_blank" rel="noopener noreferrer">Katacoda Docker 场景教程</a>：交互式学习。</li></ul></li></ol><hr><h3 id="八、为什么-docker-是云原生的基石" tabindex="-1"><a class="header-anchor" href="#八、为什么-docker-是云原生的基石"><span>八、为什么 Docker 是云原生的基石？</span></a></h3><ul><li>标准化：容器镜像成为应用交付的“标准单位”。</li><li>可移植性：一次构建，可在物理机、虚拟机、公有云、混合云中运行。</li><li>生态集成：与 Kubernetes、Prometheus 等云原生工具无缝协作。</li></ul><p>掌握 Docker 是进入云原生领域的必经之路，建议从动手实践开始，逐步深入容器化技术的核心原理与应用场景！</p><h2 id="docker-解决了什么问题-类似的技术还有哪些-优缺点-对比一下" tabindex="-1"><a class="header-anchor" href="#docker-解决了什么问题-类似的技术还有哪些-优缺点-对比一下"><span>Docker 解决了什么问题？ 类似的技术还有哪些？优缺点，对比一下</span></a></h2><h3 id="docker-解决了什么问题" tabindex="-1"><a class="header-anchor" href="#docker-解决了什么问题"><span>Docker 解决了什么问题？</span></a></h3><p>Docker 的核心价值在于通过容器化技术解决传统软件开发和部署中的多个痛点，具体包括以下问题：</p><h4 id="_1-环境一致性问题" tabindex="-1"><a class="header-anchor" href="#_1-环境一致性问题"><span>1. 环境一致性问题</span></a></h4><p>传统开发中，开发、测试、生产环境因操作系统、依赖库版本差异导致“在我机器上能运行，但线上报错”的问题。Docker 将应用及其依赖打包为标准化容器镜像，确保跨环境的一致性。例如，Java 应用的 JDK 版本、Python 的第三方库均可通过镜像固化，避免环境差异导致的故障。</p><h4 id="_2-部署效率低与迁移成本高" tabindex="-1"><a class="header-anchor" href="#_2-部署效率低与迁移成本高"><span>2. 部署效率低与迁移成本高</span></a></h4><p>传统虚拟机部署需数分钟至数小时，且镜像体积庞大（通常 GB 级）。Docker 容器启动仅需秒级，镜像大小可压缩至 MB 级，支持快速迁移和弹性扩缩容。例如，某电商平台通过容器化将部署时间从小时级缩短至分钟级。</p><h4 id="_3-资源浪费与运维复杂" tabindex="-1"><a class="header-anchor" href="#_3-资源浪费与运维复杂"><span>3. 资源浪费与运维复杂</span></a></h4><p>虚拟机需独占硬件资源（如 CPU、内存），而 Docker 容器共享主机内核，资源利用率提升 90% 以上，单机可运行上千容器。例如，某金融企业通过容器替代虚拟机，服务器成本降低 60%。</p><h4 id="_4-微服务与持续交付的支撑" tabindex="-1"><a class="header-anchor" href="#_4-微服务与持续交付的支撑"><span>4. 微服务与持续交付的支撑</span></a></h4><p>Docker 的轻量级特性使其成为微服务架构的理想载体，每个服务独立部署、扩展。结合 CI/CD 工具（如 Jenkins、GitLab），实现自动化测试与发布。例如，某团队通过 Docker + Kubernetes 实现每日数百次代码部署。</p><h4 id="_5-跨平台与混合云兼容性" tabindex="-1"><a class="header-anchor" href="#_5-跨平台与混合云兼容性"><span>5. 跨平台与混合云兼容性</span></a></h4><p>Docker 镜像可在物理机、虚拟机、公有云（AWS、Azure）及边缘设备（如 K3s）中无缝运行，支持混合云部署。例如，某教育机构将本地应用迁移至阿里云，仅需调整容器编排策略，无需修改代码。</p><hr><h3 id="类似技术有哪些-其优缺点对比" tabindex="-1"><a class="header-anchor" href="#类似技术有哪些-其优缺点对比"><span>类似技术有哪些？其优缺点对比</span></a></h3><h4 id="_1-传统虚拟机-vmware、virtualbox" tabindex="-1"><a class="header-anchor" href="#_1-传统虚拟机-vmware、virtualbox"><span>1. 传统虚拟机（VMware、VirtualBox）</span></a></h4><ul><li>优点： <ul><li>强隔离性：每个 VM 拥有独立内核和硬件虚拟化层，安全性更高。</li><li>跨操作系统支持：可运行与宿主机不同架构的操作系统（如 Windows 宿主机运行 Linux VM）。</li></ul></li><li>缺点： <ul><li>资源占用高：每个 VM 需分配固定资源（CPU、内存），利用率低。</li><li>启动速度慢：需启动完整操作系统，通常耗时分钟级。</li></ul></li><li>适用场景：需强安全隔离（如金融核心系统）、运行异构操作系统。</li></ul><h4 id="_2-podman-无守护进程容器引擎" tabindex="-1"><a class="header-anchor" href="#_2-podman-无守护进程容器引擎"><span>2. Podman（无守护进程容器引擎）</span></a></h4><ul><li>优点： <ul><li>无守护进程：无需 root 权限运行，安全性优于 Docker。</li><li>兼容性：支持 Docker 镜像和命令，可无缝替换。</li></ul></li><li>缺点： <ul><li>生态成熟度低：工具链和社区支持不如 Docker 完善。</li></ul></li><li>适用场景：对安全性要求高的企业环境。</li></ul><h4 id="_3-lxc-lxd-linux-容器" tabindex="-1"><a class="header-anchor" href="#_3-lxc-lxd-linux-容器"><span>3. LXC/LXD（Linux 容器）</span></a></h4><ul><li>优点： <ul><li>接近原生性能：直接使用宿主机内核，资源损耗极低。</li><li>轻量级：容器体积小，启动速度快。</li></ul></li><li>缺点： <ul><li>功能单一：缺乏 Docker 的镜像管理、编排等高级功能。</li></ul></li><li>适用场景：需轻量级虚拟化的 Linux 环境。</li></ul><h4 id="_4-rkt-coreos-容器引擎" tabindex="-1"><a class="header-anchor" href="#_4-rkt-coreos-容器引擎"><span>4. rkt（CoreOS 容器引擎）</span></a></h4><ul><li>优点： <ul><li>安全性：支持 SELinux 和 TPM 硬件加密。</li><li>标准化：符合 OCI（开放容器倡议）规范。</li></ul></li><li>缺点： <ul><li>市场占有率低：已被 Kubernetes 弃用，逐渐退出主流。</li></ul></li><li>适用场景：历史遗留项目或特定安全需求场景。</li></ul><hr><h3 id="技术对比表格" tabindex="-1"><a class="header-anchor" href="#技术对比表格"><span>技术对比表格</span></a></h3><table><thead><tr><th>技术</th><th>启动速度</th><th>资源占用</th><th>隔离性</th><th>跨平台支持</th><th>典型应用场景</th></tr></thead><tbody><tr><td>Docker</td><td>秒级</td><td>极低</td><td>进程级隔离</td><td>支持（需相同内核）</td><td>微服务、CI/CD、混合云</td></tr><tr><td>虚拟机</td><td>分钟级</td><td>高</td><td>硬件级隔离</td><td>完全支持异构 OS</td><td>金融核心系统、异构环境</td></tr><tr><td>Podman</td><td>秒级</td><td>极低</td><td>进程级隔离</td><td>同 Docker</td><td>安全敏感型企业容器化</td></tr><tr><td>LXC</td><td>秒级</td><td>极低</td><td>进程级隔离</td><td>仅 Linux</td><td>Linux 轻量级虚拟化</td></tr></tbody></table><hr><h3 id="总结与选型建议" tabindex="-1"><a class="header-anchor" href="#总结与选型建议"><span>总结与选型建议</span></a></h3><ol><li><p>优先选择 Docker 的场景：</p><ul><li>需要快速部署、高资源利用率的微服务架构。</li><li>开发测试环境需高度一致性的项目。</li><li>云原生应用（如 Kubernetes 集群）。</li></ul></li><li><p>选择虚拟机的场景：</p><ul><li>强安全隔离需求（如医疗数据隔离）。</li><li>运行异构操作系统（如 Windows 应用）。</li></ul></li><li><p>其他技术的补充角色：</p><ul><li>Podman 适合对 Docker 守护进程安全性有顾虑的场景。</li><li>LXC 可用于 Linux 环境下的极简虚拟化需求。</li></ul></li></ol><p>通过上述对比，Docker 在效率、生态和标准化方面的优势使其成为容器化的主流选择，但在隔离性和跨 OS 支持上的短板仍需结合虚拟机或其他技术补充。</p><p>未来随着 Serverless 和边缘计算的发展，Docker 的轻量级特性将进一步释放潜力。</p><h2 id="详细介绍一下-docker-的核心概念" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-docker-的核心概念"><span>详细介绍一下 docker 的核心概念</span></a></h2><p>以下是 Docker 核心概念的详细解析，涵盖其定义、工作原理及实际应用中的关键点：</p><hr><h3 id="一、-镜像-image" tabindex="-1"><a class="header-anchor" href="#一、-镜像-image"><span>一、 镜像（Image）</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><ul><li>镜像是 Docker 的静态模板，包含运行应用所需的所有文件、配置和依赖（如操作系统、代码、库、环境变量等）。</li><li>镜像采用分层存储（Layer）机制，每一层对应 Dockerfile 中的一条指令，通过联合文件系统（UnionFS）叠加为完整的文件系统。</li></ul><h4 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h4><ol><li>只读性：镜像一旦构建完成便不可修改，只能通过生成新层覆盖旧内容。</li><li>可复用性：镜像可被共享、版本化（通过 Tag 标记）和重复使用。</li><li>轻量化：通过复用公共层（如基础镜像），大幅减少存储占用。</li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><ul><li>基础镜像：如 <code>alpine:3.18</code>（仅 5MB）、<code>ubuntu:22.04</code>。</li><li>应用镜像：如 <code>nginx:latest</code>（预装 Nginx 的镜像）、自定义的 <code>my-app:v1.0</code>。</li></ul><h4 id="镜像构建工具" tabindex="-1"><a class="header-anchor" href="#镜像构建工具"><span>镜像构建工具</span></a></h4><ul><li>Dockerfile：定义镜像构建步骤的脚本文件，支持多阶段构建（Multi-stage Build）以优化体积。<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例：构建一个 Python 应用的镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> python:3.9-slim  # 基础镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app          # 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requirements.txt .  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install -r requirements.txt  # 安装依赖（生成新层）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .              # 复制代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8000           # 声明端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;gunicorn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;app:app&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  # 启动命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="二、-容器-container" tabindex="-1"><a class="header-anchor" href="#二、-容器-container"><span>二、 容器（Container）</span></a></h3><h4 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h4><ul><li>容器是镜像的运行时实例，类似于一个轻量级沙箱，提供独立的环境运行应用。</li><li>容器通过 Linux 内核的 Namespace（隔离进程、网络等资源）和 Cgroups（限制 CPU、内存等）实现资源隔离。</li></ul><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h4><ol><li>创建：<code>docker create</code> 创建容器但不启动。</li><li>启动：<code>docker start</code> 或直接 <code>docker run</code>（创建+启动）。</li><li>运行：执行镜像中定义的命令（如 <code>CMD</code> 或 <code>ENTRYPOINT</code>）。</li><li>停止：<code>docker stop</code>（优雅终止）或 <code>docker kill</code>（强制终止）。</li><li>删除：<code>docker rm</code> 删除已停止的容器。</li></ol><h4 id="关键操作" tabindex="-1"><a class="header-anchor" href="#关键操作"><span>关键操作</span></a></h4><ul><li>进入容器：<code>docker exec -it bash</code>（交互式终端）。</li><li>查看日志：<code>docker logs </code>。</li><li>资源监控：<code>docker stats</code> 查看实时 CPU/内存使用。</li></ul><hr><h3 id="三、-仓库-registry" tabindex="-1"><a class="header-anchor" href="#三、-仓库-registry"><span>三、 仓库（Registry）</span></a></h3><h4 id="定义-2" tabindex="-1"><a class="header-anchor" href="#定义-2"><span>定义</span></a></h4><ul><li>仓库是存储和分发镜像的平台，分为公共仓库（如 Docker Hub）和私有仓库（如 Harbor、AWS ECR）。</li><li>镜像通过 <code>仓库名/镜像名:标签</code> 标识，例如 <code>docker.io/nginx:1.25</code>。</li></ul><h4 id="核心功能" tabindex="-1"><a class="header-anchor" href="#核心功能"><span>核心功能</span></a></h4><ol><li>推送镜像：<code>docker push my-registry.com/my-app:v1.0</code>。</li><li>拉取镜像：<code>docker pull my-registry.com/my-app:v1.0</code>。</li><li>版本管理：通过标签区分不同版本（如 <code>latest</code>、<code>v1.0</code>）。</li></ol><h4 id="私有仓库部署示例-harbor" tabindex="-1"><a class="header-anchor" href="#私有仓库部署示例-harbor"><span>私有仓库部署示例（Harbor）</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 Docker Compose 启动 Harbor</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="四、dockerfile" tabindex="-1"><a class="header-anchor" href="#四、dockerfile"><span>四、Dockerfile</span></a></h3><h4 id="定义-3" tabindex="-1"><a class="header-anchor" href="#定义-3"><span>定义</span></a></h4><ul><li>Dockerfile 是构建镜像的指令文件，每条指令对应镜像的一个层（Layer）。</li><li>通过优化指令顺序（如合并 <code>RUN</code> 命令）可减少镜像层数，提升构建效率。</li></ul><h4 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h4><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>FROM</code></td><td>指定基础镜像（如 <code>FROM alpine:3.18</code>）。</td></tr><tr><td><code>COPY</code>/<code>ADD</code></td><td>复制文件到镜像（<code>ADD</code> 支持自动解压）。</td></tr><tr><td><code>RUN</code></td><td>执行命令（如 <code>RUN apt-get update &amp;&amp; apt-get install -y curl</code>）。</td></tr><tr><td><code>ENV</code></td><td>设置环境变量（如 <code>ENV APP_PORT=8000</code>）。</td></tr><tr><td><code>EXPOSE</code></td><td>声明容器运行时监听的端口（需与 <code>docker run -p</code> 映射配合生效）。</td></tr><tr><td><code>CMD</code>/<code>ENTRYPOINT</code></td><td>指定容器启动命令（<code>CMD</code> 可被覆盖，<code>ENTRYPOINT</code> 通常用于固定命令）。</td></tr></tbody></table><hr><h3 id="五、docker-compose" tabindex="-1"><a class="header-anchor" href="#五、docker-compose"><span>五、Docker Compose</span></a></h3><h4 id="定义-4" tabindex="-1"><a class="header-anchor" href="#定义-4"><span>定义</span></a></h4><ul><li>Docker Compose 用于定义和运行多容器应用，通过 YAML 文件（<code>docker-compose.yml</code>）管理服务依赖、网络和存储。</li><li>支持一键启动/停止所有服务，适合本地开发环境。</li></ul><h4 id="示例-启动-web-redis-服务" tabindex="-1"><a class="header-anchor" href="#示例-启动-web-redis-服务"><span>示例：启动 Web + Redis 服务</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3.8&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  web</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx:latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;80:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./html:/usr/share/nginx/html</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis:alpine</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">redis-data:/data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">volumes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  redis-data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h4><ul><li><code>docker-compose up -d</code>：后台启动服务。</li><li><code>docker-compose down</code>：停止并删除容器。</li><li><code>docker-compose logs -f</code>：查看实时日志。</li></ul><hr><h3 id="六、docker-网络" tabindex="-1"><a class="header-anchor" href="#六、docker-网络"><span>六、Docker 网络</span></a></h3><h4 id="网络模式" tabindex="-1"><a class="header-anchor" href="#网络模式"><span>网络模式</span></a></h4><ol><li>Bridge（默认） ：容器通过虚拟网桥与宿主机通信，适合单机多容器互联。</li><li>Host：容器直接使用宿主机的网络命名空间，性能高但端口冲突风险大。</li><li>Overlay：跨主机的容器通信（用于 Docker Swarm 或 Kubernetes 集群）。</li><li>None：禁用网络，适用于特殊场景。</li></ol><h4 id="自定义网络示例" tabindex="-1"><a class="header-anchor" href="#自定义网络示例"><span>自定义网络示例</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建自定义网络</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-network</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动容器并加入网络</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-network</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="七、docker-存储" tabindex="-1"><a class="header-anchor" href="#七、docker-存储"><span>七、Docker 存储</span></a></h3><h4 id="数据持久化方式" tabindex="-1"><a class="header-anchor" href="#数据持久化方式"><span>数据持久化方式</span></a></h4><ol><li>Bind Mount：将宿主机目录挂载到容器（如 <code>-v /宿主机路径:/容器路径</code>）。</li><li>Volume：由 Docker 管理的持久化存储（如 <code>-v my-volume:/容器路径</code>）。</li><li>tmpfs：内存临时存储，适用于敏感数据（如 <code>--tmpfs /容器路径</code>）。</li></ol><h4 id="示例-使用-volume-保存数据库数据" tabindex="-1"><a class="header-anchor" href="#示例-使用-volume-保存数据库数据"><span>示例：使用 Volume 保存数据库数据</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建 Volume</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql-data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动 MySQL 并挂载 Volume</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql-data:/var/lib/mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">123456</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql:8.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="总结-docker-核心概念的关系" tabindex="-1"><a class="header-anchor" href="#总结-docker-核心概念的关系"><span>总结：Docker 核心概念的关系</span></a></h3><ol><li>镜像是静态模板，通过 Dockerfile 定义。</li><li>容器是镜像的运行实例，依赖 网络 和 存储 与外界交互。</li><li>仓库用于镜像的分发与协作。</li><li>Docker Compose 简化多容器应用的编排。</li></ol><p>通过掌握这些概念，开发者可以高效构建、部署和管理容器化应用，实现环境一致性与快速交付。</p><h2 id="docker-如何本地打包一个最简单的-java-spring-boot-镜像-从头开始" tabindex="-1"><a class="header-anchor" href="#docker-如何本地打包一个最简单的-java-spring-boot-镜像-从头开始"><span>Docker 如何本地打包一个最简单的 Java spring boot 镜像，从头开始</span></a></h2><h3 id="docker-本地打包-java-spring-boot-镜像完整指南" tabindex="-1"><a class="header-anchor" href="#docker-本地打包-java-spring-boot-镜像完整指南"><span>Docker 本地打包 Java Spring Boot 镜像完整指南</span></a></h3><hr><h4 id="一、准备工作" tabindex="-1"><a class="header-anchor" href="#一、准备工作"><span>一、准备工作</span></a></h4><ol><li><p>创建 Spring Boot 项目</p><ul><li>使用 <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">Spring Initializr</a> 生成一个最简单的 Web 项目，选择 Maven/Gradle 和 Java 版本（推荐 Java 17+）。</li><li>添加一个 REST 接口用于测试：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DemoController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello Docker!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>打包为可执行 JAR</p><ul><li><p>在项目根目录执行构建命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Maven</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DskipTests</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Gradle</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./gradlew</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bootJar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>生成的 JAR 文件位于 <code>target/*.jar</code>（Maven）或 <code>build/libs/*.jar</code>（Gradle）(().</p></li></ul></li></ol><hr><h4 id="二、编写-dockerfile" tabindex="-1"><a class="header-anchor" href="#二、编写-dockerfile"><span>二、编写 Dockerfile</span></a></h4><ol><li><p>基础镜像选择</p><ul><li>使用官方 OpenJDK 镜像作为基础（推荐 <code>eclipse-temurin:17-jre-jammy</code>，体积约 150MB）：<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eclipse-temurin:17-jre-jammy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>优化镜像结构</p><ul><li>采用分层构建策略（Spring Boot 2.3+ 支持分层 JAR）：<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ARG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> JAR_FILE=target/*.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \${JAR_FILE} app.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> java -Djarmode=layertools -jar app.jar extract</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=extract dependencies/ ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=extract snapshot-dependencies/ ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=extract spring-boot-loader/ ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=extract application/ ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.springframework.boot.loader.JarLauncher&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p>此方法可将镜像体积减少 30% 以上，并加速构建过程(.</p><ol start="3"><li>简化版 Dockerfile（适合快速上手）<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 阶段1：构建 JAR</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maven:3.8.6-eclipse-temurin-17 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builder</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mvn package -DskipTests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 阶段2：运行环境</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eclipse-temurin:17-jre-jammy</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=builder /app/target/*.jar app.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;app.jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h4 id="三、构建与运行镜像" tabindex="-1"><a class="header-anchor" href="#三、构建与运行镜像"><span>三、构建与运行镜像</span></a></h4><ol><li><p>构建 Docker 镜像</p><ul><li><p>将 Dockerfile 与 JAR 文件置于同一目录，执行构建命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spring-boot-demo:1.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>查看镜像信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> images</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spring-boot-demo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>启动容器</p><ul><li><p>运行容器并映射端口：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:8080</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> demo-app</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spring-boot-demo:1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>验证服务：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://localhost:8080/hello</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出：Hello Docker!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><hr><h4 id="四、进阶优化技巧" tabindex="-1"><a class="header-anchor" href="#四、进阶优化技巧"><span>四、进阶优化技巧</span></a></h4><ol><li><p>多阶段构建（减小镜像体积）</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建阶段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> maven:3.8.6 </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> build</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pom.xml .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mvn dependency:go-offline</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> src/ ./src/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mvn package -DskipTests</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行阶段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eclipse-temurin:17-jre-alpine</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --from=build /app/target/*.jar app.jar</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;app.jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Alpine 镜像体积仅 80MB，适合生产环境(.</li></ul></li><li><p>使用 Jib 插件（无需 Dockerfile）<br> 在 <code>pom.xml</code> 中添加插件配置：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  com.google.cloud.tools</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  jib-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  3.3.1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      spring-boot-demo:jib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接构建镜像：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> compile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jib:dockerBuild</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>环境变量注入</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SPRING_PROFILES_ACTIVE=prod</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> JAVA_OPTS=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-Xmx512m -Xms256m&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sh&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java \${JAVA_OPTS} -jar app.jar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h4 id="五、常见问题排查" tabindex="-1"><a class="header-anchor" href="#五、常见问题排查"><span>五、常见问题排查</span></a></h4><table><thead><tr><th>问题现象</th><th>解决方案</th></tr></thead><tbody><tr><td>镜像构建失败</td><td>检查 Dockerfile 路径是否正确，确保 JAR 文件存在(</td></tr><tr><td>容器启动后立即退出</td><td>添加 <code>-d</code> 参数后台运行，或检查日志：<code>docker logs demo-app</code></td></tr><tr><td>端口冲突</td><td>修改映射端口：<code>-p 8090:8080</code></td></tr><tr><td>时区不一致</td><td>添加时区配置：<code>-e TZ=Asia/Shanghai</code></td></tr></tbody></table><hr><h4 id="六、最佳实践总结" tabindex="-1"><a class="header-anchor" href="#六、最佳实践总结"><span>六、最佳实践总结</span></a></h4><ol><li><p>镜像分层原则</p><ul><li>高频变更层（如应用代码）放在上层，低频变更层（如依赖库）放在下层(.</li></ul></li><li><p>安全建议</p><ul><li>使用非 root 用户运行容器：<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> adduser -D appuser &amp;&amp; chown -R appuser /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">USER</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> appuser</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>CI/CD 集成</p><ul><li>在 GitLab CI 中配置自动化流水线：<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">build-image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">build</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker build -t registry.example.com/myapp:$CI_COMMIT_SHA .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">docker push registry.example.com/myapp:$CI_COMMIT_SHA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><hr><p>通过以上步骤，您已掌握从零开始构建 Spring Boot Docker 镜像的核心方法。建议优先使用多阶段构建和分层 JAR 技术优化生产环境镜像，同时结合 Jib 等工具实现更高效的云原生部署。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zhuanlan.zhihu.com/p/27327515233" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/27327515233</a></p>`,149)]))}const p=s(n,[["render",h]]),k=JSON.parse('{"path":"/posts/Learn/2025-03-12-skill-tree-web3-or-ai-21-learn-cloud-native-docker.html","title":"AI-21-cloud native 云原生之 docker","lang":"zh-CN","frontmatter":{"title":"AI-21-cloud native 云原生之 docker","date":"2025-03-07T00:00:00.000Z","categories":["Learn"],"tags":["native-cloud","learn","sh"],"published":true,"description":"web3 大家好，我是老马。 今天我们聊一下未来3到5年值得学习的方向。 小结 希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。 我是老马，期待与你的下次相遇。 chat 介绍一下 docker 一、Docker 是什么？ Docker 是一个轻量级容器化平台，允许开发者将应用及其依赖打包成一个标准化的、可移植的“容器”，并可在任何支持 Dock...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Learn/2025-03-12-skill-tree-web3-or-ai-21-learn-cloud-native-docker.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"AI-21-cloud native 云原生之 docker"}],["meta",{"property":"og:description","content":"web3 大家好，我是老马。 今天我们聊一下未来3到5年值得学习的方向。 小结 希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。 我是老马，期待与你的下次相遇。 chat 介绍一下 docker 一、Docker 是什么？ Docker 是一个轻量级容器化平台，允许开发者将应用及其依赖打包成一个标准化的、可移植的“容器”，并可在任何支持 Dock..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"native-cloud"}],["meta",{"property":"article:tag","content":"learn"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-03-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AI-21-cloud native 云原生之 docker\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":14.96,"words":4489},"filePathRelative":"posts/Learn/2025-03-12-skill-tree-web3-or-ai-21-learn-cloud-native-docker.md","localizedDate":"2025年3月7日","excerpt":"<h2>web3</h2>\\n<p>大家好，我是老马。</p>\\n<p>今天我们聊一下未来3到5年值得学习的方向。</p>\\n<h2>小结</h2>\\n<p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p>\\n<p>我是老马，期待与你的下次相遇。</p>\\n<hr>\\n<h1>chat</h1>\\n<h2>介绍一下 docker</h2>\\n<h3>一、Docker 是什么？</h3>\\n<p>Docker 是一个轻量级容器化平台，允许开发者将应用及其依赖打包成一个标准化的、可移植的“容器”，并可在任何支持 Docker 的环境中运行。<br>\\n它与传统虚拟机的最大区别在于：</p>\\n<ul>\\n<li>虚拟机（VM） ：需要完整的操作系统，资源占用大（如 VMware、VirtualBox）。</li>\\n<li>Docker 容器：共享主机操作系统内核，仅打包应用和依赖，启动快、资源占用极低。</li>\\n</ul>","autoDesc":true}');export{p as comp,k as data};
