import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-uJE4P3e0.js";const r={};function o(p,e){return i(),a("div",null,e[0]||(e[0]=[n('<h1 id="domain-driven-design" tabindex="-1"><a class="header-anchor" href="#domain-driven-design"><span>Domain-Driven Design</span></a></h1><p>DDD 就是领域驱动设计（Domain-Driven Design）。</p><h2 id="架构发展阶段" tabindex="-1"><a class="header-anchor" href="#架构发展阶段"><span>架构发展阶段</span></a></h2><p>服务器后端发展三个阶段：</p><ul><li><p>UI+DataBase的两层架构，这种面向数据库的架构(上图table module )没有灵活性。</p></li><li><p>UI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难于维护拓展，伸缩性能差</p></li><li><p>DDD+SOA的事件驱动的CQRS读写分离架构，应付复杂业务逻辑，以聚合模型替代数据表模型，以并发的事件驱动替代串联的消息驱动。真正实现以业务实体为核心的灵活拓展。</p></li></ul><h2 id="ddd-革命性" tabindex="-1"><a class="header-anchor" href="#ddd-革命性"><span>DDD 革命性</span></a></h2><p>领域模型<strong>准确反映了业务语言</strong>，而传统J2EE或Spring+Hibernate等事务性编程模型只关心数据，<br> 这些数据对象除了简单 setter/getter 方法外，没有任何业务方法，被比喻成失血模型，<br> 那么领域模型这种带有业务方法的充血模型到底好在哪里？</p><h2 id="ddd-最大的好处" tabindex="-1"><a class="header-anchor" href="#ddd-最大的好处"><span>DDD 最大的好处</span></a></h2><p>接触到需求第一步就是考虑领域模型，而不是将其切割成数据和行为，然后数据用数据库实现，<br> 行为使用服务实现，最后造成需求的首肢分离。<br> DDD让你首先考虑的是业务语言，而不是数据。</p><p>重点不同导致编程世界观不同。</p><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://www.jianshu.com/p/b6ec06d6b594" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/b6ec06d6b594</a></p>',12)]))}const D=t(r,[["render",o]]),l=JSON.parse('{"path":"/posts/Design/2018-06-23-ddd.html","title":"DDD","lang":"zh-CN","frontmatter":{"title":"DDD","date":"2018-06-23T00:00:00.000Z","categories":["Design"],"tags":["design","sh"],"published":true,"description":"Domain-Driven Design DDD 就是领域驱动设计（Domain-Driven Design）。 架构发展阶段 服务器后端发展三个阶段： UI+DataBase的两层架构，这种面向数据库的架构(上图table module )没有灵活性。 UI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Design/2018-06-23-ddd.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"DDD"}],["meta",{"property":"og:description","content":"Domain-Driven Design DDD 就是领域驱动设计（Domain-Driven Design）。 架构发展阶段 服务器后端发展三个阶段： UI+DataBase的两层架构，这种面向数据库的架构(上图table module )没有灵活性。 UI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DDD\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.24,"words":371},"filePathRelative":"posts/Design/2018-06-23-ddd.md","localizedDate":"2018年6月23日","excerpt":"\\n<p>DDD 就是领域驱动设计（Domain-Driven Design）。</p>\\n<h2>架构发展阶段</h2>\\n<p>服务器后端发展三个阶段：</p>\\n<ul>\\n<li>\\n<p>UI+DataBase的两层架构，这种面向数据库的架构(上图table\\tmodule )没有灵活性。</p>\\n</li>\\n<li>\\n<p>UI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难于维护拓展，伸缩性能差</p>\\n</li>\\n<li>\\n<p>DDD+SOA的事件驱动的CQRS读写分离架构，应付复杂业务逻辑，以聚合模型替代数据表模型，以并发的事件驱动替代串联的消息驱动。真正实现以业务实体为核心的灵活拓展。</p>\\n</li>\\n</ul>","autoDesc":true}');export{D as comp,l as data};
