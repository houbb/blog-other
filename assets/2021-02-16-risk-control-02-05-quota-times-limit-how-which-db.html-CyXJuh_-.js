import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-uJE4P3e0.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h1><p>所有的业务系统中。</p><p>都需要哦对交易中的用户的交易金额+交易次数进行限制。</p><p>本质：一定的时间维度，对指定的用户的指定类别的信息进行统计。如果超过一定的次数，则进行拦截（处罚）。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="表结构的拓展" tabindex="-1"><a class="header-anchor" href="#表结构的拓展"><span>表结构的拓展</span></a></h2><p>分布式系统中，如何实现限额限次信息的累加？</p><p>你会选择那种数据库？</p><p>mysql redis mongodb 还是时序数据库 vm 之类的，为什么？</p><p>在分布式系统中实现交易风控的限额限次信息累加，需要结合高并发处理能力、数据一致性和扩展性需求。</p><p>以下是具体实现方法及数据库选型的详细分析：</p><hr><h3 id="一、交易风控限额限次信息累加的常见实现方法" tabindex="-1"><a class="header-anchor" href="#一、交易风控限额限次信息累加的常见实现方法"><span>一、交易风控限额限次信息累加的常见实现方法</span></a></h3><h4 id="_1-计数器模式" tabindex="-1"><a class="header-anchor" href="#_1-计数器模式"><span>1. 计数器模式</span></a></h4><ul><li><p>固定窗口计数<br> 通过Redis的<code>INCR</code>命令和<code>TTL</code>特性，对每个用户或交易类型的请求次数进行累加。当时间窗口（如1分钟）结束时自动重置。<br> 示例代码片段：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用Redis的原子性INCR和EXPIRE命令</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> redisTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">opsForValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    redisTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key, windowSeconds, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maxCount) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 拒绝请求</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用资料指出，此方法简单但存在窗口边界流量突增问题（如最后一秒集中请求）。</p></li><li><p>滑动窗口计数<br> 利用Redis的<code>ZSET</code>结构存储请求时间戳，通过<code>ZREMRANGEBYSCORE</code>和<code>ZCARD</code>动态维护窗口内的请求数。<br> 示例流程：</p><ol><li>将当前时间戳加入有序集合；</li><li>删除窗口外的旧时间戳；</li><li>统计剩余元素数量，若超过阈值则限流。<br> 此方法更精确但复杂度较高，适用于对实时性要求极高的场景。</li></ol></li></ul><h4 id="_2-漏桶与令牌桶算法" tabindex="-1"><a class="header-anchor" href="#_2-漏桶与令牌桶算法"><span>2. 漏桶与令牌桶算法</span></a></h4><ul><li><p>令牌桶算法<br> 通过Redis的<code>Lua脚本</code>实现原子化操作：每个请求需获取令牌，令牌按固定速率生成。若令牌不足则拒绝请求。<br> 优势：平滑流量，避免突发流量冲击。示例代码：</p><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tokens</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">tonumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;get&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) or </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tokens</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;= </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;decr&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>资料显示，Lua脚本保证操作的原子性，适合分布式环境。</p></li></ul><h4 id="_3-分布式锁与一致性保障" tabindex="-1"><a class="header-anchor" href="#_3-分布式锁与一致性保障"><span>3. 分布式锁与一致性保障</span></a></h4><ul><li>使用<code>Redisson</code>或<code>Etcd</code>实现分布式锁，确保对同一用户的风控校验串行化，避免并发导致计数错误。</li><li>例如，在金融交易场景中，通过锁机制保证余额更新和订单处理的唯一性。</li></ul><hr><h3 id="二、数据库选型对比分析" tabindex="-1"><a class="header-anchor" href="#二、数据库选型对比分析"><span>二、数据库选型对比分析</span></a></h3><h4 id="_1-redis" tabindex="-1"><a class="header-anchor" href="#_1-redis"><span>1. Redis</span></a></h4><ul><li>优势 <ul><li>高性能：内存操作达到微秒级响应，适合高并发场景。每秒可处理百万级请求。</li><li>原子性支持：通过<code>INCR</code>、<code>Lua脚本</code>等保证计数逻辑的准确性。</li><li>灵活数据结构：<code>STRING</code>（计数器）、<code>ZSET</code>（滑动窗口）、<code>HASH</code>（多维度限流）满足多种需求。</li><li>分布式特性：支持集群部署，实现全局统一的限流策略。</li></ul></li><li>适用场景<br> 实时限流、短时间窗口的计数（如秒级/分钟级风控）、高频读写操作。</li><li>局限性<br> 数据持久化依赖RDB/AOF，不适合长期存储；复杂查询能力较弱。</li></ul><h4 id="_2-mysql" tabindex="-1"><a class="header-anchor" href="#_2-mysql"><span>2. MySQL</span></a></h4><ul><li>优势 <ul><li>事务支持：通过ACID特性保证数据一致性，适合需强一致性的场景（如账户余额校验）。</li><li>复杂查询：支持多表联查和聚合，适合生成风控报表或历史数据分析。</li></ul></li><li>局限性 <ul><li>高并发性能瓶颈：默认连接模型导致线程竞争，需通过连接池、读写分离优化。</li><li>写入延迟：行级锁在高并发写入时可能升级为表锁，影响吞吐量。</li></ul></li><li>适用场景<br> 低频但需复杂事务或持久化存储的场景（如风控规则配置、审计日志）。</li></ul><h4 id="_3-mongodb" tabindex="-1"><a class="header-anchor" href="#_3-mongodb"><span>3. MongoDB</span></a></h4><ul><li>优势 <ul><li>时序集合优化：自动创建时间索引、支持数据压缩和过期策略，适合存储交易流水。</li><li>聚合框架：通过<code>$match</code>、<code>$group</code>等管道操作实现复杂时间窗口分析（如日累计限额）。</li></ul></li><li>局限性 <ul><li>实时性不足：写入性能低于Redis，不适合毫秒级限流。</li><li>内存消耗：大数据集下索引占用较多资源。</li></ul></li><li>适用场景<br> 长期存储交易流水、多维度的历史数据分析（如用户行为模式挖掘）。</li></ul><h4 id="_4-时序数据库-如victoriametrics" tabindex="-1"><a class="header-anchor" href="#_4-时序数据库-如victoriametrics"><span>4. 时序数据库（如VictoriaMetrics）</span></a></h4><ul><li>优势 <ul><li>高效存储与查询：针对时间序列数据优化压缩算法，存储成本仅为传统数据库的1/10。</li><li>高扩展性：支持水平分片和自动负载均衡，适合海量数据（如每秒百万级交易）。</li><li>实时监控集成：与Grafana等工具无缝对接，支持风控预警和可视化。</li></ul></li><li>局限性 <ul><li>功能单一：专注于时序数据，缺乏事务和复杂查询能力。</li><li>学习成本：需熟悉PromQL类查询语言。</li></ul></li><li>适用场景<br> 长期存储交易时序数据、实时监控异常模式（如高频交易检测）。</li></ul><hr><h3 id="三、综合选型建议" tabindex="-1"><a class="header-anchor" href="#三、综合选型建议"><span>三、综合选型建议</span></a></h3><ol><li><p>实时限流与高频计数<br> 首选Redis：利用其原子性、低延迟和分布式特性，结合Lua脚本实现滑动窗口或令牌桶算法。<br> 示例架构：Redis集群 + 哨兵模式（高可用） + 本地缓存（二级降级）。</p></li><li><p>持久化存储与复杂分析</p><ul><li>短期数据：Redis + MySQL（持久化备份）。</li><li>长期时序数据：VictoriaMetrics + MongoDB（多维分析）。</li></ul></li><li><p>混合方案</p><ul><li>实时计数：Redis处理限流；</li><li>流水存储：VictoriaMetrics记录时间序列；</li><li>规则配置与报表：MySQL/MongoDB管理。</li></ul></li></ol><hr><h3 id="四、性能对比表" tabindex="-1"><a class="header-anchor" href="#四、性能对比表"><span>四、性能对比表</span></a></h3><table><thead><tr><th>数据库</th><th>写入性能</th><th>查询性能</th><th>一致性</th><th>扩展性</th><th>适用场景</th></tr></thead><tbody><tr><td>Redis</td><td>极高（微秒级）</td><td>高（简单查询）</td><td>最终一致</td><td>水平扩展</td><td>实时限流、高频计数</td></tr><tr><td>MySQL</td><td>中（毫秒级）</td><td>中（复杂查询）</td><td>强一致</td><td>垂直扩展</td><td>事务处理、报表生成</td></tr><tr><td>MongoDB</td><td>高（毫秒级）</td><td>高（聚合分析）</td><td>最终一致</td><td>水平扩展</td><td>时序数据存储、多维分析</td></tr><tr><td>Victoria</td><td>极高（亚毫秒）</td><td>极高（时序查询）</td><td>最终一致</td><td>水平扩展</td><td>海量时序数据监控</td></tr></tbody></table><hr><h3 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h3><ul><li>Redis是实时风控限流的首选，兼顾性能与原子性。</li><li>时序数据库（如VictoriaMetrics）和MongoDB适合长期存储与分析。</li><li>MySQL在事务和复杂查询场景仍有价值，但需通过架构优化（如分库分表）弥补高并发短板。</li><li>混合架构（Redis + VictoriaMetrics + MySQL）可平衡实时性、持久化和分析需求。</li></ul><h2 id="混合架构模型" tabindex="-1"><a class="header-anchor" href="#混合架构模型"><span>混合架构模型</span></a></h2><h1 id="分布式系统限额限次累加方案设计与数据库选型" tabindex="-1"><a class="header-anchor" href="#分布式系统限额限次累加方案设计与数据库选型"><span>分布式系统限额限次累加方案设计与数据库选型</span></a></h1><h2 id="核心挑战分析" tabindex="-1"><a class="header-anchor" href="#核心挑战分析"><span>核心挑战分析</span></a></h2><p>在分布式系统中实现限额限次累加，面临三大核心挑战：</p><ol><li>原子性：高并发下的精确累加</li><li>一致性：跨节点数据同步</li><li>实时性：毫秒级响应要求</li></ol><h2 id="数据库选型对比" tabindex="-1"><a class="header-anchor" href="#数据库选型对比"><span>数据库选型对比</span></a></h2><table><thead><tr><th>数据库</th><th>原子累加能力</th><th>分布式支持</th><th>实时性能</th><th>适用场景</th><th>局限性</th></tr></thead><tbody><tr><td>Redis</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td><td>实时计数、滑动窗口限流</td><td>持久化弱、内存限制</td></tr><tr><td>MySQL</td><td>⭐⭐</td><td>⭐⭐</td><td>⭐⭐</td><td>最终一致性存储、核心数据</td><td>高并发下性能瓶颈</td></tr><tr><td>MongoDB</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>文档存储、灵活扩展</td><td>事务支持有限</td></tr><tr><td>时序数据库</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td><td>时间窗口聚合分析</td><td>实时更新能力弱</td></tr></tbody></table><h2 id="混合架构设计方案" tabindex="-1"><a class="header-anchor" href="#混合架构设计方案"><span>混合架构设计方案</span></a></h2><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    A[API Gateway] --&gt; B[实时累加层]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B --&gt; C[Redis Cluster]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B --&gt; D[本地缓存]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    A --&gt; E[规则引擎]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    E --&gt; F[MySQL]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    E --&gt; G[配置中心]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    C --&gt; H[异步持久化]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    H --&gt; I[MySQL]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    H --&gt; J[时序数据库]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    I --&gt; K[对账服务]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    J --&gt; L[分析服务]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-实时累加层-redis核心方案" tabindex="-1"><a class="header-anchor" href="#_1-实时累加层-redis核心方案"><span>1. 实时累加层（Redis核心方案）</span></a></h3><p>选择原因：</p><ul><li>原子操作：<code>INCRBY</code>/<code>HINCRBY</code> 实现无锁累加</li><li>高性能：10万+ OPS 处理能力</li><li>丰富数据结构：满足各类限额场景</li></ul><p>数据结构设计：</p><h4 id="a-基础计数器-日-月限额" tabindex="-1"><a class="header-anchor" href="#a-基础计数器-日-月限额"><span>a) 基础计数器（日/月限额）</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 键设计：LIMIT:{周期}:{目标}:{周期标识}</span></span>
<span class="line"><span>HINCRBY LIMIT:DAILY:MER001 20240610 used_amount 150.00</span></span>
<span class="line"><span>HINCRBY LIMIT:DAILY:MER001 20240610 used_count 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-滑动窗口限流-实时限次" tabindex="-1"><a class="header-anchor" href="#b-滑动窗口限流-实时限次"><span>b) 滑动窗口限流（实时限次）</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 使用Sorted Set实现滑动窗口</span></span>
<span class="line"><span>ZADD RATE_LIMIT:MER001 1717315200000 &quot;TRACE-001&quot;</span></span>
<span class="line"><span>ZREMRANGEBYSCORE RATE_LIMIT:MER001 -inf (1717315200000-60000) # 移除60秒外数据</span></span>
<span class="line"><span>ZCARD RATE_LIMIT:MER001 # 获取当前计数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-分布式锁实现" tabindex="-1"><a class="header-anchor" href="#c-分布式锁实现"><span>c) 分布式锁实现</span></a></h4><div class="language-lua line-numbers-mode" data-highlighter="shiki" data-ext="lua" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- Lua脚本保证原子性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">KEYS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> limit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">tonumber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ARGV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;GET&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) or </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">limit</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;INCRBY&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    redis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;EXPIRE&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-持久化层-mysql核心存储" tabindex="-1"><a class="header-anchor" href="#_2-持久化层-mysql核心存储"><span>2. 持久化层（MySQL核心存储）</span></a></h3><p>选择原因：</p><ul><li>ACID事务保障</li><li>成熟的分库分表方案</li><li>强大的查询分析能力</li></ul><p>分片策略：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 按商户ID分片</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> limit_usage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">BIGINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    target_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 商户/用户ID</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    period_type ENUM(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;DAY&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;MONTH&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    period_key </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 20240610</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    used_amount </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DECIMAL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    used_count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    last_updated </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">TIMESTAMP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (id),</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    UNIQUE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> idx_target_period (target_id, period_type, period_key)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InnoDB </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PARTITION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> BY</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> HASH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(MOD(target_id, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PARTITIONS </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-异步同步机制" tabindex="-1"><a class="header-anchor" href="#_3-异步同步机制"><span>3. 异步同步机制</span></a></h3><div class="language-mermaid line-numbers-mode" data-highlighter="shiki" data-ext="mermaid" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant R as Redis</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant Q as Message Queue</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant DB as MySQL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    participant TS as 时序数据库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    R-&gt;&gt;Q: 发布变更事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Q-&gt;&gt;DB: 批量写入MySQL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Q-&gt;&gt;TS: 写入时序数据库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DB-&gt;&gt;TS: 定时对账</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补偿设计：</p><ol><li>每小时全量快照：<code>BGSAVE</code> + S3存储</li><li>双写日志：所有操作写入Kafka</li><li>每日对账：Redis vs MySQL vs 时序数据库</li></ol><h3 id="_4-时序数据库-victoriametrics-辅助" tabindex="-1"><a class="header-anchor" href="#_4-时序数据库-victoriametrics-辅助"><span>4. 时序数据库（VictoriaMetrics）辅助</span></a></h3><p>适用场景：</p><ul><li>历史趋势分析</li><li>动态阈值计算</li><li>异常检测</li></ul><p>数据模型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>limit_usage{target=&quot;MER001&quot;, period=&quot;daily&quot;} 150.00</span></span>
<span class="line"><span>limit_usage{target=&quot;MER001&quot;, period=&quot;monthly&quot;} 4500.00</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>价值：</p><ul><li>动态调整限额：<code>max(avg_over_time(usage[7d]) * 1.5, base_limit)</code></li><li>预测性限制：基于时间序列预测未来峰值</li></ul><h2 id="关键问题解决方案" tabindex="-1"><a class="header-anchor" href="#关键问题解决方案"><span>关键问题解决方案</span></a></h2><h3 id="_1-精确累加问题" tabindex="-1"><a class="header-anchor" href="#_1-精确累加问题"><span>1. 精确累加问题</span></a></h3><ul><li>Redis方案：Lua脚本原子执行</li><li>MySQL方案：\`UPDATE ... SET used = used + ? WHERE id = ? AND used + ? RedisAccumulate<br> RedisAccumulate --&gt; MQPersist: 发布事件<br> MQPersist --&gt; MySQLUpdate: 批量更新<br> MySQLUpdate --&gt; CheckConsistency: 完成<br> CheckConsistency --&gt; [*]: 成功<br> CheckConsistency --&gt; Repair: 发现不一致<br> Repair --&gt; RedisSync: 数据修复</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>### 3. 热点Key处理</span></span>
<span class="line"><span>- 分片策略：</span></span>
<span class="line"><span>  \`\`\`java</span></span>
<span class="line"><span>  // 商户ID分片</span></span>
<span class="line"><span>  int shard = Math.abs(merId.hashCode() % 1024);</span></span>
<span class="line"><span>  String redisKey = &quot;LIMIT:&quot; + shard + &quot;:&quot; + merId;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>本地缓存：Guava Cache + 短时失效（1秒）</li><li>延迟加载：首次访问时初始化</li></ul><h3 id="_4-容灾设计" tabindex="-1"><a class="header-anchor" href="#_4-容灾设计"><span>4. 容灾设计</span></a></h3><ul><li>多级降级： <ol><li>Redis集群主从切换</li><li>本地缓存限流</li><li>MySQL直接操作（性能降级）</li></ol></li><li>数据恢复：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从RDB恢复后增量回放</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">redis-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --pipe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 99%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 请求</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 持久化：MySQL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 保障数据安全</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 智能分析：时序数据库优化规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>典型性能指标：</p><ul><li>请求延迟：&lt;5ms (P99)</li><li>吞吐量：10万+ TPS</li><li>数据一致性：秒级最终一致</li></ul><p>该方案结合了各数据库优势，通过分层架构解决了分布式环境下限额累加的三大核心挑战，同时为智能限额提供了数据分析基础。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,84)]))}const k=s(e,[["render",t]]),r=JSON.parse('{"path":"/posts/Biz/2021-02-16-risk-control-02-05-quota-times-limit-how-which-db.html","title":"风控限额限次系统设计-05-分布式系统中，选择哪种数据源实现限额限次信息的累加？","lang":"zh-CN","frontmatter":{"title":"风控限额限次系统设计-05-分布式系统中，选择哪种数据源实现限额限次信息的累加？","date":"2021-02-14T00:00:00.000Z","categories":["BIZ"],"tags":["biz","risk","sh"],"published":true,"description":"说明 所有的业务系统中。 都需要哦对交易中的用户的交易金额+交易次数进行限制。 本质：一定的时间维度，对指定的用户的指定类别的信息进行统计。如果超过一定的次数，则进行拦截（处罚）。 chat 表结构的拓展 分布式系统中，如何实现限额限次信息的累加？ 你会选择那种数据库？ mysql redis mongodb 还是时序数据库 vm 之类的，为什么？ 在...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Biz/2021-02-16-risk-control-02-05-quota-times-limit-how-which-db.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"风控限额限次系统设计-05-分布式系统中，选择哪种数据源实现限额限次信息的累加？"}],["meta",{"property":"og:description","content":"说明 所有的业务系统中。 都需要哦对交易中的用户的交易金额+交易次数进行限制。 本质：一定的时间维度，对指定的用户的指定类别的信息进行统计。如果超过一定的次数，则进行拦截（处罚）。 chat 表结构的拓展 分布式系统中，如何实现限额限次信息的累加？ 你会选择那种数据库？ mysql redis mongodb 还是时序数据库 vm 之类的，为什么？ 在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"biz"}],["meta",{"property":"article:tag","content":"risk"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"风控限额限次系统设计-05-分布式系统中，选择哪种数据源实现限额限次信息的累加？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.07,"words":3022},"filePathRelative":"posts/Biz/2021-02-16-risk-control-02-05-quota-times-limit-how-which-db.md","localizedDate":"2021年2月14日","excerpt":"\\n<p>所有的业务系统中。</p>\\n<p>都需要哦对交易中的用户的交易金额+交易次数进行限制。</p>\\n<p>本质：一定的时间维度，对指定的用户的指定类别的信息进行统计。如果超过一定的次数，则进行拦截（处罚）。</p>\\n<h1>chat</h1>\\n<h2>表结构的拓展</h2>\\n<p>分布式系统中，如何实现限额限次信息的累加？</p>\\n<p>你会选择那种数据库？</p>\\n<p>mysql redis mongodb 还是时序数据库 vm 之类的，为什么？</p>\\n<p>在分布式系统中实现交易风控的限额限次信息累加，需要结合高并发处理能力、数据一致性和扩展性需求。</p>\\n<p>以下是具体实现方法及数据库选型的详细分析：</p>","autoDesc":true}');export{k as comp,r as data};
