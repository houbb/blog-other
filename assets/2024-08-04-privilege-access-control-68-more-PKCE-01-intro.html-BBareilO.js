import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as r}from"./app-CEDSurVN.js";const i={};function p(l,e){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-pkce-proof-key-for-code-exchange" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-pkce-proof-key-for-code-exchange"><span>详细介绍一下 PKCE（Proof Key for Code Exchange）</span></a></h2><p>PKCE（Proof Key for Code Exchange）是一种安全机制，用于增强OAuth 2.0授权流程的安全性，特别是在公共客户端（如移动设备或单页面应用程序）上。</p><p>PKCE是为了解决在这些环境下客户端密钥可能无法安全存储的问题而设计的。</p><p>以下是PKCE的关键概念和组成部分：</p><ol><li><p><strong>授权码授权类型</strong>：PKCE主要用于OAuth 2.0的授权码授权类型（Authorization Code Grant）。</p></li><li><p><strong>一次性代码验证器</strong>：在PKCE流程中，客户端首先生成一个随机的代码验证器（code verifier），并将其传递给授权服务器以请求授权码。</p></li><li><p><strong>授权码请求</strong>：客户端在请求授权码时，会同时发送一个代码挑战（code challenge）和代码挑战方法（code challenge method）。代码挑战是代码验证器的哈希值，而代码挑战方法通常使用SHA-256算法。</p></li><li><p><strong>交换授权码</strong>：用户授权后，授权服务器会返回一个授权码。客户端随后使用这个授权码请求访问令牌（access token）。</p></li><li><p><strong>访问令牌请求</strong>：在请求访问令牌时，客户端需要再次发送代码验证器。这确保了请求访问令牌的实体是最初请求授权码的同一实体。</p></li><li><p><strong>验证代码验证器</strong>：授权服务器接收到访问令牌请求后，会验证代码验证器是否与之前请求授权码时接收的代码挑战匹配。如果匹配，授权服务器将发放访问令牌。</p></li><li><p><strong>安全性</strong>：PKCE机制通过使用一次性的代码验证器和代码挑战，减少了授权码被拦截和重用的风险。</p></li><li><p><strong>无状态特性</strong>：PKCE不要求授权服务器存储客户端密钥，因为每次请求都会附带代码验证器，这使得授权服务器可以是无状态的。</p></li><li><p><strong>适用场景</strong>：PKCE特别适用于那些无法安全存储客户端密钥的场景，例如在用户的设备上运行的应用程序。</p></li><li><p><strong>标准支持</strong>：PKCE被定义在RFC 7636中，是OAuth 2.0的正式扩展。</p></li></ol><p>PKCE的工作流程如下：</p><ol><li><p>客户端生成一个代码验证器（<code>code_verifier</code>），并使用安全的方法（如SHA-256）生成其哈希值，得到代码挑战（<code>code_challenge</code>）。</p></li><li><p>客户端向授权服务器请求授权码，附带<code>code_challenge</code>和<code>code_challenge_method</code>（通常是&quot;S256&quot;）。</p></li><li><p>用户同意授权后，授权服务器返回授权码给客户端。</p></li><li><p>客户端使用授权码、<code>code_verifier</code>和客户端凭据向授权服务器请求访问令牌。</p></li><li><p>授权服务器验证<code>code_verifier</code>是否与之前接收的<code>code_challenge</code>匹配。如果验证成功，授权服务器发放访问令牌。</p></li></ol><p>通过PKCE，即使在客户端密钥可能被泄露的情况下，也能保护OAuth 2.0流程的安全性。</p><h2 id="除了-pkce-还有哪些-oauth-2-0-的安全机制可以提高授权流程的安全性" tabindex="-1"><a class="header-anchor" href="#除了-pkce-还有哪些-oauth-2-0-的安全机制可以提高授权流程的安全性"><span>除了 PKCE，还有哪些 OAuth 2.0 的安全机制可以提高授权流程的安全性？</span></a></h2><p>除了PKCE，OAuth 2.0 还提供了其他一些安全机制来提高授权流程的安全性：</p><ol><li><p><strong>State参数</strong>：在OAuth 2.0的授权码模式中，客户端在请求授权时会发送一个<code>state</code>参数，服务器在重定向时会将这个参数原样返回。这可以用来防御CSRF攻击，确保请求的来源是可信的。</p></li><li><p><strong>Redirect URI白名单</strong>：在授权服务器上配置Redirect URI白名单，只允许客户端在这些URI中进行重定向，这可以防止开放重定向攻击。</p></li><li><p><strong>Scope校验</strong>：授权服务器需要验证请求的作用域（scope）是否与授权请求中的作用域一致，以防止攻击者在授权过程中添加额外的作用域来获取更多的权限。</p></li><li><p><strong>HTTPS使用</strong>：OAuth 2.0 强烈建议使用HTTPS来保护客户端与授权服务器之间的通信，以防止中间人攻击。</p></li><li><p><strong>Client ID和Client Secret的绑定关系校验</strong>：授权服务器需要严格校验<code>client_id</code>和<code>auth_code</code>的绑定关系，以防止授权码被其他用户窃取后申请到访问令牌。</p></li><li><p><strong>跨站图片或XSS漏洞防护</strong>：除了OAuth 2.0本身的安全机制外，还需要防护可能结合XSS等漏洞的攻击，确保OAuth流程的安全性。</p></li><li><p><strong>令牌的短时效性</strong>：OAuth 2.0提供的访问令牌（access token）通常具有较短的有效期，这减少了令牌被盗用的风险。</p></li><li><p><strong>刷新令牌（Refresh Token）</strong>：OAuth 2.0 允许使用刷新令牌来获取新的访问令牌，而无需用户重新授权，这增加了灵活性并减少了用户需要频繁登录的不便。</p></li><li><p><strong>授权类型（Grant Types）</strong>：OAuth 2.0定义了多种授权类型，如授权码授权、密码授权、客户端凭据授权等，适应不同的使用场景并提供相应的安全措施。</p></li><li><p><strong>使用OAuth 2.0的安全最佳实践</strong>：例如，对于纯前端应用，可以使用implicit模式，但对于有后端的应用，则推荐使用authorization code模式，并在后端服务器之间进行token的交换，以避免敏感信息泄露。</p></li></ol><p>通过这些安全机制，OAuth 2.0 能够在多种应用场景中提供安全、灵活的授权服务。</p>',13)]))}const a=o(i,[["render",p]]),g=JSON.parse('{"path":"/posts/Design/2024-08-04-privilege-access-control-68-more-PKCE-01-intro.html","title":"privilege-68-PKCE（Proof Key for Code Exchange）","lang":"zh-CN","frontmatter":{"title":"privilege-68-PKCE（Proof Key for Code Exchange）","date":"2024-08-04T00:00:00.000Z","categories":["Design"],"tags":["design","privilege","sh"],"published":true,"description":"chat 详细介绍一下 PKCE（Proof Key for Code Exchange） PKCE（Proof Key for Code Exchange）是一种安全机制，用于增强OAuth 2.0授权流程的安全性，特别是在公共客户端（如移动设备或单页面应用程序）上。 PKCE是为了解决在这些环境下客户端密钥可能无法安全存储的问题而设计的。 以下是P...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Design/2024-08-04-privilege-access-control-68-more-PKCE-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"privilege-68-PKCE（Proof Key for Code Exchange）"}],["meta",{"property":"og:description","content":"chat 详细介绍一下 PKCE（Proof Key for Code Exchange） PKCE（Proof Key for Code Exchange）是一种安全机制，用于增强OAuth 2.0授权流程的安全性，特别是在公共客户端（如移动设备或单页面应用程序）上。 PKCE是为了解决在这些环境下客户端密钥可能无法安全存储的问题而设计的。 以下是P..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"privilege"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2024-08-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"privilege-68-PKCE（Proof Key for Code Exchange）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.71,"words":1412},"filePathRelative":"posts/Design/2024-08-04-privilege-access-control-68-more-PKCE-01-intro.md","localizedDate":"2024年8月4日","excerpt":"\\n<h2>详细介绍一下 PKCE（Proof Key for Code Exchange）</h2>\\n<p>PKCE（Proof Key for Code Exchange）是一种安全机制，用于增强OAuth 2.0授权流程的安全性，特别是在公共客户端（如移动设备或单页面应用程序）上。</p>\\n<p>PKCE是为了解决在这些环境下客户端密钥可能无法安全存储的问题而设计的。</p>\\n<p>以下是PKCE的关键概念和组成部分：</p>\\n<ol>\\n<li>\\n<p><strong>授权码授权类型</strong>：PKCE主要用于OAuth 2.0的授权码授权类型（Authorization Code Grant）。</p>\\n</li>\\n<li>\\n<p><strong>一次性代码验证器</strong>：在PKCE流程中，客户端首先生成一个随机的代码验证器（code verifier），并将其传递给授权服务器以请求授权码。</p>\\n</li>\\n<li>\\n<p><strong>授权码请求</strong>：客户端在请求授权码时，会同时发送一个代码挑战（code challenge）和代码挑战方法（code challenge method）。代码挑战是代码验证器的哈希值，而代码挑战方法通常使用SHA-256算法。</p>\\n</li>\\n<li>\\n<p><strong>交换授权码</strong>：用户授权后，授权服务器会返回一个授权码。客户端随后使用这个授权码请求访问令牌（access token）。</p>\\n</li>\\n<li>\\n<p><strong>访问令牌请求</strong>：在请求访问令牌时，客户端需要再次发送代码验证器。这确保了请求访问令牌的实体是最初请求授权码的同一实体。</p>\\n</li>\\n<li>\\n<p><strong>验证代码验证器</strong>：授权服务器接收到访问令牌请求后，会验证代码验证器是否与之前请求授权码时接收的代码挑战匹配。如果匹配，授权服务器将发放访问令牌。</p>\\n</li>\\n<li>\\n<p><strong>安全性</strong>：PKCE机制通过使用一次性的代码验证器和代码挑战，减少了授权码被拦截和重用的风险。</p>\\n</li>\\n<li>\\n<p><strong>无状态特性</strong>：PKCE不要求授权服务器存储客户端密钥，因为每次请求都会附带代码验证器，这使得授权服务器可以是无状态的。</p>\\n</li>\\n<li>\\n<p><strong>适用场景</strong>：PKCE特别适用于那些无法安全存储客户端密钥的场景，例如在用户的设备上运行的应用程序。</p>\\n</li>\\n<li>\\n<p><strong>标准支持</strong>：PKCE被定义在RFC 7636中，是OAuth 2.0的正式扩展。</p>\\n</li>\\n</ol>","autoDesc":true}');export{a as comp,g as data};
