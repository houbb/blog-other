import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const h={};function l(t,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h3 id="_6-模块" tabindex="-1"><a class="header-anchor" href="#_6-模块"><span>6. 模块</span></a></h3><p>当你退出Python解释器并再次进入时，你所定义的（函数和变量）都会丢失。因此，如果你想编写一个稍微长一点的程序，最好使用文本编辑器准备解释器的输入，然后以该文件作为输入运行它。这被称为创建一个脚本。随着你的程序变得越来越长，你可能想把它分成几个文件以便更容易维护。</p><p>你可能还想使用你在几个程序中编写的一个方便的函数，而不是将其定义复制到每个程序中。</p><p>为了支持这一点，Python有一种方式可以将定义放在一个文件中，并在脚本或解释器的交互实例中使用它们。这样的文件被称为模块；模块中的定义可以被导入到其他模块或主模块（在顶级执行的脚本和计算器模式中可以访问的变量集合）中。</p><p>一个模块是一个包含Python定义和语句的文件。文件名是模块名加上后缀<code>.py</code>。在模块内部，模块的名字（作为一个字符串）可以作为全局变量<code>__name__</code>的值。例如，使用你最喜欢的文本编辑器在当前目录下创建一个名为<code>fibo.py</code>的文件，内容如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fibonacci numbers module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># write Fibonacci series up to n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这并不直接将在<code>fibo</code>中定义的函数的名称添加到当前命名空间（详见Python作用域和命名空间以获取更多详细信息）；它只在那里添加模块名<code>fibo</code>。使用模块名你可以访问函数：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 144</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 233</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 377</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 610</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 987</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">21</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">34</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">55</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">89</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__name__</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;fibo&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你打算经常使用一个函数，你可以将它赋值给一个本地名称：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.fib</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 144</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 233</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 377</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-模块的更多内容" tabindex="-1"><a class="header-anchor" href="#_6-1-模块的更多内容"><span>6.1. 模块的更多内容</span></a></h3><p>一个模块可以包含可执行的语句以及函数定义。这些语句旨在初始化模块。它们只在第一次在导入语句中遇到模块名时执行。[1]（如果文件作为脚本执行，它们也会运行。）</p><p>每个模块都有自己的私有命名空间，这个命名空间被所有在模块中定义的函数用作全局命名空间。因此，模块的作者可以在模块中使用全局变量，而不必担心与用户的全局变量的意外冲突。另一方面，如果你知道你在做什么，你可以使用相同的表示法触摸模块的全局变量，就像引用它的函数一样，<code>modname.itemname</code>。</p><p>模块可以导入其他模块。习惯上但不是必需的，将所有导入语句放在模块（或脚本，说到底）的开始。如果导入的模块名放在模块的顶级（在任何函数或类之外），它们会被添加到模块的全局命名空间。</p><p>还有一种从模块直接导入名称到导入模块的命名空间的导入语句的变体。例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib, fib2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 144</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 233</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 377</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这不会在本地命名空间中引入从中取得导入的模块名（所以在这个例子中，<code>fibo</code>没有被定义）。</p><p>还有一个变体，导入模块定义的所有名称：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 144</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 233</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 377</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这导入除了以下划线（_）开头的名称之外的所有名称。在大多数情况下，Python程序员不使用这个设施，因为它引入了一组未知的名称到解释器中，可能隐藏了你已经定义的一些东西。</p><p>请注意，通常不赞成从模块或包中导入*，因为它经常导致代码难以阅读。但是，在交互式会话中使用它来节省输入是可以的。</p><p>如果模块名后跟<code>as</code>，那么<code>as</code>后面的名字直接绑定到导入的模块。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 144</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 233</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 377</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这实际上是以与<code>import fibo</code>相</p><p>同的方式导入模块，唯一的区别是它作为<code>fib</code>可用。</p><p>在使用<code>from</code>时也可以这样做：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibonacci</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> fibonacci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 55</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 144</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 233</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 377</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-1-作为脚本执行模块" tabindex="-1"><a class="header-anchor" href="#_6-1-1-作为脚本执行模块"><span>6.1.1. 作为脚本执行模块</span></a></h3><p>当你运行一个Python模块时：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fibo.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>模块中的代码将被执行，就像你导入它一样，但<code>__name__</code>设置为<code>&quot;__main__&quot;</code>。这意味着通过在你的模块末尾添加这段代码：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;__main__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys.argv[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使文件既可用作脚本也可用作可导入的模块，因为只有当模块作为“主”文件执行时，解析命令行的代码才会运行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fibo.py</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 13</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 34</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果模块被导入，代码不会运行：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这经常用于为模块提供一个方便的用户界面，或者用于测试目的（作为脚本运行模块会执行一个测试套件）。</p><h3 id="_6-1-2-模块搜索路径" tabindex="-1"><a class="header-anchor" href="#_6-1-2-模块搜索路径"><span>6.1.2. 模块搜索路径</span></a></h3><p>当一个名为<code>spam</code>的模块被导入时，解释器首先搜索具有该名称的内置模块。这些模块名称列在<code>sys.builtin_module_names</code>中。如果没有找到，它然后在由变量<code>sys.path</code>给出的目录列表中搜索名为<code>spam.py</code>的文件。<code>sys.path</code>从这些位置初始化：</p><ul><li>包含输入脚本的目录（或没有指定文件时的当前目录）。</li><li><code>PYTHONPATH</code>（目录名称列表，与shell变量<code>PATH</code>的语法相同）。</li><li>安装特定的默认目录（按照惯例包括一个<code>site-packages</code>目录，由<code>site</code>模块处理）。</li></ul><p>更多详细信息请参阅模块搜索路径的初始化。</p><p>请注意，在支持符号链接的文件系统上，计算输入脚本所在的目录是在跟随符号链接之后计算的。换句话说，不会将包含符号链接的目录添加到模块搜索路径中。</p><p>初始化后，Python程序可以修改<code>sys.path</code>。正在运行的脚本所在的目录被放在搜索路径的开始，优先于标准库路径。这意味着该目录中的脚本将被加载，而不是库目录中具有相同名称的模块。除非打算替换，否则这是一个错误。更多信息请参阅标准模块部分。</p><h3 id="_6-1-3-编译-python文件" tabindex="-1"><a class="header-anchor" href="#_6-1-3-编译-python文件"><span>6.1.3. “编译”Python文件</span></a></h3><p>为了加速加载模块，Python将每个模块的编译版本缓存到<code>__pycache__</code>目录下，名称为<code>module.version.pyc</code>，其中版本编码为编译文件的格式；它通常包含Python版本号。例如，在CPython 3.3版本中，<code>spam.py</code>的编译版本将被缓存为<code>__pycache__/spam.cpython-33.pyc</code>。这种命名约定允许来自不同版本和不同Python版本的编译模块共存。</p><p>Python检查源代码的修改日期与编译版本以确定是否过时并需要重新编译。这是一个完全自动的过程。此外，编译的模块是平台无关的，因此可以在具有不同架构的系统之间共享相同的库。</p><p>在两种情况下，Python不会检查缓存。首先，它总是重新编译并不保存直接从命令行加载的模块的结果。其次，如果没有源模块，它不会检查缓存。为了支持非源（仅编译）分发，编译的模块必须位于源目录中，且不能有源模块。</p><p>一些专家提示：</p><p>你可以使用<code>-O</code>或<code>-OO</code>开关在Python命令上来减小编译模块的大小。<code>-O</code>开关删除断言语句，<code>-OO</code>开关删除断言语句和<code>__doc__</code>字符串。由于某些程序可能依赖于这些可用性，你应该只在知道你在做什么时使用此选项。&quot;优化&quot;模块有一个<code>opt-</code>标签，通常较小。未来版本可能会改变优化的效果。</p><p>从<code>.pyc</code>文件读取程序不会比从<code>.py</code>文件读取更快；<code>.pyc</code>文件唯一更快的是它们被加载的速度。</p><p>模块<code>compileall</code>可以为目录中的所有模块创建<code>.pyc</code>文件。</p><p>有关此过程的更多详细信息，包括决策的流程图，请参阅PEP 3147。</p><h3 id="_6-2-标准模块" tabindex="-1"><a class="header-anchor" href="#_6-2-标准模块"><span>6.2. 标准模块</span></a></h3><p>Python 包含了一系列的标准模块库，这些模块在一个单独的文档中有详细描述，即 Python 库参考手册（以下简称“库参考”）。有些模块是内置在解释器中的，它们提供对于语言核心之外的操作的访问，但是仍然是内置的，这可能是为了提高效率或者为了提供对操作系统原语（例如系统调用）的访问。这些模块的集合是一个配置选项，也依赖于底层平台。例如，winreg 模块只在 Windows 系统上提供。</p><p>一个特别值得注意的模块是 sys，它内置在每个 Python 解释器中。变量 sys.ps1 和 sys.ps2 定义了作为主要和次要提示的字符串：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys.ps1)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出 &#39;&gt;&gt;&gt; &#39;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys.ps2)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出 &#39;... &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.ps1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;C&gt; &#39;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Yuck!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出 Yuck!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个变量只在解释器处于交互模式时定义。</p><p>变量 sys.path 是一个字符串列表，决定了解释器对模块的搜索路径。</p><p>它初始化为从环境变量 PYTHONPATH 中获取的默认路径，如果 PYTHONPATH 没有设置，则使用内置的默认路径。你可以使用标准的列表操作来修改它：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/ufs/guido/lib/python&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-dir-函数" tabindex="-1"><a class="header-anchor" href="#_6-3-dir-函数"><span>6.3. dir() 函数</span></a></h3><p>内置函数 dir() 用于查找模块定义的名称。它返回一个排序后的字符串列表：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo, sys</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fibo))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出 [&#39;__name__&#39;, &#39;fib&#39;, &#39;fib2&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出包含 sys 模块中所有名称的列表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有参数，dir() 则列出当前定义的名称：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fib </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.fib</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出包含 &#39;__builtins__&#39;, &#39;__name__&#39;, &#39;a&#39;, &#39;fib&#39;, &#39;fibo&#39;, &#39;sys&#39; 的列表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，它列出了所有类型的名称：变量、模块、函数等。</p><p>dir() 不会列出内置函数和变量的名称。如果你想要这些名称的列表，它们定义在标准模块 builtins 中：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builtins</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(builtins))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出包含所有内置函数和变量的列表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-包-packages" tabindex="-1"><a class="header-anchor" href="#_6-4-包-packages"><span>6.4. 包（Packages）</span></a></h3><p>包是一种通过使用“点分模块名称”来组织 Python 模块命名空间的方式。例如，模块名 A.B 指的是包名为 A 中的子模块 B。就像使用模块可以使不同模块的作者不必担心彼此的全局变量名称一样，使用点分模块名称可以使像 NumPy 或 Pillow 这样的多模块包的作者不必担心彼此的模块名称。</p><p>假设你想设计一个用于统一处理声音文件和声音数据的模块集合（一个“包”）。有许多不同的声音文件格式（通常通过它们的扩展名来识别，例如：.wav、.aiff、.au），所以你可能需要创建和维护一个日益增长的模块集合来进行这些文件格式之间的转换。还有许多你可能想对声音数据执行的操作（如混音、添加回声、应用均衡器函数、创建人造立体效果），所以除此之外，你还会编写一系列模块来执行这些操作。以下是你的包可能的结构（以分层文件系统的形式表示）：</p><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sound/                          顶级包</span></span>
<span class="line"><span>      __init__.py               初始化 sound 包</span></span>
<span class="line"><span>      formats/                  文件格式转换的子包</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              wavread.py</span></span>
<span class="line"><span>              wavwrite.py</span></span>
<span class="line"><span>              aiffread.py</span></span>
<span class="line"><span>              aiffwrite.py</span></span>
<span class="line"><span>              auread.py</span></span>
<span class="line"><span>              auwrite.py</span></span>
<span class="line"><span>              ...</span></span>
<span class="line"><span>      effects/                  声音效果的子包</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              echo.py</span></span>
<span class="line"><span>              surround.py</span></span>
<span class="line"><span>              reverse.py</span></span>
<span class="line"><span>              ...</span></span>
<span class="line"><span>      filters/                  过滤器的子包</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              equalizer.py</span></span>
<span class="line"><span>              vocoder.py</span></span>
<span class="line"><span>              karaoke.py</span></span>
<span class="line"><span>              ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当导入包时，Python 会在 sys.path 上的目录中搜索包子目录。</p><p><code>__init__.py</code> 文件是必需的，使 Python 将包含该文件的目录视为包（除非使用命名空间包，这是一个相对高级的功能）。这可以防止具有常见名称（例如 string）的目录无意中隐藏后续出现的有效模块。在最简单的情况下，<code>__init__.py</code> 可以是一个空文件，但它也可以执行包的初始化代码或设置 <code>__all__</code> 变量，稍后会描述。</p><p>包的用户可以从包中导入单个模块，例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会加载子模块 <code>sound.effects.echo</code>。必须使用其完整名称引用它。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sound.effects.echo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>另一种导入子模块的方法是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这也加载子模块 <code>echo</code>，并使其不带包前缀可用，因此可以这样使用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">echo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>还有另一种变体是直接导入所需的函数或变量：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echofilter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这也加载子模块 <code>echo</code>，但这使得其函数 <code>echofilter()</code> 直接可用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>请注意，当使用 <code>from package import item</code> 时，item 可以是包的子模块（或子包），或者是包中定义的其他名称，如函数、类或变量。导入语句首先测试项目是否在包中定义；如果不是，则假设它是一个模块并尝试加载它。如果找不到它，将引发 ImportError 异常。</p><p>相反，当使用 <code>import item.subitem.subsubitem</code> 这样的语法时，除最后一个外的每个项目必须是一个包；最后一个项目可以是一个模块或包，但不能是在前一个项目中定义的类、函数或变量。</p><h4 id="_6-4-1-从包中导入-importing-from-a-package" tabindex="-1"><a class="header-anchor" href="#_6-4-1-从包中导入-importing-from-a-package"><span>6.4.1. 从包中导入 *（Importing * From a Package）</span></a></h4><p>现在，当用户编写 <code>from sound.effects import *</code> 时会发生什么呢？理想情况下，人们希望这种方法能够从文件系统中找出包中存在的所有子模块，并将它们全部导入。这可能需要很长时间，而且导入子模块可能会产生不希望的副作用，应仅在显式导入子模块时发生。</p><p>唯一的解决方案是包的作者提供一个明确的包索引。导入语句使用以下约定：如果包的 <code>__init__.py</code> 代码定义了一个名为 <code>__all__</code> 的列表，它被认为是遇到 <code>from package import *</code> 时应导入的模块名称列表。当发布包的新版本时，包作者需要保持此列表的最新状态。如果他们认为从他们的包中导入 * 没有用处，他们也可以决定不支持它。例如，文件 <code>sound/effects/__init__.py</code> 可能包含以下代码：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__all__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;echo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;surround&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;reverse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这意味着 <code>from sound.effects import *</code> 将导入 <code>sound.effects</code> 包的三个命名子模块。</p><p>请注意，子模块可能会被本地定义的名称遮蔽。例如，如果你在 <code>sound/effects/__init__.py</code> 文件中添加了一个 <code>reverse</code> 函数，<code>from sound.effects import *</code> 只会导入两个子模块 <code>echo</code> 和 <code>surround</code>，但不会导入 <code>reverse</code> 子模块，因为它被本地定义的 <code>reverse</code> 函数遮蔽了。</p><h4 id="_6-4-2-包内引用-intra-package-references" tabindex="-1"><a class="header-anchor" href="#_6-4-2-包内引用-intra-package-references"><span>6.4.2. 包内引用（Intra-package References）</span></a></h4><p>当包结构化为子包（如示例中的 <code>sound</code></p><p>包）时，你可以使用绝对导入来引用同级包的子模块。例如，如果模块 <code>sound.filters.vocoder</code> 需要使用 <code>sound.effects</code> 包中的 <code>echo</code> 模块，它可以使用 <code>from sound.effects import echo</code>。</p><p>你也可以编写相对导入，使用 <code>from module import name</code> 形式的导入语句。这些导入使用前导点来指示涉及相对导入的当前和父包。例如，在 <code>surround</code> 模块中，你可能会使用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .. </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> formats</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ..filters </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> equalizer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，相对导入是基于当前模块的名称的。由于主模块的名称始终是 <code>&quot;__main__&quot;</code>，用作 Python 应用程序主模块的模块必须始终使用绝对导入。</p><h4 id="_6-4-3-多目录中的包-packages-in-multiple-directories" tabindex="-1"><a class="header-anchor" href="#_6-4-3-多目录中的包-packages-in-multiple-directories"><span>6.4.3. 多目录中的包（Packages in Multiple Directories）</span></a></h4><p>包支持另一个特殊属性 <code>__path__</code>。这初始化为一个列表，该列表包含在执行该文件的代码之前包含包 <code>__init__.py</code> 的目录的名称。这个变量可以被修改；这样做会影响包含在包中的模块和子包的未来搜索。</p><p>虽然这个功能并不经常需要，但它可以用来扩展包中找到的模块集合。</p><h3 id="脚注" tabindex="-1"><a class="header-anchor" href="#脚注"><span>脚注</span></a></h3><p>[1] 实际上，函数定义也是“语句”，它们是“执行”的；模块级函数定义的执行会将函数名称添加到模块的全局命名空间中。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/3.12/tutorial/modules.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/3.12/tutorial/modules.html</a></p>`,107)]))}const d=s(h,[["render",l]]),r=JSON.parse('{"path":"/posts/Lang/2018-02-16-python-learn-v3.12.3-doc-06-modules.html","title":"Python v3.12.3 学习-06-Module","lang":"zh-CN","frontmatter":{"title":"Python v3.12.3 学习-06-Module","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","why-learn","sh"],"published":true,"description":"6. 模块 当你退出Python解释器并再次进入时，你所定义的（函数和变量）都会丢失。因此，如果你想编写一个稍微长一点的程序，最好使用文本编辑器准备解释器的输入，然后以该文件作为输入运行它。这被称为创建一个脚本。随着你的程序变得越来越长，你可能想把它分成几个文件以便更容易维护。 你可能还想使用你在几个程序中编写的一个方便的函数，而不是将其定义复制到每个...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2018-02-16-python-learn-v3.12.3-doc-06-modules.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python v3.12.3 学习-06-Module"}],["meta",{"property":"og:description","content":"6. 模块 当你退出Python解释器并再次进入时，你所定义的（函数和变量）都会丢失。因此，如果你想编写一个稍微长一点的程序，最好使用文本编辑器准备解释器的输入，然后以该文件作为输入运行它。这被称为创建一个脚本。随着你的程序变得越来越长，你可能想把它分成几个文件以便更容易维护。 你可能还想使用你在几个程序中编写的一个方便的函数，而不是将其定义复制到每个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"why-learn"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python v3.12.3 学习-06-Module\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":14.22,"words":4267},"filePathRelative":"posts/Lang/2018-02-16-python-learn-v3.12.3-doc-06-modules.md","localizedDate":"2018年2月14日","excerpt":"<h3>6. 模块</h3>\\n<p>当你退出Python解释器并再次进入时，你所定义的（函数和变量）都会丢失。因此，如果你想编写一个稍微长一点的程序，最好使用文本编辑器准备解释器的输入，然后以该文件作为输入运行它。这被称为创建一个脚本。随着你的程序变得越来越长，你可能想把它分成几个文件以便更容易维护。</p>\\n<p>你可能还想使用你在几个程序中编写的一个方便的函数，而不是将其定义复制到每个程序中。</p>\\n<p>为了支持这一点，Python有一种方式可以将定义放在一个文件中，并在脚本或解释器的交互实例中使用它们。这样的文件被称为模块；模块中的定义可以被导入到其他模块或主模块（在顶级执行的脚本和计算器模式中可以访问的变量集合）中。</p>","autoDesc":true}');export{d as comp,r as data};
