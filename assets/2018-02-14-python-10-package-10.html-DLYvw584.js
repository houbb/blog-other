import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-uJE4P3e0.js";const t={};function p(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h1><p>包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法。</p><p>例如，模块名 A.B 表示 A 包中名为 B 的子模块。正如模块的使用使得不同模块的作者不必担心彼此的全局变量名称一样，使用加点的模块名可以使得 NumPy 或 Pillow 等多模块软件包的作者不必担心彼此的模块名称一样。</p><p>假设你想为声音文件和声音数据的统一处理，设计一个模块集合（一个“包”）。</p><p>由于存在很多不同的声音文件格式（通常由它们的扩展名来识别，例如：.wav， .aiff， .au），因此为了不同文件格式间的转换，你可能需要创建和维护一个不断增长的模块集合。</p><p>你可能还想对声音数据还做很多不同的处理（例如，混声，添加回声，使用均衡器功能，创造人工立体声效果）， 因此为了实现这些处理，你将另外写一个无穷尽的模块流。</p><p>这是你的包的可能结构（以分层文件系统的形式表示）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sound/                          Top-level package</span></span>
<span class="line"><span>      __init__.py               Initialize the sound package</span></span>
<span class="line"><span>      formats/                  Subpackage for file format conversions</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              wavread.py</span></span>
<span class="line"><span>              wavwrite.py</span></span>
<span class="line"><span>              aiffread.py</span></span>
<span class="line"><span>              aiffwrite.py</span></span>
<span class="line"><span>              auread.py</span></span>
<span class="line"><span>              auwrite.py</span></span>
<span class="line"><span>              ...</span></span>
<span class="line"><span>      effects/                  Subpackage for sound effects</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              echo.py</span></span>
<span class="line"><span>              surround.py</span></span>
<span class="line"><span>              reverse.py</span></span>
<span class="line"><span>              ...</span></span>
<span class="line"><span>      filters/                  Subpackage for filters</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              equalizer.py</span></span>
<span class="line"><span>              vocoder.py</span></span>
<span class="line"><span>              karaoke.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="init-py" tabindex="-1"><a class="header-anchor" href="#init-py"><span><a href="http://init.py" target="_blank" rel="noopener noreferrer">init.py</a></span></a></h2><p>当导入这个包时，Python 搜索 sys.path 里的目录，查找包的子目录。</p><p>为了让 Python 将目录当做包，目录中必须包含 <code>__init__.py</code> 文件；</p><p>这样做是为了<strong>防止具有通用名称的目录无意中隐藏稍后在模块搜索路径上出现的有效模块，例如 string。</strong></p><p>最简单的情况下，只需要一个空的 <code>__init__.py</code> 文件即可，当然它也可以执行包的初始化代码，或者定义稍后会介绍的 <code>__all__</code> 变量。</p><p>ps: 对比 java 中的包信息，增加了一定程度的编程复杂度。可能更类似于 <code>package-info.java</code></p><h2 id="包导入" tabindex="-1"><a class="header-anchor" href="#包导入"><span>包导入</span></a></h2><h3 id="单个模块" tabindex="-1"><a class="header-anchor" href="#单个模块"><span>单个模块</span></a></h3><p>包的用户可以从包中导入单个模块，例如:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会加载子模块 sound.effects.echo。但引用它时必须使用它的全名。</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sound.effects.echo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="from-packge-import-module-方式" tabindex="-1"><a class="header-anchor" href="#from-packge-import-module-方式"><span>from packge import module 方式</span></a></h3><p>导入子模块的另一种方法是</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这也会加载子模块 echo ，并使其在没有包前缀的情况下可用，因此可以按如下方式使用:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">echo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="直接导入函数" tabindex="-1"><a class="header-anchor" href="#直接导入函数"><span>直接导入函数</span></a></h3><p>另一种形式是直接导入所需的函数或变量:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echofilter</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样，这也会加载子模块 echo，但这会使其函数 echofilter() 直接可用:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>请注意，当使用 from package import item 时，item可以是包的子模块（或子包），也可以是包中定义的其他名称，如函数，类或变量。</p><p>import 语句首先测试是否在包中定义了item；如果没有，它假定它是一个模块并尝试加载它。如果找不到它，则引发 ImportError 异常。</p><p>相反，当使用 import item.subitem.subsubitem 这样的语法时，除了最后一项之外的每一项都必须是一个包；最后一项可以是模块或包，但不能是前一项中定义的类或函数或变量。</p><h3 id="个人感受" tabindex="-1"><a class="header-anchor" href="#个人感受"><span>个人感受</span></a></h3><p>让一个开发者在调用的时候写全包的引用是非常不友好的。</p><p>如此看来，python 中的 module 就类似于 java 中的类。</p><h2 id="导入" tabindex="-1"><a class="header-anchor" href="#导入"><span>导入 *</span></a></h2><p>当用户写 <code>from sound.effects import *</code> 会发生什么？</p><p>理想情况下，人们希望这会以某种方式传递给文件系统，找到包中存在哪些子模块，并将它们全部导入。</p><p>这可能需要很长时间，导入子模块可能会产生不必要的副作用，这种副作用只有在显式导入子模块时才会发生。</p><h3 id="包的显示索引" tabindex="-1"><a class="header-anchor" href="#包的显示索引"><span>包的显示索引</span></a></h3><p>唯一的解决方案是让包作者提供一个包的显式索引。</p><p>import 语句使用下面的规范：如果一个包的 <code>__init__.py</code> 代码定义了一个名为 <code>__all__</code> 的列表，它会被视为在遇到 from package import * 时应该导入的模块名列表。</p><p>在发布该包的新版本时，包作者可以决定是否让此列表保持更新。包作者如果认为从他们的包中导入 * 的操作没有必要被使用，也可以决定不支持此列表。</p><p>例如，文件 <code>sound/effects/__init__.py</code> 可以包含以下代码:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__all__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;echo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;surround&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;reverse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这意味着 from sound.effects import * 将导入 sound 包的三个命名子模块。</p><p>如果没有定义 <code>__all__</code>，from sound.effects import * 语句不会从包 sound.effects 中导入所有子模块到当前命名空间；</p><p>它只确保导入了包 sound.effects （可能运行任何在 <code>__init__.py</code> 中的初始化代码），然后导入包中定义的任何名称。</p><p>这包括 <code>__init__.py</code> 定义的任何名称（以及显式加载的子模块）。它还包括由之前的 import 语句显式加载的包的任何子模块。</p><p>思考下面的代码:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.surround</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中， echo 和 surround 模块是在执行 from...import 语句时导入到当前命名空间中的，因为它们定义在 sound.effects 包中。</p><p>（这在定义了 <code>__all__</code> 时也有效。）</p><p>虽然某些模块被设计为在使用 import * 时只导出遵循某些模式的名称，但在生产代码中它仍然被认为是不好的做法。</p><p>请记住，使用 from Package import specific_submodule 没有任何问题！</p><p>实际上，除非导入模块需要使用来自不同包的同名子模块，否则这是推荐的表示法。</p><h1 id="子包参考" tabindex="-1"><a class="header-anchor" href="#子包参考"><span>子包参考</span></a></h1><h2 id="绝对导入" tabindex="-1"><a class="header-anchor" href="#绝对导入"><span>绝对导入</span></a></h2><p>当包被构造成子包时（与示例中的 sound 包一样），你可以使用绝对导入来引用兄弟包的子模块。</p><p>例如，如果模块 sound.filters.vocoder 需要在 sound.effects 包中使用 echo 模块，它可以使用 from sound.effects import echo 。</p><h2 id="相对导入" tabindex="-1"><a class="header-anchor" href="#相对导入"><span>相对导入</span></a></h2><p>你还可以使用import语句的 from module import name 形式编写相对导入。</p><p>这些导入使用前导点来指示相对导入中涉及的当前包和父包。</p><p>例如，从 surround 模块，你可以使用:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .. </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> formats</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ..filters </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> equalizer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，相对导入是基于当前模块的名称进行导入的。</p><p>由于主模块的名称总是 <code>&quot;__main__&quot;</code>，因此<strong>用作Python应用程序主模块的模块必须始终使用绝对导入。</strong></p><h2 id="多个目录中的包" tabindex="-1"><a class="header-anchor" href="#多个目录中的包"><span>多个目录中的包</span></a></h2><p>包支持另一个特殊属性， <code>__path__</code>。</p><p>它被初始化为一个列表，其中包含在执行该文件中的代码之前保存包的文件 <code>__init__.py</code> 的目录的名称。</p><p>这个变量可以修改；这样做会影响将来对包中包含的模块和子包的搜索。</p><p>虽然通常不需要此功能，但它可用于扩展程序包中的模块集。</p><h1 id="java-的对比" tabindex="-1"><a class="header-anchor" href="#java-的对比"><span>java 的对比</span></a></h1><h2 id="包的目的" tabindex="-1"><a class="header-anchor" href="#包的目的"><span>包的目的</span></a></h2><p>在设计目的上，二者是一致的。都是为了避免不同的包下相同的模块冲突。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/zh-cn/3/tutorial/modules.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/zh-cn/3/tutorial/modules.html</a></p>`,78)]))}const d=s(t,[["render",p]]),o=JSON.parse('{"path":"/posts/Lang/2018-02-14-python-10-package-10.html","title":"Python-10-package 包","lang":"zh-CN","frontmatter":{"title":"Python-10-package 包","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","sh"],"published":true,"description":"包 包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法。 例如，模块名 A.B 表示 A 包中名为 B 的子模块。正如模块的使用使得不同模块的作者不必担心彼此的全局变量名称一样，使用加点的模块名可以使得 NumPy 或 Pillow 等多模块软件包的作者不必担心彼此的模块名称一样。 假设你想为声音文件和声音数据的统一处理，设计一个...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2018-02-14-python-10-package-10.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python-10-package 包"}],["meta",{"property":"og:description","content":"包 包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法。 例如，模块名 A.B 表示 A 包中名为 B 的子模块。正如模块的使用使得不同模块的作者不必担心彼此的全局变量名称一样，使用加点的模块名可以使得 NumPy 或 Pillow 等多模块软件包的作者不必担心彼此的模块名称一样。 假设你想为声音文件和声音数据的统一处理，设计一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python-10-package 包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.06,"words":1818},"filePathRelative":"posts/Lang/2018-02-14-python-10-package-10.md","localizedDate":"2018年2月14日","excerpt":"\\n<p>包是一种通过用“带点号的模块名”来构造 Python 模块命名空间的方法。</p>\\n<p>例如，模块名 A.B 表示 A 包中名为 B 的子模块。正如模块的使用使得不同模块的作者不必担心彼此的全局变量名称一样，使用加点的模块名可以使得 NumPy 或 Pillow 等多模块软件包的作者不必担心彼此的模块名称一样。</p>\\n<p>假设你想为声音文件和声音数据的统一处理，设计一个模块集合（一个“包”）。</p>\\n<p>由于存在很多不同的声音文件格式（通常由它们的扩展名来识别，例如：.wav， .aiff， .au），因此为了不同文件格式间的转换，你可能需要创建和维护一个不断增长的模块集合。</p>","autoDesc":true}');export{d as comp,o as data};
