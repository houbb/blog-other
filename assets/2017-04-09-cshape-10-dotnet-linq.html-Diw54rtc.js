import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CEDSurVN.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="linq" tabindex="-1"><a class="header-anchor" href="#linq"><span>LINQ</span></a></h1><p><a href="https://msdn.microsoft.com/zh-cn/library/bb397676.aspx" target="_blank" rel="noopener noreferrer">LINQ</a> 是一组技术的名称，这些技术建立在将查询功能直接集成到 C# 语言（以及 Visual Basic 和可能的任何其他 <strong>.NET</strong> 语言）的基础上。<br> 借助于 LINQ，查询现在已是高级语言构造，就如同类、方法、事件等等。</p><p>对于编写查询的开发人员来说，LINQ 最明显的“语言集成”部分是查询表达式。<br> 查询表达式是使用 C# 3.0 中引入的声明性查询语法编写的。 通过使用查询语法，您甚至可以使用最少的代码对数据源执行复杂的筛选、排序和分组操作。<br> 您使用相同的基本查询表达式模式来查询和转换 SQL 数据库、<a href="http://ADO.NET" target="_blank" rel="noopener noreferrer">ADO.NET</a> 数据集、XML 文档和流以及 .NET 集合中的数据。</p><h1 id="查询表达式基础" tabindex="-1"><a class="header-anchor" href="#查询表达式基础"><span>查询表达式基础</span></a></h1><p>一、什么是查询？它有什么用途？</p><p>“查询”是指一组指令，这些指令描述要从一个或多个给定数据源检索的数据以及返回的数据应该使用的格式和组织形式。</p><p>指定此源序列后，查询可以进行下列三项工作之一：</p><ul><li>检索一个元素子集以产生一个新序列，但不修改单个元素。 然后，查询可以按各种方式对返回的序列进行排序或分组。</li></ul><p>如下面的示例所示（假定 scores 是 int[]）：</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IEnumerable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> highScoresQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                from score in </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scores</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                where </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                orderby </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> descending</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                select </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检索一个元素序列，但是将这些元素转换为具有新类型的对象。</li></ul><p>例如，查询可以只从数据源中的某些客户记录检索姓氏。 或者，查询可以检索完整的记录，再使用它构建另一个内存中对象类型甚至 XML 数据，然后生成最终的结果序列。</p><p>下面的示例演示了从 int 到 string 的转换。 请注意 highScoresQuery 的新类型。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IEnumerable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> highScoresQuery2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                from score in </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scores</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                where </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                orderby </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> descending</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                select </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;The score is {0}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检索有关源数据的单一值</li></ul><p>例如：<br> 符合某个条件的元素的数量。<br> 具有最大值或最小值的元素。<br> 符合某个条件的第一个元素，或一组指定元素中的特定值之和。 例如，下面的查询从 scores 整数数组中返回高于 80 的分数的数量。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> highScoreCount</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                (from score in </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scores</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                 where </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                 select </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                 .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上一个示例中，请注意在 Count 方法调用之前的查询表达式两旁使用了括号。</p><p>另一种表示方式是使用一个新变量来存储具体结果。 此技术的可读性更好，因为它将存储查询的变量与存储结果的查询区分开来。</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IEnumerable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> highScoresQuery3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                from score in </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scores</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                where </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                select </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scoreCount</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> highScoresQuery3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上一个示例中，查询是在 Count 调用中执行的，因为 Count 必须循环访问结果以便确定 highScoresQuery 返回的元素数量。</p><p>二、什么是查询表达式？</p><p>查询表达式必须以 <code>from</code> 子句开头，并且必须以 <code>select</code> 或 <code>group</code> 子句结尾。<br> 在第一个 from 子句和最后一个 select 或 group 子句之间，查询表达式可以包含一个或多个下列可选子句：where、orderby、join、let 甚至附加的 from 子句。<br> 还可以使用 into 关键字使 join 或 group 子句的结果能够充当同一查询表达式中附加查询子句的源。</p><blockquote><p>查询变量</p></blockquote><p>在 LINQ 中，查询变量是任何存储查询（而非查询结果）的变量。更具体地说，查询变量始终是一个<strong>可枚举</strong>的类型，当在 foreach 语句中或在对其 IEnumerator.MoveNext 方法的直接调用中循环访问它时，它会生成一序列元素。</p><ul><li>QueryVar();</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//93 90 82 82</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QueryVar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Data source.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scores</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">71</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">82</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">93</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">75</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">82</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Query Expression.</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    IEnumerable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scoreQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //query variable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        from score in </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">scores</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //required</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        where </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        orderby </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> descending </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        select </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//must end with select or group</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Execute the query to produce the results</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> testScore</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> scoreQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        Console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">testScore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const k=i(t,[["render",l]]),d=JSON.parse('{"path":"/posts/Lang/2017-04-09-cshape-10-dotnet-linq.html","title":"LINQ","lang":"zh-CN","frontmatter":{"title":"LINQ","date":"2017-04-09T00:00:00.000Z","categories":["C#"],"tags":["cshape","cshape","lang",".net","dotnet"],"published":true,"description":"LINQ LINQ 是一组技术的名称，这些技术建立在将查询功能直接集成到 C# 语言（以及 Visual Basic 和可能的任何其他 .NET 语言）的基础上。 借助于 LINQ，查询现在已是高级语言构造，就如同类、方法、事件等等。 对于编写查询的开发人员来说，LINQ 最明显的“语言集成”部分是查询表达式。 查询表达式是使用 C# 3.0 中引入的...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2017-04-09-cshape-10-dotnet-linq.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"LINQ"}],["meta",{"property":"og:description","content":"LINQ LINQ 是一组技术的名称，这些技术建立在将查询功能直接集成到 C# 语言（以及 Visual Basic 和可能的任何其他 .NET 语言）的基础上。 借助于 LINQ，查询现在已是高级语言构造，就如同类、方法、事件等等。 对于编写查询的开发人员来说，LINQ 最明显的“语言集成”部分是查询表达式。 查询表达式是使用 C# 3.0 中引入的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"cshape"}],["meta",{"property":"article:tag","content":"cshape"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":".net"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2017-04-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LINQ\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-04-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.49,"words":1047},"filePathRelative":"posts/Lang/2017-04-09-cshape-10-dotnet-linq.md","localizedDate":"2017年4月9日","excerpt":"\\n<p><a href=\\"https://msdn.microsoft.com/zh-cn/library/bb397676.aspx\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LINQ</a> 是一组技术的名称，这些技术建立在将查询功能直接集成到 C# 语言（以及 Visual Basic 和可能的任何其他 <strong>.NET</strong> 语言）的基础上。<br>\\n借助于 LINQ，查询现在已是高级语言构造，就如同类、方法、事件等等。</p>\\n<p>对于编写查询的开发人员来说，LINQ 最明显的“语言集成”部分是查询表达式。<br>\\n查询表达式是使用 C# 3.0 中引入的声明性查询语法编写的。 通过使用查询语法，您甚至可以使用最少的代码对数据源执行复杂的筛选、排序和分组操作。<br>\\n您使用相同的基本查询表达式模式来查询和转换 SQL 数据库、<a href=\\"http://ADO.NET\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ADO.NET</a> 数据集、XML 文档和流以及 .NET 集合中的数据。</p>","autoDesc":true}');export{k as comp,d as data};
