import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as l}from"./app-uJE4P3e0.js";const i={};function s(r,p){return l(),e("div",null,p[0]||(p[0]=[n('<h1 id="亲密性" tabindex="-1"><a class="header-anchor" href="#亲密性"><span>亲密性</span></a></h1><p>如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉单元；反之，则它们的距离就应该越远，也越像多个视觉单元。</p><p>亲密性的根本目的是实现<strong>组织性</strong>，让用户对页面结构和信息层次一目了然。</p><h2 id="纵向间距关系" tabindex="-1"><a class="header-anchor" href="#纵向间距关系"><span>纵向间距关系</span></a></h2><p>通过『小号间距』、『中号间距』、『大号间距』这三种规格来划分信息层次。</p><p>在 Ant Design 中，这三种规格分别为：8px（小号间距）、16px（中号间距）、24px（大号间距）。</p><ul><li>规格不适用的情况</li></ul><p>这三种规格不适用的情况下，可以通过加减『基础间距』的倍数，或者增加元素来拉开信息层次。</p><blockquote><p>注：在 Ant Design 中，y=8+8*n。其中，n&gt;=0，y 是纵向间距，8 是『基础间距』。</p></blockquote><h2 id="横向间距关系" tabindex="-1"><a class="header-anchor" href="#横向间距关系"><span>横向间距关系</span></a></h2><p>为了适用不同尺寸的屏幕，在横向采用栅格布局来排布组件，从而保证布局的灵活性。</p><p>在一个组件内部，元素的横向间距也应该有所不同。</p><h1 id="对齐" tabindex="-1"><a class="header-anchor" href="#对齐"><span>对齐</span></a></h1><p>正如『格式塔学派』中的连续律（Law of Continuity）所描述的，在知觉过程中人们往往倾向于使知觉对象的直线继续成为直线，使曲线继续成为曲线。<br> 在界面设计中，将元素进行对齐，既符合用户的认知特性，也能引导视觉流向，让用户更流畅地接收信息。</p><h2 id="文案类对齐" tabindex="-1"><a class="header-anchor" href="#文案类对齐"><span>文案类对齐</span></a></h2><p>如果页面的字段或段落较短、较散时，需要确定一个统一的视觉起点。</p><h2 id="表单类对齐" tabindex="-1"><a class="header-anchor" href="#表单类对齐"><span>表单类对齐</span></a></h2><p>冒号对齐（右对齐）能让内容锁定在一定范围内，让用户眼球顺着冒号的视觉流，就能找到所有填写项，从而提高填写效率。</p><h2 id="数字类对齐" tabindex="-1"><a class="header-anchor" href="#数字类对齐"><span>数字类对齐</span></a></h2><p>为了快速对比数值大小，建议所有数值取相同有效位数，并且右对齐。</p><h1 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h1><p>对比是增加视觉效果最有效方法之一，同时也能在不同元素之间建立一种有组织的层次结构，让用户快速识别关键信息。</p><blockquote><p>注：要实现有效的对比，对比就必须强烈，切不可畏畏缩缩。</p></blockquote><h2 id="主次关系对比" tabindex="-1"><a class="header-anchor" href="#主次关系对比"><span>主次关系对比</span></a></h2><p>为了让用户能在操作上（类似表单、弹出框等场景）快速做出判断， 来突出其中一项相对更重要或者更高频的操作。</p><p>注意：突出的方法，不局限于强化重点项，也可以是弱化其他项。</p><ul><li>中立</li></ul><p>在一些需要用户慎重决策的场景中，系统应该保持中立，不能替用户或者诱导用户做出判断。</p><h2 id="总分关系对比" tabindex="-1"><a class="header-anchor" href="#总分关系对比"><span>总分关系对比</span></a></h2><p>通过调整排版、字体、大小等方式来突出层次感，区分总分关系，使得页面更具张力和节奏感。</p><h2 id="状态关系对比" tabindex="-1"><a class="header-anchor" href="#状态关系对比"><span>状态关系对比</span></a></h2><p>通过改变颜色、增加辅助形状等方法来实现状态关系的对比，以便用户更好的区分信息。</p><p>常见类型有『静态对比』、『动态对比』。</p><ul><li>静态对比</li></ul><p>用不同颜色点，来表明不同状态。</p><ul><li>动态对比</li></ul><p>鼠标悬停时，该项和其他项呈现出明显不同的视觉效果，响应用户操作。</p><h1 id="重复" tabindex="-1"><a class="header-anchor" href="#重复"><span>重复</span></a></h1><p>相同的元素在整个界面中不断重复，不仅可以有效降低用户的学习成本，也可以帮助用户识别出这些元素之间的关联性。</p><h2 id="重复元素" tabindex="-1"><a class="header-anchor" href="#重复元素"><span>重复元素</span></a></h2><p>重复元素可以是一条粗线、一种线框，某种相同的颜色、设计要素、设计风格，某种格式、空间关系等。</p><h1 id="直截了当" tabindex="-1"><a class="header-anchor" href="#直截了当"><span>直截了当</span></a></h1><p>正如 Alan Cooper 所言：『需要在哪里输出，就要允许在哪里输入』。</p><p>这就是直接操作的原理。</p><p>eg：不要为了编辑内容而打开另一个页面，应该直接在上下文中实现编辑。</p><h2 id="页内编辑" tabindex="-1"><a class="header-anchor" href="#页内编辑"><span>页内编辑</span></a></h2><ul><li>单字段行内编辑</li></ul><p>当『易读性』远比『易编辑性』重要时，可以使用『单击编辑』。</p><p>eg: 单击编辑示例</p><p>状态一：普通的浏览模式，不区分可编辑行和不可编辑行；<br> 状态二：鼠标悬停时，『指针』变为『手型』，编辑区域底色变黄，出现『Tooltips』提示单击编辑；<br> 状态三：鼠标点击后，出现『输入框』、『确定』、『取消』表单元素，同时光标定位在『输入框』中。</p><p>eg: 文字链/图标编辑</p><p>当『易读性』为主，同时又要突出操作行的『易编辑性』时，可使用『文字链/图标编辑』</p><p>eg: 文字链/图标编辑示例</p><p>状态一：在可编辑行附近出现文字链/图标；<br> 状态二：鼠标点击『编辑』后，出现『输入框』、『确定』、『取消』表单元素，同时光标定位在『输入框』中。</p><ul><li>多字段行内编辑</li></ul><blockquote><p>注：在『多字段行内编辑』的情况下，显示的内容和编辑时所需的字段会存在比较大的差异，所以更需要『巧用过渡』原则中的『解释刚刚发生了什么』来消除这种视觉影响。</p></blockquote><p>eg: 多字段行内编辑示例</p><p>编辑模式在不破坏整体性的前提下，可扩大空间，以便放下『输入框』等表单元素；其中，在 Table 中进行编辑模式切换时，需要保证每列的不跳动。</p><h2 id="利用拖放" tabindex="-1"><a class="header-anchor" href="#利用拖放"><span>利用拖放</span></a></h2><ul><li>拖放列表</li></ul><p>只能限制在一个维度（上/下或者左/右）进行拖放。</p><p>eg: 拖放列表示例</p><p>状态一：鼠标悬停该行时，出现可移动的『图标』；<br> 状态二：鼠标悬停在该『图标』时，指针变为『手型』，点击即可进行拖动；<br> 状态三：拖动到可放置区块，出现蓝色描边，告知用户该区块可放置该对象。</p><ul><li>拖放图片/文件</li></ul><h1 id="足不出户" tabindex="-1"><a class="header-anchor" href="#足不出户"><span>足不出户</span></a></h1><p>能在这个页面解决的问题，就不要去其它页面解决，因为任何页面刷新和跳转都会引起变化盲视（Change Blindness），导致用户心流（Flow）被打断。<br> 频繁的页面刷新和跳转，就像在看戏时，演员说完一行台词就安排一次谢幕一样。</p><ul><li>变换盲视（Change Blindness）</li></ul><p>指视觉场景中的某些变化并未被观察者注意到的心理现象。产生这种现象的原因包括场景中的障碍物，眼球运动、地点的变化，或者是缺乏注意力等。——摘自《维基百科》</p><ul><li>心流（Flow）</li></ul><p>也有别名以化境 (Zone) 表示，亦有人翻译为神驰状态，定义是一种将个人精神力完全投注在某种活动上的感觉；心流产生时同时会有高度的兴奋及充实感。——摘自《维基百科》</p><h2 id="覆盖层" tabindex="-1"><a class="header-anchor" href="#覆盖层"><span>覆盖层</span></a></h2><ul><li>二次确认覆盖层</li></ul><p>二次确认覆盖层：避免滥用 Modal 进行二次确认，应该勇敢的让用户去尝试，给用户机会『撤消』即可。</p><p>eg: 推荐示例</p><p>用户点击『删除』后，直接操作；出现 Message 告知用户操作成功，并提供用户『撤消』的按钮；<br> 用户进行下一个操作或者 1 分钟内不进行任何操作， Message 消失，用户无法再『撤消』。</p><p>eg: 推荐示例</p><p>特例：在执行某些无法『撤消』的操作时，可以点击『删除』后，出现 Popconfirm 进行二次确认，在当前页面完成任务。</p><ul><li>详情覆盖层</li></ul><p>一般在列表中，通过用户『悬停』/『点击』某个区块，在当前页加载该条列表项的更多详情信息。</p><blockquote><p>注：使用『悬停』激活时，当鼠标移入时，需要设置 0.5 秒左右的延迟触发；当鼠标移出时，立刻关闭覆盖层</p></blockquote><ul><li>输入覆盖层</li></ul><p>在覆盖层上，让用户直接进行少量字段的输入。</p><h2 id="嵌入层" tabindex="-1"><a class="header-anchor" href="#嵌入层"><span>嵌入层</span></a></h2><p>列表嵌入层：在列表中，显示某条列表项的详情信息，保持上下文不中断。</p><p>标签页：将多个平级的信息进行整理和分类了，一次只显示一组信息。</p><h2 id="虚拟页面" tabindex="-1"><a class="header-anchor" href="#虚拟页面"><span>虚拟页面</span></a></h2><p>在交互过程中，『覆盖层』可以在当前页面上方显示附加内容和交互链接；<br> 『嵌入层』可以在页面内部实现同样效果；而『虚拟页面』不局限机械时代的『页面』，可以利用信息时代的特点构建一种新型『页面』</p><h2 id="流程处理" tabindex="-1"><a class="header-anchor" href="#流程处理"><span>流程处理</span></a></h2><p>长期以来，Web 实现流程的方式就是把每个步骤放在一个单独的页面上。虽然这种做法是分解问题最简单的方式，但并不是最佳解决方案。</p><p>对于某些『流程处理』而言，让用户始终待在同一个页面上则更有必要。</p><ul><li><p>渐进式展现：基于用户的操作/某种特定规则，渐进式展现不同的操作选项。</p></li><li><p>配置程序：通过提供一系列的配置项，帮助用户完成任务或者产品组装。</p></li><li><p>弹出框覆盖层：虽然弹出框的出现会打断用户的心流，但是有时候在弹出框中使用『步骤条』来管理复杂流程也是可行的。</p></li></ul><h1 id="简化交互" tabindex="-1"><a class="header-anchor" href="#简化交互"><span>简化交互</span></a></h1><p>根据费茨法则（Fitts&#39;s Law）所描述的，如果用户鼠标移动距离越少、对象相对目标越大，那么用户越容易操作。<br> 通过运用上下文工具（即：放在内容中的操作工具），使内容和操作融合，从而简化交互。</p><h2 id="实时可见工具" tabindex="-1"><a class="header-anchor" href="#实时可见工具"><span>实时可见工具</span></a></h2><p>如果某个操作非常重要，就应该把它放在界面中，并实时可见。</p><ul><li>实时可见工具示例 --摘自知乎</li></ul><p>状态一：在文案中出现一个相对明显的点击区域；<br> 状态二：鼠标悬停时，鼠标『指针』变为『手型』，底色发生变化，邀请用户点击。<br> 状态三：鼠标点击后，和未点击前有明显的区分。<br> 如果某个操作非常重要，就应该把它放在界面中，并实时可见。</p><h2 id="悬停即现工具" tabindex="-1"><a class="header-anchor" href="#悬停即现工具"><span>悬停即现工具</span></a></h2><p>如果某个操作不那么重要，或者使用『实时可见工具』过于啰嗦会影响用户阅读时，可以在悬停在该对象上时展示操作项。</p><h2 id="开关显示工具" tabindex="-1"><a class="header-anchor" href="#开关显示工具"><span>开关显示工具</span></a></h2><p>如果某些操作只需要在特定模式时显示，可以通过开关来实现。</p><h2 id="交互中的工具" tabindex="-1"><a class="header-anchor" href="#交互中的工具"><span>交互中的工具</span></a></h2><p>如果操作不重要或者可以通过其他途径完成时，可以将工具放置在用户的操作流程中，减少界面元素，降低认知负担，给用户小惊喜。</p><p>此处也可以运用『提供邀请』 相关的知识点。</p><ul><li>推荐示例</li></ul><p>鼠标悬停时，出现 Tooltips 进行提示，用户点击内容直接复制</p><ul><li>推荐示例</li></ul><p>鼠标滑选/双击时，系统自动复制该部分内容。通过大胆猜测用户的行为，并帮助完成，给用户小惊喜。</p><h2 id="可视区域-可点击区域" tabindex="-1"><a class="header-anchor" href="#可视区域-可点击区域"><span>可视区域 ≠ 可点击区域</span></a></h2><p>在使用 Table 时，文字链的点击范围受到文字长短影响，可以设置整个单元格为热区，以便用户触发</p><ul><li>文字链热区示例</li></ul><p>当悬浮在 ID 所在的文字链单元格时，鼠标『指针』随即变为『手型』，单击即可跳转。</p><p>当需要增强按钮的响应性时，可以通过增加用户点击热区的范围，而不是增大按钮形状，从而增强响应性，又不缺失美感。</p><ul><li>按钮热区示例</li></ul><p>鼠标移入按钮附近，即可激活 Hover 状态。</p><h1 id="提供邀请" tabindex="-1"><a class="header-anchor" href="#提供邀请"><span>提供邀请</span></a></h1><p>很多富交互模式（eg：『拖放』、『行内编辑』、『上下文工具』）都有一个共同问题，就是缺少易发现性。所以『提供邀请』是成功完成人机交互的关键所在。</p><p>邀请就是引导用户进入下一个交互层次的提醒和暗示，通常包括意符（eg：实时的提示信息）和可供性，以表明在下一个界面可以做什么。当可供性中可感知的部分（Perceived Affordance）表现为意符时，人机交互的过程往往更加自然、顺畅。</p><p>意符（Signifiers） ：一种额外的提示，告诉用户可以采取什么行为，以及应该怎么操作；必须是可感知（eg：视觉、听觉、触觉等）。——摘自《设计心理学 1 》</p><p>可供性（Affordance） ：也被翻译成『示能』，由 James J. Gibson 提出，定义为物品的特性与决定物品用途的主体能力之间的关系；其中部分可感知（此部分定义为 Perceived Affordance），部分不可感知。——摘自《设计心理学 1 》</p><h2 id="静态邀请" tabindex="-1"><a class="header-anchor" href="#静态邀请"><span>静态邀请</span></a></h2><p>指通过可视化技术在页面上提供引导交互的邀请。</p><ul><li>引导操作邀请</li></ul><p>一般以静态说明形式出现在页面上，不过它们在视觉上也可以表现出多种不同样式。 常见类型：『文本邀请』、『白板式邀请』、『未完成邀请』。</p><ul><li>漫游探索邀请</li></ul><p>是向用户介绍新功能的好方法，尤其是对于那些设计优良的界面。但是它不是『创口贴』，仅通过它不能解决界面交互的真正问题。</p><blockquote><p>注：保持漫游过程简单，让用户容易退出和重新启动；保持内容简明扼要，与功能密切相关。</p></blockquote><h2 id="动态邀请" tabindex="-1"><a class="header-anchor" href="#动态邀请"><span>动态邀请</span></a></h2><p>指以响应用户在特定位置执行特定操作的方式，提供特定的邀请。</p><ul><li>悬停邀请</li></ul><p>在鼠标悬停期间提供邀请。</p><p>eg: 悬停邀请示例 1</p><p>鼠标『悬停』整个卡片时，可被点击部分变为蓝色的『文字链』</p><p>eg: 悬停邀请示例 2</p><p>鼠标『悬停』时，出现『选择此模板』的按钮。<br> 悬停邀请：在鼠标悬停期间提供邀请。</p><ul><li>推论邀请</li></ul><p>用于交互期间，合理推断用户可能产生的需求。</p><p>eg: 推论邀请示例</p><p>用户点击『赞』后，同时系统分析（既然用户喜欢这篇文章，那么可能对这一类文章都有兴趣）并提供开启『精打细算』的邀请。</p><ul><li>更多内容邀请</li></ul><p>用于邀请用户查看更多内容。</p><h1 id="巧用过渡" tabindex="-1"><a class="header-anchor" href="#巧用过渡"><span>巧用过渡</span></a></h1><p>人脑灰质（Gray Matter）会对动态的事物（eg：移动、形变、色变等）保持敏感。</p><p>在界面中，适当的加入一些过渡效果，能让界面保持生动，同时也能增强用户和界面的沟通。</p><ul><li><p>Adding: 新加入的信息元素应被告知如何使用，从页面转变的信息元素需被重新识别。</p></li><li><p>Receding: 与当前页无关的信息元素应采用适当方式移除。</p></li><li><p>Normal: 指那些从转场开始到结束都没有发生变化的信息元素。</p></li></ul><h2 id="在视图变化时保持上下文" tabindex="-1"><a class="header-anchor" href="#在视图变化时保持上下文"><span>在视图变化时保持上下文</span></a></h2><ul><li>滑入与滑出</li></ul><p>可以有效构建虚拟空间。</p><ul><li>传送带</li></ul><p>可极大地扩展虚拟空间。</p><ul><li>折叠窗口</li></ul><p>在视图切换时，有助于保持上下文，同时也能拓展虚拟空间。</p><h2 id="解释刚刚发生了什么" tabindex="-1"><a class="header-anchor" href="#解释刚刚发生了什么"><span>解释刚刚发生了什么</span></a></h2><ul><li>对象增加</li></ul><p>在列表/表格中，新增了一个对象。</p><p>eg: 对象增加示例</p><p>新增一条对象时，该行『高亮』告知用户这是新增项；几秒后『高亮』消失，以免过度干扰用户。</p><ul><li>对象删除</li></ul><p>在列表/表格中，删除了一个对象。(fade out)</p><ul><li>对象更改</li></ul><p>在列表/表格中，更改了一个对象。</p><p>eg: 对象更改示例<br> 状态一：用户更改了『详情』中的值；<br> 状态二：用户点击『保存』后，详情所在的网格出现『黄底』，表明该对象发生了更改；<br> 状态三：底色持续几秒后，恢复正常。</p><ul><li>对象呼出示例</li></ul><p>对象呼出：点击页面中元素，呼出一个新对象。(fade in/缩放)</p><h2 id="改善感知性能" tabindex="-1"><a class="header-anchor" href="#改善感知性能"><span>改善感知性能</span></a></h2><p>当无法有效提升『实际性能』时，可以考虑适当转移用户的注意力，来缩短某项操作的感知时间，改善感知性能。</p><h2 id="自然运动" tabindex="-1"><a class="header-anchor" href="#自然运动"><span>自然运动</span></a></h2><blockquote><p><a href="http://motion.ant.design/language/time" target="_blank" rel="noopener noreferrer">Ant Motion 动画语言</a></p></blockquote><h1 id="即时反应" tabindex="-1"><a class="header-anchor" href="#即时反应"><span>即时反应</span></a></h1><p>提供邀请』的强大体现在交互之前给出反馈，解决易发现性问题；『巧用过渡』的有用体现在它能够在交互期间为用户提供视觉反馈；『即时反应』的重要性体现在交互之后立即给出反馈。</p><p>就像『牛顿第三定律』所描述作用力和反作用一样，用户进行了操作或者内部数据发生了变化，系统就应该立即有一个对应的反馈，同时输入量级越大、重要性越高，那么反馈量级越大、重要性越高。</p><p>虽然反馈太多（准确的说，错误的反馈太多）是一个问题，但是反馈太少甚至没有反馈的系统，则让人感觉迟钝和笨拙，用户体验更差。</p><h2 id="查询模式" tabindex="-1"><a class="header-anchor" href="#查询模式"><span>查询模式</span></a></h2><ul><li>自动完成</li></ul><p>用户输入时，下拉列表会随着输入的关键词显示匹配项。 根据查询结果分类的多少，可以分为『确定类目』、『不确定类目』两种类型。</p><p>(1) 确定类目示例</p><p>用户所查询的关键词，只会在『话题』、『问题』、『文章』这 3 种类目中出现。</p><p>(2) 不确定类目示例</p><p>用户所查询的关键词，其所属的类目数量不确定，可能 4 个，可能 5 个，可能更多。</p><ul><li>实时搜索</li></ul><p>随着用户输入，实时显示搜索结果。『自动完成』、『实时建议』的近亲。</p><p>eg: 实时搜索示例</p><p>用户输入一个搜索值，系统随即显示查询结果。</p><h2 id="反馈模式" tabindex="-1"><a class="header-anchor" href="#反馈模式"><span>反馈模式</span></a></h2><ul><li>实时预览</li></ul><p>在用户提交输入之前，让他先行了解系统将如何处理他的输入。</p><blockquote><p>注：解决错误最好的办法，就是不让错误发生。而『实时预览』就是有效避免错误的好设计。</p></blockquote><p>eg: 实时预览示例</p><p>根据用户的输入，提供关于密码强度和有效性的实时反馈。</p><ul><li>渐进式展现</li></ul><p>在必要的时候提供必要的提示，而不是一股脑儿显示所有提示，导致界面混乱，增加认知负担。案例详见『足不出户／渐进式展现』。</p><ul><li>进度指示</li></ul><p>当一个操作需要一定时间完成时，就需要即时告知进度，保持与用户的沟通。</p><p>常见的进度指示：『按钮加载』、『表格加载』、『富列表加载』、『页面加载』。可根据操作的量级和重要性，展示不同类型的进度指示。</p><ul><li>点击刷新</li></ul><p>告知用户有新内容，并提供按钮等工具帮助用户查看新内容。</p><ul><li>定时刷新</li></ul><p>无需用户介入，定时展示新内容。</p><p>eg: 定时示例</p><p>新增的列表项『高亮』，持续几秒后恢复正常。</p>',200)]))}const o=a(i,[["render",s]]),d=JSON.parse('{"path":"/posts/Design/2018-07-11-ant-design-01-rules.html","title":"Ant Design-01-Rules","lang":"zh-CN","frontmatter":{"title":"Ant Design-01-Rules","date":"2018-07-11T00:00:00.000Z","categories":["Design"],"tags":["web","design","sh"],"published":true,"description":"亲密性 如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉单元；反之，则它们的距离就应该越远，也越像多个视觉单元。 亲密性的根本目的是实现组织性，让用户对页面结构和信息层次一目了然。 纵向间距关系 通过『小号间距』、『中号间距』、『大号间距』这三种规格来划分信息层次。 在 Ant Design 中，这三种规格分别为：8px（小号间距）、...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Design/2018-07-11-ant-design-01-rules.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Ant Design-01-Rules"}],["meta",{"property":"og:description","content":"亲密性 如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉单元；反之，则它们的距离就应该越远，也越像多个视觉单元。 亲密性的根本目的是实现组织性，让用户对页面结构和信息层次一目了然。 纵向间距关系 通过『小号间距』、『中号间距』、『大号间距』这三种规格来划分信息层次。 在 Ant Design 中，这三种规格分别为：8px（小号间距）、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-07-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ant Design-01-Rules\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-07-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":15.96,"words":4787},"filePathRelative":"posts/Design/2018-07-11-ant-design-01-rules.md","localizedDate":"2018年7月11日","excerpt":"\\n<p>如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉单元；反之，则它们的距离就应该越远，也越像多个视觉单元。</p>\\n<p>亲密性的根本目的是实现<strong>组织性</strong>，让用户对页面结构和信息层次一目了然。</p>\\n<h2>纵向间距关系</h2>\\n<p>通过『小号间距』、『中号间距』、『大号间距』这三种规格来划分信息层次。</p>\\n<p>在 Ant Design 中，这三种规格分别为：8px（小号间距）、16px（中号间距）、24px（大号间距）。</p>\\n<ul>\\n<li>规格不适用的情况</li>\\n</ul>\\n<p>这三种规格不适用的情况下，可以通过加减『基础间距』的倍数，或者增加元素来拉开信息层次。</p>","autoDesc":true}');export{o as comp,d as data};
