import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,o as s}from"./app-uJE4P3e0.js";const i={};function r(o,e){return s(),n("div",null,e[0]||(e[0]=[t(`<h1 id="wrk" tabindex="-1"><a class="header-anchor" href="#wrk"><span>WRK</span></a></h1><p><a href="https://github.com/wg/wrk" target="_blank" rel="noopener noreferrer">WRK</a> is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU.</p><p>It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.</p><p>An optional LuaJIT script can perform HTTP request generation, response processing, and custom reporting.</p><p>Details are available in SCRIPTING and several examples are located in <a href="https://github.com/wg/wrk/tree/master/scripts" target="_blank" rel="noopener noreferrer">scripts</a> package.</p><h1 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This runs a benchmark for 30 seconds, using 12 threads, and keeping 400 HTTP connections open.</p><p>输出</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Running 30s test @ http://127.0.0.1:8080/index.html</span></span>
<span class="line"><span>  12 threads and 400 connections</span></span>
<span class="line"><span>  Thread Stats   Avg      Stdev     Max   +/- Stdev</span></span>
<span class="line"><span>    Latency   635.91us    0.89ms  12.92ms   93.69%</span></span>
<span class="line"><span>    Req/Sec    56.20k     8.07k   62.00k    86.54%</span></span>
<span class="line"><span>  22464657 requests in 30.00s, 17.76GB read</span></span>
<span class="line"><span>Requests/sec: 748868.53</span></span>
<span class="line"><span>Transfer/sec:    606.33MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="基准提示" tabindex="-1"><a class="header-anchor" href="#基准提示"><span>基准提示</span></a></h1><p>运行wrk的机器必须有足够数量的短暂端口，并且应该快速回收关闭的插座。</p><p>要处理初始连接突发，服务器的listen（2）backlog应该大于正在测试的并发连接数。</p><p>仅更改HTTP方法，路径，添加标头或正文的用户脚本不会对性能产生影响。</p><p>每个请求的操作，特别是构建新的HTTP请求，以及使用response()，必然会减少可以生成的负载量。</p><h1 id="个人收获" tabindex="-1"><a class="header-anchor" href="#个人收获"><span>个人收获</span></a></h1><ol><li><p>C 语言实际上非常强大。</p></li><li><p>基本原理还是类似的，但是不同的是，C 语言编写的多线程需要对计算机的底层理解的更多。</p></li><li><p>Lua 脚本使用的很广。比如 Redis 中也用到了。有时间可以学一下。</p></li></ol><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">JunitPerf</a></p><p><a href="https://houbb.github.io/2018/09/09/lang-lua" target="_blank" rel="noopener noreferrer">Lua</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/wg/wrk" target="_blank" rel="noopener noreferrer">https://github.com/wg/wrk</a></p>`,22)]))}const c=a(i,[["render",r]]),d=JSON.parse('{"path":"/posts/test/2019-04-01-test-tool-wrk.html","title":"WRK-测试利器","lang":"zh-CN","frontmatter":{"title":"WRK-测试利器","date":"2019-04-01T00:00:00.000Z","categories":["Test"],"tags":["test","tool"],"published":true,"description":"WRK WRK is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event not...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/test/2019-04-01-test-tool-wrk.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"WRK-测试利器"}],["meta",{"property":"og:description","content":"WRK WRK is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU. It combines a multithreaded design with scalable event not..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"tool"}],["meta",{"property":"article:published_time","content":"2019-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WRK-测试利器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"posts/test/2019-04-01-test-tool-wrk.md","localizedDate":"2019年4月1日","excerpt":"\\n<p><a href=\\"https://github.com/wg/wrk\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">WRK</a> is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU.</p>\\n<p>It combines a multithreaded design with scalable event notification systems such as epoll and kqueue.</p>","autoDesc":true}');export{c as comp,d as data};
