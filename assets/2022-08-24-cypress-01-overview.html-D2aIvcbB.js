import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,o as p}from"./app-CEDSurVN.js";const i={};function r(n,e){return p(),t("div",null,e[0]||(e[0]=[s(`<h1 id="cypress" tabindex="-1"><a class="header-anchor" href="#cypress"><span>cypress</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>The web has evolved.</span></span>
<span class="line"><span>Finally, testing has too.</span></span>
<span class="line"><span>Fast, easy and reliable testing for anything that runs in a browser.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="特色" tabindex="-1"><a class="header-anchor" href="#特色"><span>特色</span></a></h1><h2 id="architecture" tabindex="-1"><a class="header-anchor" href="#architecture"><span>Architecture</span></a></h2><p>大多数测试工具（例如 Selenium）通过在浏览器外部运行并在整个网络上执行远程命令来运行。柏树是完全相反的。与您的应用程序在同一运行循环中执行柏树。</p><p>柏树背后是节点服务器进程。柏树和节点过程不断代表彼此交流，同步和执行任务。访问这两个零件（正面和背面）使我们能够实时响应您的应用程序的事件，同时在浏览器之外完成需要更高特权的任务。</p><p>赛普拉斯还通过即时阅读和更改网络流量在网络层上运行。这使赛普拉斯不仅可以修改浏览器进出的所有内容，还可以更改可能干扰其自动化浏览器的能力的代码。</p><p>赛普拉斯最终控制着从上到下的整个自动化过程，这使其处于能够理解浏览器内外发生的一切的独特位置。这意味着柏树能够比任何其他测试工具提供更一致的结果。</p><p>由于柏树位于本地安装在您的计算机上，因此它可以在操作系统中进行自动化任务。这使得执行任务，例如进行屏幕截图，录制视频，一般文件系统操作和网络操作。</p><h1 id="native-access-本地访问" tabindex="-1"><a class="header-anchor" href="#native-access-本地访问"><span>native access 本地访问</span></a></h1><p>因为柏树在您的应用程序中运行，这意味着它具有对每个对象的本机访问权限。</p><p>无论是窗口，文档，DOM元素，您的应用程序实例，函数，计时器，服务工作者还是其他任何内容 - 您都可以在柏树测试中访问它。</p><p>没有对象序列化，没有线协议 - 您可以访问所有内容。</p><p>您的测试代码可以访问应用程序代码所能的所有相同对象。</p><h1 id="新型测试" tabindex="-1"><a class="header-anchor" href="#新型测试"><span>新型测试</span></a></h1><p>对您的应用程序，网络流量和对每个主机对象的本机访问权限具有最终控制，可以解锁以前从未做出的新测试方式。</p><p>与其被“锁定”到您的应用程序中而无法轻松控制它，而是让您更改应用程序工作方式的任何方面。</p><p>您可以像在单位测试中那样人工创建这些状态，而不是创建给定情况所需的状态，而不是创建缓慢且昂贵的测试。</p><p>例如，您可以：</p><ul><li><p>将浏览器或您的应用程序的功能固执，并迫使它们在测试案例中按需要表现出来。</p></li><li><p>公开数据存储（例如Redux），因此您可以直接从测试代码中编程更改应用程序的状态。</p></li><li><p>通过强迫服务器发送空响应来测试边缘案例，例如“空视图”。</p></li><li><p>测试您的应用程序如何通过将响应状态代码修改为500来响应服务器上的错误。</p></li><li><p>直接修改DOM元素 - 喜欢强制显示隐藏的元素。</p></li><li><p>以编程方式使用第三方插件。您可以直接从测试代码中调用复杂的UI窗口小部件，例如多选择，自动完成，下拉访问，树视图或日历，以控制它们。</p></li><li><p>在测试时，请防止Google Analytics（分析）加载。</p></li><li><p>每当您的应用程序过渡到新页面或开始卸载时，都会获取同步通知。</p></li><li><p>通过向前或向后移动来控制时间，以便计时器或民意调查自动触发而无需等待测试中所需的时间。</p></li><li><p>添加您自己的活动听众以响应您的应用程序。在柏树中进行测试时，您可以更新应用程序代码以不同。您可以从柏树内部控制WebSocket消息，有条件地加载第三方脚本，或直接在应用程序上调用功能。</p></li></ul><h1 id="快捷方式" tabindex="-1"><a class="header-anchor" href="#快捷方式"><span>快捷方式</span></a></h1><p>试图努力测试以达到应用程序的领域？不喜欢动作产生的副作用吗？厌倦了一遍又一遍地重复相同的重复和缓慢的动作？您可以在大多数测试用例中跳过它们。</p><p>赛普拉斯阻止您被迫总是“像用户”来生成给定情况的状态。使用柏树，您可以通过编程方式进行交互和控制应用程序。您不再需要使用UI来建立状态。</p><p>这意味着您不必访问登录页面，输入用户名和密码，而要等待该页面加载和/或重定向到您运行的每个测试。</p><p>柏树使您能够进行快捷方式和编程登录。</p><p>使用CY.Request（）之类的命令，您可以直接发送HTTP请求，但可以将这些请求与浏览器同步。</p><p>cookie自动发送并涂回去。担心科尔斯？</p><p>不要，这是完全绕过的。您可以选择像用户一样测试何时测试以及何时跳过缓慢而重复的零件的能力。</p><h1 id="lake-resistant-耐片" tabindex="-1"><a class="header-anchor" href="#lake-resistant-耐片"><span>lake resistant 耐片</span></a></h1><p>柏树同步知道并了解您应用程序中发生的一切。通知页面加载的那一刻和页面卸载的那一刻。</p><p>柏树发射事件时不可能错过元素。赛普拉斯甚至知道元素的动画速度，并将等待它停止动画。</p><p>此外，它会自动等待元素变得可见，启用并停止被覆盖。当页面开始过渡时，柏树将暂停命令执行，直到以下页面满载为止。您甚至可以告诉赛普拉斯等待特定的网络请求才能完成。</p><p>柏树在浏览器内部执行绝大多数命令，因此没有网络滞后。命令执行并驱动您的应用程序尽快渲染。</p><p>为了处理具有复杂UI的现代JavaScript框架，您可以使用断言来告诉柏树您的应用程序中所需的状态应该是什么。</p><p>赛普拉斯将自动等待您的应用程序到达此状态，然后再继续前进。</p><p>通过手动等待或重试，您完全避免了大惊小怪。柏树自动等待元素存在，并且永远不会产生与DOM分离的陈旧元素。</p><h1 id="辩论性" tabindex="-1"><a class="header-anchor" href="#辩论性"><span>辩论性</span></a></h1><p>最重要的是，柏树是为可用性而建造的。</p><p>有数百条自定义错误消息描述柏树的确切原因使您的测试失败。</p><p>有一个丰富的UI，可以视觉显示您的命令执行，断言，网络请求，间谍，存根，页面加载或URL更改。</p><p>赛普拉斯（Cypress）拍摄了您的应用程序快照，并使您可以时间回到命令运行时所处的状态。</p><p>您可以在运行测试时使用开发人员工具，您可以看到每个控制台消息，每个网络请求。</p><p>您可以检查元素，甚至可以在规格代码或应用程序代码中使用调试器语句。</p><p>没有忠诚度损失 - 您可以使用已经适应的所有工具。</p><p>这使您能够同时测试和开发全部。</p><h1 id="trade-off-折中" tabindex="-1"><a class="header-anchor" href="#trade-off-折中"><span>trade-off（折中）</span></a></h1><p>尽管柏树有许多新的和强大的功能 - 我们在实现这一目标方面也有一些重要的权衡。</p><p>如果您有兴趣了解更多，我们已经写了整个有关此主题的指南。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://www.cypress.io/" target="_blank" rel="noopener noreferrer">https://www.cypress.io/</a></p>`,50)]))}const l=a(i,[["render",r]]),h=JSON.parse('{"path":"/posts/Project/2022-08-24-cypress-01-overview.html","title":"前端端到端测试 cypress-01-overview 概览","lang":"zh-CN","frontmatter":{"title":"前端端到端测试 cypress-01-overview 概览","date":"2022-08-24T00:00:00.000Z","categories":["Project"],"tags":["project","web","test","e2e","sh"],"published":true,"description":"cypress 特色 Architecture 大多数测试工具（例如 Selenium）通过在浏览器外部运行并在整个网络上执行远程命令来运行。柏树是完全相反的。与您的应用程序在同一运行循环中执行柏树。 柏树背后是节点服务器进程。柏树和节点过程不断代表彼此交流，同步和执行任务。访问这两个零件（正面和背面）使我们能够实时响应您的应用程序的事件，同时在浏览器...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Project/2022-08-24-cypress-01-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"前端端到端测试 cypress-01-overview 概览"}],["meta",{"property":"og:description","content":"cypress 特色 Architecture 大多数测试工具（例如 Selenium）通过在浏览器外部运行并在整个网络上执行远程命令来运行。柏树是完全相反的。与您的应用程序在同一运行循环中执行柏树。 柏树背后是节点服务器进程。柏树和节点过程不断代表彼此交流，同步和执行任务。访问这两个零件（正面和背面）使我们能够实时响应您的应用程序的事件，同时在浏览器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"project"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"e2e"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2022-08-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端端到端测试 cypress-01-overview 概览\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.42,"words":1925},"filePathRelative":"posts/Project/2022-08-24-cypress-01-overview.md","localizedDate":"2022年8月24日","excerpt":"\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>The web has evolved.</span></span>\\n<span class=\\"line\\"><span>Finally, testing has too.</span></span>\\n<span class=\\"line\\"><span>Fast, easy and reliable testing for anything that runs in a browser.</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{l as comp,h as data};
