import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-uJE4P3e0.js";const r={};function o(i,e){return n(),a("div",null,e[0]||(e[0]=[t('<h1 id="线程的概念和多线程模型" tabindex="-1"><a class="header-anchor" href="#线程的概念和多线程模型"><span>线程的概念和多线程模型</span></a></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>引入进程的目的，是为了使多道程序并发执行，以提高资源利用率和系统吞吐量；</p><p>而<strong>引入线程，则是为了减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。</strong></p><p>线程最直接的理解就是“轻量级进程”，它是一个基本的CPU执行单元，也是程序执行流的最小单元，由线程ID、程序计数器、寄存器集合和堆栈组成。</p><p>线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。</p><p>一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。</p><p>线程也有就绪、阻塞和运行三种基本状态。</p><p>引入线程后，进程的内涵发生了改变，进程只作为除CPU以外系统资源的分配单元，线程则作为处理机的分配单元。</p><h2 id="线程与进程的比较" tabindex="-1"><a class="header-anchor" href="#线程与进程的比较"><span>线程与进程的比较</span></a></h2><ol><li>调度。</li></ol><p>在传统的操作系统中，拥有资源和独立调度的基本单位都是进程。在引入线程的操作系统中，线程是独立调度的基本单位，进程是资源拥有的基本单位。在同一进程中，线程的切换不会引起进程切换。在不同进程中进行线程切换,如从一个进程内的线程切换到另一个进程中的线程时，会引起进程切换。</p><ol start="2"><li>拥有资源。</li></ol><p>不论是传统操作系统还是设有线程的操作系统，进程都是拥有资源的基本单位，而线程不拥有系统资源（也有一点必不可少的资源），但线程可以访问其隶属进程的系统资源。</p><ol start="3"><li>并发性。</li></ol><p>在引入线程的操作系统中，不仅进程之间可以并发执行，而且多个线程之间也可以并发执行，从而使操作系统具有更好的并发性，提高了系统的吞吐量。</p><ol start="4"><li>系统开销。</li></ol><p>由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、 I/O设备等，因此操作系统所付出的开销远大于创建或撤销线程时的开销。</p><p>类似地，在进行进程切换时，涉及当前执行进程CPU环境的保存及新调度到进程CPU环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</p><p>此外，由于同一进程内的多个线程共享进程的地址空间，因此，这些线程之间的同步与通信非常容易实现，甚至无需操作系统的干预。</p><ol start="5"><li>地址空间和其他资源（如打开的文件）</li></ol><p>进程的地址空间之间互相独立，同一进程的各线程间共享进程的资源，某进程内的线程对于其他进程不可见。</p><ol start="6"><li>通信方面</li></ol><p>进程间通信(IPC)需要进程同步和互斥手段的辅助，以保证数据的一致性，而线程间可以直接读/写进程数据段（如全局变量）来进行通信。</p><h2 id="线程的属性" tabindex="-1"><a class="header-anchor" href="#线程的属性"><span>线程的属性</span></a></h2><p>在多线程操作系统中，把线程作为独立运行（或调度）的基本单位，此时的进程，已不再是一个基本的可执行实体。</p><p>但进程仍具有与执行相关的状态，所谓进程处于“执行”状态，实际上是指该进程中某线程正在执行。</p><p>线程的主要属性如下：</p><ol><li><p>线程是一个轻型实体，它不拥有系统资源，但每个线程都应有一个唯一的标识符和一个线程控制块，线程控制块记录了线程执行的寄存器和栈等现场状态。</p></li><li><p>不同的线程可以执行相同的程序，即同一个服务程序被不同的用户调用时，操作系统为它们创建成不同的线程。</p></li><li><p>同一进程中的各个线程共享该进程所拥有的资源。</p></li><li><p>线程是处理机的独立调度单位，多个线程是可以并发执行的。在单CPU的计算机系统中，各线程可交替地占用CPU；在多CPU的计算机系统中，各线程可同时占用不同的CPU，若各个CPU同时为一个进程内的各线程服务则可缩短进程的处理时间。</p></li><li><p>一个线程被创建后便开始了它的生命周期，直至终止，线程在生命周期内会经历阻塞态、就绪态和运行态等各种状态变化。</p></li></ol><h1 id="线程的实现方式" tabindex="-1"><a class="header-anchor" href="#线程的实现方式"><span>线程的实现方式</span></a></h1><p>线程的实现可以分为两类：用户级线程(User-LevelThread, ULT)和内核级线程(Kemel-LevelThread, KLT)。</p><p>内核级线程又称为内核支持的线程。</p><h2 id="用户级" tabindex="-1"><a class="header-anchor" href="#用户级"><span>用户级</span></a></h2><p>在用户级线程中，有关线程管理的所有工作都由应用程序完成，内核意识不到线程的存在。</p><p>应用程序可以通过使用线程库设计成多线程程序。</p><p>通常，应用程序从单线程起始，在该线程中开始运行，在其运行的任何时刻，可以通过调用线程库中的派生例程创建一个在相同进程中运行的新线程。</p><p>图2-2(a)说明了用户级线程的实现方式。</p><h2 id="内核级" tabindex="-1"><a class="header-anchor" href="#内核级"><span>内核级</span></a></h2><p>在内核级线程中，线程管理的所有工作由内核完成，应用程序没有进行线程管理的代码，只有一个到内核级线程的编程接口。</p><p>内核为进程及其内部的每个线程维护上下文信息，调度也是在内核基于线程架构的基础上完成。</p><p>图2-2(b)说明了内核级线程的实现方式。</p><p>在一些系统中，使用组合方式的多线程实现。</p><p>线程创建完全在用户空间中完成，线程的调度和同步也在应用程序中进行。一个应用程序中的多个用户级线程被映射到一些（小于或等于用户级线程的数目）内核级线程上。</p><p>图2-2(c)说明了用户级与内核级的组合实现方式。</p><figure><img src="http://c.biancheng.net/cpp/uploads/allimg/140629/1-1406291220161Z.jpg" alt="实现方式" tabindex="0" loading="lazy"><figcaption>实现方式</figcaption></figure><h1 id="多线程模型" tabindex="-1"><a class="header-anchor" href="#多线程模型"><span>多线程模型</span></a></h1><p>有些系统同时支持用户线程和内核线程由此产生了不同的多线程模型，即实现用户级线程和内核级线程的连接方式。</p><h2 id="_1-多对一模型" tabindex="-1"><a class="header-anchor" href="#_1-多对一模型"><span>1) 多对一模型</span></a></h2><p>将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成。</p><p>此模式中，用户级线程对操作系统不可见（即透明）。</p><p>优点：线程管理是在用户空间进行的，因而效率比较高。</p><p>缺点：当一个线程在使用内核服务时被阻塞，那么整个进程都会被阻塞；多个线程不能并行地运行在多处理机上。</p><h2 id="_2-一对一模型" tabindex="-1"><a class="header-anchor" href="#_2-一对一模型"><span>2) 一对一模型</span></a></h2><p>将每个用户级线程映射到一个内核级线程。</p><p>优点：当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力较强。</p><p>缺点：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。</p><h2 id="_3-多对多模型" tabindex="-1"><a class="header-anchor" href="#_3-多对多模型"><span>3) 多对多模型</span></a></h2><p>将 n 个用户级线程映射到 m 个内核级线程上，要求 m &lt;= n。</p><p>特点：在多对一模型和一对一模型中取了个折中，克服了多对一模型的并发度不高的缺点，又克服了一对一模型的一个用户进程占用太多内核级线程，开销太大的缺点。又拥有多对一模型和一对一模型各自的优点，可谓集两者之所长。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="http://c.biancheng.net/cpp/html/2579.html" target="_blank" rel="noopener noreferrer">操作系统的基本概念</a></p><p><a href="https://lgwain.gitbooks.io/os/content/unit11.html" target="_blank" rel="noopener noreferrer">https://lgwain.gitbooks.io/os/content/unit11.html</a></p>',62)]))}const h=p(r,[["render",o]]),c=JSON.parse('{"path":"/posts/OS/2020-10-04-os-02-thread.html","title":"操作系统学习(2)线程详解","lang":"zh-CN","frontmatter":{"title":"操作系统学习(2)线程详解","date":"2020-10-04T00:00:00.000Z","categories":["OS"],"tags":["os","sf"],"published":true,"description":"线程的概念和多线程模型 基本概念 引入进程的目的，是为了使多道程序并发执行，以提高资源利用率和系统吞吐量； 而引入线程，则是为了减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。 线程最直接的理解就是“轻量级进程”，它是一个基本的CPU执行单元，也是程序执行流的最小单元，由线程ID、程序计数器、寄存器集合和堆栈组成。 线程是进程中的一个实体...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/OS/2020-10-04-os-02-thread.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"操作系统学习(2)线程详解"}],["meta",{"property":"og:description","content":"线程的概念和多线程模型 基本概念 引入进程的目的，是为了使多道程序并发执行，以提高资源利用率和系统吞吐量； 而引入线程，则是为了减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。 线程最直接的理解就是“轻量级进程”，它是一个基本的CPU执行单元，也是程序执行流的最小单元，由线程ID、程序计数器、寄存器集合和堆栈组成。 线程是进程中的一个实体..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://c.biancheng.net/cpp/uploads/allimg/140629/1-1406291220161Z.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"os"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-10-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统学习(2)线程详解\\",\\"image\\":[\\"http://c.biancheng.net/cpp/uploads/allimg/140629/1-1406291220161Z.jpg\\"],\\"datePublished\\":\\"2020-10-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":7.23,"words":2168},"filePathRelative":"posts/OS/2020-10-04-os-02-thread.md","localizedDate":"2020年10月4日","excerpt":"\\n<h2>基本概念</h2>\\n<p>引入进程的目的，是为了使多道程序并发执行，以提高资源利用率和系统吞吐量；</p>\\n<p>而<strong>引入线程，则是为了减小程序在并发执行时所付出的时空开销，提高操作系统的并发性能。</strong></p>\\n<p>线程最直接的理解就是“轻量级进程”，它是一个基本的CPU执行单元，也是程序执行流的最小单元，由线程ID、程序计数器、寄存器集合和堆栈组成。</p>\\n<p>线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。</p>\\n<p>一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。</p>","autoDesc":true}');export{h as comp,c as data};
