import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as s}from"./app-CEDSurVN.js";const n={};function r(p,t){return s(),e("div",null,t[0]||(t[0]=[a(`<h1 id="异常发现" tabindex="-1"><a class="header-anchor" href="#异常发现"><span>异常发现</span></a></h1><p>风控的运作过程中，第一个需要了解的是“异常发现”。</p><p>不是因为它最简单，而是因为大部分时候异常发现是风控工作的起点</p><p>异常发现是非常重要的一步，风控大量系统、算法、时间都和异常发现有关。</p><p>这一步就像是提出一个问题。如果你提不出问题，也就谈不到解决问题；其次，提出一个好问题可以让你更快的解决问题。</p><p>准确的发现异常，就是提出一个好问题</p><p>异常可以有很多，例如：</p><p>昨天凌晨1点的订单比均值高<br> 今天注册用户数突然上升<br> 昨天验证码的请求量上升</p><h1 id="建立监控" tabindex="-1"><a class="header-anchor" href="#建立监控"><span>建立监控</span></a></h1><p>怎样发现异常呢？最容易想到的是做一个统计图表。</p><p>这个确实是必要的。</p><p>用一个我真实用过的表格来距离，这个表格是为了监控刷单。这个表格统计每个设备登录过的用户数和下过的订单量。</p><p>刷单设备号</p><p>一般一台手机只会被一个人使用，一个人一般在我们公司只会注册一个账号（不同业务具体分析，例如我妈注册了多个QQ号，因为她在玩斗地主，一个账号的欢乐豆不够），上图中可以清晰看出三台设备登录了几十个用户，人均下一单，符合刷单的情况。那么这就可以作为突破口继续查下去。</p><p>图中对可疑的数据会自动高亮，方便运营发现异常。当然了每天看表格比较麻烦，所以我们还会推送报警到管理员的手机，方便我们尽快解决问题。</p><p>除了对设备号做聚合统计，你还可以用IP、UID做聚合统计，当然也可以结合好几个一起聚合统计。</p><p>如果你学过SQL，大致可以想到就是调整一下group by的字段，似乎很简单。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> device</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> device, ip</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> device, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ip</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ip, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ... </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">group by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> device, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可是当真的开始写SQL的时候就陷入了崩溃，因为：</p><ol><li><p>日常需要监控的维度有很多，选哪几个呢？</p></li><li><p>多个维度的组合太多了，如上面的示例，如果想把device、ip、uid三个维度组合都统计出来，需要写7条SQL，如果维度再多一点，会很麻烦，很容易出错</p></li></ol><p>这个时候我们就可以借助一点算法了。</p><h1 id="使用频繁项集-frequent-pattern-发现异常" tabindex="-1"><a class="header-anchor" href="#使用频繁项集-frequent-pattern-发现异常"><span>使用频繁项集(Frequent Pattern)发现异常</span></a></h1><p>首先介绍一个简单、上手容易的算法——频繁项集。</p><p>Frequent Pattern 可以理解为频繁出现的特征组合，例如在你的订单记录中来自IP 13.67.233.10 且安卓设备就是一个Pattern，如果这个Pattern频繁出现，例如超过总请求量的10%，就值得我们关注了。</p><p>听上去和刚才介绍的SQL是一回事，但是使用FP-Growth之类的频繁项集挖掘算法，我们只需要指定所有需要分析的维度即可，而不需要人工将它们排列组合。</p><p>具体的实现可以使用 <a href="https://spark.apache.org/docs/l%E5%AE%A2%E6%88%B7%E7%AB%AFIDest/ml-frequent-p%E5%AE%A2%E6%88%B7%E7%AB%AFIDtern-mining.html#fp-growth" target="_blank" rel="noopener noreferrer">Spark ML FP-Growth</a></p><p>假设我们指定要分析的维度有api、UA、IP、客户端，使用Spark ML FP-Growth计算，重新将产出的结果格式化之后，类似这样：</p><table><thead><tr><th>Pattern</th><th>Pattern 计数</th></tr></thead><tbody><tr><td>ip-223.88.67,,rf-<a href="https://www.baidu.com/api,,ua-Mozilla/5.0" target="_blank" rel="noopener noreferrer">https://www.baidu.com/api,,ua-Mozilla/5.0</a> (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td><td>7198</td></tr><tr><td>api-/apis/reglogin/login.action,,ip-223.88.67,,ua-Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td><td>7198</td></tr><tr><td>客户端ID-1,,ip-223.88.67,,ua-Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td><td>7198</td></tr><tr><td>ip-223.88.67,,ua-Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td><td>7198</td></tr><tr><td>客户端ID-1,,ip-,,ua-Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td><td>6973</td></tr><tr><td>api-/apis/reglogin/login.action,,客户端ID-1,,ip-,,rf-<a href="https://www.baidu.com/api,,ua-Mozilla/5.0" target="_blank" rel="noopener noreferrer">https://www.baidu.com/api,,ua-Mozilla/5.0</a> (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</td><td>6836</td></tr><tr><td>客户端ID-30,,ua-Some Client PC 6.7.82.6548</td><td>6702</td></tr><tr><td>api-/apis/reglogin/pc_login.action,,ua-Some Client PC 6.7.82.6548</td><td>6702</td></tr><tr><td>ua-Some Client PC 6.7.82.6548</td><td>6702</td></tr><tr><td>api-/apis/reglogin/mobile_login.action,,客户端ID-34</td><td>6282</td></tr><tr><td>客户端ID-34</td><td>6282</td></tr></tbody></table><h2 id="时间序列检测" tabindex="-1"><a class="header-anchor" href="#时间序列检测"><span>时间序列检测</span></a></h2><p>除了通过请求频率判断是否有异常，还可以通过请求的时间序列来发现异常（异常不代表有攻击）。</p><p>时间序列可以理解为指标随着时间变化的规律。用地铁客流量来举例，一天中客流量应该类似下图，会有明显的早晚高峰。</p><figure><img src="https://github.com/WalterInSH/risk-management-note/blob/master/images/早晚高峰.jpg" alt="早晚高峰" tabindex="0" loading="lazy"><figcaption>早晚高峰</figcaption></figure><p>假设不考虑节假日，将多天的数据连起来看，差不多如下图。有明显的波动规律。所以如果某一天实际客流量不符合这个规律了，大概率是发生了什么事情，例如附近在举办大型的展览。</p><figure><img src="https://github.com/WalterInSH/risk-management-note/blob/master/images/早晚高峰时间序列.jpg" alt="早晚高峰时间序列" tabindex="0" loading="lazy"><figcaption>早晚高峰时间序列</figcaption></figure><h2 id="lstm" tabindex="-1"><a class="header-anchor" href="#lstm"><span>LSTM</span></a></h2><p>简单的频率比较容易识别，使用SQL或者某种计数系统就可以实现。</p><p>但是这种时间序列的异常应该怎么识别呢？</p><p>这就要提到最近几年被广泛使用的LSTM模型。</p><p>Long Short Term Memory(LSTM)是 递归神经网络（Recurrent Neural Network）的一种，具体的原理可以自行Google。</p><p>这里你需要知道的是使用LSTM可以很方便的对时间序列进行检测，特别是使用TensorFlow 2.0。</p><p>下图是使用TensorFlow预测的结果。</p><figure><img src="https://github.com/WalterInSH/risk-management-note/blob/master/images/time_series_LSTM.png" alt="time_series_LSTM" tabindex="0" loading="lazy"><figcaption>time_series_LSTM</figcaption></figure><p>具体例子可以参考 <a href="https://www.tensorflow.org/tutorials/structured_d%E5%AE%A2%E6%88%B7%E7%AB%AFIDa/time_series" target="_blank" rel="noopener noreferrer">TensorFlow 时间序列预测</a> 的例子。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/WalterInSH/risk-management-note" target="_blank" rel="noopener noreferrer">https://github.com/WalterInSH/risk-management-note</a></p>`,45)]))}const h=i(n,[["render",r]]),d=JSON.parse('{"path":"/posts/Biz/2021-02-16-risk-control-doc-04-02-risk-note-find.html","title":"风控资料汇总-04-02-风险控制笔记 基础篇之异常发现","lang":"zh-CN","frontmatter":{"title":"风控资料汇总-04-02-风险控制笔记 基础篇之异常发现","date":"2021-02-14T00:00:00.000Z","categories":["BIZ"],"tags":["biz","risk","risk-control","sh"],"published":true,"description":"异常发现 风控的运作过程中，第一个需要了解的是“异常发现”。 不是因为它最简单，而是因为大部分时候异常发现是风控工作的起点 异常发现是非常重要的一步，风控大量系统、算法、时间都和异常发现有关。 这一步就像是提出一个问题。如果你提不出问题，也就谈不到解决问题；其次，提出一个好问题可以让你更快的解决问题。 准确的发现异常，就是提出一个好问题 异常可以有很多...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Biz/2021-02-16-risk-control-doc-04-02-risk-note-find.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"风控资料汇总-04-02-风险控制笔记 基础篇之异常发现"}],["meta",{"property":"og:description","content":"异常发现 风控的运作过程中，第一个需要了解的是“异常发现”。 不是因为它最简单，而是因为大部分时候异常发现是风控工作的起点 异常发现是非常重要的一步，风控大量系统、算法、时间都和异常发现有关。 这一步就像是提出一个问题。如果你提不出问题，也就谈不到解决问题；其次，提出一个好问题可以让你更快的解决问题。 准确的发现异常，就是提出一个好问题 异常可以有很多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/WalterInSH/risk-management-note/blob/master/images/%E6%97%A9%E6%99%9A%E9%AB%98%E5%B3%B0.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"biz"}],["meta",{"property":"article:tag","content":"risk"}],["meta",{"property":"article:tag","content":"risk-control"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"风控资料汇总-04-02-风险控制笔记 基础篇之异常发现\\",\\"image\\":[\\"https://github.com/WalterInSH/risk-management-note/blob/master/images/%E6%97%A9%E6%99%9A%E9%AB%98%E5%B3%B0.jpg\\",\\"https://github.com/WalterInSH/risk-management-note/blob/master/images/%E6%97%A9%E6%99%9A%E9%AB%98%E5%B3%B0%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97.jpg\\",\\"https://github.com/WalterInSH/risk-management-note/blob/master/images/time_series_LSTM.png\\"],\\"datePublished\\":\\"2021-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.06,"words":1519},"filePathRelative":"posts/Biz/2021-02-16-risk-control-doc-04-02-risk-note-find.md","localizedDate":"2021年2月14日","excerpt":"\\n<p>风控的运作过程中，第一个需要了解的是“异常发现”。</p>\\n<p>不是因为它最简单，而是因为大部分时候异常发现是风控工作的起点</p>\\n<p>异常发现是非常重要的一步，风控大量系统、算法、时间都和异常发现有关。</p>\\n<p>这一步就像是提出一个问题。如果你提不出问题，也就谈不到解决问题；其次，提出一个好问题可以让你更快的解决问题。</p>\\n<p>准确的发现异常，就是提出一个好问题</p>\\n<p>异常可以有很多，例如：</p>\\n<p>昨天凌晨1点的订单比均值高<br>\\n今天注册用户数突然上升<br>\\n昨天验证码的请求量上升</p>\\n<h1>建立监控</h1>\\n<p>怎样发现异常呢？最容易想到的是做一个统计图表。</p>","autoDesc":true}');export{h as comp,d as data};
