import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as p,o as r}from"./app-CEDSurVN.js";const n={};function i(o,e){return r(),t("div",null,e[0]||(e[0]=[p('<h1 id="如何保证前端项目代码质量" tabindex="-1"><a class="header-anchor" href="#如何保证前端项目代码质量"><span>如何保证前端项目代码质量</span></a></h1><h1 id="什么是代码本身的质量" tabindex="-1"><a class="header-anchor" href="#什么是代码本身的质量"><span>什么是代码本身的质量?</span></a></h1><p>代码本身的质量: 包括复杂度, 重复率, 代码风格等。</p><p>复杂度: 项目代码量，模块大小，耦合度等重复率: 重复出现的代码区块占比，通常要求在5%以下(借助平台化工具如Sonar)代码风格: 代码风格是否统一(动态语言代码如JS, Python风格不受约束)</p><h1 id="代码质量下降恶性循环" tabindex="-1"><a class="header-anchor" href="#代码质量下降恶性循环"><span>代码质量下降恶性循环</span></a></h1><h2 id="常见的代码质量下降的原因" tabindex="-1"><a class="header-anchor" href="#常见的代码质量下降的原因"><span>常见的代码质量下降的原因:</span></a></h2><ol><li><p>破罐破摔: 在烂代码上迭代代码罪恶感比较小</p></li><li><p>传染性: 不在意代码质量, 只关注业务的产出</p></li><li><p>心有余而力不足</p></li></ol><h2 id="常见的导致恶性循环的场景" tabindex="-1"><a class="header-anchor" href="#常见的导致恶性循环的场景"><span>常见的导致恶性循环的场景:</span></a></h2><h3 id="业务压力太大" tabindex="-1"><a class="header-anchor" href="#业务压力太大"><span>业务压力太大</span></a></h3><p>烂代码产生的常见原因是业务压力大，导致没有时间或意愿讲究代码质量。</p><p>因为向业务压力妥协而生产烂代码之后，开发效率会随之下降，进而导致业务压力更大，形成一种典型的恶性循环。</p><figure><img src="https://pic1.zhimg.com/80/v2-6b9952b7b92e6ce0935b157df4e70e00_720w.jpg" alt="业务压力太大" tabindex="0" loading="lazy"><figcaption>业务压力太大</figcaption></figure><h3 id="通过增加人力解决业务压力" tabindex="-1"><a class="header-anchor" href="#通过增加人力解决业务压力"><span>通过增加人力解决业务压力</span></a></h3><p>为了应对业务压力，常见的做法就是向项目中增加人力，但是单纯地增加人力的话，会因为风格不一致、沟通成本上升等原因导致烂代码更多。</p><figure><img src="https://pic1.zhimg.com/80/v2-746a06d4bdf744025dfe3f2178978a64_720w.jpg" alt="通过增加人力解决业务压力" tabindex="0" loading="lazy"><figcaption>通过增加人力解决业务压力</figcaption></figure><p>那么我们应该如何解决呢?</p><figure><img src="https://pic4.zhimg.com/80/v2-05904b9c9c8f16c64df14c49de6dedcf_720w.jpg" alt="how?" tabindex="0" loading="lazy"><figcaption>how?</figcaption></figure><p>这是一个长期坚持的过程。</p><h1 id="代码质量管控四个阶段" tabindex="-1"><a class="header-anchor" href="#代码质量管控四个阶段"><span>代码质量管控四个阶段</span></a></h1><h2 id="规范化" tabindex="-1"><a class="header-anchor" href="#规范化"><span>规范化</span></a></h2><p>建立代码规范与Code Review制度</p><p><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">airbnb</a></p><p><a href="https://github.com/standard/standard" target="_blank" rel="noopener noreferrer">standard</a></p><p><a href="https://github.com/felixge/node-style-guide" target="_blank" rel="noopener noreferrer">node-style-guide</a></p><p><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener noreferrer">google javascript style guide</a></p><p><a href="https://google.github.io/styleguide/htmlcssguide.html" target="_blank" rel="noopener noreferrer">google html/css style guide</a></p><p><a href="https://cn.vuejs.org/v2/style-guide/" target="_blank" rel="noopener noreferrer">Vue风格指南</a></p><p>我觉得统一项目目录结构也是规范化的一种(比如我们用脚手架创建项目模板), 一个规范化的目录结构大大降低新人的上手成本。</p><h2 id="自动化" tabindex="-1"><a class="header-anchor" href="#自动化"><span>自动化</span></a></h2><p>使用工具(linters)自动检查代码质量。</p><figure><img src="https://pic1.zhimg.com/80/v2-1ebc4dddff2431b0dbd7501465cdd354_720w.jpg" alt="自动化" tabindex="0" loading="lazy"><figcaption>自动化</figcaption></figure><h2 id="流程化" tabindex="-1"><a class="header-anchor" href="#流程化"><span>流程化</span></a></h2><p>将代码质量检查与代码流动过程绑定。</p><figure><img src="https://pic2.zhimg.com/80/v2-a349e42c477019a6ad757bcf6a158c55_720w.png" alt="流程化" tabindex="0" loading="lazy"><figcaption>流程化</figcaption></figure><p>质量检查与代码流动绑定后的效果：</p><figure><img src="https://pic2.zhimg.com/80/v2-a2f7994262f8f57434e1099c467aabf1_720w.jpg" alt="效果" tabindex="0" loading="lazy"><figcaption>效果</figcaption></figure><p>备注:</p><ol><li><p>编辑时候: 通过编辑器插件, 实时查看质量检查</p></li><li><p>可以利用CI(Jekins/Travis)把构建发布过程搬到线上, 先跑代码扫描, 测试代码等, 然后没有错误再进行build, build成功通过ssh推到服务器。</p></li></ol><h2 id="中心化" tabindex="-1"><a class="header-anchor" href="#中心化"><span>中心化</span></a></h2><p>以团队整体为视角，集中管理代码规范，并实现质量状况透明化。</p><p>当团队规模越来越大，项目越来越多时，代码质量管控就会面临以下问题：</p><ul><li><p>不同项目使用的代码规范不一样</p></li><li><p>部分项目由于放松要求，没有接入质量检查，或者存在大量未修复的缺陷</p></li><li><p>无法从团队整体层面上体现各个项目的质量状况对比</p></li></ul><p>为了应对以上问题，需要建设中心化的代码质量管控体系，要点包括：</p><p>代码规范统一管理。通过脚手架命令垂直管理代码扫描配置规则集, 自动安装，不在本地写规则。一个团队、一类项目、一套规则。</p><h2 id="why" tabindex="-1"><a class="header-anchor" href="#why"><span>why</span></a></h2><p>代码质量是团队技术水平和管理水平的直接体现。</p><p>看代码的时间远远多于写代码的时间。</p><h1 id="how" tabindex="-1"><a class="header-anchor" href="#how"><span>how</span></a></h1><h2 id="editorconfig" tabindex="-1"><a class="header-anchor" href="#editorconfig"><span>EditorConfig</span></a></h2><p>EditorConfig在多人协作开发项目时候, 支持跨编辑器, IDE来支持维护一致的编码样式(文件格式)。</p><p>VSCode插件EditorConfig for VS Code提供一键生成.editorconfig。</p><p>查看实例。</p><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h2><p>官网介绍。</p><h2 id="git-hooks" tabindex="-1"><a class="header-anchor" href="#git-hooks"><span>Git Hooks</span></a></h2><p>Git能在特定的重要动作发生时触发自定义脚本。</p><p>有两组这样的钩子：客户端的和服务器端的。</p><p>客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作, 我们目前使用的大多数是客户端钩子。</p><p>通过husky集成git hooks, 如果对git想有更全面的理解推荐阅读GIt文档。</p><p>husky会安装一系列的git hook到项目的.git/hook目录中。</p><p>下面两张图分别对比没有安装husky与安装了husky的git目录区别:</p><p>当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本(.sample结尾的文件)。</p><h3 id="pre-commit" tabindex="-1"><a class="header-anchor" href="#pre-commit"><span>pre-commit</span></a></h3><p>pre-commit 钩子在键入提交信息前运行。 它用于检查即将提交的快照，你可以利用该钩子，来检查代码风格是否一致（运行类似 lint 的程序。</p><p>lint-staged: 可以获取所有被提交的文件并执行配置好的任务命令,各种lint校验工具可以配置好lint-staged任务中。</p><p>prettier: 可以配置到lint-staged中, 实现自动格式化编码风格。</p><p>stylelint</p><p>eslint</p><p>tslint</p><p>eslint-plugin-vue: Vue.js官方推荐的lint工具</p><p>关于为什么选择prettier, 以及eslint 与prettier区别?。</p><p>关于prettier配置。 关于stylelint配置。</p><p>关于eslint配置。</p><h3 id="commit-msg" tabindex="-1"><a class="header-anchor" href="#commit-msg"><span>commit-msg</span></a></h3><p>commitlint。</p><p>commit-msg 可以用来在提交通过前验证项目状态或提交信息, 使用该钩子来核对提交信息是否遵循指定的模板。</p><p>关于git hooks在package.json配置:</p><h1 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h1><h2 id="unittest" tabindex="-1"><a class="header-anchor" href="#unittest"><span>unittest</span></a></h2><p><a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a></p><p><a href="https://mochajs.org/" target="_blank" rel="noopener noreferrer">Mocha</a></p><h2 id="e2e" tabindex="-1"><a class="header-anchor" href="#e2e"><span>e2e</span></a></h2><p><a href="http://nightwatchjs.org/" target="_blank" rel="noopener noreferrer">Nightwatch</a></p><p><a href="https://www.cypress.io/" target="_blank" rel="noopener noreferrer">Cypress</a></p><h2 id="changelog" tabindex="-1"><a class="header-anchor" href="#changelog"><span>CHANGELOG</span></a></h2><p>更新日志, standard-version,如果是工具类的话肯定需要自动生成CHANGELOG，以及自动发布脚本，后续我会分享一篇如何写一个开源的前端脚手架。</p><h2 id="code-review" tabindex="-1"><a class="header-anchor" href="#code-review"><span>Code Review</span></a></h2><ul><li>阻塞式</li></ul><p>当我们提交代码时候，以PR方式 + 邀请指定相关人进行code review，只有当大家都通过后再有相关人员进行merge。</p><p>此外在正式发版前还需要进行线下评审。</p><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>多思考。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://zhuanlan.zhihu.com/p/82546272" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/82546272</a></p><p><a href="https://blog.csdn.net/qq_24073885/article/details/121916084" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_24073885/article/details/121916084</a></p><p><a href="https://segmentfault.com/a/1190000022612208" target="_blank" rel="noopener noreferrer">https://segmentfault.com/a/1190000022612208</a></p><p><a href="http://www.javashuo.com/article/p-hwsjdjhx-da.html" target="_blank" rel="noopener noreferrer">http://www.javashuo.com/article/p-hwsjdjhx-da.html</a></p><p><a href="http://www.javashuo.com/article/p-wrzomaxs-ha.html" target="_blank" rel="noopener noreferrer">http://www.javashuo.com/article/p-wrzomaxs-ha.html</a></p><p><a href="https://www.infoq.cn/article/CcSVZrtPrycLIvVi61v7" target="_blank" rel="noopener noreferrer">https://www.infoq.cn/article/CcSVZrtPrycLIvVi61v7</a></p><p><a href="https://www.cnblogs.com/zhouyangla/p/9660310.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhouyangla/p/9660310.html</a></p><p><a href="https://cloud.tencent.com/developer/news/674872" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/news/674872</a></p><p><a href="https://blog.csdn.net/iceggy/article/details/122496018" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/iceggy/article/details/122496018</a></p>',102)]))}const c=a(n,[["render",i]]),l=JSON.parse('{"path":"/posts/Project/2022-08-24-project-manage-01-overview.html","title":"项目管理-前端项目如何保证项目质量？","lang":"zh-CN","frontmatter":{"title":"项目管理-前端项目如何保证项目质量？","date":"2022-08-24T00:00:00.000Z","categories":["Project"],"tags":["project","web","sh"],"published":true,"description":"如何保证前端项目代码质量 什么是代码本身的质量? 代码本身的质量: 包括复杂度, 重复率, 代码风格等。 复杂度: 项目代码量，模块大小，耦合度等重复率: 重复出现的代码区块占比，通常要求在5%以下(借助平台化工具如Sonar)代码风格: 代码风格是否统一(动态语言代码如JS, Python风格不受约束) 代码质量下降恶性循环 常见的代码质量下降的原因...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Project/2022-08-24-project-manage-01-overview.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"项目管理-前端项目如何保证项目质量？"}],["meta",{"property":"og:description","content":"如何保证前端项目代码质量 什么是代码本身的质量? 代码本身的质量: 包括复杂度, 重复率, 代码风格等。 复杂度: 项目代码量，模块大小，耦合度等重复率: 重复出现的代码区块占比，通常要求在5%以下(借助平台化工具如Sonar)代码风格: 代码风格是否统一(动态语言代码如JS, Python风格不受约束) 代码质量下降恶性循环 常见的代码质量下降的原因..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic1.zhimg.com/80/v2-6b9952b7b92e6ce0935b157df4e70e00_720w.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"project"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2022-08-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目管理-前端项目如何保证项目质量？\\",\\"image\\":[\\"https://pic1.zhimg.com/80/v2-6b9952b7b92e6ce0935b157df4e70e00_720w.jpg\\",\\"https://pic1.zhimg.com/80/v2-746a06d4bdf744025dfe3f2178978a64_720w.jpg\\",\\"https://pic4.zhimg.com/80/v2-05904b9c9c8f16c64df14c49de6dedcf_720w.jpg\\",\\"https://pic1.zhimg.com/80/v2-1ebc4dddff2431b0dbd7501465cdd354_720w.jpg\\",\\"https://pic2.zhimg.com/80/v2-a349e42c477019a6ad757bcf6a158c55_720w.png\\",\\"https://pic2.zhimg.com/80/v2-a2f7994262f8f57434e1099c467aabf1_720w.jpg\\"],\\"datePublished\\":\\"2022-08-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.25,"words":1576},"filePathRelative":"posts/Project/2022-08-24-project-manage-01-overview.md","localizedDate":"2022年8月24日","excerpt":"\\n<h1>什么是代码本身的质量?</h1>\\n<p>代码本身的质量: 包括复杂度, 重复率, 代码风格等。</p>\\n<p>复杂度: 项目代码量，模块大小，耦合度等重复率: 重复出现的代码区块占比，通常要求在5%以下(借助平台化工具如Sonar)代码风格: 代码风格是否统一(动态语言代码如JS, Python风格不受约束)</p>\\n<h1>代码质量下降恶性循环</h1>\\n<h2>常见的代码质量下降的原因:</h2>\\n<ol>\\n<li>\\n<p>破罐破摔: 在烂代码上迭代代码罪恶感比较小</p>\\n</li>\\n<li>\\n<p>传染性: 不在意代码质量, 只关注业务的产出</p>\\n</li>\\n<li>\\n<p>心有余而力不足</p>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,l as data};
