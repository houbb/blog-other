import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as l,b as r,d as a,e as n,w as i,r as h,o as p}from"./app-uJE4P3e0.js";const d={};function c(g,e){const t=h("RouteLink");return p(),o("div",null,[e[33]||(e[33]=l('<h1 id="系统设计入门" tabindex="-1"><a class="header-anchor" href="#系统设计入门"><span>系统设计入门</span></a></h1><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><blockquote><p>学习如何设计大型系统。</p><p>为系统设计的面试做准备。</p></blockquote><h3 id="学习如何设计大型系统" tabindex="-1"><a class="header-anchor" href="#学习如何设计大型系统"><span>学习如何设计大型系统</span></a></h3><p>学习如何设计可扩展的系统将会有助于你成为一个更好的工程师。</p><p>系统设计是一个很宽泛的话题。在互联网上，<strong>关于系统设计原则的资源也是多如牛毛。</strong></p><p>这个仓库就是这些资源的<strong>组织收集</strong>，它可以帮助你学习如何构建可扩展的系统。</p><h3 id="从开源社区学习" tabindex="-1"><a class="header-anchor" href="#从开源社区学习"><span>从开源社区学习</span></a></h3><p>这是一个不断更新的开源项目的初期的版本。</p><p>欢迎<a href="#%E8%B4%A1%E7%8C%AE">贡献</a>！</p><h3 id="为系统设计的面试做准备" tabindex="-1"><a class="header-anchor" href="#为系统设计的面试做准备"><span>为系统设计的面试做准备</span></a></h3><p>在很多科技公司中，除了代码面试，系统设计也是<strong>技术面试过程</strong>中的一个<strong>必要环节</strong>。</p><p><strong>实践常见的系统设计面试题</strong>并且把你的答案和<strong>例子的解答</strong>进行<strong>对照</strong>：讨论，代码和图表。</p><p>面试准备的其他主题：</p><ul><li><a href="#%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%BC%95">学习指引</a></li><li><a href="#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98">如何处理一个系统设计的面试题</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94">系统设计的面试题，<strong>含解答</strong></a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E7%AD%94">面向对象设计的面试题，<strong>含解答</strong></a></li><li><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">其它的系统设计面试题</a></li></ul><h2 id="抽认卡" tabindex="-1"><a class="header-anchor" href="#抽认卡"><span>抽认卡</span></a></h2><p>这里提供的<a href="https://apps.ankiweb.net/" target="_blank" rel="noopener noreferrer">抽认卡堆</a>使用间隔重复的方法，帮助你记忆关键的系统设计概念。</p><ul><li><a href="resources/flash_cards/System%20Design.apkg">系统设计的卡堆</a></li><li><a href="resources/flash_cards/System%20Design%20Exercises.apkg">系统设计的练习卡堆</a></li><li><a href="resources/flash_cards/OO%20Design.apkg">面向对象设计的练习卡堆</a></li></ul><p>随时随地都可使用。</p><h3 id="代码资源-互动式编程挑战" tabindex="-1"><a class="header-anchor" href="#代码资源-互动式编程挑战"><span>代码资源：互动式编程挑战</span></a></h3><p>你正在寻找资源以准备<a href="https://github.com/donnemartin/interactive-coding-challenges" target="_blank" rel="noopener noreferrer"><strong>编程面试</strong></a>吗？</p><p>请查看我们的姐妹仓库<a href="https://github.com/donnemartin/interactive-coding-challenges" target="_blank" rel="noopener noreferrer"><strong>互动式编程挑战</strong></a>，其中包含了一个额外的抽认卡堆：</p><ul><li><a href="https://github.com/donnemartin/interactive-coding-challenges/tree/master/anki_cards/Coding.apkg" target="_blank" rel="noopener noreferrer">代码卡堆</a></li></ul><h2 id="贡献" tabindex="-1"><a class="header-anchor" href="#贡献"><span>贡献</span></a></h2><blockquote><p>从社区中学习。</p></blockquote><p>欢迎提交 PR 提供帮助：</p><ul><li>修复错误</li><li>完善章节</li><li>添加章节</li><li><a href="https://github.com/donnemartin/system-design-primer/issues/28" target="_blank" rel="noopener noreferrer">帮助翻译</a></li></ul><p>一些还需要完善的内容放在了<a href="#%E6%AD%A3%E5%9C%A8%E5%AE%8C%E5%96%84%E4%B8%AD">正在完善中</a>。</p>',28)),r("p",null,[e[1]||(e[1]=a("请查看")),n(t,{to:"/posts/Awesome/CONTRIBUTING.html"},{default:i(()=>e[0]||(e[0]=[a("贡献指南")])),_:1}),e[2]||(e[2]=a("。"))]),e[34]||(e[34]=l('<h2 id="系统设计主题的索引" tabindex="-1"><a class="header-anchor" href="#系统设计主题的索引"><span>系统设计主题的索引</span></a></h2><blockquote><p>各种系统设计主题的摘要，包括优点和缺点。<strong>每一个主题都面临着取舍和权衡</strong>。</p><p>每个章节都包含着更多的资源的链接。</p></blockquote><ul><li><a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E4%BB%8E%E8%BF%99%E9%87%8C%E5%BC%80%E5%A7%8B">系统设计主题：从这里开始</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%9B%9E%E9%A1%BE%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7scalability%E7%9A%84%E8%A7%86%E9%A2%91%E8%AE%B2%E5%BA%A7">第一步：回顾可扩展性的视频讲座</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%9B%9E%E9%A1%BE%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%E6%96%87%E7%AB%A0">第二步：回顾可扩展性的文章</a></li><li><a href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%AD%A5%E9%AA%A4">接下来的步骤</a></li></ul></li><li><a href="#%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7">性能与拓展性</a></li><li><a href="#%E5%BB%B6%E8%BF%9F%E4%B8%8E%E5%90%9E%E5%90%90%E9%87%8F">延迟与吞吐量</a></li><li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7">可用性与一致性</a><ul><li><a href="#cap-%E7%90%86%E8%AE%BA">CAP 理论</a><ul><li><a href="#cp--%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7">CP - 一致性和分区容错性</a></li><li><a href="#ap--%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8E%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7">AP - 可用性和分区容错性</a></li></ul></li></ul></li><li><a href="#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F">一致模式</a><ul><li><a href="#%E5%BC%B1%E4%B8%80%E8%87%B4%E6%80%A7">弱一致性</a></li><li><a href="#%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7">最终一致性</a></li><li><a href="#%E5%BC%BA%E4%B8%80%E8%87%B4%E6%80%A7">强一致性</a></li></ul></li><li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F">可用模式</a><ul><li><a href="#%E6%95%85%E9%9A%9C%E5%88%87%E6%8D%A2">故障切换</a></li><li><a href="#%E5%A4%8D%E5%88%B6">复制</a></li></ul></li><li><a href="#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统</a></li><li><a href="#%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn">CDN</a><ul><li><a href="#cdn-%E6%8E%A8%E9%80%81push">CDN 推送</a></li><li><a href="#cdn-%E6%8B%89%E5%8F%96pull">CDN 拉取</a></li></ul></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">负载均衡器</a><ul><li><a href="#%E5%B7%A5%E4%BD%9C%E5%88%B0%E5%A4%87%E7%94%A8%E5%88%87%E6%8D%A2active-passive">工作到备用切换（Active-passive）</a></li><li><a href="#%E5%8F%8C%E5%B7%A5%E4%BD%9C%E5%88%87%E6%8D%A2active-active">双工作切换（Active-active）</a></li><li><a href="#%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">四层负载均衡</a></li><li><a href="#%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">七层负载均衡</a></li><li><a href="#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95">水平扩展</a></li></ul></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8">反向代理（web 服务器）</a><ul><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">负载均衡与反向代理</a></li></ul></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a><ul><li><a href="#%E5%BE%AE%E6%9C%8D%E5%8A%A1">微服务</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0">服务发现</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a><ul><li><a href="#%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Frdbms">关系型数据库管理系统（RDBMS）</a><ul><li><a href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">Master-slave 复制集</a></li><li><a href="#%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6">Master-master 复制集</a></li><li><a href="#%E8%81%94%E5%90%88">联合</a></li><li><a href="#%E5%88%86%E7%89%87">分片</a></li><li><a href="#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96">非规范化</a></li><li><a href="#sql-%E8%B0%83%E4%BC%98">SQL 调优</a></li></ul></li><li><a href="#nosql">NoSQL</a><ul><li><a href="#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8">Key-value 存储</a></li><li><a href="#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8">文档存储</a></li><li><a href="#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8">宽列存储</a></li><li><a href="#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93">图数据库</a></li></ul></li><li><a href="#sql-%E8%BF%98%E6%98%AF-nosql">SQL 还是 NoSQL</a></li></ul></li><li><a href="#%E7%BC%93%E5%AD%98">缓存</a><ul><li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98">客户端缓存</a></li><li><a href="#cdn-%E7%BC%93%E5%AD%98">CDN 缓存</a></li><li><a href="#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98">Web 服务器缓存</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98">数据库缓存</a></li><li><a href="#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98">应用缓存</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98">数据库查询级别的缓存</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98">对象级别的缓存</a></li><li><a href="#%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0%E7%BC%93%E5%AD%98">何时更新缓存</a><ul><li><a href="#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F">缓存模式</a></li><li><a href="#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F">直写模式</a></li><li><a href="#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F">回写模式</a></li><li><a href="#%E5%88%B7%E6%96%B0">刷新</a></li></ul></li></ul></li><li><a href="#%E5%BC%82%E6%AD%A5">异步</a><ul><li><a href="#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息队列</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97">任务队列</a></li><li><a href="#%E8%83%8C%E5%8E%8B">背压机制</a></li></ul></li><li><a href="#%E9%80%9A%E8%AE%AF">通讯</a><ul><li><a href="#%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AEtcp">传输控制协议（TCP）</a></li><li><a href="#%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp">用户数据报协议（UDP）</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc">远程控制调用协议（RPC）</a></li><li><a href="#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest">表述性状态转移（REST）</a></li></ul></li><li><a href="#%E5%AE%89%E5%85%A8">安全</a></li><li><a href="#%E9%99%84%E5%BD%95">附录</a><ul><li><a href="#2-%E7%9A%84%E6%AC%A1%E6%96%B9%E8%A1%A8">2 的次方表</a></li><li><a href="#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0">每个程序员都应该知道的延迟数</a></li><li><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">其它的系统设计面试题</a></li><li><a href="#%E7%9C%9F%E5%AE%9E%E6%9E%B6%E6%9E%84">真实架构</a></li><li><a href="#%E5%85%AC%E5%8F%B8%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84">公司的系统架构</a></li><li><a href="#%E5%85%AC%E5%8F%B8%E5%B7%A5%E7%A8%8B%E5%8D%9A%E5%AE%A2">公司工程博客</a></li></ul></li><li><a href="#%E6%AD%A3%E5%9C%A8%E5%AE%8C%E5%96%84%E4%B8%AD">正在完善中</a></li><li><a href="#%E8%87%B4%E8%B0%A2">致谢</a></li><li><a href="#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F">联系方式</a></li><li><a href="#%E8%AE%B8%E5%8F%AF">许可</a></li></ul><h2 id="学习指引" tabindex="-1"><a class="header-anchor" href="#学习指引"><span>学习指引</span></a></h2><blockquote><p>基于你面试的时间线（短、中、长）去复习那些推荐的主题。</p></blockquote><p><strong>问：对于面试来说，我需要知道这里的所有知识点吗？</strong></p><p><strong>答：不，如果只是为了准备面试的话，你并不需要知道所有的知识点。</strong></p><p>在一场面试中你会被问到什么取决于下面这些因素：</p><ul><li>你的经验</li><li>你的技术背景</li><li>你面试的职位</li><li>你面试的公司</li><li>运气</li></ul><p>那些有经验的候选人通常会被期望了解更多的系统设计的知识。架构师或者团队负责人则会被期望了解更多除了个人贡献之外的知识。顶级的科技公司通常也会有一次或者更多的系统设计面试。</p><p>面试会很宽泛的展开并在几个领域深入。这会帮助你了解一些关于系统设计的不同的主题。基于你的时间线，经验，面试的职位和面试的公司对下面的指导做出适当的调整。</p><ul><li><strong>短期</strong> - 以系统设计主题的<strong>广度</strong>为目标。通过解决<strong>一些</strong>面试题来练习。</li><li><strong>中期</strong> - 以系统设计主题的<strong>广度</strong>和<strong>初级深度</strong>为目标。通过解决<strong>很多</strong>面试题来练习。</li><li><strong>长期</strong> - 以系统设计主题的<strong>广度</strong>和<strong>高级深度</strong>为目标。通过解决<strong>大部分</strong>面试题来练习。</li></ul><table><thead><tr><th></th><th>短期</th><th>中期</th><th>长期</th></tr></thead><tbody><tr><td>阅读 <a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95">系统设计主题</a> 以获得一个关于系统如何工作的宽泛的认识</td><td>👍</td><td>👍</td><td>👍</td></tr><tr><td>阅读一些你要面试的<a href="#%E5%85%AC%E5%8F%B8%E5%B7%A5%E7%A8%8B%E5%8D%9A%E5%AE%A2">公司工程博客</a>的文章</td><td>👍</td><td>👍</td><td>👍</td></tr><tr><td>阅读 <a href="#%E7%9C%9F%E5%AE%9E%E6%9E%B6%E6%9E%84">真实架构</a></td><td>👍</td><td>👍</td><td>👍</td></tr><tr><td>复习 <a href="#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%AA%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">如何处理一个系统设计面试题</a></td><td>👍</td><td>👍</td><td>👍</td></tr><tr><td>完成 <a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94">系统设计的面试题和解答</a></td><td>一些</td><td>很多</td><td>大部分</td></tr><tr><td>完成 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E7%AD%94">面向对象设计的面试题和解答</a></td><td>一些</td><td>很多</td><td>大部分</td></tr><tr><td>复习 <a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E9%9D%A2%E8%AF%95%E9%A2%98">其它的系统设计面试题</a></td><td>一些</td><td>很多</td><td>大部分</td></tr></tbody></table><h2 id="如何处理一个系统设计的面试题" tabindex="-1"><a class="header-anchor" href="#如何处理一个系统设计的面试题"><span>如何处理一个系统设计的面试题</span></a></h2><p>系统设计面试是一个<strong>开放式的对话</strong>。他们期望你去主导这个对话。</p><p>你可以使用下面的步骤来指引讨论。为了巩固这个过程，请使用下面的步骤完成<a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%E5%92%8C%E8%A7%A3%E7%AD%94">系统设计的面试题和解答</a>这个章节。</p><h3 id="第一步-描述使用场景-约束和假设" tabindex="-1"><a class="header-anchor" href="#第一步-描述使用场景-约束和假设"><span>第一步：描述使用场景，约束和假设</span></a></h3><p>把所有需要的东西聚集在一起，审视问题。不停的提问，以至于我们可以明确使用场景和约束。讨论假设。</p><ul><li>谁会使用它？</li><li>他们会怎样使用它？</li><li>有多少用户？</li><li>系统的作用是什么？</li><li>系统的输入输出分别是什么？</li><li>我们希望处理多少数据？</li><li>我们希望每秒钟处理多少请求？</li><li>我们希望的读写比率？</li></ul><h3 id="第二步-创造一个高层级的设计" tabindex="-1"><a class="header-anchor" href="#第二步-创造一个高层级的设计"><span>第二步：创造一个高层级的设计</span></a></h3><p>使用所有重要的组件来描绘出一个高层级的设计。</p><ul><li>画出主要的组件和连接</li><li>证明你的想法</li></ul><h3 id="第三步-设计核心组件" tabindex="-1"><a class="header-anchor" href="#第三步-设计核心组件"><span>第三步：设计核心组件</span></a></h3>',23)),r("p",null,[e[4]||(e[4]=a("对每一个核心组件进行详细深入的分析。举例来说，如果你被问到")),n(t,{to:"/posts/Awesome/solutions/system_design/pastebin/"},{default:i(()=>e[3]||(e[3]=[a("设计一个 url 缩写服务")])),_:1}),e[5]||(e[5]=a("，开始讨论："))]),r("ul",null,[r("li",null,[e[12]||(e[12]=a("生成并储存一个完整 url 的 hash ")),r("ul",null,[r("li",null,[n(t,{to:"/posts/Awesome/solutions/system_design/pastebin/"},{default:i(()=>e[6]||(e[6]=[a("MD5")])),_:1}),e[8]||(e[8]=a(" 和 ")),n(t,{to:"/posts/Awesome/solutions/system_design/pastebin/"},{default:i(()=>e[7]||(e[7]=[a("Base62")])),_:1})]),e[9]||(e[9]=r("li",null,"Hash 碰撞",-1)),e[10]||(e[10]=r("li",null,"SQL 还是 NoSQL",-1)),e[11]||(e[11]=r("li",null,"数据库模型",-1))])]),e[13]||(e[13]=r("li",null,[a("将一个 hashed url 翻译成完整的 url "),r("ul",null,[r("li",null,"数据库查找")])],-1)),e[14]||(e[14]=r("li",null,"API 和面向对象设计",-1))]),e[35]||(e[35]=l('<h3 id="第四步-扩展设计" tabindex="-1"><a class="header-anchor" href="#第四步-扩展设计"><span>第四步：扩展设计</span></a></h3><p>确认和处理瓶颈以及一些限制。举例来说就是你需要下面的这些来完成扩展性的议题吗？</p><ul><li>负载均衡</li><li>水平扩展</li><li>缓存</li><li>数据库分片</li></ul><p>论述可能的解决办法和代价。每件事情需要取舍。可以使用<a href="#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95">可扩展系统的设计原则</a>来处理瓶颈。</p><h3 id="预估计算量" tabindex="-1"><a class="header-anchor" href="#预估计算量"><span>预估计算量</span></a></h3><p>你或许会被要求通过手算进行一些估算。<a href="#%E9%99%84%E5%BD%95">附录</a>涉及到的是下面的这些资源：</p><ul><li><a href="http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html" target="_blank" rel="noopener noreferrer">使用预估计算量</a></li><li><a href="#2-%E7%9A%84%E6%AC%A1%E6%96%B9%E8%A1%A8">2 的次方表</a></li><li><a href="#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0">每个程序员都应该知道的延迟数</a></li></ul><h3 id="相关资源和延伸阅读" tabindex="-1"><a class="header-anchor" href="#相关资源和延伸阅读"><span>相关资源和延伸阅读</span></a></h3><p>查看下面的链接以获得我们期望的更好的想法：</p><ul><li><a href="https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/" target="_blank" rel="noopener noreferrer">怎样通过一个系统设计的面试</a></li><li><a href="http://www.hiredintech.com/system-design" target="_blank" rel="noopener noreferrer">系统设计的面试</a></li><li><a href="https://www.youtube.com/watch?v=ZgdS0EUmn70" target="_blank" rel="noopener noreferrer">系统架构与设计的面试简介</a></li></ul><h2 id="系统设计的面试题和解答" tabindex="-1"><a class="header-anchor" href="#系统设计的面试题和解答"><span>系统设计的面试题和解答</span></a></h2><blockquote><p>普通的系统设计面试题和相关事例的论述，代码和图表。</p></blockquote><blockquote><p>与内容有关的解答在 <code>solutions/</code> 文件夹中。</p></blockquote>',13)),r("table",null,[e[32]||(e[32]=r("thead",null,[r("tr",null,[r("th",null,"问题"),r("th")])],-1)),r("tbody",null,[r("tr",null,[e[16]||(e[16]=r("td",null,[a("设计 "),r("a",{href:"http://Pastebin.com",target:"_blank",rel:"noopener noreferrer"},"Pastebin.com"),a(" (或者 "),r("a",{href:"http://Bit.ly",target:"_blank",rel:"noopener noreferrer"},"Bit.ly"),a(")")],-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/pastebin/README-zh-Hans.html"},{default:i(()=>e[15]||(e[15]=[a("解答")])),_:1})])]),r("tr",null,[e[18]||(e[18]=r("td",null,"设计 Twitter 时间线和搜索 (或者 Facebook feed 和搜索)",-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/twitter/"},{default:i(()=>e[17]||(e[17]=[a("解答")])),_:1})])]),r("tr",null,[e[20]||(e[20]=r("td",null,"设计一个网页爬虫",-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/web_crawler/"},{default:i(()=>e[19]||(e[19]=[a("解答")])),_:1})])]),r("tr",null,[e[22]||(e[22]=r("td",null,[a("设计 "),r("a",{href:"http://Mint.com",target:"_blank",rel:"noopener noreferrer"},"Mint.com")],-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/mint/"},{default:i(()=>e[21]||(e[21]=[a("解答")])),_:1})])]),r("tr",null,[e[24]||(e[24]=r("td",null,"为一个社交网络设计数据结构",-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/social_graph/"},{default:i(()=>e[23]||(e[23]=[a("解答")])),_:1})])]),r("tr",null,[e[26]||(e[26]=r("td",null,"为搜索引擎设计一个 key-value 储存",-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/query_cache/"},{default:i(()=>e[25]||(e[25]=[a("解答")])),_:1})])]),r("tr",null,[e[28]||(e[28]=r("td",null,"通过分类特性设计 Amazon 的销售排名",-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/sales_rank/"},{default:i(()=>e[27]||(e[27]=[a("解答")])),_:1})])]),r("tr",null,[e[30]||(e[30]=r("td",null,"在 AWS 上设计一个百万用户级别的系统",-1)),r("td",null,[n(t,{to:"/posts/Awesome/solutions/system_design/scaling_aws/"},{default:i(()=>e[29]||(e[29]=[a("解答")])),_:1})])]),e[31]||(e[31]=r("tr",null,[r("td",null,"添加一个系统设计问题"),r("td",null,[r("a",{href:"#%E8%B4%A1%E7%8C%AE"},"贡献")])],-1))])]),e[36]||(e[36]=l(`<h2 id="面向对象设计的面试问题及解答" tabindex="-1"><a class="header-anchor" href="#面向对象设计的面试问题及解答"><span>面向对象设计的面试问题及解答</span></a></h2><blockquote><p>常见面向对象设计面试问题及实例讨论，代码和图表演示。</p><p>与内容相关的解决方案在 <code>solutions/</code> 文件夹中。</p></blockquote><blockquote><p><strong>注：此节还在完善中</strong></p></blockquote><table><thead><tr><th>问题</th><th></th></tr></thead><tbody><tr><td>设计 hash map</td><td><a href="solutions/object_oriented_design/hash_table/hash_map.ipynb">解决方案</a></td></tr><tr><td>设计 LRU 缓存</td><td><a href="solutions/object_oriented_design/lru_cache/lru_cache.ipynb">解决方案</a></td></tr><tr><td>设计一个呼叫中心</td><td><a href="solutions/object_oriented_design/call_center/call_center.ipynb">解决方案</a></td></tr><tr><td>设计一副牌</td><td><a href="solutions/object_oriented_design/deck_of_cards/deck_of_cards.ipynb">解决方案</a></td></tr><tr><td>设计一个停车场</td><td><a href="solutions/object_oriented_design/parking_lot/parking_lot.ipynb">解决方案</a></td></tr><tr><td>设计一个聊天服务</td><td><a href="solutions/object_oriented_design/online_chat/online_chat.ipynb">解决方案</a></td></tr><tr><td>设计一个环形数组</td><td><a href="#%E8%B4%A1%E7%8C%AE">待解决</a></td></tr><tr><td>添加一个面向对象设计问题</td><td><a href="#%E8%B4%A1%E7%8C%AE">待解决</a></td></tr></tbody></table><h2 id="系统设计主题-从这里开始" tabindex="-1"><a class="header-anchor" href="#系统设计主题-从这里开始"><span>系统设计主题：从这里开始</span></a></h2><p>不熟悉系统设计？</p><p>首先，你需要对一般性原则有一个基本的认识，知道它们是什么，怎样使用以及利弊。</p><h3 id="第一步-回顾可扩展性-scalability-的视频讲座" tabindex="-1"><a class="header-anchor" href="#第一步-回顾可扩展性-scalability-的视频讲座"><span>第一步：回顾可扩展性（scalability）的视频讲座</span></a></h3><p><a href="https://www.youtube.com/watch?v=-W9F__D3oY4" target="_blank" rel="noopener noreferrer">哈佛大学可扩展性讲座</a></p><ul><li>主题涵盖 <ul><li>垂直扩展（Vertical scaling）</li><li>水平扩展（Horizontal scaling）</li><li>缓存</li><li>负载均衡</li><li>数据库复制</li><li>数据库分区</li></ul></li></ul><h3 id="第二步-回顾可扩展性文章" tabindex="-1"><a class="header-anchor" href="#第二步-回顾可扩展性文章"><span>第二步：回顾可扩展性文章</span></a></h3><p><a href="http://www.lecloud.net/tagged/scalability/chrono" target="_blank" rel="noopener noreferrer">可扩展性</a></p><ul><li>主题涵盖： <ul><li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones" target="_blank" rel="noopener noreferrer">Clones</a></li><li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database" target="_blank" rel="noopener noreferrer">数据库</a></li><li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache" target="_blank" rel="noopener noreferrer">缓存</a></li><li><a href="http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism" target="_blank" rel="noopener noreferrer">异步</a></li></ul></li></ul><h3 id="接下来的步骤" tabindex="-1"><a class="header-anchor" href="#接下来的步骤"><span>接下来的步骤</span></a></h3><p>接下来，我们将看看高阶的权衡和取舍:</p><ul><li><strong>性能</strong>与<strong>可扩展性</strong></li><li><strong>延迟</strong>与<strong>吞吐量</strong></li><li><strong>可用性</strong>与<strong>一致性</strong></li></ul><p>记住<strong>每个方面都面临取舍和权衡</strong>。</p><p>然后，我们将深入更具体的主题，如 DNS、CDN 和负载均衡器。</p><h2 id="性能与可扩展性" tabindex="-1"><a class="header-anchor" href="#性能与可扩展性"><span>性能与可扩展性</span></a></h2><p>如果服务<strong>性能</strong>的增长与资源的增加是成比例的，服务就是可扩展的。通常，提高性能意味着服务于更多的工作单元，另一方面，当数据集增长时，同样也可以处理更大的工作单位。1</p><p>另一个角度来看待性能与可扩展性:</p><ul><li>如果你的系统有<strong>性能</strong>问题，对于单个用户来说是缓慢的。</li><li>如果你的系统有<strong>可扩展性</strong>问题，单个用户较快但在高负载下会变慢。</li></ul><h3 id="来源及延伸阅读" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读"><span>来源及延伸阅读</span></a></h3><ul><li><a href="http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html" target="_blank" rel="noopener noreferrer">简单谈谈可扩展性</a></li><li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" target="_blank" rel="noopener noreferrer">可扩展性，可用性，稳定性和模式</a></li></ul><h2 id="延迟与吞吐量" tabindex="-1"><a class="header-anchor" href="#延迟与吞吐量"><span>延迟与吞吐量</span></a></h2><p><strong>延迟</strong>是执行操作或运算结果所花费的时间。</p><p><strong>吞吐量</strong>是单位时间内（执行）此类操作或运算的数量。</p><p>通常，你应该以<strong>可接受级延迟</strong>下<strong>最大化吞吐量</strong>为目标。</p><h3 id="来源及延伸阅读-1" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-1"><span>来源及延伸阅读</span></a></h3><ul><li><a href="https://community.cadence.com/cadence_blogs_8/b/sd/archive/2010/09/13/understanding-latency-vs-throughput" target="_blank" rel="noopener noreferrer">理解延迟与吞吐量</a></li></ul><h2 id="可用性与一致性" tabindex="-1"><a class="header-anchor" href="#可用性与一致性"><span>可用性与一致性</span></a></h2><h3 id="cap-理论" tabindex="-1"><a class="header-anchor" href="#cap-理论"><span>CAP 理论</span></a></h3><p>在一个分布式计算系统中，只能同时满足下列的两点:</p><ul><li><strong>一致性</strong> ─ 每次访问都能获得最新数据但可能会收到错误响应</li><li><strong>可用性</strong> ─ 每次访问都能收到非错响应，但不保证获取到最新数据</li><li><strong>分区容错性</strong> ─ 在任意分区网络故障的情况下系统仍能继续运行</li></ul><p><strong>网络并不可靠，所以你应要支持分区容错性，并需要在软件可用性和一致性间做出取舍。</strong></p><h4 id="cp-─-一致性和分区容错性" tabindex="-1"><a class="header-anchor" href="#cp-─-一致性和分区容错性"><span>CP ─ 一致性和分区容错性</span></a></h4><p>等待分区节点的响应可能会导致延时错误。如果你的业务需求需要原子读写，CP 是一个不错的选择。</p><h4 id="ap-─-可用性与分区容错性" tabindex="-1"><a class="header-anchor" href="#ap-─-可用性与分区容错性"><span>AP ─ 可用性与分区容错性</span></a></h4><p>响应节点上可用数据的最近版本可能并不是最新的。当分区解析完后，写入（操作）可能需要一些时间来传播。</p><p>如果业务需求允许<a href="#%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7">最终一致性</a>，或当有外部故障时要求系统继续运行，AP 是一个不错的选择。</p><h3 id="来源及延伸阅读-2" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-2"><span>来源及延伸阅读</span></a></h3><ul><li><a href="http://robertgreiner.com/2014/08/cap-theorem-revisited/" target="_blank" rel="noopener noreferrer">再看 CAP 理论</a></li><li><a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem/" target="_blank" rel="noopener noreferrer">通俗易懂地介绍 CAP 理论</a></li><li><a href="https://github.com/henryr/cap-faq" target="_blank" rel="noopener noreferrer">CAP FAQ</a></li></ul><h2 id="一致性模式" tabindex="-1"><a class="header-anchor" href="#一致性模式"><span>一致性模式</span></a></h2><p>有同一份数据的多份副本，我们面临着怎样同步它们的选择，以便让客户端有一致的显示数据。回想 <a href="#cap-%E7%90%86%E8%AE%BA">CAP 理论</a>中的一致性定义 ─ 每次访问都能获得最新数据但可能会收到错误响应</p><h3 id="弱一致性" tabindex="-1"><a class="header-anchor" href="#弱一致性"><span>弱一致性</span></a></h3><p>在写入之后，访问可能看到，也可能看不到（写入数据）。尽力优化之让其能访问最新数据。</p><p>这种方式可以 memcached 等系统中看到。弱一致性在 VoIP，视频聊天和实时多人游戏等真实用例中表现不错。打个比方，如果你在通话中丢失信号几秒钟时间，当重新连接时你是听不到这几秒钟所说的话的。</p><h3 id="最终一致性" tabindex="-1"><a class="header-anchor" href="#最终一致性"><span>最终一致性</span></a></h3><p>在写入后，访问最终能看到写入数据（通常在数毫秒内）。数据被异步复制。</p><p>DNS 和 email 等系统使用的是此种方式。最终一致性在高可用性系统中效果不错。</p><h3 id="强一致性" tabindex="-1"><a class="header-anchor" href="#强一致性"><span>强一致性</span></a></h3><p>在写入后，访问立即可见。数据被同步复制。</p><p>文件系统和关系型数据库（RDBMS）中使用的是此种方式。强一致性在需要记录的系统中运作良好。</p><h3 id="来源及延伸阅读-3" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-3"><span>来源及延伸阅读</span></a></h3><ul><li><a href="http://snarfed.org/transactions_across_datacenters_io.html" target="_blank" rel="noopener noreferrer">Transactions across data centers</a></li></ul><h2 id="可用性模式" tabindex="-1"><a class="header-anchor" href="#可用性模式"><span>可用性模式</span></a></h2><p>有两种支持高可用性的模式: <strong>故障切换（fail-over）<strong>和</strong>复制（replication）</strong>。</p><h3 id="故障切换" tabindex="-1"><a class="header-anchor" href="#故障切换"><span>故障切换</span></a></h3><h4 id="工作到备用切换-active-passive" tabindex="-1"><a class="header-anchor" href="#工作到备用切换-active-passive"><span>工作到备用切换（Active-passive）</span></a></h4><p>关于工作到备用的故障切换流程是，工作服务器发送周期信号给待机中的备用服务器。如果周期信号中断，备用服务器切换成工作服务器的 IP 地址并恢复服务。</p><p>宕机时间取决于备用服务器处于“热”待机状态还是需要从“冷”待机状态进行启动。只有工作服务器处理流量。</p><p>工作到备用的故障切换也被称为主从切换。</p><h4 id="双工作切换-active-active" tabindex="-1"><a class="header-anchor" href="#双工作切换-active-active"><span>双工作切换（Active-active）</span></a></h4><p>在双工作切换中，双方都在管控流量，在它们之间分散负载。</p><p>如果是外网服务器，DNS 将需要对两方都了解。如果是内网服务器，应用程序逻辑将需要对两方都了解。</p><p>双工作切换也可以称为主主切换。</p><h3 id="缺陷-故障切换" tabindex="-1"><a class="header-anchor" href="#缺陷-故障切换"><span>缺陷：故障切换</span></a></h3><ul><li>故障切换需要添加额外硬件并增加复杂性。</li><li>如果新写入数据在能被复制到备用系统之前，工作系统出现了故障，则有可能会丢失数据。</li></ul><h3 id="复制" tabindex="-1"><a class="header-anchor" href="#复制"><span>复制</span></a></h3><h4 id="主─从复制和主─主复制" tabindex="-1"><a class="header-anchor" href="#主─从复制和主─主复制"><span>主─从复制和主─主复制</span></a></h4><p>这个主题进一步探讨了<a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a>部分:</p><ul><li><a href="#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6">主─从复制</a></li><li><a href="#%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6">主─主复制</a></li></ul><h2 id="域名系统" tabindex="-1"><a class="header-anchor" href="#域名系统"><span>域名系统</span></a></h2><p>域名系统是把 <a href="http://www.example.com" target="_blank" rel="noopener noreferrer">www.example.com</a> 等域名转换成 IP 地址。</p><p>域名系统是分层次的，一些 DNS 服务器位于顶层。当查询（域名） IP 时，路由或 ISP 提供连接 DNS 服务器的信息。较底层的 DNS 服务器缓存映射，它可能会因为 DNS 传播延时而失效。DNS 结果可以缓存在浏览器或操作系统中一段时间，时间长短取决于<a href="https://en.wikipedia.org/wiki/Time_to_live" target="_blank" rel="noopener noreferrer">存活时间 TTL</a>。</p><ul><li><strong>NS 记录（域名服务）</strong> ─ 指定解析域名或子域名的 DNS 服务器。</li><li><strong>MX 记录（邮件交换）</strong> ─ 指定接收信息的邮件服务器。</li><li><strong>A 记录（地址）</strong> ─ 指定域名对应的 IP 地址记录。</li><li><strong>CNAME（规范）</strong> ─ 一个域名映射到另一个域名或 <code>CNAME</code> 记录（ <a href="http://example.com" target="_blank" rel="noopener noreferrer">example.com</a> 指向 <a href="http://www.example.com" target="_blank" rel="noopener noreferrer">www.example.com</a> ）或映射到一个 <code>A</code> 记录。</li></ul><p><a href="https://www.cloudflare.com/dns/" target="_blank" rel="noopener noreferrer">CloudFlare</a> 和 <a href="https://aws.amazon.com/route53/" target="_blank" rel="noopener noreferrer">Route 53</a> 等平台提供管理 DNS 的功能。某些 DNS 服务通过集中方式来路由流量:</p><ul><li><a href="http://g33kinfo.com/info/archives/2657" target="_blank" rel="noopener noreferrer">加权轮询调度</a><ul><li>防止流量进入维护中的服务器</li><li>在不同大小集群间负载均衡</li><li>A/B 测试</li></ul></li><li>基于延迟路由</li><li>基于地理位置路由</li></ul><h3 id="缺陷-dns" tabindex="-1"><a class="header-anchor" href="#缺陷-dns"><span>缺陷:DNS</span></a></h3><ul><li>虽说缓存可以减轻 DNS 延迟，但连接 DNS 服务器还是带来了轻微的延迟。</li><li>虽然它们通常由<a href="http://superuser.com/questions/472695/who-controls-the-dns-servers/472729" target="_blank" rel="noopener noreferrer">政府，网络服务提供商和大公司</a>管理，但 DNS 服务管理仍可能是复杂的。</li><li>DNS 服务最近遭受 <a href="http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/" target="_blank" rel="noopener noreferrer">DDoS 攻击</a>，阻止不知道 Twitter IP 地址的用户访问 Twitter。</li></ul><h3 id="来源及延伸阅读-4" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-4"><span>来源及延伸阅读</span></a></h3><ul><li><a href="https://technet.microsoft.com/en-us/library/dd197427(v=ws.10).aspx" target="_blank" rel="noopener noreferrer">DNS 架构</a></li><li><a href="https://en.wikipedia.org/wiki/Domain_Name_System" target="_blank" rel="noopener noreferrer">Wikipedia</a></li><li><a href="https://support.dnsimple.com/categories/dns/" target="_blank" rel="noopener noreferrer">关于 DNS 的文章</a></li></ul><h2 id="内容分发网络-cdn" tabindex="-1"><a class="header-anchor" href="#内容分发网络-cdn"><span>内容分发网络（CDN）</span></a></h2><p>内容分发网络（CDN）是一个全球性的代理服务器分布式网络，它从靠近用户的位置提供内容。通常，HTML/CSS/JS，图片和视频等静态内容由 CDN 提供，虽然亚马逊 CloudFront 等也支持动态内容。CDN 的 DNS 解析会告知客户端连接哪台服务器。</p><p>将内容存储在 CDN 上可以从两个方面来提供性能:</p><ul><li>从靠近用户的数据中心提供资源</li><li>通过 CDN 你的服务器不必真的处理请求</li></ul><h3 id="cdn-推送-push" tabindex="-1"><a class="header-anchor" href="#cdn-推送-push"><span>CDN 推送（push）</span></a></h3><p>当你服务器上内容发生变动时，推送 CDN 接受新内容。直接推送给 CDN 并重写 URL 地址以指向你的内容的 CDN 地址。你可以配置内容到期时间及何时更新。内容只有在更改或新增是才推送，流量最小化，但储存最大化。</p><h3 id="cdn-拉取-pull" tabindex="-1"><a class="header-anchor" href="#cdn-拉取-pull"><span>CDN 拉取（pull）</span></a></h3><p>CDN 拉取是当第一个用户请求该资源时，从服务器上拉取资源。你将内容留在自己的服务器上并重写 URL 指向 CDN 地址。直到内容被缓存在 CDN 上为止，这样请求只会更慢，</p><p><a href="https://en.wikipedia.org/wiki/Time_to_live" target="_blank" rel="noopener noreferrer">存活时间（TTL）</a>决定缓存多久时间。CDN 拉取方式最小化 CDN 上的储存空间，但如果过期文件并在实际更改之前被拉取，则会导致冗余的流量。</p><p>高流量站点使用 CDN 拉取效果不错，因为只有最近请求的内容保存在 CDN 中，流量才能更平衡地分散。</p><h3 id="缺陷-cdn" tabindex="-1"><a class="header-anchor" href="#缺陷-cdn"><span>缺陷：CDN</span></a></h3><ul><li>CDN 成本可能因流量而异，可能在权衡之后你将不会使用 CDN。</li><li>如果在 TTL 过期之前更新内容，CDN 缓存内容可能会过时。</li><li>CDN 需要更改静态内容的 URL 地址以指向 CDN。</li></ul><h3 id="来源及延伸阅读-5" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-5"><span>来源及延伸阅读</span></a></h3><ul><li><a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2112&amp;context=compsci" target="_blank" rel="noopener noreferrer">全球性内容分发网络</a></li><li><a href="http://www.travelblogadvice.com/technical/the-differences-between-push-and-pull-cdns/" target="_blank" rel="noopener noreferrer">CDN 拉取和 CDN 推送的区别</a></li><li><a href="https://en.wikipedia.org/wiki/Content_delivery_network" target="_blank" rel="noopener noreferrer">Wikipedia</a></li></ul><h2 id="负载均衡器" tabindex="-1"><a class="header-anchor" href="#负载均衡器"><span>负载均衡器</span></a></h2><p>负载均衡器将传入的请求分发到应用服务器和数据库等计算资源。无论哪种情况，负载均衡器将从计算资源来的响应返回给恰当的客户端。负载均衡器的效用在于:</p><ul><li>防止请求进入不好的服务器</li><li>防止资源过载</li><li>帮助消除单一的故障点</li></ul><p>负载均衡器可以通过硬件（昂贵）或 HAProxy 等软件来实现。<br> 增加的好处包括:</p><ul><li><strong>SSL 终结</strong> ─ 解密传入的请求并加密服务器响应，这样的话后端服务器就不必再执行这些潜在高消耗运算了。 <ul><li>不需要再每台服务器上安装 <a href="https://en.wikipedia.org/wiki/X.509" target="_blank" rel="noopener noreferrer">X.509 证书</a>。</li></ul></li><li><strong>Session 留存</strong> ─ 如果 Web 应用程序不追踪会话，发出 cookie 并将特定客户端的请求路由到同一实例。</li></ul><p>通常会设置采用<a href="#%E5%B7%A5%E4%BD%9C%E5%88%B0%E5%A4%87%E7%94%A8%E5%88%87%E6%8D%A2active-passive">工作─备用</a> 或 <a href="#%E5%8F%8C%E5%B7%A5%E4%BD%9C%E5%88%87%E6%8D%A2active-active">双工作</a> 模式的多个负载均衡器，以免发生故障。</p><p>负载均衡器能基于多种方式来路由流量:</p><ul><li>随机</li><li>最少负载</li><li>Session/cookie</li><li><a href="http://g33kinfo.com/info/archives/2657" target="_blank" rel="noopener noreferrer">轮询调度或加权轮询调度算法</a></li><li><a href="#%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">四层负载均衡</a></li><li><a href="#%E4%B8%83%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">七层负载均衡</a></li></ul><h3 id="四层负载均衡" tabindex="-1"><a class="header-anchor" href="#四层负载均衡"><span>四层负载均衡</span></a></h3><p>四层负载均衡根据监看<a href="#%E9%80%9A%E8%AE%AF">传输层</a>的信息来决定如何分发请求。通常，这会涉及来源，目标 IP 地址和请求头中的端口，但不包括数据包（报文）内容。四层负载均衡执行<a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/" target="_blank" rel="noopener noreferrer">网络地址转换（NAT）</a>来向上游服务器转发网络数据包。</p><h3 id="七层负载均衡器" tabindex="-1"><a class="header-anchor" href="#七层负载均衡器"><span>七层负载均衡器</span></a></h3><p>七层负载均衡器根据监控<a href="#%E9%80%9A%E8%AE%AF">应用层</a>来决定怎样分发请求。这会涉及请求头的内容，消息和 cookie。七层负载均衡器终结网络流量，读取消息，做出负载均衡判定，然后传送给特定服务器。比如，一个七层负载均衡器能直接将视频流量连接到托管视频的服务器，同时将更敏感的用户账单流量引导到安全性更强的服务器。</p><p>以损失灵活性为代价，四层负载均衡比七层负载均衡花费更少时间和计算资源，虽然这对现代商用硬件的性能影响甚微。</p><h3 id="水平扩展" tabindex="-1"><a class="header-anchor" href="#水平扩展"><span>水平扩展</span></a></h3><p>负载均衡器还能帮助水平扩展，提高性能和可用性。使用商业硬件的性价比更高，并且比在单台硬件上<strong>垂直扩展</strong>更贵的硬件具有更高的可用性。相比招聘特定企业系统人才，招聘商业硬件方面的人才更加容易。</p><h4 id="缺陷-水平扩展" tabindex="-1"><a class="header-anchor" href="#缺陷-水平扩展"><span>缺陷：水平扩展</span></a></h4><ul><li>水平扩展引入了复杂度并涉及服务器复制 <ul><li>服务器应该是无状态的:它们也不该包含像 session 或资料图片等与用户关联的数据。</li><li>session 可以集中存储在数据库或持久化<a href="#%E7%BC%93%E5%AD%98">缓存</a>（Redis、Memcached）的数据存储区中。</li></ul></li><li>缓存和数据库等下游服务器需要随着上游服务器进行扩展，以处理更多的并发连接。</li></ul><h3 id="缺陷-负载均衡器" tabindex="-1"><a class="header-anchor" href="#缺陷-负载均衡器"><span>缺陷：负载均衡器</span></a></h3><ul><li>如果没有足够的资源配置或配置错误，负载均衡器会变成一个性能瓶颈。</li><li>引入负载均衡器以帮助消除单点故障但导致了额外的复杂性。</li><li>单个负载均衡器会导致单点故障，但配置多个负载均衡器会进一步增加复杂性。</li></ul><h3 id="来源及延伸阅读-6" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-6"><span>来源及延伸阅读</span></a></h3><ul><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener noreferrer">NGINX 架构</a></li><li><a href="http://www.haproxy.org/download/1.2/doc/architecture.txt" target="_blank" rel="noopener noreferrer">HAProxy 架构指南</a></li><li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones" target="_blank" rel="noopener noreferrer">可扩展性</a></li><li><a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)" target="_blank" rel="noopener noreferrer">Wikipedia</a></li><li><a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/" target="_blank" rel="noopener noreferrer">四层负载平衡</a></li><li><a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing/" target="_blank" rel="noopener noreferrer">七层负载平衡</a></li><li><a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html" target="_blank" rel="noopener noreferrer">ELB 监听器配置</a></li></ul><h2 id="反向代理-web-服务器" tabindex="-1"><a class="header-anchor" href="#反向代理-web-服务器"><span>反向代理（web 服务器）</span></a></h2><p>反向代理是一种可以集中地调用内部服务，并提供统一接口给公共客户的 web 服务器。来自客户端的请求先被反向代理服务器转发到可响应请求的服务器，然后代理再把服务器的响应结果返回给客户端。</p><p>带来的好处包括：</p><ul><li><strong>增加安全性</strong> - 隐藏后端服务器的信息，屏蔽黑名单中的 IP，限制每个客户端的连接数。</li><li><strong>提高可扩展性和灵活性</strong> - 客户端只能看到反向代理服务器的 IP，这使你可以增减服务器或者修改它们的配置。</li><li><strong>本地终结 SSL 会话</strong> - 解密传入请求，加密服务器响应，这样后端服务器就不必完成这些潜在的高成本的操作。 <ul><li>免除了在每个服务器上安装 <a href="https://en.wikipedia.org/wiki/X.509" target="_blank" rel="noopener noreferrer">X.509</a> 证书的需要</li></ul></li><li><strong>压缩</strong> - 压缩服务器响应</li><li><strong>缓存</strong> - 直接返回命中的缓存结果</li><li><strong>静态内容</strong> - 直接提供静态内容 <ul><li>HTML/CSS/JS</li><li>图片</li><li>视频</li><li>等等</li></ul></li></ul><h3 id="负载均衡器与反向代理" tabindex="-1"><a class="header-anchor" href="#负载均衡器与反向代理"><span>负载均衡器与反向代理</span></a></h3><ul><li>当你有多个服务器时，部署负载均衡器非常有用。通常，负载均衡器将流量路由给一组功能相同的服务器上。</li><li>即使只有一台 web 服务器或者应用服务器时，反向代理也有用，可以参考上一节介绍的好处。</li><li>NGINX 和 HAProxy 等解决方案可以同时支持第七层反向代理和负载均衡。</li></ul><h3 id="不利之处-反向代理" tabindex="-1"><a class="header-anchor" href="#不利之处-反向代理"><span>不利之处：反向代理</span></a></h3><ul><li>引入反向代理会增加系统的复杂度。</li><li>单独一个反向代理服务器仍可能发生单点故障，配置多台反向代理服务器（如<a href="https://en.wikipedia.org/wiki/Failover" target="_blank" rel="noopener noreferrer">故障转移</a>）会进一步增加复杂度。</li></ul><h3 id="来源及延伸阅读-7" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-7"><span>来源及延伸阅读</span></a></h3><ul><li><a href="https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/" target="_blank" rel="noopener noreferrer">反向代理与负载均衡</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener noreferrer">NGINX 架构</a></li><li><a href="http://www.haproxy.org/download/1.2/doc/architecture.txt" target="_blank" rel="noopener noreferrer">HAProxy 架构指南</a></li><li><a href="https://en.wikipedia.org/wiki/Reverse_proxy" target="_blank" rel="noopener noreferrer">Wikipedia</a></li></ul><h2 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层"><span>应用层</span></a></h2><p>将 Web 服务层与应用层（也被称作平台层）分离，可以独立缩放和配置这两层。添加新的 API 只需要添加应用服务器，而不必添加额外的 web 服务器。</p><p><strong>单一职责原则</strong>提倡小型的，自治的服务共同合作。小团队通过提供小型的服务，可以更激进地计划增长。</p><p>应用层中的工作进程也有可以实现<a href="#%E5%BC%82%E6%AD%A5">异步化</a>。</p><h3 id="微服务" tabindex="-1"><a class="header-anchor" href="#微服务"><span>微服务</span></a></h3><p>与此讨论相关的话题是 <a href="https://en.wikipedia.org/wiki/Microservices" target="_blank" rel="noopener noreferrer">微服务</a>，可以被描述为一系列可以独立部署的小型的，模块化服务。每个服务运行在一个独立的线程中，通过明确定义的轻量级机制通讯，共同实现业务目标。1</p><p>例如，Pinterest 可能有这些微服务： 用户资料、关注者、Feed 流、搜索、照片上传等。</p><h3 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h3><p>像 <a href="https://www.consul.io/docs/index.html" target="_blank" rel="noopener noreferrer">Consul</a>，<a href="https://coreos.com/etcd/docs/latest" target="_blank" rel="noopener noreferrer">Etcd</a> 和 <a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper" target="_blank" rel="noopener noreferrer">Zookeeper</a> 这样的系统可以通过追踪注册名、地址、端口等信息来帮助服务互相发现对方。<a href="https://www.consul.io/intro/getting-started/checks.html" target="_blank" rel="noopener noreferrer">Health checks</a> 可以帮助确认服务的完整性和是否经常使用一个 <a href="#%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEhttp">HTTP</a> 路径。Consul 和 Etcd 都有一个内建的 <a href="#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8">key-value 存储</a> 用来存储配置信息和其他的共享信息。</p><h3 id="不利之处-应用层" tabindex="-1"><a class="header-anchor" href="#不利之处-应用层"><span>不利之处：应用层</span></a></h3><ul><li>添加由多个松耦合服务组成的应用层，从架构、运营、流程等层面来讲将非常不同（相对于单体系统）。</li><li>微服务会增加部署和运营的复杂度。</li></ul><h3 id="来源及延伸阅读-8" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-8"><span>来源及延伸阅读</span></a></h3><ul><li><a href="http://lethain.com/introduction-to-architecting-systems-for-scale" target="_blank" rel="noopener noreferrer">可缩放系统构架介绍</a></li><li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview" target="_blank" rel="noopener noreferrer">破解系统设计面试</a></li><li><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="noopener noreferrer">面向服务架构</a></li><li><a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper" target="_blank" rel="noopener noreferrer">Zookeeper 介绍</a></li><li><a href="https://cloudncode.wordpress.com/2016/07/22/msa-getting-started/" target="_blank" rel="noopener noreferrer">构建微服务，你所需要知道的一切</a></li></ul><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h2><h3 id="关系型数据库管理系统-rdbms" tabindex="-1"><a class="header-anchor" href="#关系型数据库管理系统-rdbms"><span>关系型数据库管理系统（RDBMS）</span></a></h3><p>像 SQL 这样的关系型数据库是一系列以表的形式组织的数据项集合。</p><blockquote><p>校对注：这里作者 SQL 可能指的是 MySQL</p></blockquote><p><strong>ACID</strong> 用来描述关系型数据库<a href="https://en.wikipedia.org/wiki/Database_transaction" target="_blank" rel="noopener noreferrer">事务</a>的特性。</p><ul><li><strong>原子性</strong> - 每个事务内部所有操作要么全部完成，要么全部不完成。</li><li><strong>一致性</strong> - 任何事务都使数据库从一个有效的状态转换到另一个有效状态。</li><li><strong>隔离性</strong> - 并发执行事务的结果与顺序执行事务的结果相同。</li><li><strong>持久性</strong> - 事务提交后，对系统的影响是永久的。</li></ul><p>关系型数据库扩展包括许多技术：<strong>主从复制</strong>、<strong>主主复制</strong>、<strong>联合</strong>、<strong>分片</strong>、<strong>非规范化</strong>和 <strong>SQL调优</strong>。</p><h4 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制"><span>主从复制</span></a></h4><p>主库同时负责读取和写入操作，并复制写入到一个或多个从库中，从库只负责读操作。树状形式的从库再将写入复制到更多的从库中去。如果主库离线，系统可以以只读模式运行，直到某个从库被提升为主库或有新的主库出现。</p><h5 id="不利之处-主从复制" tabindex="-1"><a class="header-anchor" href="#不利之处-主从复制"><span>不利之处：主从复制</span></a></h5><ul><li>将从库提升为主库需要额外的逻辑。</li><li>参考<a href="#%E4%B8%8D%E5%88%A9%E4%B9%8B%E5%A4%84%E5%A4%8D%E5%88%B6">不利之处：复制</a>中，主从复制和主主复制<strong>共同</strong>的问题。</li></ul><h4 id="主主复制" tabindex="-1"><a class="header-anchor" href="#主主复制"><span>主主复制</span></a></h4><p>两个主库都负责读操作和写操作，写入操作时互相协调。如果其中一个主库挂机，系统可以继续读取和写入。</p><h5 id="不利之处-主主复制" tabindex="-1"><a class="header-anchor" href="#不利之处-主主复制"><span>不利之处： 主主复制</span></a></h5><ul><li>你需要添加负载均衡器或者在应用逻辑中做改动，来确定写入哪一个数据库。</li><li>多数主-主系统要么不能保证一致性（违反 ACID），要么因为同步产生了写入延迟。</li><li>随着更多写入节点的加入和延迟的提高，如何解决冲突显得越发重要。</li><li>参考<a href="#%E4%B8%8D%E5%88%A9%E4%B9%8B%E5%A4%84%E5%A4%8D%E5%88%B6">不利之处：复制</a>中，主从复制和主主复制<strong>共同</strong>的问题。</li></ul><h5 id="不利之处-复制" tabindex="-1"><a class="header-anchor" href="#不利之处-复制"><span>不利之处：复制</span></a></h5><ul><li>如果主库在将新写入的数据复制到其他节点前挂掉，则有数据丢失的可能。</li><li>写入会被重放到负责读取操作的副本。副本可能因为过多写操作阻塞住，导致读取功能异常。</li><li>读取从库越多，需要复制的写入数据就越多，导致更严重的复制延迟。</li><li>在某些数据库系统中，写入主库的操作可以用多个线程并行写入，但读取副本只支持单线程顺序地写入。</li><li>复制意味着更多的硬件和额外的复杂度。</li></ul><h5 id="来源及延伸阅读-9" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-9"><span>来源及延伸阅读</span></a></h5><ul><li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" target="_blank" rel="noopener noreferrer">扩展性，可用性，稳定性模式</a></li><li><a href="https://en.wikipedia.org/wiki/Multi-master_replication" target="_blank" rel="noopener noreferrer">多主复制</a></li></ul><h4 id="联合" tabindex="-1"><a class="header-anchor" href="#联合"><span>联合</span></a></h4><p>联合（或按功能划分）将数据库按对应功能分割。例如，你可以有三个数据库：<strong>论坛</strong>、<strong>用户</strong>和<strong>产品</strong>，而不仅是一个单体数据库，从而减少每个数据库的读取和写入流量，减少复制延迟。较小的数据库意味着更多适合放入内存的数据，进而意味着更高的缓存命中几率。没有只能串行写入的中心化主库，你可以并行写入，提高负载能力。</p><h5 id="不利之处-联合" tabindex="-1"><a class="header-anchor" href="#不利之处-联合"><span>不利之处：联合</span></a></h5><ul><li>如果你的数据库模式需要大量的功能和数据表，联合的效率并不好。</li><li>你需要更新应用程序的逻辑来确定要读取和写入哪个数据库。</li><li>用 <a href="http://stackoverflow.com/questions/5145637/querying-data-by-joining-two-tables-in-two-database-on-different-servers" target="_blank" rel="noopener noreferrer">server link</a> 从两个库联结数据更复杂。</li><li>联合需要更多的硬件和额外的复杂度。</li></ul><h5 id="来源及延伸阅读-联合" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-联合"><span>来源及延伸阅读：联合</span></a></h5><ul><li><a href="https://www.youtube.com/watch?v=w95murBkYmU" target="_blank" rel="noopener noreferrer">扩展你的用户数到第一个一千万</a></li></ul><h4 id="分片" tabindex="-1"><a class="header-anchor" href="#分片"><span>分片</span></a></h4><p>分片将数据分配在不同的数据库上，使得每个数据库仅管理整个数据集的一个子集。以用户数据库为例，随着用户数量的增加，越来越多的分片会被添加到集群中。</p><p>类似<a href="#%E8%81%94%E5%90%88">联合</a>的优点，分片可以减少读取和写入流量，减少复制并提高缓存命中率。也减少了索引，通常意味着查询更快，性能更好。如果一个分片出问题，其他的仍能运行，你可以使用某种形式的冗余来防止数据丢失。类似联合，没有只能串行写入的中心化主库，你可以并行写入，提高负载能力。</p><p>常见的做法是用户姓氏的首字母或者用户的地理位置来分隔用户表。</p><h5 id="不利之处-分片" tabindex="-1"><a class="header-anchor" href="#不利之处-分片"><span>不利之处：分片</span></a></h5><ul><li>你需要修改应用程序的逻辑来实现分片，这会带来复杂的 SQL 查询。</li><li>分片不合理可能导致数据负载不均衡。例如，被频繁访问的用户数据会导致其所在分片的负载相对其他分片高。 <ul><li>再平衡会引入额外的复杂度。基于<a href="http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html" target="_blank" rel="noopener noreferrer">一致性哈希</a>的分片算法可以减少这种情况。</li></ul></li><li>联结多个分片的数据操作更复杂。</li><li>分片需要更多的硬件和额外的复杂度。</li></ul><h4 id="来源及延伸阅读-分片" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-分片"><span>来源及延伸阅读：分片</span></a></h4><ul><li><a href="http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html" target="_blank" rel="noopener noreferrer">分片时代来临</a></li><li><a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)" target="_blank" rel="noopener noreferrer">数据库分片架构</a></li><li><a href="http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html" target="_blank" rel="noopener noreferrer">一致性哈希</a></li></ul><h4 id="非规范化" tabindex="-1"><a class="header-anchor" href="#非规范化"><span>非规范化</span></a></h4><p>非规范化试图以写入性能为代价来换取读取性能。在多个表中冗余数据副本，以避免高成本的联结操作。一些关系型数据库，比如 <a href="https://en.wikipedia.org/wiki/PostgreSQL" target="_blank" rel="noopener noreferrer">PostgreSQL</a> 和 Oracle 支持<a href="https://en.wikipedia.org/wiki/Materialized_view" target="_blank" rel="noopener noreferrer">物化视图</a>，可以处理冗余信息存储和保证冗余副本一致。</p><p>当数据使用诸如<a href="#%E8%81%94%E5%90%88">联合</a>和<a href="#%E5%88%86%E7%89%87">分片</a>等技术被分割，进一步提高了处理跨数据中心的联结操作复杂度。非规范化可以规避这种复杂的联结操作。</p><p>在多数系统中，读取操作的频率远高于写入操作，比例可达到 100:1，甚至 1000:1。需要复杂的数据库联结的读取操作成本非常高，在磁盘操作上消耗了大量时间。</p><h5 id="不利之处-非规范化" tabindex="-1"><a class="header-anchor" href="#不利之处-非规范化"><span>不利之处：非规范化</span></a></h5><ul><li>数据会冗余。</li><li>约束可以帮助冗余的信息副本保持同步，但这样会增加数据库设计的复杂度。</li><li>非规范化的数据库在高写入负载下性能可能比规范化的数据库差。</li></ul><h5 id="来源及延伸阅读-非规范化" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-非规范化"><span>来源及延伸阅读：非规范化</span></a></h5><ul><li><a href="https://en.wikipedia.org/wiki/Denormalization" target="_blank" rel="noopener noreferrer">非规范化</a></li></ul><h4 id="sql-调优" tabindex="-1"><a class="header-anchor" href="#sql-调优"><span>SQL 调优</span></a></h4><p>SQL 调优是一个范围很广的话题，有很多相关的<a href="https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&amp;field-keywords=sql+tuning" target="_blank" rel="noopener noreferrer">书</a>可以作为参考。</p><p>利用<strong>基准测试</strong>和<strong>性能分析</strong>来模拟和发现系统瓶颈很重要。</p><ul><li><strong>基准测试</strong> - 用 <a href="http://httpd.apache.org/docs/2.2/programs/ab.html" target="_blank" rel="noopener noreferrer">ab</a> 等工具模拟高负载情况。</li><li><strong>性能分析</strong> - 通过启用如<a href="http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html" target="_blank" rel="noopener noreferrer">慢查询日志</a>等工具来辅助追踪性能问题。</li></ul><p>基准测试和性能分析可能会指引你到以下优化方案。</p><h5 id="改进模式" tabindex="-1"><a class="header-anchor" href="#改进模式"><span>改进模式</span></a></h5><ul><li>为了实现快速访问，MySQL 在磁盘上用连续的块存储数据。</li><li>使用 <code>CHAR</code> 类型存储固定长度的字段，不要用 <code>VARCHAR</code>。 <ul><li><code>CHAR</code> 在快速、随机访问时效率很高。如果使用 <code>VARCHAR</code>，如果你想读取下一个字符串，不得不先读取到当前字符串的末尾。</li></ul></li><li>使用 <code>TEXT</code> 类型存储大块的文本，例如博客正文。<code>TEXT</code> 还允许布尔搜索。使用 <code>TEXT</code> 字段需要在磁盘上存储一个用于定位文本块的指针。</li><li>使用 <code>INT</code> 类型存储高达 2^32 或 40 亿的较大数字。</li><li>使用 <code>DECIMAL</code> 类型存储货币可以避免浮点数表示错误。</li><li>避免使用 <code>BLOBS</code> 存储实际对象，而是用来存储存放对象的位置。</li><li><code>VARCHAR(255)</code> 是以 8 位数字存储的最大字符数，在某些关系型数据库中，最大限度地利用字节。</li><li>在适用场景中设置 <code>NOT NULL</code> 约束来<a href="http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search" target="_blank" rel="noopener noreferrer">提高搜索性能</a>。</li></ul><h5 id="使用正确的索引" tabindex="-1"><a class="header-anchor" href="#使用正确的索引"><span>使用正确的索引</span></a></h5><ul><li>你正查询（<code>SELECT</code>、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>JOIN</code>）的列如果用了索引会更快。</li><li>索引通常表示为自平衡的 <a href="https://en.wikipedia.org/wiki/B-tree" target="_blank" rel="noopener noreferrer">B 树</a>，可以保持数据有序，并允许在对数时间内进行搜索，顺序访问，插入，删除操作。</li><li>设置索引，会将数据存在内存中，占用了更多内存空间。</li><li>写入操作会变慢，因为索引需要被更新。</li><li>加载大量数据时，禁用索引再加载数据，然后重建索引，这样也许会更快。</li></ul><h5 id="避免高成本的联结操作" tabindex="-1"><a class="header-anchor" href="#避免高成本的联结操作"><span>避免高成本的联结操作</span></a></h5><ul><li>有性能需要，可以进行非规范化。</li></ul><h5 id="分割数据表" tabindex="-1"><a class="header-anchor" href="#分割数据表"><span>分割数据表</span></a></h5><ul><li>将热点数据拆分到单独的数据表中，可以有助于缓存。</li></ul><h5 id="调优查询缓存" tabindex="-1"><a class="header-anchor" href="#调优查询缓存"><span>调优查询缓存</span></a></h5><ul><li>在某些情况下，<a href="http://dev.mysql.com/doc/refman/5.7/en/query-cache" target="_blank" rel="noopener noreferrer">查询缓存</a>可能会导致<a href="https://www.percona.com/blog/2014/01/28/10-mysql-performance-tuning-settings-after-installation/" target="_blank" rel="noopener noreferrer">性能问题</a>。</li></ul><h5 id="来源及延伸阅读-10" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-10"><span>来源及延伸阅读</span></a></h5><ul><li><a href="http://20bits.com/article/10-tips-for-optimizing-mysql-queries-that-dont-suck" target="_blank" rel="noopener noreferrer">MySQL 查询优化小贴士</a></li><li><a href="http://stackoverflow.com/questions/1217466/is-there-a-good-reason-i-see-varchar255-used-so-often-as-opposed-to-another-l" target="_blank" rel="noopener noreferrer">为什么 VARCHAR(255) 很常见？</a></li><li><a href="http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search" target="_blank" rel="noopener noreferrer">Null 值是如何影响数据库性能的？</a></li><li><a href="http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html" target="_blank" rel="noopener noreferrer">慢查询日志</a></li></ul><h3 id="nosql" tabindex="-1"><a class="header-anchor" href="#nosql"><span>NoSQL</span></a></h3><p>NoSQL 是<strong>键-值数据库</strong>、<strong>文档型数据库</strong>、<strong>列型数据库</strong>或<strong>图数据库</strong>的统称。数据库是非规范化的，表联结大多在应用程序代码中完成。大多数 NoSQL 无法实现真正符合 ACID 的事务，支持<a href="#%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7">最终一致</a>。</p><p><strong>BASE</strong> 通常被用于描述 NoSQL 数据库的特性。相比 <a href="#cap-%E7%90%86%E8%AE%BA">CAP 理论</a>，BASE 强调可用性超过一致性。</p><ul><li><strong>基本可用</strong> - 系统保证可用性。</li><li><strong>软状态</strong> - 即使没有输入，系统状态也可能随着时间变化。</li><li><strong>最终一致性</strong> - 经过一段时间之后，系统最终会变一致，因为系统在此期间没有收到任何输入。</li></ul><p>除了在 <a href="#sql-%E8%BF%98%E6%98%AF-nosql">SQL 还是 NoSQL</a> 之间做选择，了解哪种类型的 NoSQL 数据库最适合你的用例也是非常有帮助的。我们将在下一节中快速了解下 <strong>键-值存储</strong>、<strong>文档型存储</strong>、<strong>列型存储</strong>和<strong>图存储</strong>数据库。</p><h4 id="键-值存储" tabindex="-1"><a class="header-anchor" href="#键-值存储"><span>键-值存储</span></a></h4><blockquote><p>抽象模型：哈希表</p></blockquote><p>键-值存储通常可以实现 O(1) 时间读写，用内存或 SSD 存储数据。数据存储可以按<a href="https://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="noopener noreferrer">字典顺序</a>维护键，从而实现键的高效检索。键-值存储可以用于存储元数据。</p><p>键-值存储性能很高，通常用于存储简单数据模型或频繁修改的数据，如存放在内存中的缓存。键-值存储提供的操作有限，如果需要更多操作，复杂度将转嫁到应用程序层面。</p><p>键-值存储是如文档存储，在某些情况下，甚至是图存储等更复杂的存储系统的基础。</p><h4 id="来源及延伸阅读-11" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-11"><span>来源及延伸阅读</span></a></h4><ul><li><a href="https://en.wikipedia.org/wiki/Key-value_database" target="_blank" rel="noopener noreferrer">键-值数据库</a></li><li><a href="http://stackoverflow.com/questions/4056093/what-are-the-disadvantages-of-using-a-key-value-table-over-nullable-columns-or" target="_blank" rel="noopener noreferrer">键-值存储的劣势</a></li><li><a href="http://qnimate.com/overview-of-redis-architecture/" target="_blank" rel="noopener noreferrer">Redis 架构</a></li><li><a href="https://www.adayinthelifeof.nl/2011/02/06/memcache-internals/" target="_blank" rel="noopener noreferrer">Memcached 架构</a></li></ul><h4 id="文档类型存储" tabindex="-1"><a class="header-anchor" href="#文档类型存储"><span>文档类型存储</span></a></h4><blockquote><p>抽象模型：将文档作为值的键-值存储</p></blockquote><p>文档类型存储以文档（XML、JSON、二进制文件等）为中心，文档存储了指定对象的全部信息。文档存储根据文档自身的内部结构提供 API 或查询语句来实现查询。请注意，许多键-值存储数据库有用值存储元数据的特性，这也模糊了这两种存储类型的界限。</p><p>基于底层实现，文档可以根据集合、标签、元数据或者文件夹组织。尽管不同文档可以被组织在一起或者分成一组，但相互之间可能具有完全不同的字段。</p><p>MongoDB 和 CouchDB 等一些文档类型存储还提供了类似 SQL 语言的查询语句来实现复杂查询。DynamoDB 同时支持键-值存储和文档类型存储。</p><p>文档类型存储具备高度的灵活性，常用于处理偶尔变化的数据。</p><h4 id="来源及延伸阅读-文档类型存储" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-文档类型存储"><span>来源及延伸阅读：文档类型存储</span></a></h4><ul><li><a href="https://en.wikipedia.org/wiki/Document-oriented_database" target="_blank" rel="noopener noreferrer">面向文档的数据库</a></li><li><a href="https://www.mongodb.com/mongodb-architecture" target="_blank" rel="noopener noreferrer">MongoDB 架构</a></li><li><a href="https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/" target="_blank" rel="noopener noreferrer">CouchDB 架构</a></li><li><a href="https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up" target="_blank" rel="noopener noreferrer">Elasticsearch 架构</a></li></ul><h4 id="列型存储" tabindex="-1"><a class="header-anchor" href="#列型存储"><span>列型存储</span></a></h4><blockquote><p>抽象模型：嵌套的 <code>ColumnFamily&gt;</code> 映射</p></blockquote><p>类型存储的基本数据单元是列（名／值对）。列可以在列族（类似于 SQL 的数据表）中被分组。超级列族再分组普通列族。你可以使用行键独立访问每一列，具有相同行键值的列组成一行。每个值都包含版本的时间戳用于解决版本冲突。</p><p>Google 发布了第一个列型存储数据库 <a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf" target="_blank" rel="noopener noreferrer">Bigtable</a>，它影响了 Hadoop 生态系统中活跃的开源数据库 <a href="https://www.mapr.com/blog/in-depth-look-hbase-architecture" target="_blank" rel="noopener noreferrer">HBase</a> 和 Facebook 的 <a href="http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html" target="_blank" rel="noopener noreferrer">Cassandra</a>。像 BigTable，HBase 和 Cassandra 这样的存储系统将键以字母顺序存储，可以高效地读取键列。</p><p>列型存储具备高可用性和高可扩展性。通常被用于大数据相关存储。</p><h5 id="来源及延伸阅读-列型存储" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-列型存储"><span>来源及延伸阅读：列型存储</span></a></h5><ul><li><a href="http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html" target="_blank" rel="noopener noreferrer">SQL 与 NoSQL 简史</a></li><li><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf" target="_blank" rel="noopener noreferrer">BigTable 架构</a></li><li><a href="https://www.mapr.com/blog/in-depth-look-hbase-architecture" target="_blank" rel="noopener noreferrer">Hbase 架构</a></li><li><a href="http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html" target="_blank" rel="noopener noreferrer">Cassandra 架构</a></li></ul><h4 id="图数据库" tabindex="-1"><a class="header-anchor" href="#图数据库"><span>图数据库</span></a></h4><p>资料来源：图数据库</p><blockquote><p>抽象模型： 图</p></blockquote><p>在图数据库中，一个节点对应一条记录，一个弧对应两个节点之间的关系。图数据库被优化用于表示外键繁多的复杂关系或多对多关系。</p><p>图数据库为存储复杂关系的数据模型，如社交网络，提供了很高的性能。它们相对较新，尚未广泛应用，查找开发工具或者资源相对较难。许多图只能通过 <a href="#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest">REST API</a> 访问。</p><h5 id="相关资源和延伸阅读-图" tabindex="-1"><a class="header-anchor" href="#相关资源和延伸阅读-图"><span>相关资源和延伸阅读：图</span></a></h5><ul><li><a href="https://en.wikipedia.org/wiki/Graph_database" target="_blank" rel="noopener noreferrer">图数据库</a></li><li><a href="https://neo4j.com/" target="_blank" rel="noopener noreferrer">Neo4j</a></li><li><a href="https://blog.twitter.com/2010/introducing-flockdb" target="_blank" rel="noopener noreferrer">FlockDB</a></li></ul><h4 id="来源及延伸阅读-nosql" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-nosql"><span>来源及延伸阅读：NoSQL</span></a></h4><ul><li><a href="http://stackoverflow.com/questions/3342497/explanation-of-base-terminology" target="_blank" rel="noopener noreferrer">数据库术语解释</a></li><li><a href="https://medium.com/baqend-blog/nosql-databases-a-survey-and-decision-guidance-ea7823a822d#.wskogqenq" target="_blank" rel="noopener noreferrer">NoSQL 数据库 - 调查及决策指南</a></li><li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database" target="_blank" rel="noopener noreferrer">可扩展性</a></li><li><a href="https://www.youtube.com/watch?v=qI_g07C_Q5I" target="_blank" rel="noopener noreferrer">NoSQL 介绍</a></li><li><a href="http://horicky.blogspot.com/2009/11/nosql-patterns.html" target="_blank" rel="noopener noreferrer">NoSQL 模式</a></li></ul><h3 id="sql-还是-nosql" tabindex="-1"><a class="header-anchor" href="#sql-还是-nosql"><span>SQL 还是 NoSQL</span></a></h3><p>选取 <strong>SQL</strong> 的原因:</p><ul><li>结构化数据</li><li>严格的模式</li><li>关系型数据</li><li>需要复杂的联结操作</li><li>事务</li><li>清晰的扩展模式</li><li>既有资源更丰富：开发者、社区、代码库、工具等</li><li>通过索引进行查询非常快</li></ul><p>选取 <strong>NoSQL</strong> 的原因：</p><ul><li>半结构化数据</li><li>动态或灵活的模式</li><li>非关系型数据</li><li>不需要复杂的联结操作</li><li>存储 TB （甚至 PB）级别的数据</li><li>高数据密集的工作负载</li><li>IOPS 高吞吐量</li></ul><p>适合 NoSQL 的示例数据：</p><ul><li>埋点数据和日志数据</li><li>排行榜或者得分数据</li><li>临时数据，如购物车</li><li>频繁访问的（“热”）表</li><li>元数据／查找表</li></ul><h5 id="来源及延伸阅读-sql-或-nosql" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-sql-或-nosql"><span>来源及延伸阅读：SQL 或 NoSQL</span></a></h5><ul><li><a href="https://www.youtube.com/watch?v=w95murBkYmU" target="_blank" rel="noopener noreferrer">扩展你的用户数到第一个千万</a></li><li><a href="https://www.sitepoint.com/sql-vs-nosql-differences/" target="_blank" rel="noopener noreferrer">SQL 和 NoSQL 的不同</a></li></ul><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h2><p>缓存可以提高页面加载速度，并可以减少服务器和数据库的负载。在这个模型中，分发器先查看请求之前是否被响应过，如果有则将之前的结果直接返回，来省掉真正的处理。</p><p>数据库分片均匀分布的读取是最好的。但是热门数据会让读取分布不均匀，这样就会造成瓶颈，如果在数据库前加个缓存，就会抹平不均匀的负载和突发流量对数据库的影响。</p><h3 id="客户端缓存" tabindex="-1"><a class="header-anchor" href="#客户端缓存"><span>客户端缓存</span></a></h3><p>缓存可以位于客户端（操作系统或者浏览器），<a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8">服务端</a>或者不同的缓存层。</p><h3 id="cdn-缓存" tabindex="-1"><a class="header-anchor" href="#cdn-缓存"><span>CDN 缓存</span></a></h3><p><a href="#%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn">CDN</a> 也被视为一种缓存。</p><h3 id="web-服务器缓存" tabindex="-1"><a class="header-anchor" href="#web-服务器缓存"><span>Web 服务器缓存</span></a></h3><p><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8">反向代理</a>和缓存（比如 <a href="https://www.varnish-cache.org/" target="_blank" rel="noopener noreferrer">Varnish</a>）可以直接提供静态和动态内容。Web 服务器同样也可以缓存请求，返回相应结果而不必连接应用服务器。</p><h3 id="数据库缓存" tabindex="-1"><a class="header-anchor" href="#数据库缓存"><span>数据库缓存</span></a></h3><p>数据库的默认配置中通常包含缓存级别，针对一般用例进行了优化。调整配置，在不同情况下使用不同的模式可以进一步提高性能。</p><h3 id="应用缓存" tabindex="-1"><a class="header-anchor" href="#应用缓存"><span>应用缓存</span></a></h3><p>基于内存的缓存比如 Memcached 和 Redis 是应用程序和数据存储之间的一种键值存储。由于数据保存在 RAM 中，它比存储在磁盘上的典型数据库要快多了。RAM 比磁盘限制更多，所以例如 <a href="https://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used" target="_blank" rel="noopener noreferrer">least recently used (LRU)</a> 的<a href="https://en.wikipedia.org/wiki/Cache_algorithms" target="_blank" rel="noopener noreferrer">缓存无效算法</a>可以将「热门数据」放在 RAM 中，而对一些比较「冷门」的数据不做处理。</p><p>Redis 有下列附加功能：</p><ul><li>持久性选项</li><li>内置数据结构比如有序集合和列表</li></ul><p>有多个缓存级别，分为两大类：<strong>数据库查询</strong>和<strong>对象</strong>：</p><ul><li>行级别</li><li>查询级别</li><li>完整的可序列化对象</li><li>完全渲染的 HTML</li></ul><p>一般来说，你应该尽量避免基于文件的缓存，因为这使得复制和自动缩放很困难。</p><h3 id="数据库查询级别的缓存" tabindex="-1"><a class="header-anchor" href="#数据库查询级别的缓存"><span>数据库查询级别的缓存</span></a></h3><p>当你查询数据库的时候，将查询语句的哈希值与查询结果存储到缓存中。这种方法会遇到以下问题：</p><ul><li>很难用复杂的查询删除已缓存结果。</li><li>如果一条数据比如表中某条数据的一项被改变，则需要删除所有可能包含已更改项的缓存结果。</li></ul><h3 id="对象级别的缓存" tabindex="-1"><a class="header-anchor" href="#对象级别的缓存"><span>对象级别的缓存</span></a></h3><p>将您的数据视为对象，就像对待你的应用代码一样。让应用程序将数据从数据库中组合到类实例或数据结构中：</p><ul><li>如果对象的基础数据已经更改了，那么从缓存中删掉这个对象。</li><li>允许异步处理：workers 通过使用最新的缓存对象来组装对象。</li></ul><p>建议缓存的内容：</p><ul><li>用户会话</li><li>完全渲染的 Web 页面</li><li>活动流</li><li>用户图数据</li></ul><h3 id="何时更新缓存" tabindex="-1"><a class="header-anchor" href="#何时更新缓存"><span>何时更新缓存</span></a></h3><p>由于你只能在缓存中存储有限的数据，所以你需要选择一个适用于你用例的缓存更新策略。</p><h4 id="缓存模式" tabindex="-1"><a class="header-anchor" href="#缓存模式"><span>缓存模式</span></a></h4><p>应用从存储器读写。缓存不和存储器直接交互，应用执行以下操作：</p><ul><li>在缓存中查找记录，如果所需数据不在缓存中</li><li>从数据库中加载所需内容</li><li>将查找到的结果存储到缓存中</li><li>返回所需内容</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> user_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cache.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, user_id)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> db.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SELECT * FROM users WHERE user_id = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, user_id)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            key </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;user.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user_id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            cache.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(key, json.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dumps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://memcached.org/" target="_blank" rel="noopener noreferrer">Memcached</a> 通常用这种方式使用。</p><p>添加到缓存中的数据读取速度很快。缓存模式也称为延迟加载。只缓存所请求的数据，这避免了没有被请求的数据占满了缓存空间。</p><h5 id="缓存的缺点" tabindex="-1"><a class="header-anchor" href="#缓存的缺点"><span>缓存的缺点：</span></a></h5><ul><li>请求的数据如果不在缓存中就需要经过三个步骤来获取数据，这会导致明显的延迟。</li><li>如果数据库中的数据更新了会导致缓存中的数据过时。这个问题需要通过设置 TTL 强制更新缓存或者直写模式来缓解这种情况。</li><li>当一个节点出现故障的时候，它将会被一个新的节点替代，这增加了延迟的时间。</li></ul><h4 id="直写模式" tabindex="-1"><a class="header-anchor" href="#直写模式"><span>直写模式</span></a></h4><p>应用使用缓存作为主要的数据存储，将数据读写到缓存中，而缓存负责从数据库中读写数据。</p><ul><li>应用向缓存中添加/更新数据</li><li>缓存同步地写入数据存储</li><li>返回所需内容</li></ul><p>应用代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>set_user(12345, {&quot;foo&quot;:&quot;bar&quot;})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>缓存代码：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> set_user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">user_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> db.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">query</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UPDATE Users WHERE id = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{0}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, user_id, values)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cache.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user_id, user)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于存写操作所以直写模式整体是一种很慢的操作，但是读取刚写入的数据很快。相比读取数据，用户通常比较能接受更新数据时速度较慢。缓存中的数据不会过时。</p><h5 id="直写模式的缺点" tabindex="-1"><a class="header-anchor" href="#直写模式的缺点"><span>直写模式的缺点：</span></a></h5><ul><li>由于故障或者缩放而创建的新的节点，新的节点不会缓存，直到数据库更新为止。缓存应用直写模式可以缓解这个问题。</li><li>写入的大多数数据可能永远都不会被读取，用 TTL 可以最小化这种情况的出现。</li></ul><h4 id="回写模式" tabindex="-1"><a class="header-anchor" href="#回写模式"><span>回写模式</span></a></h4><p>在回写模式中，应用执行以下操作：</p><ul><li>在缓存中增加或者更新条目</li><li>异步写入数据，提高写入性能。</li></ul><h5 id="回写模式的缺点" tabindex="-1"><a class="header-anchor" href="#回写模式的缺点"><span>回写模式的缺点：</span></a></h5><ul><li>缓存可能在其内容成功存储之前丢失数据。</li><li>执行直写模式比缓存或者回写模式更复杂。</li></ul><h4 id="刷新" tabindex="-1"><a class="header-anchor" href="#刷新"><span>刷新</span></a></h4><p>你可以将缓存配置成在到期之前自动刷新最近访问过的内容。</p><p>如果缓存可以准确预测将来可能请求哪些数据，那么刷新可能会导致延迟与读取时间的降低。</p><h5 id="刷新的缺点" tabindex="-1"><a class="header-anchor" href="#刷新的缺点"><span>刷新的缺点：</span></a></h5><ul><li>不能准确预测到未来需要用到的数据可能会导致性能不如不使用刷新。</li></ul><h3 id="缓存的缺点-1" tabindex="-1"><a class="header-anchor" href="#缓存的缺点-1"><span>缓存的缺点：</span></a></h3><ul><li>需要保持缓存和真实数据源之间的一致性，比如数据库根据<a href="https://en.wikipedia.org/wiki/Cache_algorithms" target="_blank" rel="noopener noreferrer">缓存无效</a>。</li><li>需要改变应用程序比如增加 Redis 或者 memcached。</li><li>无效缓存是个难题，什么时候更新缓存是与之相关的复杂问题。</li></ul><h3 id="相关资源和延伸阅读-1" tabindex="-1"><a class="header-anchor" href="#相关资源和延伸阅读-1"><span>相关资源和延伸阅读</span></a></h3><ul><li><a href="http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast" target="_blank" rel="noopener noreferrer">从缓存到内存数据</a></li><li><a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html" target="_blank" rel="noopener noreferrer">可扩展系统设计模式</a></li><li><a href="http://lethain.com/introduction-to-architecting-systems-for-scale/" target="_blank" rel="noopener noreferrer">可缩放系统构架介绍</a></li><li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" target="_blank" rel="noopener noreferrer">可扩展性，可用性，稳定性和模式</a></li><li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache" target="_blank" rel="noopener noreferrer">可扩展性</a></li><li><a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Strategies.html" target="_blank" rel="noopener noreferrer">AWS ElastiCache 策略</a></li><li><a href="https://en.wikipedia.org/wiki/Cache_(computing)" target="_blank" rel="noopener noreferrer">维基百科</a></li></ul><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h2><p>异步工作流有助于减少那些原本顺序执行的请求时间。它们可以通过提前进行一些耗时的工作来帮助减少请求时间，比如定期汇总数据。</p><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h3><p>消息队列接收，保留和传递消息。如果按顺序执行操作太慢的话，你可以使用有以下工作流的消息队列：</p><ul><li>应用程序将作业发布到队列，然后通知用户作业状态</li><li>一个 worker 从队列中取出该作业，对其进行处理，然后显示该作业完成</li></ul><p>不去阻塞用户操作，作业在后台处理。在此期间，客户端可能会进行一些处理使得看上去像是任务已经完成了。例如，如果要发送一条推文，推文可能会马上出现在你的时间线上，但是可能需要一些时间才能将你的推文推送到你的所有关注者那里去。</p><p><strong>Redis</strong> 是一个令人满意的简单的消息代理，但是消息有可能会丢失。</p><p><strong>RabbitMQ</strong> 很受欢迎但是要求你适应「AMQP」协议并且管理你自己的节点。</p><p><strong>Amazon SQS</strong> 是被托管的，但可能具有高延迟，并且消息可能会被传送两次。</p><h3 id="任务队列" tabindex="-1"><a class="header-anchor" href="#任务队列"><span>任务队列</span></a></h3><p>任务队列接收任务及其相关数据，运行它们，然后传递其结果。 它们可以支持调度，并可用于在后台运行计算密集型作业。</p><p><strong>Celery</strong> 支持调度，主要是用 Python 开发的。</p><h3 id="背压" tabindex="-1"><a class="header-anchor" href="#背压"><span>背压</span></a></h3><p>如果队列开始明显增长，那么队列大小可能会超过内存大小，导致高速缓存未命中，磁盘读取，甚至性能更慢。<a href="http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html" target="_blank" rel="noopener noreferrer">背压</a>可以通过限制队列大小来帮助我们，从而为队列中的作业保持高吞吐率和良好的响应时间。一旦队列填满，客户端将得到服务器忙或者 HTTP 503 状态码，以便稍后重试。客户端可以在稍后时间重试该请求，也许是<a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank" rel="noopener noreferrer">指数退避</a>。</p><h3 id="异步的缺点" tabindex="-1"><a class="header-anchor" href="#异步的缺点"><span>异步的缺点：</span></a></h3><ul><li>简单的计算和实时工作流等用例可能更适用于同步操作，因为引入队列可能会增加延迟和复杂性。</li></ul><h3 id="相关资源和延伸阅读-2" tabindex="-1"><a class="header-anchor" href="#相关资源和延伸阅读-2"><span>相关资源和延伸阅读</span></a></h3><ul><li><a href="https://www.youtube.com/watch?v=1KRYH75wgy4" target="_blank" rel="noopener noreferrer">这是一个数字游戏</a></li><li><a href="http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html" target="_blank" rel="noopener noreferrer">超载时应用背压</a></li><li><a href="https://en.wikipedia.org/wiki/Little%27s_law" target="_blank" rel="noopener noreferrer">利特尔法则</a></li><li><a href="https://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function" target="_blank" rel="noopener noreferrer">消息队列与任务队列有什么区别？</a></li></ul><h2 id="通讯" tabindex="-1"><a class="header-anchor" href="#通讯"><span>通讯</span></a></h2><h3 id="超文本传输协议-http" tabindex="-1"><a class="header-anchor" href="#超文本传输协议-http"><span>超文本传输协议（HTTP）</span></a></h3><p>HTTP 是一种在客户端和服务器之间编码和传输数据的方法。它是一个请求/响应协议：客户端和服务端针对相关内容和完成状态信息的请求和响应。HTTP 是独立的，允许请求和响应流经许多执行负载均衡，缓存，加密和压缩的中间路由器和服务器。</p><p>一个基本的 HTTP 请求由一个动词（方法）和一个资源（端点）组成。 以下是常见的 HTTP 动词：</p><table><thead><tr><th>动词</th><th>描述</th><th>*幂等</th><th>安全性</th><th>可缓存</th></tr></thead><tbody><tr><td>GET</td><td>读取资源</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>POST</td><td>创建资源或触发处理数据的进程</td><td>No</td><td>No</td><td>Yes，如果回应包含刷新信息</td></tr><tr><td>PUT</td><td>创建或替换资源</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>PATCH</td><td>部分更新资源</td><td>No</td><td>No</td><td>Yes，如果回应包含刷新信息</td></tr><tr><td>DELETE</td><td>删除资源</td><td>Yes</td><td>No</td><td>No</td></tr></tbody></table><p><strong>多次执行不会产生不同的结果</strong>。</p><p>HTTP 是依赖于较低级协议（如 <strong>TCP</strong> 和 <strong>UDP</strong>）的应用层协议。</p><h4 id="来源及延伸阅读-http" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-http"><span>来源及延伸阅读：HTTP</span></a></h4><ul><li><a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol" target="_blank" rel="noopener noreferrer">README</a> +</li><li><a href="https://www.nginx.com/resources/glossary/http/" target="_blank" rel="noopener noreferrer">HTTP 是什么？</a></li><li><a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol" target="_blank" rel="noopener noreferrer">HTTP 和 TCP 的区别</a></li><li><a href="https://laracasts.com/discuss/channels/general-discussion/whats-the-differences-between-put-and-patch?page=1" target="_blank" rel="noopener noreferrer">PUT 和 PATCH的区别</a></li></ul><h3 id="传输控制协议-tcp" tabindex="-1"><a class="header-anchor" href="#传输控制协议-tcp"><span>传输控制协议（TCP）</span></a></h3><p>TCP 是通过 <a href="https://en.wikipedia.org/wiki/Internet_Protocol" target="_blank" rel="noopener noreferrer">IP 网络</a>的面向连接的协议。 使用<a href="https://en.wikipedia.org/wiki/Handshaking" target="_blank" rel="noopener noreferrer">握手</a>建立和断开连接。 发送的所有数据包保证以原始顺序到达目的地，用以下措施保证数据包不被损坏：</p><ul><li>每个数据包的序列号和<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Checksum_computation" target="_blank" rel="noopener noreferrer">校验码</a>。</li><li><a href="https://en.wikipedia.org/wiki/Acknowledgement_(data_networks)" target="_blank" rel="noopener noreferrer">确认包</a>和自动重传</li></ul><p>如果发送者没有收到正确的响应，它将重新发送数据包。如果多次超时，连接就会断开。TCP 实行<a href="https://en.wikipedia.org/wiki/Flow_control_(data)" target="_blank" rel="noopener noreferrer">流量控制</a>和<a href="https://en.wikipedia.org/wiki/Network_congestion#Congestion_control" target="_blank" rel="noopener noreferrer">拥塞控制</a>。这些确保措施会导致延迟，而且通常导致传输效率比 UDP 低。</p><p>为了确保高吞吐量，Web 服务器可以保持大量的 TCP 连接，从而导致高内存使用。在 Web 服务器线程间拥有大量开放连接可能开销巨大，消耗资源过多，也就是说，一个 <a href="#memcached">memcached</a> 服务器。<a href="https://en.wikipedia.org/wiki/Connection_pool" target="_blank" rel="noopener noreferrer">连接池</a> 可以帮助除了在适用的情况下切换到 UDP。</p><p>TCP 对于需要高可靠性但时间紧迫的应用程序很有用。比如包括 Web 服务器，数据库信息，SMTP，FTP 和 SSH。</p><p>以下情况使用 TCP 代替 UDP：</p><ul><li>你需要数据完好无损。</li><li>你想对网络吞吐量自动进行最佳评估。</li></ul><h3 id="用户数据报协议-udp" tabindex="-1"><a class="header-anchor" href="#用户数据报协议-udp"><span>用户数据报协议（UDP）</span></a></h3><p>UDP 是无连接的。数据报（类似于数据包）只在数据报级别有保证。数据报可能会无序的到达目的地，也有可能会遗失。UDP 不支持拥塞控制。虽然不如 TCP 那样有保证，但 UDP 通常效率更高。</p><p>UDP 可以通过广播将数据报发送至子网内的所有设备。这对 <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol" target="_blank" rel="noopener noreferrer">DHCP</a> 很有用，因为子网内的设备还没有分配 IP 地址，而 IP 对于 TCP 是必须的。</p><p>UDP 可靠性更低但适合用在网络电话、视频聊天，流媒体和实时多人游戏上。</p><p>以下情况使用 UDP 代替 TCP：</p><ul><li>你需要低延迟</li><li>相对于数据丢失更糟的是数据延迟</li><li>你想实现自己的错误校正方法</li></ul><h4 id="来源及延伸阅读-tcp-与-udp" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-tcp-与-udp"><span>来源及延伸阅读：TCP 与 UDP</span></a></h4><ul><li><a href="http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/" target="_blank" rel="noopener noreferrer">游戏编程的网络</a></li><li><a href="http://www.cyberciti.biz/faq/key-differences-between-tcp-and-udp-protocols/" target="_blank" rel="noopener noreferrer">TCP 与 UDP 的关键区别</a></li><li><a href="http://stackoverflow.com/questions/5970383/difference-between-tcp-and-udp" target="_blank" rel="noopener noreferrer">TCP 与 UDP 的不同</a></li><li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="noopener noreferrer">传输控制协议</a></li><li><a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol" target="_blank" rel="noopener noreferrer">用户数据报协议</a></li><li><a href="http://www.cs.bu.edu/~jappavoo/jappavoo.github.com/451/papers/memcache-fb.pdf" target="_blank" rel="noopener noreferrer">Memcache 在 Facebook 的扩展</a></li></ul><h3 id="远程过程调用协议-rpc" tabindex="-1"><a class="header-anchor" href="#远程过程调用协议-rpc"><span>远程过程调用协议（RPC）</span></a></h3><p>在 RPC 中，客户端会去调用另一个地址空间（通常是一个远程服务器）里的方法。调用代码看起来就像是调用的是一个本地方法，客户端和服务器交互的具体过程被抽象。远程调用相对于本地调用一般较慢而且可靠性更差，因此区分两者是有帮助的。热门的 RPC 框架包括 <a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener noreferrer">Protobuf</a>、<a href="https://thrift.apache.org/" target="_blank" rel="noopener noreferrer">Thrift</a> 和 <a href="https://avro.apache.org/docs/current/" target="_blank" rel="noopener noreferrer">Avro</a>。</p><p>RPC 是一个“请求-响应”协议：</p><ul><li><strong>客户端程序</strong> ── 调用客户端存根程序。就像调用本地方法一样，参数会被压入栈中。</li><li><strong>客户端 stub 程序</strong> ── 将请求过程的 id 和参数打包进请求信息中。</li><li><strong>客户端通信模块</strong> ── 将信息从客户端发送至服务端。</li><li><strong>服务端通信模块</strong> ── 将接受的包传给服务端存根程序。</li><li><strong>服务端 stub 程序</strong> ── 将结果解包，依据过程 id 调用服务端方法并将参数传递过去。</li></ul><p>RPC 调用示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GET /someoperation?data=anId</span></span>
<span class="line"><span></span></span>
<span class="line"><span>POST /anotheroperation</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;data&quot;:&quot;anId&quot;;</span></span>
<span class="line"><span>  &quot;anotherdata&quot;: &quot;another value&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RPC 专注于暴露方法。RPC 通常用于处理内部通讯的性能问题，这样你可以手动处理本地调用以更好的适应你的情况。</p><p>当以下情况时选择本地库（也就是 SDK）：</p><ul><li>你知道你的目标平台。</li><li>你想控制如何访问你的“逻辑”。</li><li>你想对发生在你的库中的错误进行控制。</li><li>性能和终端用户体验是你最关心的事。</li></ul><p>遵循 <strong>REST</strong> 的 HTTP API 往往更适用于公共 API。</p><h4 id="缺点-rpc" tabindex="-1"><a class="header-anchor" href="#缺点-rpc"><span>缺点：RPC</span></a></h4><ul><li>RPC 客户端与服务实现捆绑地很紧密。</li><li>一个新的 API 必须在每一个操作或者用例中定义。</li><li>RPC 很难调试。</li><li>你可能没办法很方便的去修改现有的技术。举个例子，如果你希望在 <a href="http://www.squid-cache.org/" target="_blank" rel="noopener noreferrer">Squid</a> 这样的缓存服务器上确保 <a href="http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/" target="_blank" rel="noopener noreferrer">RPC 被正确缓存</a>的话可能需要一些额外的努力了。</li></ul><h3 id="表述性状态转移-rest" tabindex="-1"><a class="header-anchor" href="#表述性状态转移-rest"><span>表述性状态转移（REST）</span></a></h3><p>REST 是一种强制的客户端/服务端架构设计模型，客户端基于服务端管理的一系列资源操作。服务端提供修改或获取资源的接口。所有的通信必须是无状态和可缓存的。</p><p>RESTful 接口有四条规则：</p><ul><li><strong>标志资源（HTTP 里的 URI）</strong> ── 无论什么操作都使用同一个 URI。</li><li><strong>表示的改变（HTTP 的动作）</strong> ── 使用动作, headers 和 body。</li><li><strong>可自我描述的错误信息（HTTP 中的 status code）</strong> ── 使用状态码，不要重新造轮子。</li><li><strong><a href="http://restcookbook.com/Basics/hateoas/" target="_blank" rel="noopener noreferrer">HATEOAS</a>（HTTP 中的HTML 接口）</strong> ── 你的 web 服务器应该能够通过浏览器访问。</li></ul><p>REST 请求的例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GET /someresources/anId</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PUT /someresources/anId</span></span>
<span class="line"><span>{&quot;anotherdata&quot;: &quot;another value&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>REST 关注于暴露数据。它减少了客户端／服务端的耦合程度，经常用于公共 HTTP API 接口设计。REST 使用更通常与规范化的方法来通过 URI 暴露资源，<a href="https://github.com/for-GET/know-your-http-well/blob/master/headers.md" target="_blank" rel="noopener noreferrer">通过 header 来表述</a>并通过 GET、POST、PUT、DELETE 和 PATCH 这些动作来进行操作。因为无状态的特性，REST 易于横向扩展和隔离。</p><h4 id="缺点-rest" tabindex="-1"><a class="header-anchor" href="#缺点-rest"><span>缺点：REST</span></a></h4><ul><li>由于 REST 将重点放在暴露数据，所以当资源不是自然组织的或者结构复杂的时候它可能无法很好的适应。举个例子，返回过去一小时中与特定事件集匹配的更新记录这种操作就很难表示为路径。使用 REST，可能会使用 URI 路径，查询参数和可能的请求体来实现。</li><li>REST 一般依赖几个动作（GET、POST、PUT、DELETE 和 PATCH），但有时候仅仅这些没法满足你的需要。举个例子，将过期的文档移动到归档文件夹里去，这样的操作可能没法简单的用上面这几个 verbs 表达。</li><li>为了渲染单个页面，获取被嵌套在层级结构中的复杂资源需要客户端，服务器之间多次往返通信。例如，获取博客内容及其关联评论。对于使用不确定网络环境的移动应用来说，这些多次往返通信是非常麻烦的。</li><li>随着时间的推移，更多的字段可能会被添加到 API 响应中，较旧的客户端将会接收到所有新的数据字段，即使是那些它们不需要的字段，结果它会增加负载大小并引起更大的延迟。</li></ul><h3 id="rpc-与-rest-比较" tabindex="-1"><a class="header-anchor" href="#rpc-与-rest-比较"><span>RPC 与 REST 比较</span></a></h3><table><thead><tr><th>操作</th><th>RPC</th><th>REST</th></tr></thead><tbody><tr><td>注册</td><td><strong>POST</strong> /signup</td><td><strong>POST</strong> /persons</td></tr><tr><td>注销</td><td><strong>POST</strong> /resign{&quot;personid&quot;: &quot;1234&quot;}</td><td><strong>DELETE</strong> /persons/1234</td></tr><tr><td>读取用户信息</td><td><strong>GET</strong> /readPerson?personid=1234</td><td><strong>GET</strong> /persons/1234</td></tr><tr><td>读取用户物品列表</td><td><strong>GET</strong> /readUsersItemsList?personid=1234</td><td><strong>GET</strong> /persons/1234/items</td></tr><tr><td>向用户物品列表添加一项</td><td><strong>POST</strong> /addItemToUsersItemsList{&quot;personid&quot;: &quot;1234&quot;;&quot;itemid&quot;: &quot;456&quot;}</td><td><strong>POST</strong> /persons/1234/items{&quot;itemid&quot;: &quot;456&quot;}</td></tr><tr><td>更新一个物品</td><td><strong>POST</strong> /modifyItem{&quot;itemid&quot;: &quot;456&quot;;&quot;key&quot;: &quot;value&quot;}</td><td><strong>PUT</strong> /items/456{&quot;key&quot;: &quot;value&quot;}</td></tr><tr><td>删除一个物品</td><td><strong>POST</strong> /removeItem{&quot;itemid&quot;: &quot;456&quot;}</td><td><strong>DELETE</strong> /items/456</td></tr></tbody></table><p>资料来源：你真的知道你为什么更喜欢 REST 而不是 RPC 吗</p><h4 id="来源及延伸阅读-rest-与-rpc" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-rest-与-rpc"><span>来源及延伸阅读：REST 与 RPC</span></a></h4><ul><li><a href="https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/" target="_blank" rel="noopener noreferrer">你真的知道你为什么更喜欢 REST 而不是 RPC 吗</a></li><li><a href="http://programmers.stackexchange.com/a/181186" target="_blank" rel="noopener noreferrer">什么时候 RPC 比 REST 更合适？</a></li><li><a href="http://stackoverflow.com/questions/15056878/rest-vs-json-rpc" target="_blank" rel="noopener noreferrer">REST vs JSON-RPC</a></li><li><a href="http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/" target="_blank" rel="noopener noreferrer">揭开 RPC 和 REST 的神秘面纱</a></li><li><a href="https://www.quora.com/What-are-the-drawbacks-of-using-RESTful-APIs" target="_blank" rel="noopener noreferrer">使用 REST 的缺点是什么</a></li><li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview" target="_blank" rel="noopener noreferrer">破解系统设计面试</a></li><li><a href="https://code.facebook.com/posts/1468950976659943/" target="_blank" rel="noopener noreferrer">Thrift</a></li><li><a href="http://arstechnica.com/civis/viewtopic.php?t=1190508" target="_blank" rel="noopener noreferrer">为什么在内部使用 REST 而不是 RPC</a></li></ul><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全"><span>安全</span></a></h2><p>这一部分需要更多内容。<a href="#%E8%B4%A1%E7%8C%AE">一起来吧</a>！</p><p>安全是一个宽泛的话题。除非你有相当的经验、安全方面背景或者正在申请的职位要求安全知识，你不需要了解安全基础知识以外的内容：</p><ul><li>在运输和等待过程中加密</li><li>对所有的用户输入和从用户那里发来的参数进行处理以防止 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener noreferrer">XSS</a> 和 <a href="https://en.wikipedia.org/wiki/SQL_injection" target="_blank" rel="noopener noreferrer">SQL 注入</a>。</li><li>使用参数化的查询来防止 SQL 注入。</li><li>使用<a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege" target="_blank" rel="noopener noreferrer">最小权限原则</a>。</li></ul><h3 id="来源及延伸阅读-12" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-12"><span>来源及延伸阅读</span></a></h3><ul><li><a href="https://github.com/FallibleInc/security-guide-for-developers" target="_blank" rel="noopener noreferrer">为开发者准备的安全引导</a></li><li><a href="https://www.owasp.org/index.php/OWASP_Top_Ten_Cheat_Sheet" target="_blank" rel="noopener noreferrer">OWASP top ten</a></li></ul><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2><p>一些时候你会被要求做出保守估计。比如，你可能需要估计从磁盘中生成 100 张图片的缩略图需要的时间或者一个数据结构需要多少的内存。<strong>2 的次方表</strong>和<strong>每个开发者都需要知道的一些时间数据</strong>（译注：OSChina 上有这篇文章的<a href="https://www.oschina.net/news/30009/every-programmer-should-know" target="_blank" rel="noopener noreferrer">译文</a>）都是一些很方便的参考资料。</p><h3 id="_2-的次方表" tabindex="-1"><a class="header-anchor" href="#_2-的次方表"><span>2 的次方表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Power           Exact Value         Approx Value        Bytes</span></span>
<span class="line"><span>---------------------------------------------------------------</span></span>
<span class="line"><span>7                             128</span></span>
<span class="line"><span>8                             256</span></span>
<span class="line"><span>10                           1024   1 thousand           1 KB</span></span>
<span class="line"><span>16                         65,536                       64 KB</span></span>
<span class="line"><span>20                      1,048,576   1 million            1 MB</span></span>
<span class="line"><span>30                  1,073,741,824   1 billion            1 GB</span></span>
<span class="line"><span>32                  4,294,967,296                        4 GB</span></span>
<span class="line"><span>40              1,099,511,627,776   1 trillion           1 TB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="来源及延伸阅读-13" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-13"><span>来源及延伸阅读</span></a></h4><ul><li><a href="https://en.wikipedia.org/wiki/Power_of_two" target="_blank" rel="noopener noreferrer">2 的次方</a></li></ul><h3 id="每个程序员都应该知道的延迟数" tabindex="-1"><a class="header-anchor" href="#每个程序员都应该知道的延迟数"><span>每个程序员都应该知道的延迟数</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Latency Comparison Numbers</span></span>
<span class="line"><span>--------------------------</span></span>
<span class="line"><span>L1 cache reference                           0.5 ns</span></span>
<span class="line"><span>Branch mispredict                            5   ns</span></span>
<span class="line"><span>L2 cache reference                           7   ns                      14x L1 cache</span></span>
<span class="line"><span>Mutex lock/unlock                           25   ns</span></span>
<span class="line"><span>Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache</span></span>
<span class="line"><span>Compress 1K bytes with Zippy            10,000   ns       10 us</span></span>
<span class="line"><span>Send 1 KB bytes over 1 Gbps network     10,000   ns       10 us</span></span>
<span class="line"><span>Read 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD</span></span>
<span class="line"><span>Read 1 MB sequentially from memory     250,000   ns      250 us</span></span>
<span class="line"><span>Round trip within same datacenter      500,000   ns      500 us</span></span>
<span class="line"><span>Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory</span></span>
<span class="line"><span>Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip</span></span>
<span class="line"><span>Read 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD</span></span>
<span class="line"><span>Read 1 MB sequentially from disk    30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD</span></span>
<span class="line"><span>Send packet CA-&gt;Netherlands-&gt;CA    150,000,000   ns  150,000 us  150 ms</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Notes</span></span>
<span class="line"><span>-----</span></span>
<span class="line"><span>1 ns = 10^-9 seconds</span></span>
<span class="line"><span>1 us = 10^-6 seconds = 1,000 ns</span></span>
<span class="line"><span>1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述数字的指标：</p><ul><li>从磁盘以 30 MB/s 的速度顺序读取</li><li>以 100 MB/s 从 1 Gbps 的以太网顺序读取</li><li>从 SSD 以 1 GB/s 的速度读取</li><li>以 4 GB/s 的速度从主存读取</li><li>每秒能绕地球 6-7 圈</li><li>数据中心内每秒有 2,000 次往返</li></ul><h4 id="延迟数可视化" tabindex="-1"><a class="header-anchor" href="#延迟数可视化"><span>延迟数可视化</span></a></h4><figure><img src="https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="来源及延伸阅读-14" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-14"><span>来源及延伸阅读</span></a></h4><ul><li><a href="https://gist.github.com/jboner/2841832" target="_blank" rel="noopener noreferrer">每个程序员都应该知道的延迟数 — 1</a></li><li><a href="https://gist.github.com/hellerbarde/2843375" target="_blank" rel="noopener noreferrer">每个程序员都应该知道的延迟数 — 2</a></li><li><a href="http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf" target="_blank" rel="noopener noreferrer">关于建设大型分布式系统的的设计方案、课程和建议</a></li><li><a href="https://static.googleusercontent.com/media/research.google.com/en//people/jeff/stanford-295-talk.pdf" target="_blank" rel="noopener noreferrer">关于建设大型可拓展分布式系统的软件工程咨询</a></li></ul><h3 id="其它的系统设计面试题" tabindex="-1"><a class="header-anchor" href="#其它的系统设计面试题"><span>其它的系统设计面试题</span></a></h3><blockquote><p>常见的系统设计面试问题，给出了如何解决的方案链接</p></blockquote><table><thead><tr><th>问题</th><th>引用</th></tr></thead><tbody><tr><td>设计类似于 Dropbox 的文件同步服务</td><td><a href="https://www.youtube.com/watch?v=PE4gwstWhmc" target="_blank" rel="noopener noreferrer">youtube.com</a></td></tr><tr><td>设计类似于 Google 的搜索引擎</td><td><a href="http://queue.acm.org/detail.cfm?id=988407" target="_blank" rel="noopener noreferrer">queue.acm.org</a><a href="http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search" target="_blank" rel="noopener noreferrer">stackexchange.com</a><a href="http://www.ardendertat.com/2012/01/11/implementing-search-engines/" target="_blank" rel="noopener noreferrer">ardendertat.com</a><a href="http://infolab.stanford.edu/~backrub/google.html" target="_blank" rel="noopener noreferrer">stanford.edu</a></td></tr><tr><td>设计类似于 Google 的可扩展网络爬虫</td><td><a href="https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch" target="_blank" rel="noopener noreferrer">quora.com</a></td></tr><tr><td>设计 Google 文档</td><td><a href="https://code.google.com/p/google-mobwrite/" target="_blank" rel="noopener noreferrer">code.google.com</a><a href="https://neil.fraser.name/writing/sync/" target="_blank" rel="noopener noreferrer">neil.fraser.name</a></td></tr><tr><td>设计类似 Redis 的键值存储</td><td><a href="http://www.slideshare.net/dvirsky/introduction-to-redis" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>设计类似 Memcached 的缓存系统</td><td><a href="http://www.slideshare.net/oemebamo/introduction-to-memcached" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>设计类似亚马逊的推荐系统</td><td><a href="http://tech.hulu.com/blog/2011/09/19/recommendation-system.html" target="_blank" rel="noopener noreferrer">hulu.com</a><a href="http://ijcai13.org/files/tutorial_slides/td3.pdf" target="_blank" rel="noopener noreferrer">ijcai13.org</a></td></tr><tr><td>设计类似 Bitly 的短链接系统</td><td><a href="http://n00tc0d3r.blogspot.com/" target="_blank" rel="noopener noreferrer">n00tc0d3r.blogspot.com</a></td></tr><tr><td>设计类似 WhatsApp 的聊天应用</td><td><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td></tr><tr><td>设计类似 Instagram 的图片分享系统</td><td><a href="http://highscalability.com/flickr-architecture" target="_blank" rel="noopener noreferrer">highscalability.com</a><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td></tr><tr><td>设计 Facebook 的新闻推荐方法</td><td><a href="http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed" target="_blank" rel="noopener noreferrer">quora.com</a><a href="http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed" target="_blank" rel="noopener noreferrer">quora.com</a><a href="http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>设计 Facebook 的时间线系统</td><td><a href="https://www.facebook.com/note.php?note_id=10150468255628920" target="_blank" rel="noopener noreferrer">facebook.com</a><a href="http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td></tr><tr><td>设计 Facebook 的聊天系统</td><td><a href="http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf" target="_blank" rel="noopener noreferrer">erlang-factory.com</a><a href="https://www.facebook.com/note.php?note_id=14218138919&amp;id=9445547199&amp;index=0" target="_blank" rel="noopener noreferrer">facebook.com</a></td></tr><tr><td>设计类似 Facebook 的图表搜索系统</td><td><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920" target="_blank" rel="noopener noreferrer">facebook.com</a><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920" target="_blank" rel="noopener noreferrer">facebook.com</a><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920" target="_blank" rel="noopener noreferrer">facebook.com</a></td></tr><tr><td>设计类似 CloudFlare 的内容传递网络</td><td><a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2112&amp;context=compsci" target="_blank" rel="noopener noreferrer">cmu.edu</a></td></tr><tr><td>设计类似 Twitter 的热门话题系统</td><td><a href="http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/" target="_blank" rel="noopener noreferrer">michael-noll.com</a><a href="http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/" target="_blank" rel="noopener noreferrer">snikolov .wordpress.com</a></td></tr><tr><td>设计一个随机 ID 生成系统</td><td><a href="https://blog.twitter.com/2010/announcing-snowflake" target="_blank" rel="noopener noreferrer">blog.twitter.com</a><a href="https://github.com/twitter/snowflake/" target="_blank" rel="noopener noreferrer">github.com</a></td></tr><tr><td>返回一定时间段内次数前 k 高的请求</td><td><a href="https://icmi.cs.ucsb.edu/research/tech_reports/reports/2005-23.pdf" target="_blank" rel="noopener noreferrer">ucsb.edu</a><a href="http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf" target="_blank" rel="noopener noreferrer">wpi.edu</a></td></tr><tr><td>设计一个数据源于多个数据中心的服务系统</td><td><a href="http://highscalability.com/blog/2009/8/24/how-google-serves-data-from-multiple-datacenters.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td></tr><tr><td>设计一个多人网络卡牌游戏</td><td><a href="https://web.archive.org/web/20180929181117/http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html" target="_blank" rel="noopener noreferrer">indieflashblog.com</a><a href="http://buildnewgames.com/real-time-multiplayer/" target="_blank" rel="noopener noreferrer">buildnewgames.com</a></td></tr><tr><td>设计一个垃圾回收系统</td><td><a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/" target="_blank" rel="noopener noreferrer">stuffwithstuff.com</a><a href="http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf" target="_blank" rel="noopener noreferrer">washington.edu</a></td></tr><tr><td>添加更多的系统设计问题</td><td><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></td></tr></tbody></table><h3 id="真实架构" tabindex="-1"><a class="header-anchor" href="#真实架构"><span>真实架构</span></a></h3><blockquote><p>关于现实中真实的系统是怎么设计的文章。</p></blockquote><p><strong>不要专注于以下文章的细节，专注于以下方面：</strong></p><ul><li>发现这些文章中的共同的原则、技术和模式。</li><li>学习每个组件解决哪些问题，什么情况下使用，什么情况下不适用</li><li>复习学过的文章</li></ul><table><thead><tr><th>类型</th><th>系统</th><th>引用</th></tr></thead><tbody><tr><td>Data processing</td><td><strong>MapReduce</strong> - Google的分布式数据处理</td><td><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td></tr><tr><td>Data processing</td><td><strong>Spark</strong> - Databricks 的分布式数据处理</td><td><a href="http://www.slideshare.net/AGrishchenko/apache-spark-architecture" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>Data processing</td><td><strong>Storm</strong> - Twitter 的分布式数据处理</td><td><a href="http://www.slideshare.net/previa/storm-16094009" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>Data store</td><td><strong>Bigtable</strong> - Google 的列式数据库</td><td><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf" target="_blank" rel="noopener noreferrer">harvard.edu</a></td></tr><tr><td>Data store</td><td><strong>HBase</strong> - Bigtable 的开源实现</td><td><a href="http://www.slideshare.net/alexbaranau/intro-to-hbase" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>Cassandra</strong> - Facebook 的列式数据库</td><td><a href="http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>DynamoDB</strong> - Amazon 的文档数据库</td><td><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf" target="_blank" rel="noopener noreferrer">harvard.edu</a></td></tr><tr><td>Data store</td><td><strong>MongoDB</strong> - 文档数据库</td><td><a href="http://www.slideshare.net/mdirolf/introduction-to-mongodb" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>Spanner</strong> - Google 的全球分布数据库</td><td><a href="http://research.google.com/archive/spanner-osdi2012.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td></tr><tr><td>Data store</td><td><strong>Memcached</strong> - 分布式内存缓存系统</td><td><a href="http://www.slideshare.net/oemebamo/introduction-to-memcached" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>Data store</td><td><strong>Redis</strong> - 能够持久化及具有值类型的分布式内存缓存系统</td><td><a href="http://www.slideshare.net/dvirsky/introduction-to-redis" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>File system</td><td><strong>Google File System (GFS)</strong> - 分布式文件系统</td><td><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td></tr><tr><td>File system</td><td><strong>Hadoop File System (HDFS)</strong> - GFS 的开源实现</td><td><a href="https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html" target="_blank" rel="noopener noreferrer">apache.org</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>Misc</td><td><strong>Chubby</strong> - Google 的分布式系统的低耦合锁服务</td><td><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td></tr><tr><td>Misc</td><td><strong>Dapper</strong> - 分布式系统跟踪基础设施</td><td><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td></tr><tr><td>Misc</td><td><strong>Kafka</strong> - LinkedIn 的发布订阅消息系统</td><td><a href="http://www.slideshare.net/mumrah/kafka-talk-tri-hug" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td>Misc</td><td><strong>Zookeeper</strong> - 集中的基础架构和协调服务</td><td><a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper" target="_blank" rel="noopener noreferrer">slideshare.net</a></td></tr><tr><td></td><td>添加更多</td><td><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></td></tr></tbody></table><h3 id="公司的系统架构" tabindex="-1"><a class="header-anchor" href="#公司的系统架构"><span>公司的系统架构</span></a></h3><table><thead><tr><th>Company</th><th>Reference(s)</th></tr></thead><tbody><tr><td>Amazon</td><td><a href="http://highscalability.com/amazon-architecture" target="_blank" rel="noopener noreferrer">Amazon 的架构</a></td></tr><tr><td>Cinchcast</td><td><a href="http://highscalability.com/blog/2012/7/16/cinchcast-architecture-producing-1500-hours-of-audio-every-d.html" target="_blank" rel="noopener noreferrer">每天产生 1500 小时的音频</a></td></tr><tr><td>DataSift</td><td><a href="http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html" target="_blank" rel="noopener noreferrer">每秒实时挖掘 120000 条 tweet</a></td></tr><tr><td>DropBox</td><td><a href="https://www.youtube.com/watch?v=PE4gwstWhmc" target="_blank" rel="noopener noreferrer">我们如何缩放 Dropbox</a></td></tr><tr><td>ESPN</td><td><a href="http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html" target="_blank" rel="noopener noreferrer">每秒操作 100000 次</a></td></tr><tr><td>Google</td><td><a href="http://highscalability.com/google-architecture" target="_blank" rel="noopener noreferrer">Google 的架构</a></td></tr><tr><td>Instagram</td><td><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html" target="_blank" rel="noopener noreferrer">1400 万用户，达到兆级别的照片存储</a><a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances" target="_blank" rel="noopener noreferrer">是什么在驱动 Instagram</a></td></tr><tr><td><a href="http://Justin.tv" target="_blank" rel="noopener noreferrer">Justin.tv</a></td><td><a href="http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html" target="_blank" rel="noopener noreferrer">Justin.Tv 的直播广播架构</a></td></tr><tr><td>Facebook</td><td><a href="https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf" target="_blank" rel="noopener noreferrer">Facebook 的可扩展 memcached</a><a href="https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf" target="_blank" rel="noopener noreferrer">TAO: Facebook 社交图的分布式数据存储</a><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf" target="_blank" rel="noopener noreferrer">Facebook 的图片存储</a></td></tr><tr><td>Flickr</td><td><a href="http://highscalability.com/flickr-architecture" target="_blank" rel="noopener noreferrer">Flickr 的架构</a></td></tr><tr><td>Mailbox</td><td><a href="http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html" target="_blank" rel="noopener noreferrer">在 6 周内从 0 到 100 万用户</a></td></tr><tr><td>Pinterest</td><td><a href="http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html" target="_blank" rel="noopener noreferrer">从零到每月数十亿的浏览量</a><a href="http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html" target="_blank" rel="noopener noreferrer">1800 万访问用户，10 倍增长，12 名员工</a></td></tr><tr><td>Playfish</td><td><a href="http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html" target="_blank" rel="noopener noreferrer">月用户量 5000 万并在不断增长</a></td></tr><tr><td>PlentyOfFish</td><td><a href="http://highscalability.com/plentyoffish-architecture" target="_blank" rel="noopener noreferrer">PlentyOfFish 的架构</a></td></tr><tr><td>Salesforce</td><td><a href="http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html" target="_blank" rel="noopener noreferrer">他们每天如何处理 13 亿笔交易</a></td></tr><tr><td>Stack Overflow</td><td><a href="http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html" target="_blank" rel="noopener noreferrer">Stack Overflow 的架构</a></td></tr><tr><td>TripAdvisor</td><td><a href="http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html" target="_blank" rel="noopener noreferrer">40M 访问者，200M 页面浏览量，30TB 数据</a></td></tr><tr><td>Tumblr</td><td><a href="http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html" target="_blank" rel="noopener noreferrer">每月 150 亿的浏览量</a></td></tr><tr><td>Twitter</td><td><a href="http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster" target="_blank" rel="noopener noreferrer">Making Twitter 10000 percent faster</a><a href="http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html" target="_blank" rel="noopener noreferrer">每天使用 MySQL 存储2.5亿条 tweet</a><a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html" target="_blank" rel="noopener noreferrer">150M 活跃用户，300K QPS，22 MB/S 的防火墙</a><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability" target="_blank" rel="noopener noreferrer">可扩展时间表</a><a href="https://www.youtube.com/watch?v=5cKTP36HVgI" target="_blank" rel="noopener noreferrer">Twitter 的大小数据</a><a href="https://www.youtube.com/watch?v=z8LU0Cj6BOU" target="_blank" rel="noopener noreferrer">Twitter 的行为：规模超过 1 亿用户</a></td></tr><tr><td>Uber</td><td><a href="http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html" target="_blank" rel="noopener noreferrer">Uber 如何扩展自己的实时化市场</a></td></tr><tr><td>WhatsApp</td><td><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html" target="_blank" rel="noopener noreferrer">Facebook 用 190 亿美元购买 WhatsApp 的架构</a></td></tr><tr><td>YouTube</td><td><a href="https://www.youtube.com/watch?v=w5WVu624fY8" target="_blank" rel="noopener noreferrer">YouTube 的可扩展性</a><a href="http://highscalability.com/youtube-architecture" target="_blank" rel="noopener noreferrer">YouTube 的架构</a></td></tr></tbody></table><h3 id="公司工程博客" tabindex="-1"><a class="header-anchor" href="#公司工程博客"><span>公司工程博客</span></a></h3><blockquote><p>你即将面试的公司的架构</p><p>你面对的问题可能就来自于同样领域</p></blockquote><ul><li><a href="http://nerds.airbnb.com/" target="_blank" rel="noopener noreferrer">Airbnb Engineering</a></li><li><a href="https://developer.atlassian.com/blog/" target="_blank" rel="noopener noreferrer">Atlassian Developers</a></li><li><a href="http://cloudengineering.autodesk.com/blog/" target="_blank" rel="noopener noreferrer">Autodesk Engineering</a></li><li><a href="https://aws.amazon.com/blogs/aws/" target="_blank" rel="noopener noreferrer">AWS Blog</a></li><li><a href="http://word.bitly.com/" target="_blank" rel="noopener noreferrer">Bitly Engineering Blog</a></li><li><a href="https://www.box.com/blog/engineering/" target="_blank" rel="noopener noreferrer">Box Blogs</a></li><li><a href="http://blog.cloudera.com/blog/" target="_blank" rel="noopener noreferrer">Cloudera Developer Blog</a></li><li><a href="https://tech.dropbox.com/" target="_blank" rel="noopener noreferrer">Dropbox Tech Blog</a></li><li><a href="http://engineering.quora.com/" target="_blank" rel="noopener noreferrer">Engineering at Quora</a></li><li><a href="http://www.ebaytechblog.com/" target="_blank" rel="noopener noreferrer">Ebay Tech Blog</a></li><li><a href="https://blog.evernote.com/tech/" target="_blank" rel="noopener noreferrer">Evernote Tech Blog</a></li><li><a href="http://codeascraft.com/" target="_blank" rel="noopener noreferrer">Etsy Code as Craft</a></li><li><a href="https://www.facebook.com/Engineering" target="_blank" rel="noopener noreferrer">Facebook Engineering</a></li><li><a href="http://code.flickr.net/" target="_blank" rel="noopener noreferrer">Flickr Code</a></li><li><a href="http://engineering.foursquare.com/" target="_blank" rel="noopener noreferrer">Foursquare Engineering Blog</a></li><li><a href="http://githubengineering.com/" target="_blank" rel="noopener noreferrer">GitHub Engineering Blog</a></li><li><a href="http://googleresearch.blogspot.com/" target="_blank" rel="noopener noreferrer">Google Research Blog</a></li><li><a href="https://engineering.groupon.com/" target="_blank" rel="noopener noreferrer">Groupon Engineering Blog</a></li><li><a href="https://engineering.heroku.com/" target="_blank" rel="noopener noreferrer">Heroku Engineering Blog</a></li><li><a href="http://product.hubspot.com/blog/topic/engineering" target="_blank" rel="noopener noreferrer">Hubspot Engineering Blog</a></li><li><a href="http://highscalability.com/" target="_blank" rel="noopener noreferrer">High Scalability</a></li><li><a href="http://instagram-engineering.tumblr.com/" target="_blank" rel="noopener noreferrer">Instagram Engineering</a></li><li><a href="https://software.intel.com/en-us/blogs/" target="_blank" rel="noopener noreferrer">Intel Software Blog</a></li><li><a href="https://blogs.janestreet.com/category/ocaml/" target="_blank" rel="noopener noreferrer">Jane Street Tech Blog</a></li><li><a href="http://engineering.linkedin.com/blog" target="_blank" rel="noopener noreferrer">LinkedIn Engineering</a></li><li><a href="https://engineering.microsoft.com/" target="_blank" rel="noopener noreferrer">Microsoft Engineering</a></li><li><a href="https://blogs.msdn.microsoft.com/pythonengineering/" target="_blank" rel="noopener noreferrer">Microsoft Python Engineering</a></li><li><a href="http://techblog.netflix.com/" target="_blank" rel="noopener noreferrer">Netflix Tech Blog</a></li><li><a href="https://devblog.paypal.com/category/engineering/" target="_blank" rel="noopener noreferrer">Paypal Developer Blog</a></li><li><a href="http://engineering.pinterest.com/" target="_blank" rel="noopener noreferrer">Pinterest Engineering Blog</a></li><li><a href="https://engineering.quora.com/" target="_blank" rel="noopener noreferrer">Quora Engineering</a></li><li><a href="http://www.redditblog.com/" target="_blank" rel="noopener noreferrer">Reddit Blog</a></li><li><a href="https://developer.salesforce.com/blogs/engineering/" target="_blank" rel="noopener noreferrer">Salesforce Engineering Blog</a></li><li><a href="https://slack.engineering/" target="_blank" rel="noopener noreferrer">Slack Engineering Blog</a></li><li><a href="https://labs.spotify.com/" target="_blank" rel="noopener noreferrer">Spotify Labs</a></li><li><a href="http://www.twilio.com/engineering" target="_blank" rel="noopener noreferrer">Twilio Engineering Blog</a></li><li><a href="https://engineering.twitter.com/" target="_blank" rel="noopener noreferrer">Twitter Engineering</a></li><li><a href="http://eng.uber.com/" target="_blank" rel="noopener noreferrer">Uber Engineering Blog</a></li><li><a href="http://yahooeng.tumblr.com/" target="_blank" rel="noopener noreferrer">Yahoo Engineering Blog</a></li><li><a href="http://engineeringblog.yelp.com/" target="_blank" rel="noopener noreferrer">Yelp Engineering Blog</a></li><li><a href="https://www.zynga.com/blogs/engineering" target="_blank" rel="noopener noreferrer">Zynga Engineering Blog</a></li></ul><h4 id="来源及延伸阅读-15" tabindex="-1"><a class="header-anchor" href="#来源及延伸阅读-15"><span>来源及延伸阅读</span></a></h4><ul><li><a href="https://github.com/kilimchoi/engineering-blogs" target="_blank" rel="noopener noreferrer">kilimchoi/engineering-blogs</a></li></ul><h2 id="正在完善中" tabindex="-1"><a class="header-anchor" href="#正在完善中"><span>正在完善中</span></a></h2><p>有兴趣加入添加一些部分或者帮助完善某些部分吗？<a href="#%E8%B4%A1%E7%8C%AE">加入进来吧</a>！</p><ul><li>使用 MapReduce 进行分布式计算</li><li>一致性哈希</li><li>直接存储器访问（DMA）控制器</li><li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li></ul><h2 id="致谢" tabindex="-1"><a class="header-anchor" href="#致谢"><span>致谢</span></a></h2><p>整个仓库都提供了证书和源</p><p>特别鸣谢：</p><ul><li><a href="http://www.hiredintech.com/system-design/the-system-design-process/" target="_blank" rel="noopener noreferrer">Hired in tech</a></li><li><a href="https://www.amazon.com/dp/0984782850/" target="_blank" rel="noopener noreferrer">Cracking the coding interview</a></li><li><a href="http://highscalability.com/" target="_blank" rel="noopener noreferrer">High scalability</a></li><li><a href="https://github.com/checkcheckzz/system-design-interview" target="_blank" rel="noopener noreferrer">checkcheckzz/system-design-interview</a></li><li><a href="https://github.com/shashank88/system_design" target="_blank" rel="noopener noreferrer">shashank88/system_design</a></li><li><a href="https://github.com/mmcgrana/services-engineering" target="_blank" rel="noopener noreferrer">mmcgrana/services-engineering</a></li><li><a href="https://gist.github.com/vasanthk/485d1c25737e8e72759f" target="_blank" rel="noopener noreferrer">System design cheat sheet</a></li><li><a href="http://dancres.github.io/Pages/" target="_blank" rel="noopener noreferrer">A distributed systems reading list</a></li><li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview" target="_blank" rel="noopener noreferrer">Cracking the system design interview</a></li></ul><h2 id="许可" tabindex="-1"><a class="header-anchor" href="#许可"><span>许可</span></a></h2><pre><code>Creative Commons Attribution 4.0 International License (CC BY 4.0)

http://creativecommons.org/licenses/by/4.0/
</code></pre><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener noreferrer">https://github.com/donnemartin/system-design-primer</a></p>`,418))])}const u=s(d,[["render",c]]),E=JSON.parse('{"path":"/posts/Awesome/2021-09-07-awesome-system-design-prime.html","title":"system-design-primer 学习如何设计大型系统。 准备系统设计面试。 包括 Anki 抽认卡。","lang":"zh-CN","frontmatter":{"title":"system-design-primer 学习如何设计大型系统。 准备系统设计面试。 包括 Anki 抽认卡。","date":"2021-09-05T00:00:00.000Z","categories":["Awesome"],"tags":["awesome","distributed","sh"],"published":true,"description":"系统设计入门 目的 学习如何设计大型系统。 为系统设计的面试做准备。 学习如何设计大型系统 学习如何设计可扩展的系统将会有助于你成为一个更好的工程师。 系统设计是一个很宽泛的话题。在互联网上，关于系统设计原则的资源也是多如牛毛。 这个仓库就是这些资源的组织收集，它可以帮助你学习如何构建可扩展的系统。 从开源社区学习 这是一个不断更新的开源项目的初期的版...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Awesome/2021-09-07-awesome-system-design-prime.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"system-design-primer 学习如何设计大型系统。 准备系统设计面试。 包括 Anki 抽认卡。"}],["meta",{"property":"og:description","content":"系统设计入门 目的 学习如何设计大型系统。 为系统设计的面试做准备。 学习如何设计大型系统 学习如何设计可扩展的系统将会有助于你成为一个更好的工程师。 系统设计是一个很宽泛的话题。在互联网上，关于系统设计原则的资源也是多如牛毛。 这个仓库就是这些资源的组织收集，它可以帮助你学习如何构建可扩展的系统。 从开源社区学习 这是一个不断更新的开源项目的初期的版..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"awesome"}],["meta",{"property":"article:tag","content":"distributed"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"system-design-primer 学习如何设计大型系统。 准备系统设计面试。 包括 Anki 抽认卡。\\",\\"image\\":[\\"https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67\\"],\\"datePublished\\":\\"2021-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":63.59,"words":19076},"filePathRelative":"posts/Awesome/2021-09-07-awesome-system-design-prime.md","localizedDate":"2021年9月5日","excerpt":"\\n<h2>目的</h2>\\n<blockquote>\\n<p>学习如何设计大型系统。</p>\\n<p>为系统设计的面试做准备。</p>\\n</blockquote>\\n<h3>学习如何设计大型系统</h3>\\n<p>学习如何设计可扩展的系统将会有助于你成为一个更好的工程师。</p>\\n<p>系统设计是一个很宽泛的话题。在互联网上，<strong>关于系统设计原则的资源也是多如牛毛。</strong></p>\\n<p>这个仓库就是这些资源的<strong>组织收集</strong>，它可以帮助你学习如何构建可扩展的系统。</p>\\n<h3>从开源社区学习</h3>\\n<p>这是一个不断更新的开源项目的初期的版本。</p>","autoDesc":true}');export{u as comp,E as data};
