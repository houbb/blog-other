import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as a}from"./app-uJE4P3e0.js";const l={};function p(r,i){return a(),n("div",null,i[0]||(i[0]=[e(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2016/10/14/devops-01-overview" target="_blank" rel="noopener noreferrer">Devops-01-devops 是什么？</a></p><p><a href="https://houbb.github.io/2016/10/14/devops-02-jpom" target="_blank" rel="noopener noreferrer">Devops-02-Jpom 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件</a></p><p><a href="https://houbb.github.io/2016/10/14/devops-sonarqube-01-intro" target="_blank" rel="noopener noreferrer">代码质量管理 SonarQube-01-入门介绍</a></p><p><a href="https://houbb.github.io/2016/10/14/project-manage-jira-01-intro" target="_blank" rel="noopener noreferrer">项目管理平台-01-jira 入门介绍 缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件</a></p><p><a href="https://houbb.github.io/2016/10/14/project-manage-phabricator-01-overview" target="_blank" rel="noopener noreferrer">项目管理平台-01-Phabricator 入门介绍 一套集成的强大工具，帮助公司构建更高质量的软件</a></p><p><a href="https://houbb.github.io/2016/10/14/devops-jenkins-01-intro" target="_blank" rel="noopener noreferrer">持续集成平台 01 jenkins 入门介绍</a></p><h1 id="jenkins" tabindex="-1"><a class="header-anchor" href="#jenkins"><span>Jenkins</span></a></h1><p>作为领先的开源自动化服务器，Jenkins提供了数百个插件来支持构建、部署和自动化任何项目。</p><blockquote><p><a href="https://jenkins.io/index.html" target="_blank" rel="noopener noreferrer">jenkins</a></p></blockquote><h1 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h1><p>LTS（长期支持）版本每12周从常规发布流中选择一个稳定版本作为该时间段的稳定版本。</p><p>下载war包，将其重命名为 <code>ROOT.war</code> 并放入</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/Users/houbinbin/it/tools/tomcat/tomcat8/webapps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>启动tomcat</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>houbinbindeMacBook-Pro:bin houbinbin$ pwd</span></span>
<span class="line"><span>/Users/houbinbin/it/tools/tomcat/tomcat8/bin</span></span>
<span class="line"><span>houbinbindeMacBook-Pro:bin houbinbin$ ./startup.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>访问</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>localhost:8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>卸载</li></ul><p>使用 <code>./</code> 到命令行。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$   /Library/Application Support/Jenkins/Uninstall.command</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>houbinbindeMacBook-Pro:Jenkins houbinbin$ ./Uninstall.command</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Jenkins 卸载脚本</span></span>
<span class="line"><span></span></span>
<span class="line"><span>以下命令使用sudo执行，因此您需要以管理员身份登录。在提示时请输入密码。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>+ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span></span>
<span class="line"><span>+ sudo rm /Library/LaunchDaemons/org.jenkins-ci.plist</span></span>
<span class="line"><span>+ sudo rm -rf /Applications/Jenkins &#39;/Library/Application Support/Jenkins&#39; /Library/Documentation/Jenkins</span></span>
<span class="line"><span>+ sudo rm -rf /Users/Shared/Jenkins</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>+ sudo rm -rf /var/log/jenkins</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>+ sudo rm -f /etc/newsyslog.d/jenkins.conf</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>+ sudo dscl . -delete /Users/jenkins</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>+ sudo dscl . -delete /Groups/jenkins</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>+ pkgutil --pkgs</span></span>
<span class="line"><span>+ grep &#39;org\\.jenkins-ci\\.&#39;</span></span>
<span class="line"><span>+ xargs -n 1 sudo pkgutil --forget</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>Forgot package &#39;org.jenkins-ci.documentation.pkg&#39; on &#39;/&#39;.</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>Forgot package &#39;org.jenkins-ci.jenkins.osx.pkg&#39; on &#39;/&#39;.</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>Forgot package &#39;org.jenkins-ci.jenkins2191.postflight.pkg&#39; on &#39;/&#39;.</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>Forgot package &#39;org.jenkins-ci.launchd-jenkins.pkg&#39; on &#39;/&#39;.</span></span>
<span class="line"><span>sudo: cannot get working directory</span></span>
<span class="line"><span>Forgot package &#39;org.jenkins-ci.support.pkg&#39; on &#39;/&#39;.</span></span>
<span class="line"><span>+ set +x</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Jenkins 已卸载。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="开始使用" tabindex="-1"><a class="header-anchor" href="#开始使用"><span>开始使用</span></a></h1><ul><li>验证密码</li></ul><p>将 <code>/Users/houbinbin/.jenkins/secrets/initialAdminPassword</code> 的内容复制到密码输入框中。</p><ul><li><p>安装插件</p></li><li><p>创建用户</p></li></ul><p>之后，您可以看到：</p><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/jenkins/2016-10-15-jenkins.png" alt="jenkines" tabindex="0" loading="lazy"><figcaption>jenkines</figcaption></figure><ul><li>默认用户配置位置：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/Users/houbinbin/.jenkins/users/\${username}/config.xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="配置-jenkins" tabindex="-1"><a class="header-anchor" href="#配置-jenkins"><span>配置 Jenkins</span></a></h1><blockquote><p>配置java、git、maven</p></blockquote><ul><li>首先获取所需内容</li></ul><p>1、<code>which</code> 可以获取执行路径</p><p>2、如果您之前已经配置过路径，例如在 <code>~/.bash_profile</code> 中设置了 <code>$M3_HOME</code>，则可以使用 <code>echo $M3_HOME</code> 来获取主目录路径</p><p>3、对于Java，我们可以使用 <code>/usr/libexec/java_home</code> 来获取其路径</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>houbinbindeMacBook-Pro:bin houbinbin$ which mvn</span></span>
<span class="line"><span>/usr/local/maven/maven3.3.9/bin/mvn</span></span>
<span class="line"><span>houbinbindeMacBook-Pro:~ houbinbin$ echo $M3_HOME</span></span>
<span class="line"><span>/usr/local/maven/maven3.3.9</span></span>
<span class="line"><span>houbinbindeMacBook-Pro:bin houbinbin$ which git</span></span>
<span class="line"><span>/usr/local/bin/git</span></span>
<span class="line"><span>houbinbindeMacBook-Pro:bin houbinbin$ which java</span></span>
<span class="line"><span>/usr/bin/java</span></span>
<span class="line"><span>houbinbindeMacBook-Pro:~ houbinbin$ /usr/libexec/java_home</span></span>
<span class="line"><span>/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置路径</li></ul><p><code>系统管理-》全局工具配置</code> 或 <code>http://localhost:8080/configureTools/</code></p><p>1、添加jdk</p><p>在mac中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JDK别名:      JDK8</span></span>
<span class="line"><span>JAVA_HOME:    /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在ubuntu中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ which java</span></span>
<span class="line"><span>/home/hbb/tool/jdk/jdk1.8.0_112/bin/java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JAVA_HOME:  /home/hbb/tool/jdk/jdk1.8.0_112</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以此类推，添加 <code>git</code> 和 <code>mvn</code></p><p>2、添加git</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Name: git</span></span>
<span class="line"><span>Path to Git executable: /usr/local/bin/git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、添加mvn</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>name: maven3</span></span>
<span class="line"><span>MAVEN_HOME: /usr/local/maven/maven3.3.9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/jenkins/2016-10-15-config-tools.png" alt="tools" tabindex="0" loading="lazy"><figcaption>tools</figcaption></figure><blockquote><p>配置邮件</p></blockquote><p><a href="http://blog.csdn.net/littlechang/article/details/8706322" target="_blank" rel="noopener noreferrer">邮件</a></p><p><a href="http://tanglei528.blog.163.com/blog/static/4335339920151263051521/" target="_blank" rel="noopener noreferrer">配置邮件</a></p><h1 id="创建任务" tabindex="-1"><a class="header-anchor" href="#创建任务"><span>创建任务</span></a></h1><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h2><p>输入一个项目名称 <em>blog</em> 作为示例，选择 <strong>构建一个自由风格的软件项目</strong></p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>1、源码管理</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Git</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Repository URL: https://github.com/houbb/blog</span></span>
<span class="line"><span>Credentials:    usr/pwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、构建触发器<br> 选择 <strong>当 GitHub 推送更改时构建</strong> 和 <strong>轮询 SCM</strong></p><p>设置 <a href="http://www.cnblogs.com/linjiqin/archive/2013/07/08/3178452.html" target="_blank" rel="noopener noreferrer">调度</a> 为 <strong>轮询 SCM</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>*/5 * * * *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示每五分钟重新检查一次。</p><p>对于所有的任务调度，Jenkins 采用 cron-style 语法，包含 5 个字段，字段之间使用空格隔开，格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>分钟 小时 日 月 星期</span></span>
<span class="line"><span>分钟：0-59    小时：0-23    日：1-31   月：1-12   星期：0-7 ，其中 0,7 表示星期日 ，以下有几个简化字符</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>1、“*” 表示在该字段所有可能出现的值<br> 2、也可以使用连字符“-”定义范围，如在星期字段上定义 1-5，表示周一至周五<br> 3、使用正斜杠符号定义一个跳过一个范围，如在分钟字段上定义 */5 表示每五分钟的意思<br> 4、使用逗号分隔一个字段表示一系列有效值，如小时 字段定义 12,18 表示 12 点与 18 点</p><p>3、选择【丢弃旧的构建】，这里主要是为节省磁盘空间而考虑的，因为每次构建后，Jenkins 都会在 jobs 目录下为每个 job 下载，并创建相关数据，如打包后的 jar 等</p><ul><li>保持构建的天数，这里我设置为 5，表示每次构建后的记录只有 5 天有效期</li><li>保持构建的最大个数，每个 job 只会保留最新的 5 次构建记录，这里需要提醒的是，如果之前有一次构建成功，那么 Jenkins 会永远保留，当然也可以手动删除</li></ul><p>4、构建触发器</p><p>勾选以下选项:</p><ul><li><p>当 SNAPSHOT 依赖项构建时构建</p></li><li><p>定期构建</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>H 7 * * 1-7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>当 GitHub 推送更改时构建</li></ul><p>5、构建</p><p>调用顶层 Maven 目标</p><p>Maven 版本: maven3</p><p>Goals: clean site</p><h1 id="参数化构建" tabindex="-1"><a class="header-anchor" href="#参数化构建"><span>参数化构建</span></a></h1><blockquote><p><a href="http://www.tuicool.com/articles/A3QBN3z" target="_blank" rel="noopener noreferrer">博客文章</a></p></blockquote><ol><li><p>在 Jenkins 中安装 <code>Dynamic Parameter Plug-in</code></p></li><li><p>参数化构建过程-&gt;动态选择参数</p></li></ol><ul><li><strong>名称</strong> 设为 <code>release_branch</code></li><li><strong>选择脚本</strong> 设为:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def ver_keys = [ &#39;bash&#39;, &#39;-c&#39;, &#39;cd /Users/houbinbin/.jenkins/workspace/framework; git pull&gt;/dev/null; git branch -a|grep remotes|cut -d &quot;/&quot; -f3|sort -r |head -10 &#39; ]</span></span>
<span class="line"><span>ver_keys.execute().text.tokenize(&#39;\\n&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令简要解释:</p><p>进入项目路径，提取分支名称。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>houbinbindeMacBook-Pro:framework houbinbin$ pwd</span></span>
<span class="line"><span>/Users/houbinbin/.jenkins/workspace/framework</span></span>
<span class="line"><span>houbinbindeMacBook-Pro:framework houbinbin$ git branch -a</span></span>
<span class="line"><span>* (HEAD detached at 00177f4)</span></span>
<span class="line"><span>  remotes/origin/master</span></span>
<span class="line"><span>  remotes/origin/release_1.0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化建议:</p><p>(1) <code>/Users/houbinbin/.jenkins/workspace/framework</code> 是 Jenkins 自带的 <code>WORKSPACE</code>，直接使用无效。需修正路径。</p><p>(2) 项目必须在 Jenkins 部署后，路径才会存在于 workspace 下。因此可将路径调整为代码的本地存放路径。</p><blockquote><p>直接指定选项</p></blockquote><p>参数化构建过程-&gt;选择参数</p><p>一行代表一个选项。</p><ol start="3"><li><strong>要构建的分支</strong> -&gt; <strong>分支规范（为空表示“任意”）</strong> 内容指定为 <code>$release_branch</code></li></ol><h1 id="流水线" tabindex="-1"><a class="header-anchor" href="#流水线"><span>流水线</span></a></h1><p>Jenkins 流水线是一套插件，支持将持续交付流水线集成到 Jenkins 中。</p><p>使用 Jenkins 流水线，您需要：</p><ul><li>Jenkins 2.x 或更高版本（旧版本至 1.642.3 可能可行，但不建议使用）</li><li>流水线插件</li></ul><blockquote><p>在 Web UI 中定义流水线</p></blockquote><ol><li><p>在首页点击 <strong>新建项</strong></p></li><li><p>输入项目名称如 <code>pipeline-example</code>，选择 <strong>Pipeline</strong>，然后保存。</p></li><li><p>在流水线的脚本定义字段中，添加以下内容并保存</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>node {</span></span>
<span class="line"><span>    echo &quot;hello world&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p>点击 <strong>立即构建</strong> 来运行流水线。</p></li><li><p>点击 <strong>构建历史</strong> 下的 <code>#1</code>，然后点击 <strong>控制台输出</strong>，您会看到：</p></li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Started by user houbinbin</span></span>
<span class="line"><span>[Pipeline] node</span></span>
<span class="line"><span>Running on master in /Users/houbinbin/.jenkins/workspace/pipeline-example</span></span>
<span class="line"><span>[Pipeline] {</span></span>
<span class="line"><span>[Pipeline] echo</span></span>
<span class="line"><span>hello world</span></span>
<span class="line"><span>[Pipeline] }</span></span>
<span class="line"><span>[Pipeline] // node</span></span>
<span class="line"><span>[Pipeline] End of Pipeline</span></span>
<span class="line"><span>Finished: SUCCESS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 SCM 中定义流水线</p></blockquote><p>文档可在 <a href="localhost:8888/pipeline-syntax/" target="_blank" rel="noopener noreferrer">localhost:8888/pipeline-syntax/</a> 找到。</p><h1 id="jenkins文件" tabindex="-1"><a class="header-anchor" href="#jenkins文件"><span>Jenkins文件</span></a></h1><blockquote><p>创建一个 Jenkinsfile</p></blockquote><p><code>Jenkinsfile</code> 是一个文本文件，包含了 Jenkins 流水线的定义，并且被提交到源代码控制中。</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">node {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    checkout scm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* .. 省略 .. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;构建&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sh </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;make&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        archiveArtifacts </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">artifacts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;**/target/*.jar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">fingerprint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* .. 省略 .. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;测试&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* \`make check\` 在测试失败时返回非零值，</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * 使用 \`true\` 仍然允许流水线继续执行</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sh </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;make check || true&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        junit </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;**/target/*.xml&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* .. 省略 .. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    stage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;部署&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (currentBuild.result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;SUCCESS&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            sh </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;make publish&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong>构建</strong> 阶段:</p><ul><li><p>执行命令 <code>make</code> 编译代码</p></li><li><p>存档构建产物 <code>**/target/*.jar</code>，生成指纹以用于后续跟踪</p></li></ul></li><li><p><strong>测试</strong> 阶段:</p><ul><li>执行命令 <code>make check</code> 进行测试，即使测试失败也继续执行流水线</li><li>使用 JUnit 插件收集测试结果 <code>**/target/*.xml</code></li></ul></li><li><p><strong>部署</strong> 阶段:</p><ul><li>如果当前构建结果为成功，执行命令 <code>make publish</code> 进行部署。</li></ul></li></ol><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-jenkins" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jenkins"><span>详细介绍一下 jenkins</span></a></h2><p>Jenkins 是一个开源的自动化服务器，用于实现持续集成和持续交付（CI/CD）。</p><p>它是一个可扩展的系统，提供了丰富的插件生态系统，能够支持几乎任何项目的构建、测试和部署过程。</p><p>以下是 Jenkins 的一些主要特点和功能：</p><ol><li><p><strong>持续集成和持续交付（CI/CD）</strong>：Jenkins 可以自动化构建、测试和部署软件项目，从而加快开发周期并提高软件质量。</p></li><li><p><strong>易于安装和配置</strong>：Jenkins 可以在各种操作系统上运行，并且易于安装和配置。它提供了一个直观的 Web 界面，使用户可以轻松地设置和管理构建任务。</p></li><li><p><strong>丰富的插件生态系统</strong>：Jenkins 拥有庞大的插件生态系统，用户可以根据自己的需求选择和安装各种插件，以扩展 Jenkins 的功能，实现更多定制化的 CI/CD 流程。</p></li><li><p><strong>支持多种版本控制系统</strong>：Jenkins 支持多种版本控制系统，包括 Git、Subversion、Mercurial 等，使用户能够轻松地集成版本控制到构建过程中。</p></li><li><p><strong>构建触发器和定时任务</strong>：Jenkins 提供了多种构建触发器，包括基于代码提交、定时触发、API 调用等。用户可以根据需要设置不同的触发器来启动构建任务。</p></li><li><p><strong>分布式构建</strong>：Jenkins 支持分布式构建，可以将构建任务分发到多台计算机上并行执行，从而加速构建过程。</p></li><li><p><strong>可视化构建历史和报告</strong>：Jenkins 提供了直观的构建历史和报告，用户可以轻松地查看每次构建的结果、日志和测试报告，方便问题定位和分析。</p></li><li><p><strong>安全性和权限管理</strong>：Jenkins 提供了灵活的安全性和权限管理功能，用户可以根据角色和权限对用户进行管理和授权，确保系统的安全性和稳定性。</p></li></ol><p>总的来说，Jenkins 是一个功能强大、灵活易用的自动化工具，广泛应用于软件开发和持续集成领域，帮助团队实现高效的软件交付流程，提高软件质量和开发效率。</p><h2 id="jenkins-的核心原理和流程是什么" tabindex="-1"><a class="header-anchor" href="#jenkins-的核心原理和流程是什么"><span>jenkins 的核心原理和流程是什么？</span></a></h2><p>Jenkins 是一个用于持续集成和持续交付的开源自动化服务器。它的核心原理和流程如下：</p><ol><li><p><strong>持续集成（CI）</strong>：</p><ul><li>Jenkins 的核心概念是持续集成，即将开发人员的代码频繁地集成到共享代码库中，并通过自动化构建和测试来验证代码的质量。</li><li>开发人员在完成代码修改后，将代码提交到版本控制系统（如 Git、SVN 等）的特定分支。</li><li>Jenkins 监听版本控制系统，当检测到代码提交时，触发构建任务。</li></ul></li><li><p><strong>构建流水线（Pipeline）</strong>：</p><ul><li>Jenkins 使用 Jenkinsfile 或者通过界面配置的方式定义构建流水线，其中包括构建、测试、部署等阶段的执行顺序和操作。</li><li>构建流水线是一个脚本或者一系列步骤，用于定义构建过程中要执行的操作。</li></ul></li><li><p><strong>节点（Node）和代理（Agent）</strong>：</p><ul><li>Jenkins 构建任务可以在 Jenkins 主服务器上执行，也可以分布在多个节点或代理上执行。</li><li>节点可以是物理服务器、虚拟机或者容器，用于执行构建任务。代理是 Jenkins 主服务器上的一个进程，用于接收和执行来自 Jenkins 主服务器的构建任务。</li></ul></li><li><p><strong>触发器（Triggers）</strong>：</p><ul><li>构建任务可以通过不同的触发器来触发，如定时触发、代码提交触发、API 调用触发等。</li><li>定时触发可以定期执行构建任务，以确保代码的定期构建和集成。</li><li>代码提交触发则是在代码库有新的提交时自动触发构建任务。</li></ul></li><li><p><strong>构建环境（Environment）</strong>：</p><ul><li>构建任务执行时会提供一个独立的构建环境，其中包括构建所需的工具、依赖和环境变量等。</li><li>Jenkins 支持配置全局工具、环境变量、凭据等，以便构建任务可以在预定义的环境中运行。</li></ul></li><li><p><strong>构建结果（Build Result）</strong>：</p><ul><li>每次构建任务执行完毕后，都会生成一个构建结果，包括构建日志、测试报告、构建产物等。</li><li>构建结果可以用于监控构建的状态、定位问题、回溯历史构建等。</li></ul></li><li><p><strong>通知（Notification）</strong>：</p><ul><li>Jenkins 支持在构建完成后发送通知，如电子邮件、Slack 消息、Webhook 等，以便及时通知团队构建状态和结果。</li></ul></li></ol><p>综上所述，Jenkins 的核心原理和流程是基于持续集成的理念，通过构建流水线、触发器、节点、构建环境等来实现自动化地构建、测试和部署软件项目。</p><h2 id="jenkins-是如何为项目提供构建环境的呢-以-java-的项目为例" tabindex="-1"><a class="header-anchor" href="#jenkins-是如何为项目提供构建环境的呢-以-java-的项目为例"><span>jenkins 是如何为项目提供构建环境的呢？以 java 的项目为例</span></a></h2><p>在 Jenkins 中为项目提供构建环境通常涉及以下几个方面，以 Java 项目为例：</p><ol><li><p><strong>安装和配置 JDK</strong>：</p><ul><li>Jenkins 可以配置全局工具，包括 JDK、Maven、Gradle 等构建工具。</li><li>在 Jenkins 的全局配置中，管理员可以指定所需的 JDK 版本，并且可以选择自动安装或手动指定已安装的 JDK 路径。</li><li>对于 Java 项目，确保在构建环境中正确安装了所需版本的 JDK 是至关重要的。</li></ul></li><li><p><strong>配置构建环境变量</strong>：</p><ul><li>Jenkins 允许在构建任务中定义环境变量，这些变量可以在构建过程中使用。</li><li>例如，可以设置 JAVA_HOME 变量指向正确的 JDK 安装路径，以便构建任务能够正确地编译和运行 Java 代码。</li></ul></li><li><p><strong>安装和配置构建工具</strong>：</p><ul><li>对于 Java 项目，通常会使用 Maven 或 Gradle 等构建工具管理项目的依赖和构建过程。</li><li>Jenkins 允许管理员在全局配置中安装和配置这些构建工具，并在构建任务中指定要使用的工具版本。</li></ul></li><li><p><strong>设置构建触发器和构建步骤</strong>：</p><ul><li>在 Jenkins 中配置构建任务时，可以指定构建触发器，例如当代码提交到版本控制系统时触发构建，或者定时触发构建。</li><li>构建任务可以包括一系列构建步骤，如代码拉取、编译、运行单元测试、打包等。</li></ul></li><li><p><strong>安装和配置插件</strong>：</p><ul><li>Jenkins 提供了丰富的插件生态系统，可以扩展其功能，例如用于构建、测试、部署等方面的插件。</li><li>对于 Java 项目，可以安装和配置适用于 Java 开发的插件，如 Maven 插件、JUnit 插件等。</li></ul></li></ol><p>总体来说，Jenkins 为项目提供构建环境的方式是通过全局配置和构建任务配置来实现的。</p><p>管理员可以在全局配置中设置全局工具和环境变量，然后在构建任务中指定具体的构建步骤和工具版本，以确保项目能够在正确的环境中进行构建和测试。</p><h2 id="不同的项目依赖的环境不同-jenkins-服务器资源基本是固定的。如何做到隔离的" tabindex="-1"><a class="header-anchor" href="#不同的项目依赖的环境不同-jenkins-服务器资源基本是固定的。如何做到隔离的"><span>不同的项目依赖的环境不同，jenkins 服务器资源基本是固定的。如何做到隔离的？</span></a></h2><p>为了确保不同项目之间的构建环境隔离，Jenkins 提供了几种机制：</p><ol><li><p><strong>构建代理（Build Agents）</strong>：</p><ul><li>Jenkins 支持在多个构建代理上执行构建任务，每个代理可以提供不同的环境配置。</li><li>可以在 Jenkins 主服务器上配置多个构建代理，每个代理可以具有不同的软件和工具配置，以满足不同项目的需求。</li><li>通过将不同项目分配到不同的构建代理上，可以确保它们在不同的环境中进行构建，从而实现环境隔离。</li></ul></li><li><p><strong>Docker 容器</strong>：</p><ul><li>Jenkins 支持在 Docker 容器中执行构建任务，每个容器可以提供独立的环境。</li><li>可以为每个项目创建一个专用的 Docker 镜像，其中包含了项目所需的环境和工具。</li><li>Jenkins 可以通过 Docker 插件启动容器来执行构建任务，并在容器中配置项目的构建环境，从而实现环境隔离。</li></ul></li><li><p><strong>Pipeline 中的环境设置</strong>：</p><ul><li>在 Jenkins Pipeline 中，可以在不同阶段或步骤中设置特定的环境变量或工具版本。</li><li>可以根据项目的需求，在 Pipeline 脚本中动态地设置构建环境，以确保每个项目都在独立的环境中进行构建。</li></ul></li><li><p><strong>使用不同的 Jenkins 服务器</strong>：</p><ul><li>对于特别敏感或者完全不同的项目，可以考虑使用不同的 Jenkins 服务器。</li><li>每个 Jenkins 服务器可以配置不同的环境和插件，以满足不同项目的需求，从而实现彻底的环境隔离。</li></ul></li></ol><p>综上所述，Jenkins 提供了多种机制来实现项目之间的环境隔离，包括使用构建代理、Docker 容器、Pipeline 中的环境设置以及使用不同的 Jenkins 服务器等方式。</p><p>根据项目的需求和安全性要求，可以选择合适的方法来确保不同项目之间的构建环境隔离。</p><h2 id="如果我想设计一个简化版的-jenkins-可以支持-java-前端-vue-等构建-应该如何设计" tabindex="-1"><a class="header-anchor" href="#如果我想设计一个简化版的-jenkins-可以支持-java-前端-vue-等构建-应该如何设计"><span>如果我想设计一个简化版的 jenkins，可以支持 java 前端 vue 等构建，应该如何设计？</span></a></h2><p>设计一个简化版的 Jenkins，可以支持 Java、前端（如 Vue）等项目的构建，可以考虑以下步骤和功能：</p><ol><li><p><strong>用户界面（UI）</strong>：</p><ul><li>设计简洁易用的用户界面，包括项目列表、构建历史、构建结果等。</li><li>提供项目创建、编辑、删除等功能的界面。</li></ul></li><li><p><strong>项目配置</strong>：</p><ul><li>允许用户创建不同类型的项目，如 Java 项目、前端项目等。</li><li>对于 Java 项目，需要提供 JDK 版本、Maven 或 Gradle 版本等配置选项。</li><li>对于前端项目，需要提供 Node.js 版本、NPM 或 Yarn 版本等配置选项。</li></ul></li><li><p><strong>构建触发</strong>：</p><ul><li>支持不同的构建触发方式，如定时触发、代码提交触发等。</li><li>对于前端项目，还可以支持自动化测试通过后触发构建。</li></ul></li><li><p><strong>构建过程</strong>：</p><ul><li>根据项目类型配置的环境，执行构建任务。</li><li>对于 Java 项目，执行编译、运行单元测试、打包等操作。</li><li>对于前端项目，执行依赖安装、代码打包、静态资源优化等操作。</li></ul></li><li><p><strong>构建日志和结果</strong>：</p><ul><li>实时展示构建日志，方便用户查看构建过程和排查问题。</li><li>在构建完成后，展示构建结果，包括构建状态、测试结果、构建产物等。</li></ul></li><li><p><strong>环境隔离</strong>：</p><ul><li>在执行构建任务时，确保不同项目的构建环境是相互隔离的，以避免环境污染和冲突。</li></ul></li><li><p><strong>插件支持</strong>：</p><ul><li>设计插件机制，允许用户根据需要扩展功能，如集成代码质量检测、自动化部署等插件。</li></ul></li><li><p><strong>安全性</strong>：</p><ul><li>提供用户身份认证和权限管理机制，确保只有授权用户可以进行敏感操作。</li></ul></li><li><p><strong>容错性</strong>：</p><ul><li>考虑系统的容错能力，确保在面对异常情况时能够稳定运行并且不丢失数据。</li></ul></li><li><p><strong>扩展性</strong>：</p><ul><li>考虑系统的扩展性，允许在需要时对系统进行扩展，如支持更多类型的项目、更多的构建环境等。</li></ul></li></ol><p>以上是设计简化版 Jenkins 的一般步骤和功能，具体实现可以根据需求和技术栈选择合适的技术和工具进行开发。可以选择使用现有的开源项目作为基础，也可以根据自己的需求从零开始进行开发。</p><h2 id="有哪些来开源的项目-介绍一下" tabindex="-1"><a class="header-anchor" href="#有哪些来开源的项目-介绍一下"><span>有哪些来开源的项目？介绍一下</span></a></h2><p>有许多开源项目可以用作简化版 Jenkins 的基础，以下是一些常见的开源持续集成/持续交付（CI/CD）工具：</p><ol><li><p><strong>Jenkins</strong>：</p><ul><li>Jenkins 是最流行的开源持续集成/持续交付工具之一，它提供了丰富的插件生态系统和灵活的自定义功能，可以满足各种项目的构建需求。</li></ul></li><li><p><strong>GitLab CI/CD</strong>：</p><ul><li>GitLab 是一个集成了代码仓库、CI/CD、代码评审等功能的开源项目管理平台。其内置的 CI/CD 功能可以直接与 GitLab 仓库集成，提供了基于 YAML 的简单配置，并支持并行构建、Docker 容器等功能。</li></ul></li><li><p><strong>Travis CI</strong>：</p><ul><li>Travis CI 是一个基于云的持续集成服务，支持 GitHub 和 Bitbucket 上的项目。它提供了简单易用的配置方式，自动化构建、测试和部署，并且可以与多种语言和框架集成。</li></ul></li><li><p><strong>CircleCI</strong>：</p><ul><li>CircleCI 是一个基于云的持续集成和交付平台，支持 GitHub 和 Bitbucket 上的项目。它提供了一个简单的配置文件（YAML）来定义构建过程，并支持 Docker 环境、缓存、并行构建等功能。</li></ul></li><li><p><strong>Drone</strong>：</p><ul><li>Drone 是一个基于容器的持续集成和交付平台，支持 GitHub 和 Bitbucket 上的项目。它使用 Docker 容器来执行构建任务，提供了简单的配置和易于扩展的插件机制。</li></ul></li><li><p><strong>GoCD</strong>：</p><ul><li>GoCD 是一个开源的持续交付工具，支持复杂的流水线和环境配置。它提供了可视化的管道定义和执行，以及灵活的环境隔离和部署策略。</li></ul></li></ol><p>以上是一些常见的开源持续集成/持续交付工具，它们都可以用作简化版 Jenkins 的基础。</p><p>选择合适的工具取决于项目的需求、团队的偏好以及技术栈的兼容性。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><blockquote><p><a href="http://www.yiibai.com/jenkins/jenkins_unit_testing.html" target="_blank" rel="noopener noreferrer">jenkins 中文</a></p></blockquote><blockquote><p><a href="http://www.cnblogs.com/zz0412/tag/jenkins/" target="_blank" rel="noopener noreferrer">博客系列教程 中文</a></p></blockquote>`,144)]))}const d=s(l,[["render",p]]),h=JSON.parse('{"path":"/posts/devops/2016-10-14-devops-ci-jenkins-01-intro.html","title":"持续集成平台 01 jenkins 入门介绍","lang":"zh-CN","frontmatter":{"title":"持续集成平台 01 jenkins 入门介绍","date":"2016-10-14T00:00:00.000Z","categories":["Devops"],"tags":["devops","ci"],"published":true,"description":"拓展阅读 Devops-01-devops 是什么？ Devops-02-Jpom 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件 代码质量管理 SonarQube-01-入门介绍 项目管理平台-01-jira 入门介绍 缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件 项目管理平台-01-Phabricator 入门介...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/devops/2016-10-14-devops-ci-jenkins-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"持续集成平台 01 jenkins 入门介绍"}],["meta",{"property":"og:description","content":"拓展阅读 Devops-01-devops 是什么？ Devops-02-Jpom 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件 代码质量管理 SonarQube-01-入门介绍 项目管理平台-01-jira 入门介绍 缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件 项目管理平台-01-Phabricator 入门介..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/houbb/resource/master/img/jenkins/2016-10-15-jenkins.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"ci"}],["meta",{"property":"article:published_time","content":"2016-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"持续集成平台 01 jenkins 入门介绍\\",\\"image\\":[\\"https://raw.githubusercontent.com/houbb/resource/master/img/jenkins/2016-10-15-jenkins.png\\",\\"https://raw.githubusercontent.com/houbb/resource/master/img/jenkins/2016-10-15-config-tools.png\\"],\\"datePublished\\":\\"2016-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":18.09,"words":5426},"filePathRelative":"posts/devops/2016-10-14-devops-ci-jenkins-01-intro.md","localizedDate":"2016年10月14日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2016/10/14/devops-01-overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Devops-01-devops 是什么？</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/10/14/devops-02-jpom\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Devops-02-Jpom 简而轻的低侵入式在线构建、自动部署、日常运维、项目监控软件</a></p>\\n<p><a href=\\"https://houbb.github.io/2016/10/14/devops-sonarqube-01-intro\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">代码质量管理 SonarQube-01-入门介绍</a></p>","autoDesc":true}');export{d as comp,h as data};
