import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const l={};function t(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="介绍一下-java-性能测试框架-jmh" tabindex="-1"><a class="header-anchor" href="#介绍一下-java-性能测试框架-jmh"><span>介绍一下 java 性能测试框架 JMH</span></a></h1><p>Java Microbenchmark Harness (JMH) 是一种专门用于进行 Java 代码性能测试的框架。</p><p>它是由 OpenJDK 社区开发并维护的，旨在提供准确、一致和可靠的性能测试结果。</p><p>JMH 可以帮助开发人员在微秒级别对代码的性能进行精细的测量和分析。</p><p>以下是 JMH 的一些主要特点和优势：</p><ol><li><p>自动优化：JMH 会自动解决许多可能影响测试结果的因素，例如 JVM 的热身效应、即时编译（JIT）优化等。这确保了测试的准确性和可重复性。</p></li><li><p>严格控制：JMH 提供了多种参数配置和统计选项，使得用户可以精确地控制测试的细节，从而获得更加全面的性能分析。</p></li><li><p>防止优化：JMH 会通过“黑洞”和“白洞”技术，防止 JVM 在测试中进行过度优化或移除没有实际作用的代码。</p></li><li><p>轻量级：JMH 是一个相对轻量级的库，不会对被测代码产生过多干扰，从而确保测量结果较为准确。</p></li><li><p>易于使用：虽然性能测试本身是复杂的任务，但是 JMH 提供了一组简洁且易于使用的注解和API，使得开发人员可以轻松地编写性能测试代码。</p></li></ol><p>JMH 测试的基本步骤如下：</p><ol><li><p>编写被测的 Java 方法或代码段。</p></li><li><p>使用 JMH 提供的注解（如 <code>@Benchmark</code>）来标记需要进行性能测试的方法。</p></li><li><p>配置测试参数，例如执行次数、线程数等。</p></li><li><p>运行 JMH 测试，它会自动运行多次测试，并生成详细的性能报告。</p></li></ol><p>JMH 的安装和使用需要一定的 Java 和性能测试的知识，但它是一个非常强大和可靠的工具，可以帮助开发人员进行高质量的性能分析和优化。</p><p>由于 JMH 是由 OpenJDK 社区维护，因此它与 Java 生态系统紧密集成，并且经过了广泛的测试和验证。</p><h1 id="给一个入门例子" tabindex="-1"><a class="header-anchor" href="#给一个入门例子"><span>给一个入门例子</span></a></h1><p>当使用 JMH 进行性能测试时，一个常见的入门例子是比较两个字符串连接的方式的性能：使用字符串连接操作符（+）和使用 StringBuilder。我们将测试这两种方法的执行时间以比较它们的性能差异。</p><p>首先，确保已经正确安装了 JDK 和 Maven。然后，按照以下步骤来编写和运行 JMH 测试。</p><p>步骤1：创建 Maven 项目<br> 首先，创建一个 Maven 项目并在 <code>pom.xml</code> 文件中添加以下依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.openjdk.jmh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        jmh-core</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        1.33</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.openjdk.jmh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        jmh-generator-annprocess</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        1.33</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        provided</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>步骤2：编写性能测试代码</p><p>创建一个 Java 类，例如 <code>StringConcatenationBenchmark</code>，并编写以下性能测试代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.openjdk.jmh.annotations.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BenchmarkMode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">AverageTime</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">OutputTimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">NANOSECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringConcatenationBenchmark</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testStringConcatenation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> str1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> str2;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testStringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str1);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str2);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">openjdk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">jmh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用了 JMH 提供的注解来标记两个被测方法 <code>testStringConcatenation()</code> 和 <code>testStringBuilder()</code>。</p><p><code>@Benchmark</code> 注解表示这些方法是要进行性能测试的方法。<code>@BenchmarkMode</code> 注解定义了测试模式（平均时间）。<code>@OutputTimeUnit</code> 注解指定了测试结果的时间单位。</p><p>步骤3：运行性能测试</p><p>在命令行中，进入到项目根目录，并运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target/benchmarks.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>JMH 将运行多次测试，并在控制台输出性能测试结果，包括每个测试方法的平均执行时间等信息。</p><p>请注意，由于性能测试的结果可能受到多种因素的影响，因此最好在稳定的环境中运行测试，并运行多次测试以获得更准确的结果。</p><h1 id="idea-编辑器对应的-jmh-插件" tabindex="-1"><a class="header-anchor" href="#idea-编辑器对应的-jmh-插件"><span>idea 编辑器对应的 jmh 插件</span></a></h1><p>对于 IntelliJ IDEA 编辑器，有一个名为 &quot;JMH Plugin&quot; 的插件，它提供了对 Java Microbenchmark Harness (JMH) 框架的支持。该插件使得在 IDEA 中编写和运行 JMH 测试变得更加方便。</p><p>以下是安装和使用 JMH Plugin 的步骤：</p><p>步骤1：打开 IntelliJ IDEA</p><p>确保已经打开了你的 IntelliJ IDEA 编辑器。</p><p>步骤2：打开插件设置</p><p>点击顶部菜单栏的 &quot;File&quot;（文件），然后选择 &quot;Settings&quot;（设置）。</p><p>步骤3：选择插件</p><p>在 &quot;Settings&quot; 窗口中，选择 &quot;Plugins&quot;（插件）选项，然后点击 &quot;Marketplace&quot;（插件商店）选项卡。</p><p>步骤4：搜索插件</p><p>在 &quot;Marketplace&quot; 搜索框中输入 &quot;JMH&quot; 并点击搜索按钮。</p><p>步骤5：安装插件</p><p>在搜索结果中找到 &quot;JMH Plugin&quot;，然后点击右侧的 &quot;Install&quot;（安装）按钮，跟随提示完成插件安装。</p><p>步骤6：重启 IDEA</p><p>安装完成后，IntelliJ IDEA 会提示你重启编辑器以激活新安装的插件。请点击 &quot;Restart IDE&quot;（重启编辑器）来重启 IDEA。</p><p>步骤7：创建 JMH 测试类</p><p>在 IDEA 中创建一个新的 Java 类，然后在类中编写 JMH 测试方法，并使用 JMH 注解标记这些方法。</p><p>步骤8：运行 JMH 测试</p><p>在编辑器的测试类中右键点击，选择 &quot;Run &#39;All Benchmarks&#39;&quot;，或者点击测试方法的左侧小绿箭头运行单个测试方法。</p><p>IDEA 会使用 JMH 插件来运行你的 JMH 测试，并在运行完成后提供详细的性能测试结果和报告。</p><p>通过安装 JMH Plugin，你可以在 IntelliJ IDEA 中轻松编写、运行和分析 JMH 性能测试，帮助你更好地优化和评估你的 Java 代码性能。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>chat</p><p><a href="https://plugins.jetbrains.com/plugin/7529-jmh-java-microbenchmark-harness" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/7529-jmh-java-microbenchmark-harness</a></p><p><a href="https://github.com/openjdk/jmh/tree/master" target="_blank" rel="noopener noreferrer">https://github.com/openjdk/jmh/tree/master</a></p>`,50)]))}const r=s(l,[["render",t]]),d=JSON.parse('{"path":"/posts/test/2021-07-23-junit-performance-jmh.html","title":"Benchmark 性能测试框架 JMH","lang":"zh-CN","frontmatter":{"title":"Benchmark 性能测试框架 JMH","date":"2021-07-23T00:00:00.000Z","categories":["Test"],"tags":["test","junit","sh"],"published":true,"description":"介绍一下 java 性能测试框架 JMH Java Microbenchmark Harness (JMH) 是一种专门用于进行 Java 代码性能测试的框架。 它是由 OpenJDK 社区开发并维护的，旨在提供准确、一致和可靠的性能测试结果。 JMH 可以帮助开发人员在微秒级别对代码的性能进行精细的测量和分析。 以下是 JMH 的一些主要特点和优势：...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/test/2021-07-23-junit-performance-jmh.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Benchmark 性能测试框架 JMH"}],["meta",{"property":"og:description","content":"介绍一下 java 性能测试框架 JMH Java Microbenchmark Harness (JMH) 是一种专门用于进行 Java 代码性能测试的框架。 它是由 OpenJDK 社区开发并维护的，旨在提供准确、一致和可靠的性能测试结果。 JMH 可以帮助开发人员在微秒级别对代码的性能进行精细的测量和分析。 以下是 JMH 的一些主要特点和优势：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2021-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Benchmark 性能测试框架 JMH\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.9,"words":1471},"filePathRelative":"posts/test/2021-07-23-junit-performance-jmh.md","localizedDate":"2021年7月23日","excerpt":"\\n<p>Java Microbenchmark Harness (JMH) 是一种专门用于进行 Java 代码性能测试的框架。</p>\\n<p>它是由 OpenJDK 社区开发并维护的，旨在提供准确、一致和可靠的性能测试结果。</p>\\n<p>JMH 可以帮助开发人员在微秒级别对代码的性能进行精细的测量和分析。</p>\\n<p>以下是 JMH 的一些主要特点和优势：</p>\\n<ol>\\n<li>\\n<p>自动优化：JMH 会自动解决许多可能影响测试结果的因素，例如 JVM 的热身效应、即时编译（JIT）优化等。这确保了测试的准确性和可重复性。</p>\\n</li>\\n<li>\\n<p>严格控制：JMH 提供了多种参数配置和统计选项，使得用户可以精确地控制测试的细节，从而获得更加全面的性能分析。</p>\\n</li>\\n<li>\\n<p>防止优化：JMH 会通过“黑洞”和“白洞”技术，防止 JVM 在测试中进行过度优化或移除没有实际作用的代码。</p>\\n</li>\\n<li>\\n<p>轻量级：JMH 是一个相对轻量级的库，不会对被测代码产生过多干扰，从而确保测量结果较为准确。</p>\\n</li>\\n<li>\\n<p>易于使用：虽然性能测试本身是复杂的任务，但是 JMH 提供了一组简洁且易于使用的注解和API，使得开发人员可以轻松地编写性能测试代码。</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
