import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as o,o as n}from"./app-CEDSurVN.js";const a={};function s(p,t){return n(),r("div",null,t[0]||(t[0]=[o('<h1 id="随笔" tabindex="-1"><a class="header-anchor" href="#随笔"><span>随笔</span></a></h1><p><a href="https://houbb.github.io/2024/11/22/note-02-he-tech" target="_blank" rel="noopener noreferrer">从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-03-split-apache-calcite" target="_blank" rel="noopener noreferrer">数据源的统一与拆分</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-execute-mearurement" target="_blank" rel="noopener noreferrer">监控报警系统的指标、规则与执行闭环</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-items" target="_blank" rel="noopener noreferrer">我们的系统应该配置哪些监控报警项？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-items-self-monitor" target="_blank" rel="noopener noreferrer">监控报警系统如何实现自监控?</a></p><p><a href="https://houbb.github.io/2024/11/22/note-05-is-java-so-old" target="_blank" rel="noopener noreferrer">java 老矣，尚能饭否？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-06-lizhi" target="_blank" rel="noopener noreferrer">一骑红尘妃子笑，无人知是荔枝来!</a></p><p><a href="https://houbb.github.io/2024/11/22/note-07-zhangjuzheng-kaochengfa" target="_blank" rel="noopener noreferrer">张居正的考成法，对我们有何参考价值？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-08-visual" target="_blank" rel="noopener noreferrer">mongodb/redis/neo4j 如何自己打造一个 web 数据库可视化客户端？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-09-devops-how-to-go" target="_blank" rel="noopener noreferrer">DevOps 平台越发展，开发运维越快失业？</a></p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>最近在梳理运维平台的相关东西，发现一个很有意思的现象。</p><p>大家都嘲笑说，程序员擅长给自己挖坑。</p><p>但是发现运维研发尤甚，擅长创建自动化运维平台，把自己的工作需求干掉。</p><h1 id="是否是工具平台越强大-研发反而越可能失去职位呢" tabindex="-1"><a class="header-anchor" href="#是否是工具平台越强大-研发反而越可能失去职位呢"><span>是否是工具平台越强大，研发反而越可能失去职位呢？</span></a></h1><p>下面 3 个点大概是比较乐观的点，但是个人感觉其实不那么乐观。</p><p><strong>毕竟我们今天的岗位也是技术的产物，被技术消灭也没什么好说的，还是要调整好心态，寻找新的位置</strong>。</p><ol><li><p>自动化不等于消除需求</p></li><li><p>运维平台和工具本身需要不断创新</p></li><li><p>运维研发人员的角色转变</p></li></ol><h3 id="_1-自动化不等于消除需求" tabindex="-1"><a class="header-anchor" href="#_1-自动化不等于消除需求"><span>1. <strong>自动化不等于消除需求</strong></span></a></h3><ul><li><p><strong>更高层次的工作</strong>：虽然自动化工具和平台确实能替代很多重复性的工作，但这并不意味着运维研发的工作会消失。相反，运维人员的角色会从执行层面转向更高层次的工作，包括平台的设计、优化、故障排查、策略决策等。工具和平台的研发人员依然需要参与到系统架构的设计、性能优化、自动化流程的设计以及智能化运维方案的制定中。</p></li><li><p><strong>技术的不断进化</strong>：随着运维平台越来越智能化，运维人员不再是简单的“机械操作员”，而是更像是<strong>技术架构师</strong>和<strong>问题解决者</strong>。他们需要思考如何利用现有的工具来应对新的挑战，如何对平台进行持续优化和改进。</p></li></ul><h3 id="_2-运维平台和工具本身需要不断创新" tabindex="-1"><a class="header-anchor" href="#_2-运维平台和工具本身需要不断创新"><span>2. <strong>运维平台和工具本身需要不断创新</strong></span></a></h3><ul><li><p><strong>运维平台的研发是一个不断创新的过程</strong>，随着业务复杂度和技术堆栈的不断增加，运维平台需要进行持续更新和扩展。例如，自动化和智能化运维平台仍然无法完全解决一些复杂的系统异常、性能瓶颈、跨云架构、微服务通信等问题，运维研发人员仍然在这些领域中发挥着重要作用，研发新的工具、技术和解决方案。</p></li><li><p><strong>新的运维挑战</strong>：随着越来越多的公司采用<strong>微服务架构、容器化、分布式系统</strong>等现代技术，运维的难度和复杂性并不会简单下降，反而呈现出更加复杂和多样化的挑战。平台工具的研发人员依然需要解决很多新的技术问题，如微服务的全链路监控、分布式事务的处理、无状态服务的自动化管理等。</p></li></ul><h3 id="_3-运维研发人员的角色转变" tabindex="-1"><a class="header-anchor" href="#_3-运维研发人员的角色转变"><span>3. <strong>运维研发人员的角色转变</strong></span></a></h3><ul><li><p><strong>从运维到开发</strong>：自动化和智能化会使运维工作更加高效，但同时，也让运维研发人员的角色发生转变。许多运维工具的设计和开发过程中，会要求运维人员具备更多的开发能力，能写出自动化脚本、开发自定义的工具和平台，以及参与系统的架构设计和开发。这实际上是一个技术技能的提升和转型，不是简单的“失业”问题。</p></li><li><p><strong>DevOps与全栈运维</strong>：运维人员和开发人员之间的界限逐渐模糊。随着<strong>DevOps文化</strong>的推行，运维人员更多地参与到开发流程中，掌握持续集成、持续交付等技术，提升系统的可靠性和稳定性。运维人员的职责不再局限于“守护服务器”，而是参与到整个产品生命周期中的各个环节，甚至是产品的设计和优化。</p></li></ul><h1 id="step1-初期平台建设" tabindex="-1"><a class="header-anchor" href="#step1-初期平台建设"><span>Step1: 初期平台建设</span></a></h1><p>DevOps 研发团队，通常会开发和支持多个平台和工具，旨在提升软件开发、部署、监控、维护等环节的效率和质量。</p><table><thead><tr><th><strong>平台类型</strong></th><th><strong>常见工具/平台</strong></th><th><strong>功能和特点</strong></th></tr></thead><tbody><tr><td><strong>持续集成/持续部署 (CI/CD)</strong></td><td>Jenkins, GitLab CI, Travis CI</td><td>自动化构建、测试和部署，提升发布频率和软件质量，支持与代码仓库集成</td></tr><tr><td><strong>自动化运维平台</strong></td><td>Ansible, Chef, Puppet, SaltStack</td><td>自动化配置管理、应用部署和系统维护，减少手动操作和人为错误</td></tr><tr><td><strong>日志管理和分析平台</strong></td><td>ELK Stack (Elasticsearch, Logstash, Kibana), Graylog, Splunk</td><td>实时收集、存储、分析和可视化日志，帮助问题定位和性能监控</td></tr><tr><td><strong>监控和报警平台</strong></td><td>Prometheus, Grafana, Zabbix, Nagios</td><td>实时监控系统性能、应用健康状态，生成告警，帮助发现潜在问题</td></tr><tr><td><strong>容器化和编排平台</strong></td><td>Docker, Kubernetes, Docker Swarm</td><td>管理容器化应用，进行部署、扩展和管理，Kubernetes广泛用于微服务架构</td></tr><tr><td><strong>云平台管理工具</strong></td><td>AWS, Azure, Google Cloud Platform</td><td>跨多个云平台的资源管理、自动化部署、负载均衡和扩展，提供可视化管理界面</td></tr><tr><td><strong>网络和安全管理平台</strong></td><td>Wireshark, NSS Labs, Snort</td><td>监控网络流量，识别网络安全威胁，帮助网络诊断和安全事件响应</td></tr><tr><td><strong>基础设施即代码 (IaC)</strong></td><td>Terraform, CloudFormation</td><td>通过代码定义和管理基础设施，支持版本化、回滚和团队协作</td></tr><tr><td><strong>故障恢复与备份平台</strong></td><td>Veeam, Commvault</td><td>自动化备份、灾难恢复和数据恢复，确保系统和数据在故障时能快速恢复</td></tr><tr><td><strong>服务发现与API网关平台</strong></td><td>Consul, Zookeeper, Istio, Kong, Nginx</td><td>服务发现和管理微服务架构中的通信，API网关用于流量控制、身份验证和日志记录等功能</td></tr></tbody></table><h1 id="step2-中期服务打磨" tabindex="-1"><a class="header-anchor" href="#step2-中期服务打磨"><span>Step2: 中期服务打磨</span></a></h1><p>如果第一阶段的建设完成，接下来就是打磨我们的服务了：</p><p>在平台建设后应持续关注<strong>系统稳定性、可用性、性能、安全性</strong>及<strong>持续改进</strong>。</p><table><thead><tr><th><strong>步骤</strong></th><th><strong>重点内容</strong></th></tr></thead><tbody><tr><td><strong>1. 平台集成与流程自动化</strong></td><td>- 集成现有平台，形成自动化运维流水线（如CI/CD与Kubernetes集成）。 - 使用工具（如Ansible、Terraform）自动化基础设施管理，减少人工干预。</td></tr><tr><td><strong>2. 高可用性和灾难恢复设计</strong></td><td>- 实现冗余架构、负载均衡、数据库复制等，避免单点故障。 - 设计灾难恢复（DR）策略并定期测试。 - 考虑多区域/可用区部署提高容灾能力。</td></tr><tr><td><strong>3. 持续优化与性能监控</strong></td><td>- 深度分析和调优系统性能（如CPU、内存、网络带宽）。 - 采用自动化的弹性伸缩策略，应对流量波动。 - 做好容量规划，提前准备应对未来需求。</td></tr><tr><td><strong>4. 安全性提升</strong></td><td>- 实现细粒度权限控制和身份认证机制（如OAuth、LDAP）。 - 定期进行安全审计和合规检查。 - 建立漏洞管理和应急响应机制。</td></tr><tr><td><strong>5. 日志和监控的精细化管理</strong></td><td>- 统一日志管理，通过ELK Stack分析日志。 - 设置合适的监控阈值和告警优化，减少假警报。 - 使用可视化工具（如Kibana、Grafana）展示系统健康状态。</td></tr><tr><td><strong>6. 服务级别协议 (SLA) 和指标管理</strong></td><td>- 与业务团队定义SLA指标（如可用性、响应时间）。 - 持续监控SLA表现，及时调整。 - 自动生成性能报告，评估服务质量。</td></tr><tr><td><strong>7. 版本管理和回滚机制</strong></td><td>- 制定版本控制和回滚策略，支持快速回滚到稳定版本。 - 采用蓝绿部署或灰度发布策略，减少发布风险。</td></tr><tr><td><strong>8. 团队协作与知识共享</strong></td><td>- 确保跨团队沟通流畅，及时解决问题。 - 对系统架构、流程等进行文档化，建立知识库以便知识共享。</td></tr><tr><td><strong>9. 容器化与微服务管理</strong></td><td>- 引入微服务治理平台（如Istio、Linkerd）管理服务间通信。 - 通过Kubernetes管理容器资源和自动伸缩。</td></tr><tr><td><strong>10. 定期回顾和技术债务管理</strong></td><td>- 定期进行平台回顾，优化现有流程，适应技术和业务需求变化。 - 评估和消除技术债务，保持系统可维护性和可扩展性。</td></tr></tbody></table><h1 id="step3-创新、推动业务的发展" tabindex="-1"><a class="header-anchor" href="#step3-创新、推动业务的发展"><span>Step3: 创新、推动业务的发展</span></a></h1><p>十年磨一剑 锋刃未尝试</p><p>团队后期应聚焦于<strong>创新</strong>、<strong>技术前瞻性</strong>、<strong>智能化自动化</strong>、<strong>跨团队协作</strong>和<strong>业务价值提升</strong>，推动技术和业务的持续发展与转型</p><table><thead><tr><th><strong>步骤</strong></th><th><strong>重点内容</strong></th></tr></thead><tbody><tr><td><strong>1. 数字化转型和业务创新</strong></td><td>- 引入AI与机器学习，智能分析日志与监控数据，预测故障，优化资源配置。 - 构建自动化决策系统，实现自动资源调整和自我修复。 - 推动DevOps文化，促进开发与运维的紧密合作。</td></tr><tr><td><strong>2. 全栈数据驱动运维</strong></td><td>- 使用Jaeger、Zipkin等工具实现全链路追踪，优化业务和运维过程。 - 利用Apache Flink、Kafka Streams进行实时数据分析，自动优化资源分配。 - 基于行为模式和趋势分析进行智能报警与故障预测。</td></tr><tr><td><strong>3. 多云和跨平台管理</strong></td><td>- 构建混合云或多云架构，实现资源优化与故障恢复。 - 使用统一管理平台（如CloudBolt）减少跨平台管理复杂性。 - 深度融合云原生技术，提升系统的可扩展性和灵活性。</td></tr><tr><td><strong>4. 边缘计算和IoT运维</strong></td><td>- 构建边缘计算平台，降低延迟，提高性能，适用于物联网和智能硬件。 - 管理大量IoT设备，实现远程监控、配置与故障预测。</td></tr><tr><td><strong>5. 微服务架构深化与服务网格</strong></td><td>- 使用Istio等服务网格管理微服务间的通信、安全、流量等。 - 通过服务网格智能调节微服务流量，确保系统最优状态。</td></tr><tr><td><strong>6. 跨团队协作和文化塑造</strong></td><td>- 促进技术团队持续学习和创新，举办技术活动。 - 提供全员DevOps培训，推动跨职能团队的高效协作。</td></tr><tr><td><strong>7. 系统化的自动化测试和质量保障</strong></td><td>- 完善自动化测试平台，涵盖多种测试类型（单元、集成、性能等）。 - 通过AI自动化测试框架提升测试效率和质量保障能力。</td></tr><tr><td><strong>8. 性能、成本和可持续性优化</strong></td><td>- 使用云原生成本优化工具分析和优化云资源使用，减少支出。 - 推动绿色运维，优化能源效率，减少碳排放。</td></tr><tr><td><strong>9. 开源贡献与生态建设</strong></td><td>- 将自研运维工具开源，参与开源社区，提升技术影响力。 - 建立健康的运维生态系统，促进技术发展与创新。</td></tr></tbody></table><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p><p>我是老马，期待与你的下次相遇。</p><h1 id="随笔-1" tabindex="-1"><a class="header-anchor" href="#随笔-1"><span>随笔</span></a></h1><p><a href="https://houbb.github.io/2024/11/22/note-02-he-tech" target="_blank" rel="noopener noreferrer">从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-03-split-apache-calcite" target="_blank" rel="noopener noreferrer">数据源的统一与拆分</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-execute-mearurement" target="_blank" rel="noopener noreferrer">监控报警系统的指标、规则与执行闭环</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-items" target="_blank" rel="noopener noreferrer">我们的系统应该配置哪些监控报警项？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-04-indicator-rule-items-self-monitor" target="_blank" rel="noopener noreferrer">监控报警系统如何实现自监控?</a></p><p><a href="https://houbb.github.io/2024/11/22/note-05-is-java-so-old" target="_blank" rel="noopener noreferrer">java 老矣，尚能饭否？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-06-lizhi" target="_blank" rel="noopener noreferrer">一骑红尘妃子笑，无人知是荔枝来!</a></p><p><a href="https://houbb.github.io/2024/11/22/note-07-zhangjuzheng-kaochengfa" target="_blank" rel="noopener noreferrer">张居正的考成法，对我们有何参考价值？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-08-visual" target="_blank" rel="noopener noreferrer">mongodb/redis/neo4j 如何自己打造一个 web 数据库可视化客户端？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-09-devops-how-to-go" target="_blank" rel="noopener noreferrer">DevOps 平台越发展，开发运维越快失业？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-10-opensource-way" target="_blank" rel="noopener noreferrer">开源如何健康长久的发展</a></p><p><a href="https://houbb.github.io/2024/11/22/note-11-pipeline" target="_blank" rel="noopener noreferrer">为什么会有流水线？</a></p><p><a href="https://houbb.github.io/2024/11/22/note-12-positive-negative" target="_blank" rel="noopener noreferrer">既然选择了远方 便只顾风雨兼程</a></p><p><a href="https://houbb.github.io/2024/11/22/note-13-bank-profit" target="_blank" rel="noopener noreferrer">银行是如何挣钱的？</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>',55)]))}const i=e(a,[["render",s]]),g=JSON.parse('{"path":"/posts/Note/2024-11-23-note-09-devops-how-to-go.html","title":"DevOps 平台越发展，开发运维越快失业？","lang":"zh-CN","frontmatter":{"title":"DevOps 平台越发展，开发运维越快失业？","date":"2024-11-23T00:00:00.000Z","categories":["Note"],"tags":["note","sh"],"published":true,"description":"随笔 从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？ 数据源的统一与拆分 监控报警系统的指标、规则与执行闭环 我们的系统应该配置哪些监控报警项？ 监控报警系统如何实现自监控? java 老矣，尚能饭否？ 一骑红尘妃子笑，无人知是荔枝来! 张居正的考成法，对我们有何参考价值？ mongodb/redis/neo4j 如何自己打造一个 web ...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Note/2024-11-23-note-09-devops-how-to-go.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"DevOps 平台越发展，开发运维越快失业？"}],["meta",{"property":"og:description","content":"随笔 从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？ 数据源的统一与拆分 监控报警系统的指标、规则与执行闭环 我们的系统应该配置哪些监控报警项？ 监控报警系统如何实现自监控? java 老矣，尚能饭否？ 一骑红尘妃子笑，无人知是荔枝来! 张居正的考成法，对我们有何参考价值？ mongodb/redis/neo4j 如何自己打造一个 web ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"note"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2024-11-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DevOps 平台越发展，开发运维越快失业？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":10.91,"words":3272},"filePathRelative":"posts/Note/2024-11-23-note-09-devops-how-to-go.md","localizedDate":"2024年11月23日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2024/11/22/note-02-he-tech\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">从千万粉丝“何同学”抄袭开源项目说起，为何纯技术死路一条？</a></p>\\n<p><a href=\\"https://houbb.github.io/2024/11/22/note-03-split-apache-calcite\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据源的统一与拆分</a></p>\\n<p><a href=\\"https://houbb.github.io/2024/11/22/note-04-indicator-rule-execute-mearurement\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">监控报警系统的指标、规则与执行闭环</a></p>","autoDesc":true}');export{i as comp,g as data};
