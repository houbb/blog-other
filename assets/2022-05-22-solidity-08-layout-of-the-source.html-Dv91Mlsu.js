import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as t}from"./app-uJE4P3e0.js";const n={};function l(p,i){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="solidity-源文件的布局" tabindex="-1"><a class="header-anchor" href="#solidity-源文件的布局"><span>Solidity 源文件的布局</span></a></h1><p>源文件可以包含任意数量的合约定义、import、pragma 和 using for 指令和结构、枚举、函数、错误和常量变量定义。</p><h1 id="spdx-许可证标识符" tabindex="-1"><a class="header-anchor" href="#spdx-许可证标识符"><span>SPDX 许可证标识符</span></a></h1><p>如果智能合约的源代码可用，则可以更好地建立对智能合约的信任。由于提供源代码总是涉及版权方面的法律问题，Solidity 编译器鼓励使用机器可读的 SPDX 许可证标识符。</p><p>每个源文件都应以说明其许可证的注释开头：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// SPDX-License-Identifier: MIT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译器不会验证许可证是否属于 SPDX 允许的列表的一部分，但它会在字节码元数据中包含提供的字符串。</p><p>如果您不想指定许可证或源代码不是开源的，请使用特殊值 UNLICENSED。请注意，UNLICENSED（不允许使用，不在 SPDX 许可证列表中）与 UNLICENSE（将所有权利授予所有人）不同。 Solidity 遵循 npm 的建议。</p><p>当然，提供此评论并不能免除您与许可相关的其他义务，例如必须在每个源文件或原始版权所有者中提及特定的许可标题。</p><p>编译器在文件级别的文件中的任何位置都可以识别注释，但建议将其放在文件的顶部。</p><p>有关如何使用 SPDX 许可证标识符的更多信息，请访问 SPDX 网站。</p><h1 id="pragmas" tabindex="-1"><a class="header-anchor" href="#pragmas"><span>Pragmas</span></a></h1><p>pragma 关键字用于启用某些编译器功能或检查。</p><p>pragma 指令始终位于源文件的本地，因此如果要在整个项目中启用它，则必须将 pragma 添加到所有文件中。</p><p>如果您导入另一个文件，该文件中的编译指示不会自动应用于导入文件。</p><h2 id="版本编译指示" tabindex="-1"><a class="header-anchor" href="#版本编译指示"><span>版本编译指示</span></a></h2><p>源文件可以（并且应该）使用版本编译指示进行注释，以拒绝使用可能引入不兼容更改的未来编译器版本进行编译。</p><p>我们试图将它们保持在绝对最低限度，并以语义变化也需要语法变化的方式引入它们，但这并不总是可能的。</p><p>因此，至少对于包含重大更改的版本，通读更改日志总是一个好主意。这些版本始终具有 0.x.0 或 x.0.0 形式的版本。</p><p>版本pragma使用如下：<code>pragma solidity ^0.5.2;</code></p><p>带有上述行的源文件不能使用 0.5.2 版本之前的编译器编译，并且它也不能在 0.6.0 版本开始的编译器上工作（这第二个条件是使用 ^ 添加的）。</p><p>因为在 0.6.0 版之前不会有重大更改，因此您可以确保您的代码按照您的预期方式进行编译。编译器的确切版本不固定，因此仍然可以发布错误修复版本。</p><p>可以为编译器版本指定更复杂的规则，这些规则与 npm 使用的语法相同。</p><ul><li>NOTE</li></ul><p>使用版本编译指示不会更改编译器的版本。</p><p>它也不会启用或禁用编译器的功能。</p><p>它只是指示编译器检查其版本是否与 pragma 所需的版本匹配。</p><p>如果不匹配，编译器会发出错误。</p><h2 id="abi-编码器编译指示" tabindex="-1"><a class="header-anchor" href="#abi-编码器编译指示"><span>ABI 编码器编译指示</span></a></h2><p>通过使用 pragma abicoder v1 或 pragma abicoder v2，您可以在 ABI 编码器和解码器的两种实现之间进行选择。</p><p>新的 ABI 编码器 (v2) 能够编码和解码任意嵌套的数组和结构。它可能会产生不太理想的代码，并且没有像旧编码器那样接受过多的测试，但从 Solidity 0.6.0 开始被认为是非实验性的。</p><p>您仍然必须使用 pragma abicoder v2; 显式激活它。由于它将从 Solidity 0.8.0 开始默认激活，因此可以选择使用 pragma abicoder v1; 选择旧编码器。</p><p>新编码器支持的类型集是旧编码器支持的类型的严格超集。使用它的合约可以与没有限制的合约进行交互。</p><p>仅当非 abicoder v2 合约不尝试进行需要仅由新编码器支持的解码类型的调用时，反向才是可能的。编译器可以检测到这一点并将发出错误。</p><p>只需为您的合约启用 abicoder v2 就足以消除错误。</p><ul><li>NOTE</li></ul><p>此编译指示适用于激活它的文件中定义的所有代码，无论该代码最终在何处结束。</p><p>这意味着选择了源文件以使用 ABI coder v1 编译的合约仍然可以包含通过从另一个合约继承来使用新编码器的代码。</p><p>如果新类型仅在内部使用而不在外部函数签名中使用，则允许这样做。</p><ul><li>NOTE</li></ul><p>在 Solidity 0.7.4 之前，可以使用 pragma Experimental ABIEncoderV2 选择 ABI coder v2，但无法显式选择 coder v1，因为它是默认设置。</p><h2 id="experimental-pragma" tabindex="-1"><a class="header-anchor" href="#experimental-pragma"><span>Experimental Pragma</span></a></h2><p>第二个 pragma 是实验性 pragma。它可用于启用默认情况下尚未启用的编译器或语言的功能。当前支持以下实验性编译指示：</p><h3 id="abiencoderv2" tabindex="-1"><a class="header-anchor" href="#abiencoderv2"><span>ABIEncoderV2</span></a></h3><p>因为 ABI coder v2 不再被认为是实验性的，它可以通过 pragma abicoder v2（请参见上文）从 Solidity 0.7.4 开始选择。</p><h3 id="smtchecker" tabindex="-1"><a class="header-anchor" href="#smtchecker"><span>SMTChecker</span></a></h3><p>在构建 Solidity 编译器时必须启用此组件，因此它并非在所有 Solidity 二进制文件中都可用。构建说明解释了如何激活此选项。</p><p>在大多数版本中，它为 Ubuntu PPA 版本激活，但不适用于 Docker 映像、Windows 二进制文件或静态构建的 Linux 二进制文件。</p><p>如果您在本地安装了 SMT 求解器并通过节点（而不是通过浏览器）运行 solc-js，则可以通过 smtCallback 为 solc-js 激活它。</p><p>如果您使用 pragma experimental SMTChecker;，那么您会收到额外的安全警告，这些警告是通过查询 SMT 求解器获得的。</p><p>该组件尚不支持 Solidity 语言的所有功能，并且可能会输出许多警告。如果它报告不支持的功能，则分析可能不完全正确。</p><h1 id="导入其他源文件" tabindex="-1"><a class="header-anchor" href="#导入其他源文件"><span>导入其他源文件</span></a></h1><h2 id="语法和语义" tabindex="-1"><a class="header-anchor" href="#语法和语义"><span>语法和语义</span></a></h2><p>Solidity 支持导入语句，以帮助模块化您的代码，这些代码类似于 JavaScript（从 ES6 开始）中可用的代码。</p><p>但是，Solidity 不支持默认导出的概念。</p><p>在全局级别，您可以使用以下形式的导入语句：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;filename&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>文件名部分称为导入路径。 该语句将所有全局符号从“文件名”（以及从那里导入的符号）导入当前全局范围（与 ES6 不同，但向后兼容 Solidity）。</p><p>不推荐使用这种形式，因为它会意外地污染命名空间。 如果您在“文件名”中添加新的顶级项目，它们会自动出现在所有从“文件名”导入的文件中。</p><p>最好显式地导入特定符号。</p><p>下面的例子创建了一个新的全局符号 symbolName，它的成员是来自“filename”的所有全局符号：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#D19A66;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> symbolName</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;filename&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这导致所有全局符号都以 symbolName.symbol 格式可用。</p><p>这种语法的一个变体不是 ES6 的一部分，但可能有用的是：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;filename&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> symbolName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这相当于 <code>import * as symbolName from &quot;filename&quot;;</code>。</p><p>如果存在命名冲突，您可以在导入时重命名符号。</p><p>例如，下面的代码创建了新的全局符号 alias 和 symbol2，它们分别从“文件名”内部引用 symbol1 和 symbol2。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">symbol1</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> alias</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">symbol2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;filename&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="导入路径" tabindex="-1"><a class="header-anchor" href="#导入路径"><span>导入路径</span></a></h2><p>为了能够在所有平台上支持可重现的构建，Solidity 编译器必须抽象出存储源文件的文件系统的细节。</p><p>由于这个原因，导入路径不直接引用主机文件系统中的文件。</p><p>相反，编译器维护一个内部数据库（虚拟文件系统或简称 VFS），其中为每个源单元分配一个唯一的源单元名称，该名称是一个不透明且非结构化的标识符。导入语句中指定的导入路径被翻译成源单元名称，用于在该数据库中查找对应的源单元。</p><p>使用标准 JSON API，可以直接提供所有源文件的名称和内容作为编译器输入的一部分。在这种情况下，源单元名称确实是任意的。</p><p>但是，如果您希望编译器自动查找源代码并将其加载到 VFS 中，则您的源单元名称的结构需要使导入回调能够找到它们。</p><p>使用命令行编译器时，默认导入回调仅支持从主机文件系统加载源代码，这意味着您的源单元名称必须是路径。一些环境提供更通用的自定义回调。</p><p>例如，Remix IDE 提供了一个允许您从 HTTP、IPFS 和 Swarm URL 导入文件或直接引用 NPM 注册表中的包的工具。</p><p>有关虚拟文件系统和编译器使用的路径解析逻辑的完整描述，请参见路径解析。</p><h1 id="comments" tabindex="-1"><a class="header-anchor" href="#comments"><span>Comments</span></a></h1><p>可以使用单行注释 (<code>//</code>) 和多行注释 (<code>/*...*/</code>)。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// This is a single-line comment.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">This is a</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">multi-line comment.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NOTE</li></ul><p>单行注释由 UTF-8 编码中的任何 unicode 行终止符（LF、VF、FF、CR、NEL、LS 或 PS）终止。</p><p>结束符在注释之后仍然是源代码的一部分，所以如果它不是ASCII符号（这些是NEL、LS和PS），就会导致解析器错误。</p><p>此外，还有另一种类型的注释，称为 NatSpec 注释，在样式指南中有详细说明。</p><p>它们用三斜杠 (<code>///</code>) 或双星号块 (<code>/** ... */</code>) 编写，应直接在函数声明或语句上方使用。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.soliditylang.org/en/latest/layout-of-source-files.html" target="_blank" rel="noopener noreferrer">https://docs.soliditylang.org/en/latest/layout-of-source-files.html</a></p>`,88)]))}const d=a(n,[["render",l]]),o=JSON.parse('{"path":"/posts/Lang/2022-05-22-solidity-08-layout-of-the-source.html","title":"Solidity-08-Layout of a Solidity Source File","lang":"zh-CN","frontmatter":{"title":"Solidity-08-Layout of a Solidity Source File","date":"2022-05-22T00:00:00.000Z","categories":["Lang"],"tags":["lang","solidity","sh"],"published":true,"description":"Solidity 源文件的布局 源文件可以包含任意数量的合约定义、import、pragma 和 using for 指令和结构、枚举、函数、错误和常量变量定义。 SPDX 许可证标识符 如果智能合约的源代码可用，则可以更好地建立对智能合约的信任。由于提供源代码总是涉及版权方面的法律问题，Solidity 编译器鼓励使用机器可读的 SPDX 许可证标识...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2022-05-22-solidity-08-layout-of-the-source.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Solidity-08-Layout of a Solidity Source File"}],["meta",{"property":"og:description","content":"Solidity 源文件的布局 源文件可以包含任意数量的合约定义、import、pragma 和 using for 指令和结构、枚举、函数、错误和常量变量定义。 SPDX 许可证标识符 如果智能合约的源代码可用，则可以更好地建立对智能合约的信任。由于提供源代码总是涉及版权方面的法律问题，Solidity 编译器鼓励使用机器可读的 SPDX 许可证标识..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"solidity"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2022-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Solidity-08-Layout of a Solidity Source File\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":8.32,"words":2496},"filePathRelative":"posts/Lang/2022-05-22-solidity-08-layout-of-the-source.md","localizedDate":"2022年5月22日","excerpt":"\\n<p>源文件可以包含任意数量的合约定义、import、pragma 和 using for 指令和结构、枚举、函数、错误和常量变量定义。</p>\\n<h1>SPDX 许可证标识符</h1>\\n<p>如果智能合约的源代码可用，则可以更好地建立对智能合约的信任。由于提供源代码总是涉及版权方面的法律问题，Solidity 编译器鼓励使用机器可读的 SPDX 许可证标识符。</p>\\n<p>每个源文件都应以说明其许可证的注释开头：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// SPDX-License-Identifier: MIT</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,o as data};
