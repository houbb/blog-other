import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-uJE4P3e0.js";const e={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>测试平台最强大的一个设计应该是流程控制。</p><p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p><p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="整体如何设计" tabindex="-1"><a class="header-anchor" href="#整体如何设计"><span>整体如何设计？</span></a></h2><p>太好了，有了你的补充信息（<strong>Java + Vue，一个人全栈开发 + 强大测试引擎诉求</strong>），我会重新规划一套更贴合你场景的「轻量但强扩展、能跑全流程的自动化测试平台」。</p><hr><h2 id="✅-一、目标明确" tabindex="-1"><a class="header-anchor" href="#✅-一、目标明确"><span>✅ 一、目标明确</span></a></h2><h3 id="✅-目标" tabindex="-1"><a class="header-anchor" href="#✅-目标"><span>✅ 目标：</span></a></h3><p>构建一个<strong>模块化、插件化、灵活配置流程的测试平台</strong>，能执行：</p><ul><li>接口（HTTP/HTTPS）调用</li><li>MQ 消息（如 RabbitMQ、Kafka）</li><li>Dubbo 接口（或泛化调用）</li><li>SQL 执行</li><li>自定义断言 + 多步依赖执行</li><li>自定义流程编排</li></ul><hr><h2 id="✅-二、整体架构概览" tabindex="-1"><a class="header-anchor" href="#✅-二、整体架构概览"><span>✅ 二、整体架构概览</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[前端 Vue UI]    [后端 Spring Boot 服务]    [测试执行引擎（内嵌）]</span></span>
<span class="line"><span>                                │</span></span>
<span class="line"><span>                                └──&gt; MySQL / Redis / MQ / etc.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以一个人维护这三个部分：</p><table><thead><tr><th>模块</th><th>技术栈</th><th>描述</th></tr></thead><tbody><tr><td>前端</td><td>Vue 3 + Element Plus</td><td>页面配置任务流、查看日志/报告</td></tr><tr><td>后端</td><td>Spring Boot + MyBatis + Redis + Quartz</td><td>管理调度+存储+执行调用</td></tr><tr><td>测试引擎</td><td>自研 DSL + Groovy/JS 脚本支持（或 Java SPI 插件）</td><td>流程控制 + 模块执行</td></tr></tbody></table><hr><h2 id="✅-三、核心功能模块拆分" tabindex="-1"><a class="header-anchor" href="#✅-三、核心功能模块拆分"><span>✅ 三、核心功能模块拆分</span></a></h2><h3 id="_1-测试用例-流程配置模块" tabindex="-1"><a class="header-anchor" href="#_1-测试用例-流程配置模块"><span>1. <strong>测试用例 &amp; 流程配置模块</strong></span></a></h3><ul><li><p>支持「流程图式」或「JSON 配置」的方式组合步骤</p></li><li><p>每个步骤是：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或 sql, dubbo, mq</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;调用登录接口&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;params&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;extract&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提取响应中的数据，供后续步骤使用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;assert&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 断言条件，例如 status == 200, json.data.token != null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="_2-内置步骤类型-基础支持" tabindex="-1"><a class="header-anchor" href="#_2-内置步骤类型-基础支持"><span>2. <strong>内置步骤类型（基础支持）</strong></span></a></h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>http</code></td><td>支持 GET/POST/PUT/DELETE，header/token 传参，JSON 提取/断言</td></tr><tr><td><code>sql</code></td><td>MySQL/PG 执行查询/更新，支持断言查询结果</td></tr><tr><td><code>dubbo</code></td><td>支持泛化调用，或基于反射执行</td></tr><tr><td><code>mq</code></td><td>发送消息、消费消息、验证是否被消费</td></tr><tr><td><code>sleep/wait</code></td><td>支持延迟等待</td></tr><tr><td><code>脚本执行</code></td><td>可选 Groovy / JS 脚本步骤，用于复杂逻辑判断</td></tr><tr><td><code>变量注入</code></td><td>支持参数变量上下文，步骤间共享</td></tr></tbody></table><hr><h3 id="_3-测试计划调度" tabindex="-1"><a class="header-anchor" href="#_3-测试计划调度"><span>3. <strong>测试计划调度</strong></span></a></h3><ul><li>手动执行 / 定时任务（基于 Quartz）</li><li>支持并发控制：串行/并行/依赖</li><li>测试环境隔离（如 dev, qa）</li></ul><hr><h3 id="_4-执行引擎核心能力" tabindex="-1"><a class="header-anchor" href="#_4-执行引擎核心能力"><span>4. <strong>执行引擎核心能力</strong></span></a></h3><ul><li>按配置 JSON 构建执行链，逐步执行</li><li>异常捕获机制（断点不中断整个流程）</li><li>支持日志聚合、流程可视化追踪（每一步状态、输入输出）</li></ul><hr><h3 id="_5-测试报告-可视化" tabindex="-1"><a class="header-anchor" href="#_5-测试报告-可视化"><span>5. <strong>测试报告 &amp; 可视化</strong></span></a></h3><ul><li>流程图展示步骤执行状态（成功 ✅ / 失败 ❌）</li><li>单步骤日志输出（请求、响应、SQL 执行语句等）</li><li>报告统计：通过率、运行耗时、失败详情</li></ul><hr><h2 id="✅-四、可扩展设计-你后续一定会用上" tabindex="-1"><a class="header-anchor" href="#✅-四、可扩展设计-你后续一定会用上"><span>✅ 四、可扩展设计（你后续一定会用上）</span></a></h2><h3 id="插件化执行引擎-推荐-spi" tabindex="-1"><a class="header-anchor" href="#插件化执行引擎-推荐-spi"><span>插件化执行引擎（推荐 SPI）</span></a></h3><p>你可以定义一个通用接口，例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StepExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> supports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 支持类型 http/sql/mq/...</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    StepResult</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StepContext</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每种类型的步骤，都通过注册插件来扩展。这样你后期加类型（如 Redis、gRPC）也很方便。</p><hr><h3 id="可配置-dsl-示例" tabindex="-1"><a class="header-anchor" href="#可配置-dsl-示例"><span>可配置 DSL 示例</span></a></h3><p>你可以支持 JSON/YAML DSL 来定义用例：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;登录接口&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;params&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;method&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;POST&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;url&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://api.xxx.com/login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;body&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;pass&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1234&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;extract&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$.data.token&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;assert&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;status&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;$.data.token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;notEmpty&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sql&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;验证登录后数据库状态&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;params&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;sql&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SELECT status FROM users WHERE name=&#39;test&#39;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;assert&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;rows[0].status&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;active&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-五、数据库设计概要" tabindex="-1"><a class="header-anchor" href="#✅-五、数据库设计概要"><span>✅ 五、数据库设计概要</span></a></h2><h3 id="表设计-部分" tabindex="-1"><a class="header-anchor" href="#表设计-部分"><span>表设计（部分）</span></a></h3><table><thead><tr><th>表名</th><th>描述</th></tr></thead><tbody><tr><td><code>test_case</code></td><td>用例元数据（名称、类型、描述）</td></tr><tr><td><code>test_case_steps</code></td><td>用例步骤（类型、执行配置 JSON）</td></tr><tr><td><code>test_plan</code></td><td>测试计划（定时、依赖用例）</td></tr><tr><td><code>test_run</code></td><td>记录每次执行状态、报告、耗时</td></tr><tr><td><code>test_log</code></td><td>步骤级别执行日志</td></tr></tbody></table><hr><h2 id="✅-六、开发顺序建议-适合你一个人迭代" tabindex="-1"><a class="header-anchor" href="#✅-六、开发顺序建议-适合你一个人迭代"><span>✅ 六、开发顺序建议（适合你一个人迭代）</span></a></h2><h3 id="阶段一-基础平台搭建" tabindex="-1"><a class="header-anchor" href="#阶段一-基础平台搭建"><span>阶段一：基础平台搭建</span></a></h3><ul><li>后端 API + 前端 Vue 页面（创建用例、执行、查看报告）</li><li>支持最小执行类型（http/sql）</li><li>流程引擎实现</li></ul><h3 id="阶段二-引擎能力增强" tabindex="-1"><a class="header-anchor" href="#阶段二-引擎能力增强"><span>阶段二：引擎能力增强</span></a></h3><ul><li>加入变量、提取、断言支持</li><li>脚本执行、流程分支</li><li>多步骤依赖</li></ul><h3 id="阶段三-ci-cd-报告系统" tabindex="-1"><a class="header-anchor" href="#阶段三-ci-cd-报告系统"><span>阶段三：CI/CD + 报告系统</span></a></h3><ul><li>定时调度 / CI webhook 接入</li><li>流程图式报告、失败追踪、导出</li></ul><h3 id="阶段四-可视化流程配置器" tabindex="-1"><a class="header-anchor" href="#阶段四-可视化流程配置器"><span>阶段四：可视化流程配置器</span></a></h3><ul><li>支持拖拽配置步骤（类似 Postman/Newman + Flowable）</li></ul><hr><h2 id="✅-七、推荐可复用开源组件" tabindex="-1"><a class="header-anchor" href="#✅-七、推荐可复用开源组件"><span>✅ 七、推荐可复用开源组件</span></a></h2><table><thead><tr><th>需求</th><th>推荐方案</th></tr></thead><tbody><tr><td>流程控制图</td><td><code>jsplumb</code>, <code>Drawflow</code>, <code>vue-flow</code>, <code>x6</code></td></tr><tr><td>SQL 执行</td><td>Druid + MyBatis</td></tr><tr><td>Dubbo 泛化调用</td><td>Apache Dubbo API 泛化调用 API</td></tr><tr><td>脚本引擎</td><td>Groovy、JSR-223 Nashorn</td></tr></tbody></table><hr><h2 id="✅-最后建议" tabindex="-1"><a class="header-anchor" href="#✅-最后建议"><span>✅ 最后建议</span></a></h2><p>你可以把平台设计为：</p><ul><li><strong>低代码化 + 插件化</strong>：用配置/界面完成 90% 工作，特殊的用脚本/插件解决</li><li><strong>面向用例数据和流程表达</strong>：核心是让测试用例可以表达业务流程</li><li><strong>重执行引擎，轻测试框架绑定</strong>：TestNG、JUnit 可以选配，不是主角</li></ul><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/metersphere/metersphere" target="_blank" rel="noopener noreferrer">https://github.com/metersphere/metersphere</a></p>`,66)]))}const r=i(e,[["render",l]]),k=JSON.parse('{"path":"/posts/tests/2016-04-27-test-plateform-13-chat-how-to-design.html","title":"test framework-13-测试平台聊一聊如何设计实现","lang":"zh-CN","frontmatter":{"title":"test framework-13-测试平台聊一聊如何设计实现","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","framework","open-source","plateform","test"],"published":true,"description":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 chat 整体如何设计？ 太好了，有了你的补充信息（Java + Vue，一个人全栈开发 + 强大测试引擎诉求），我会重新规划一套更贴合你场景的「轻量但强扩展、能跑全...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/tests/2016-04-27-test-plateform-13-chat-how-to-design.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test framework-13-测试平台聊一聊如何设计实现"}],["meta",{"property":"og:description","content":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 chat 整体如何设计？ 太好了，有了你的补充信息（Java + Vue，一个人全栈开发 + 强大测试引擎诉求），我会重新规划一套更贴合你场景的「轻量但强扩展、能跑全..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"framework"}],["meta",{"property":"article:tag","content":"open-source"}],["meta",{"property":"article:tag","content":"plateform"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test framework-13-测试平台聊一聊如何设计实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":4.21,"words":1262},"filePathRelative":"posts/tests/2016-04-27-test-plateform-13-chat-how-to-design.md","localizedDate":"2016年4月26日","excerpt":"\\n<p>测试平台最强大的一个设计应该是流程控制。</p>\\n<p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p>\\n<p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p>\\n<h1>chat</h1>\\n<h2>整体如何设计？</h2>\\n<p>太好了，有了你的补充信息（<strong>Java + Vue，一个人全栈开发 + 强大测试引擎诉求</strong>），我会重新规划一套更贴合你场景的「轻量但强扩展、能跑全流程的自动化测试平台」。</p>\\n<hr>\\n<h2>✅ 一、目标明确</h2>\\n<h3>✅ 目标：</h3>\\n<p>构建一个<strong>模块化、插件化、灵活配置流程的测试平台</strong>，能执行：</p>","autoDesc":true}');export{r as comp,k as data};
