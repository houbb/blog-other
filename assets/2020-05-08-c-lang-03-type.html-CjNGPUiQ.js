import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as e}from"./app-uJE4P3e0.js";const n={};function l(h,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="c-数据类型" tabindex="-1"><a class="header-anchor" href="#c-数据类型"><span>C 数据类型</span></a></h1><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。</p><p>变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p><p>C 中的类型可分为以下几种：</p><h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><p>它们是算术类型，包括两种类型：整数类型和浮点类型。</p><h2 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型"><span>枚举类型：</span></a></h2><p>它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</p><h2 id="void-类型" tabindex="-1"><a class="header-anchor" href="#void-类型"><span>void 类型：</span></a></h2><p>类型说明符 void 表明没有可用的值。</p><h2 id="派生类型" tabindex="-1"><a class="header-anchor" href="#派生类型"><span>派生类型：</span></a></h2><p>它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</p><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。</p><p>在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p><h1 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h1><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">char</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">-128 到 127 或 0 到 255</td></tr><tr><td style="text-align:left;">unsigned char</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">0 到 255</td></tr><tr><td style="text-align:left;">signed char</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">-128 到 127</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">2 或 4 字节</td><td style="text-align:left;">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left;">unsigned int</td><td style="text-align:left;">2 或 4 字节</td><td style="text-align:left;">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">-32,768 到 32,767</td></tr><tr><td style="text-align:left;">unsigned short</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">0 到 65,535</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2,147,483,648 到 2,147,483,647</td></tr><tr><td style="text-align:left;">unsigned long</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">0 到 4,294,967,295</td></tr></tbody></table><p>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</p><p>以下列出了32位系统与64位系统的存储大小的差别（windows 相同）：</p><figure><img src="https://www.runoob.com/wp-content/uploads/2014/09/32-64.jpg" alt="windows 相同" tabindex="0" loading="lazy"><figcaption>windows 相同</figcaption></figure><h2 id="获取字段的大小" tabindex="-1"><a class="header-anchor" href="#获取字段的大小"><span>获取字段的大小</span></a></h2><p>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 sizeof 运算符。</p><p>表达式 <code>sizeof(type)</code> 得到对象或类型的存储字节大小。</p><p>下面的实例演示了获取 int 类型的大小：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#include </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;int 存储大小 : </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%lu</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>%lu 为 32 位无符号整数，详细说明查看 C 库函数 - printf()。</p><p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int 存储大小 : 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型"><span>浮点类型</span></a></h1><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">值范围</th><th style="text-align:left;">精度</th></tr></thead><tbody><tr><td style="text-align:left;">float</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">1.2E-38 到 3.4E+38</td><td style="text-align:left;">6 位小数</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">2.3E-308 到 1.7E+308</td><td style="text-align:left;">15 位小数</td></tr><tr><td style="text-align:left;">long double</td><td style="text-align:left;">16 字节</td><td style="text-align:left;">3.4E-4932 到 1.1E+4932</td><td style="text-align:left;">19 位小数</td></tr></tbody></table><p>头文件 float.h 定义了宏，在程序中可以使用这些值和其他有关实数二进制表示的细节。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><p>下面的实例将输出浮点类型占用的存储空间以及它的范围值：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#include </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;float 存储最大字节数 : </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%lu</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;float 最小值: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%E</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, FLT_MIN );</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;float 最大值: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%E</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, FLT_MAX );</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;精度值: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, FLT_DIG );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>%E 为以指数形式输出单、双精度实数，详细说明查看 C 库函数 - printf()。</p><p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 存储最大字节数 : </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 最小值: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.175494</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">E</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">38</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 最大值: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3.402823</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">E</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">38</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">精度值: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="void-类型-1" tabindex="-1"><a class="header-anchor" href="#void-类型-1"><span>void 类型</span></a></h1><p>void 类型指定没有可用的值。</p><p>它通常用于以下三种情况下：</p><h2 id="函数返回为空" tabindex="-1"><a class="header-anchor" href="#函数返回为空"><span>函数返回为空</span></a></h2><p>C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status);</p><h2 id="函数参数为空" tabindex="-1"><a class="header-anchor" href="#函数参数为空"><span>函数参数为空</span></a></h2><p>C 中有各种函数不接受任何参数。</p><p>不带参数的函数可以接受一个 void。</p><p>例如 int rand(void);</p><h2 id="指针指向-void" tabindex="-1"><a class="header-anchor" href="#指针指向-void"><span>指针指向 void</span></a></h2><p>类型为 <code>void *</code> 的指针代表对象的地址，而不是类型。</p><p>例如，内存分配函数 <code>void *malloc( size_t size );</code> 返回指向 void 的指针，可以转换为任何数据类型。</p><p>如果现在您还是无法完全理解 void 类型，不用太担心，在后续的章节中我们将会详细讲解这些概念。</p><h1 id="在线工具" tabindex="-1"><a class="header-anchor" href="#在线工具"><span>在线工具</span></a></h1><p><a href="https://www.runoob.com/try/runcode.php?filename=helloworld&amp;type=c" target="_blank" rel="noopener noreferrer">在线工具</a></p>`,53)]))}const r=s(n,[["render",l]]),k=JSON.parse('{"path":"/posts/C/2020-05-08-c-lang-03-type.html","title":"C 语言入门-03-类型","lang":"zh-CN","frontmatter":{"title":"C 语言入门-03-类型","date":"2020-05-08T00:00:00.000Z","categories":["C"],"tags":["c","lang","sh"],"published":true,"description":"C 数据类型 在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。 变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。 C 中的类型可分为以下几种： 基本类型 它们是算术类型，包括两种类型：整数类型和浮点类型。 枚举类型： 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。 void 类型： 类型...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/C/2020-05-08-c-lang-03-type.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"C 语言入门-03-类型"}],["meta",{"property":"og:description","content":"C 数据类型 在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。 变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。 C 中的类型可分为以下几种： 基本类型 它们是算术类型，包括两种类型：整数类型和浮点类型。 枚举类型： 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。 void 类型： 类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.runoob.com/wp-content/uploads/2014/09/32-64.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2020-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C 语言入门-03-类型\\",\\"image\\":[\\"https://www.runoob.com/wp-content/uploads/2014/09/32-64.jpg\\"],\\"datePublished\\":\\"2020-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.74,"words":1122},"filePathRelative":"posts/C/2020-05-08-c-lang-03-type.md","localizedDate":"2020年5月8日","excerpt":"\\n<p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。</p>\\n<p>变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p>\\n<p>C 中的类型可分为以下几种：</p>\\n<h2>基本类型</h2>\\n<p>它们是算术类型，包括两种类型：整数类型和浮点类型。</p>\\n<h2>枚举类型：</h2>\\n<p>它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</p>\\n<h2>void 类型：</h2>\\n<p>类型说明符 void 表明没有可用的值。</p>\\n<h2>派生类型：</h2>\\n<p>它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</p>","autoDesc":true}');export{r as comp,k as data};
