import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as i}from"./app-CEDSurVN.js";const n={};function p(h,e){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="junit5-注解" tabindex="-1"><a class="header-anchor" href="#junit5-注解"><span>Junit5 注解</span></a></h1><p>所有支持的注解都在包 <code>org.junit.jupiter.api</code> 下;</p><p>使用@Test、@TestTemplate、@RepeatedTest、@BeforeAll、@AfterAll、@BeforeEach或@AfterEach注释的方法<strong>不能返回值</strong>。</p><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test"><span>@Test</span></a></h2><p>表示方法是测试方法。与JUnit 4的@Test注释不同，这个注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于它们自己的专用注释进行操作。<br> 这些方法是继承的，除非它们被重写。</p><h2 id="parameterizedtest" tabindex="-1"><a class="header-anchor" href="#parameterizedtest"><span>@ParameterizedTest</span></a></h2><p>表示方法是参数化测试。这些方法是继承的，除非它们被重写。</p><h2 id="repeatedtest" tabindex="-1"><a class="header-anchor" href="#repeatedtest"><span>@RepeatedTest</span></a></h2><p>表示方法是重复测试的测试模板。这些方法是继承的，除非它们被重写。</p><h2 id="testfactory" tabindex="-1"><a class="header-anchor" href="#testfactory"><span>@TestFactory</span></a></h2><p>表示方法是动态测试的测试工厂。这些方法是继承的，除非它们被重写。</p><h2 id="testinstance" tabindex="-1"><a class="header-anchor" href="#testinstance"><span>@TestInstance</span></a></h2><p>用于为带注释的测试类配置测试实例生命周期。这些方法是继承的，除非它们被重写。</p><h2 id="testtemplate" tabindex="-1"><a class="header-anchor" href="#testtemplate"><span>@TestTemplate</span></a></h2><p>表示方法是为测试用例设计的模板，根据注册提供程序返回的调用上下文的数量进行多次调用。这些方法是继承的，除非它们被重写。</p><h2 id="displayname" tabindex="-1"><a class="header-anchor" href="#displayname"><span>@DisplayName</span></a></h2><p>声明测试类或测试方法的自定义显示名称。这样的注解<strong>不是继承来的</strong>。</p><h2 id="beforeeach" tabindex="-1"><a class="header-anchor" href="#beforeeach"><span>@BeforeEach</span></a></h2><p>表示在当前类中每个@Test、@RepeatedTest、@ParameterizedTest或@TestFactory方法之前执行注释的方法;类似于JUnit 4的@Before。</p><p>这些方法是继承的，除非它们被重写。</p><h2 id="aftereach" tabindex="-1"><a class="header-anchor" href="#aftereach"><span>@AfterEach</span></a></h2><p>表示在当前类中的每个@Test、@RepeatedTest、@ParameterizedTest或@TestFactory方法之后，都应该执行带注释的方法;类似于JUnit 4的@After。</p><p>这些方法是继承的，除非它们被重写。</p><h2 id="beforeall" tabindex="-1"><a class="header-anchor" href="#beforeall"><span>@BeforeAll</span></a></h2><p>表示应在当前类中的所有@Test、@RepeatedTest、@ParameterizedTest和@TestFactory方法之前执行带注释的方法;类似于JUnit 4的@BeforeClass。</p><p>这些方法是继承的(除非它们被隐藏或覆盖)，并且必须是静态的(除非使用“每个类”测试实例生命周期)。</p><h2 id="afterall" tabindex="-1"><a class="header-anchor" href="#afterall"><span>@AfterAll</span></a></h2><p>表示在当前类中，所有@Test、@RepeatedTest、@ParameterizedTest和@TestFactory方法都应该执行注释的方法;类似于JUnit 4的@AfterClass。</p><p>这些方法是继承的(除非它们被隐藏或覆盖)，并且必须是静态的(除非使用“每个类”测试实例生命周期)。</p><h2 id="nested" tabindex="-1"><a class="header-anchor" href="#nested"><span>@Nested</span></a></h2><p>表示带注释的类是一个嵌套的、非静态的测试类。@BeforeAll和@AfterAll方法不能直接在 @Nested 测试类中使用，除非使用“每个类”测试实例生命周期。</p><p>这样的注解不是继承来的。</p><h2 id="tag" tabindex="-1"><a class="header-anchor" href="#tag"><span>@Tag</span></a></h2><p>用于在类或方法级别声明过滤测试的标记;类似于TestNG中的测试组或JUnit 4中的类别。</p><p>此类注释在类级别继承，但在方法级别继承。</p><h2 id="disabled" tabindex="-1"><a class="header-anchor" href="#disabled"><span>@Disabled</span></a></h2><p>用于禁用测试类或测试方法;类似于JUnit 4的@Ignore。</p><p>这样的注解不是继承来的。</p><h2 id="extendwith" tabindex="-1"><a class="header-anchor" href="#extendwith"><span>@ExtendWith</span></a></h2><p>用于注册自定义扩展。这些注释是继承。</p><h1 id="元注释-注释" tabindex="-1"><a class="header-anchor" href="#元注释-注释"><span>元注释,注释</span></a></h1><p>JUnit Jupiter注解可以用作元注解。这意味着您可以定义自己的组合注释，它将自动继承其元注释的语义。</p><p>例如，您可以创建一个名为 <code>@Fast</code> 的自定义组合注释，<br> 如下所示，而不是在整个代码库中复制和粘贴@Tag(“fast”)(请参阅标记和过滤)。然后可以使用@Fast作为@Tag(“fast”)的drop-in替代。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.annotation.ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.annotation.Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.annotation.RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.annotation.Target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.jupiter.api.Tag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">METHOD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Tag</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fast&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> Fast</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const d=a(n,[["render",p]]),o=JSON.parse('{"path":"/posts/test/2018-06-25-junit5-02-annotation.html","title":"Junit5-02-Annotation","lang":"zh-CN","frontmatter":{"title":"Junit5-02-Annotation","date":"2018-06-25T00:00:00.000Z","categories":["Test"],"tags":["test","sh"],"published":true,"description":"Junit5 注解 所有支持的注解都在包 org.junit.jupiter.api 下; 使用@Test、@TestTemplate、@RepeatedTest、@BeforeAll、@AfterAll、@BeforeEach或@AfterEach注释的方法不能返回值。 @Test 表示方法是测试方法。与JUnit 4的@Test注释不同，这个注释不...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/test/2018-06-25-junit5-02-annotation.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Junit5-02-Annotation"}],["meta",{"property":"og:description","content":"Junit5 注解 所有支持的注解都在包 org.junit.jupiter.api 下; 使用@Test、@TestTemplate、@RepeatedTest、@BeforeAll、@AfterAll、@BeforeEach或@AfterEach注释的方法不能返回值。 @Test 表示方法是测试方法。与JUnit 4的@Test注释不同，这个注释不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Junit5-02-Annotation\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.92,"words":877},"filePathRelative":"posts/test/2018-06-25-junit5-02-annotation.md","localizedDate":"2018年6月25日","excerpt":"\\n<p>所有支持的注解都在包 <code>org.junit.jupiter.api</code> 下;</p>\\n<p>使用@Test、@TestTemplate、@RepeatedTest、@BeforeAll、@AfterAll、@BeforeEach或@AfterEach注释的方法<strong>不能返回值</strong>。</p>\\n<h2>@Test</h2>\\n<p>表示方法是测试方法。与JUnit 4的@Test注释不同，这个注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于它们自己的专用注释进行操作。<br>\\n这些方法是继承的，除非它们被重写。</p>\\n<h2>@ParameterizedTest</h2>","autoDesc":true}');export{d as comp,o as data};
