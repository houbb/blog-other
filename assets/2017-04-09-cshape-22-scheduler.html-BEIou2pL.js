import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o as n}from"./app-uJE4P3e0.js";const o={};function p(i,e){return n(),r("div",null,e[0]||(e[0]=[a(`<h1 id="任务调度系统" tabindex="-1"><a class="header-anchor" href="#任务调度系统"><span>任务调度系统</span></a></h1><blockquote><p><a href="https://houbb.github.io/2016/10/22/LTS" target="_blank" rel="noopener noreferrer">LTS</a></p></blockquote><blockquote><p><a href="http://www.cnblogs.com/chejiangyi/p/4934991.html" target="_blank" rel="noopener noreferrer">.net 分布式架构之任务调度平台</a></p></blockquote><h1 id="net-分布式架构之任务调度平台" tabindex="-1"><a class="header-anchor" href="#net-分布式架构之任务调度平台"><span>.NET 分布式架构之任务调度平台</span></a></h1><p><a href="http://xn--6kqx45g.net" target="_blank" rel="noopener noreferrer">用于.net</a> dll,exe的任务的挂载，任务的隔离，调度执行，访问权限控制，监控，管理，日志，错误预警，性能分析等。</p><ol><li><p>平台基于quartz.net进行任务调度功能开发，采用C#代码编写, 支持corn表达式和第三方自定义的corn表达式扩展。</p></li><li><p>架构以插件形式开发，具有良好的功能扩展性，稳定性，简单性，便于第三方开发人员进一步进行功能扩展。</p></li><li><p>支持多节点集群，便于集群服务器的资源有效分配，任务的相互隔离。</p></li><li><p>支持邮件形式的错误预警，便于运维及时处理任务异常等。</p></li></ol><ul><li>Download</li></ul><p><a href="http://git.oschina.net/chejiangyi/Dyd.BaseService.TaskManager" target="_blank" rel="noopener noreferrer">Download</a></p><ul><li>Compile</li></ul><p>编译失败，原因可能如下：</p><p>git下载源码后部分开发人员无法编译的问题（挺诡异的问题）,可以按照以下两种方式尝试解决:<br> 1）<a href="http://xn--vnu43e.net" target="_blank" rel="noopener noreferrer">改成.net</a> 4.5 framework 再试试。<br> 2）直接下载BSF源码进行编译</p><p>至于BSF源码请点<a href="http://git.oschina.net/chejiangyi/XXF" target="_blank" rel="noopener noreferrer">这里</a>，编译之后将 <code>BSF.DLL</code> 替换掉 <strong>引用</strong> 原来的文件即可。</p><h1 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用"><span>简单使用</span></a></h1><p>安装说明参见 <strong>安装文档</strong>、<strong>文档</strong>。</p><p>一、执行数据库安装脚本，安装数据库；</p><ul><li>执行数据库数据初始化脚本。</li></ul><p>本地创建 <code>dyd_bs_task</code> 数据库(SQL Server)。然后执行<strong>安装文档</strong>中脚本即可。</p><p>二、部署web站点,并配置好 web.config</p><ul><li><p>数据库配置连接</p></li><li><p>管理员账号密码（不要删除admin用户,admin的密码可以改）</p></li></ul><p>以上两点在<strong><a href="http://TaskManager.Web" target="_blank" rel="noopener noreferrer">TaskManager.Web</a></strong>子项目下，修改 <code>web.config</code> 中此处内容</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>三、打开web站点,新建服务节点</p><ul><li>默认数据库初始化脚本会初始化一个测试用的node节点，有其他需要可以自己再建一个。</li></ul><p>启动项目:【<a href="http://TaskManager.Web" target="_blank" rel="noopener noreferrer">TaskManager.Web</a>】设置为启动项目，【Views】文件夹右键浏览器打开。默认为<strong>admin/123</strong>登录即可。</p><p>ERROR</p><p>可能会出现提示: <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 状态服务不可用之类信息。</p><p>解决方式: 【计算机】右键-&gt;【管理】-&gt;【服务】-&gt;【<a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 状态服务】开启即可。为了方便，可以设置为自动。</p><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/schedular/dotnet/2017-04-19-Scheduler-nodes.png" alt="hello" tabindex="0" loading="lazy"><figcaption>hello</figcaption></figure><p>(默认数据库初始化的时候已经有一NODE了。暂时可以不设置。)</p><p>四、部署node winserver服务，并配置好config文件</p><p>部署服务节点（建议使用 单机多个节点安装.bat，建议部署两个以上节点）</p><ul><li>新建 node</li></ul><p>比如我们在上一步新建一个NODE——测试节点2。比较重要的是，记住其【ID为2】。初始状态应该是停止。</p><p>接下来要做的就是让其运行。</p><ul><li>配置 <code>App.config</code></li></ul><p>在子项目【TaskManager.WinService】中打开文件 <code>App.config</code>，如下：</p><p>TaskManagerWebUrl 对应上面【<a href="http://TaskManager.Web" target="_blank" rel="noopener noreferrer">TaskManager.Web</a>】项目运行的IP:port。</p><p>NodeID 就是新建 node 时需要记住的ID。当然你可以指定任意一个已有的nodeId。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>编译</li></ul><p>接下来需要编译【TaskManager.WinService】。需要生成对应的EXE文件。</p><p>(如果没有将项目右键-》【属性】-》【输出类型】设置为【windows应用程序】，后面不再重复)</p><ul><li>安装运行</li></ul><p>我直接尝试了作者说的bat文件，但是没有成功。(也可能是权限问题，没有细究。PS：需要将bat中的路径修改为【TaskManager.WinService】生成exe路径)</p><p>我们需要借助一个软件。使用时，请使用<strong>管理员</strong>身份运行，否则可能出错如下：安装失败，已执行回滚。</p><p>软件下载<a href="https://houbb.github.io/static/download/dotnet/WSWinForm.rar" target="_blank" rel="noopener noreferrer">这里</a></p><p>软件使用起来很简单，浏览找到【TaskManager.WinService】生成exe路径。安装、运行即可。</p><p>如果你发现，你指定的NODE在网页上变为<strong>运行</strong>，说明成功了。</p><p>五、测试</p><p>此处使用子项目【TaskManager.Demo】进行测试。</p><p>web页面上【任务管理】-&gt;【任务列表】新建任务如下：</p><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/scheduler/dotnet/2017-04-19-Scheduler-task.png" alt="new task" tabindex="0" loading="lazy"><figcaption>new task</figcaption></figure><p>注意：</p><ol><li><p>节点需要选择一个<strong>运行</strong>状态的节点。</p></li><li><p>任务入口类的命名空间对应<code>命名空间.类名</code>；任务入口dll文件名为对应的<code>编译后的EXE</code>；上传文件为<code>编译后debug/release下所有的文件的压缩文件</code>，不包括<strong>zh-Hans</strong>。</p></li></ol><p>六、 系统级任务</p><p>打开web站点,发布两个系统级任务(错误邮件发送的任务和长时间运行的任务检测任务)</p><p>【TaskManager.MonitorTasks】这个项目。和上面测试的新建方法是一样的。此版本包含长时间运行任务预警、异常发送邮件2个功能。</p><p>若成功大概界面如下：</p><figure><img src="https://raw.githubusercontent.com/houbb/resource/master/img/scheduler/dotnet/2017-04-19-Scheduler-task-list.png" alt="task list" tabindex="0" loading="lazy"><figcaption>task list</figcaption></figure><p>七、 安装redis。（redis做即时通知使用，如果没有redis，进行任务开启，卸载等操作时界面反应速度较慢,【系统必须】Redis内部实时通讯专用,密码为空）</p><p>6.1 安装redis。（可以是windows版本的安装包，建议不设置用户名密码。）<br> 6.2 “配置管理”中配置“RedisServer”。如&quot;192.168.1.209:6379&quot;</p><p>这个暂未测试。</p><h1 id="项目企划草案" tabindex="-1"><a class="header-anchor" href="#项目企划草案"><span>项目企划草案</span></a></h1><p>一、从LTS学习</p><blockquote><p><a href="https://qq254963746.gitbooks.io/lts/content/introduce/architecture.html" target="_blank" rel="noopener noreferrer">LTS DOC</a></p></blockquote><h2 id="任务支持" tabindex="-1"><a class="header-anchor" href="#任务支持"><span>任务支持</span></a></h2><ul><li><p>实时任务：提交了之后立即就要执行的任务。</p></li><li><p>定时任务：在指定时间点执行的任务，譬如 今天3点执行（单次）。</p></li><li><p>Cron任务：CronExpression，和quartz类似（但是不是使用quartz实现的）譬如 0 0/1 * ?</p></li><li><p>Repeat任务：譬如每隔5分钟执行一次，重复50次就停止。</p></li></ul><p>前三种是很有必要的。</p><h2 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计"><span>架构设计</span></a></h2><p>架构设计上，LTS框架中包含以下五种类型的节点：</p><ul><li><p>JobClient :主要负责提交任务, 并接收任务执行反馈结果。</p></li><li><p>JobTracker :负责任务调度，接收并分配任务。</p></li><li><p>TaskTracker :负责执行任务，执行完反馈给JobTracker。</p></li><li><p>LTS-Monitor :主要负责收集各个节点的监控信息，包括任务监控信息，节点JVM监控信息</p></li><li><p>LTS-Admin :管理后台）主要负责节点管理，任务队列管理，监控管理等。</p></li></ul><p>LTS的这五种节点都是无状态的，都可以部署多个，动态扩容，来实现负载均衡，实现更大的负载量, 并且框架采用FailStore策略使LTS具有很好的容错能力。</p><p>这个可以简化。</p><h2 id="执行结果" tabindex="-1"><a class="header-anchor" href="#执行结果"><span>执行结果</span></a></h2><p>LTS框架提供四种执行结果支持，EXECUTE_SUCCESS，EXECUTE_FAILED，EXECUTE_LATER，EXECUTE_EXCEPTION，并对每种结果采取相应的处理机制，譬如重试。</p><ul><li><p>EXECUTE_SUCCESS: 执行成功,这种情况，直接反馈客户端（如果任务被设置了要反馈给客户端）。</p></li><li><p>EXECUTE_FAILED：执行失败，这种情况，直接反馈给客户端，不进行重试。</p></li><li><p>EXECUTE_LATER：稍后执行（需要重试），这种情况，不反馈客户端，重试策略采用30s的策略，默认最大重试次数为10次，用户可以通过参数设置修改这些参数。</p></li><li><p>EXECUTE_EXCEPTION：执行异常, 这中情况也会重试(重试策略，同上)</p></li></ul><p>可根据自己需要细化。</p><h2 id="优秀点" tabindex="-1"><a class="header-anchor" href="#优秀点"><span>优秀点</span></a></h2><ul><li><p>动态扩容和容错重试。</p></li><li><p>故障转移</p></li></ul>`,79)]))}const c=t(o,[["render",p]]),h=JSON.parse('{"path":"/posts/Lang/2017-04-09-cshape-22-scheduler.html","title":"c#-022-Scheduler .Net 定时调度","lang":"zh-CN","frontmatter":{"title":"c#-022-Scheduler .Net 定时调度","date":"2017-04-09T00:00:00.000Z","categories":["C#"],"tags":["cshape","cshape","lang",".net","dotnet"],"published":true,"description":"任务调度系统 LTS .net 分布式架构之任务调度平台 .NET 分布式架构之任务调度平台 用于.net dll,exe的任务的挂载，任务的隔离，调度执行，访问权限控制，监控，管理，日志，错误预警，性能分析等。 平台基于quartz.net进行任务调度功能开发，采用C#代码编写, 支持corn表达式和第三方自定义的corn表达式扩展。 架构以插件形式...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2017-04-09-cshape-22-scheduler.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"c#-022-Scheduler .Net 定时调度"}],["meta",{"property":"og:description","content":"任务调度系统 LTS .net 分布式架构之任务调度平台 .NET 分布式架构之任务调度平台 用于.net dll,exe的任务的挂载，任务的隔离，调度执行，访问权限控制，监控，管理，日志，错误预警，性能分析等。 平台基于quartz.net进行任务调度功能开发，采用C#代码编写, 支持corn表达式和第三方自定义的corn表达式扩展。 架构以插件形式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/houbb/resource/master/img/schedular/dotnet/2017-04-19-Scheduler-nodes.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"cshape"}],["meta",{"property":"article:tag","content":"cshape"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":".net"}],["meta",{"property":"article:tag","content":"dotnet"}],["meta",{"property":"article:published_time","content":"2017-04-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c#-022-Scheduler .Net 定时调度\\",\\"image\\":[\\"https://raw.githubusercontent.com/houbb/resource/master/img/schedular/dotnet/2017-04-19-Scheduler-nodes.png\\",\\"https://raw.githubusercontent.com/houbb/resource/master/img/scheduler/dotnet/2017-04-19-Scheduler-task.png\\",\\"https://raw.githubusercontent.com/houbb/resource/master/img/scheduler/dotnet/2017-04-19-Scheduler-task-list.png\\"],\\"datePublished\\":\\"2017-04-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.56,"words":1967},"filePathRelative":"posts/Lang/2017-04-09-cshape-22-scheduler.md","localizedDate":"2017年4月9日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://houbb.github.io/2016/10/22/LTS\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LTS</a></p>\\n</blockquote>\\n<blockquote>\\n<p><a href=\\"http://www.cnblogs.com/chejiangyi/p/4934991.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">.net 分布式架构之任务调度平台</a></p>\\n</blockquote>\\n<h1>.NET 分布式架构之任务调度平台</h1>","autoDesc":true}');export{c as comp,h as data};
