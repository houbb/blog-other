import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-uJE4P3e0.js";const t={};function e(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h1><p>Ruby 支持五种类型的变量。</p><ul><li><p>一般小写字母、下划线开头：变量（Variable）。</p></li><li><p>$开头：全局变量（Global variable）。</p></li><li><p>@开头：实例变量（Instance variable）。</p></li><li><p>@@开头：类变量（Class variable）类变量被共享在整个继承链中</p></li><li><p>大写字母开头：常数（Constant）。</p></li></ul><h1 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h1><p>全局变量以 <code>$</code> 开头。未初始化的全局变量的值为 <strong>nil</strong>，在使用 -w 选项后，会产生警告。</p><p>给全局变量赋值会改变全局状态，所以不建议使用全局变量。</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/ruby</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$global_variable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print_global</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;全局变量在 Class1 中输出为 </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">global_variable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print_global</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;全局变量在 Class2 中输出为 </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#$</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">global_variable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">class1obj</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">class1obj.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print_global</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">class2obj</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">class2obj.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print_global</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>全局变量在 Class1 中输出为 10</span></span>
<span class="line"><span>全局变量在 Class2 中输出为 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意</p></blockquote><p>在 Ruby 中，您可以通过在变量或常量前面放置 <code>#</code> 字符，来访问任何变量或常量的值。</p><h1 id="实例变量" tabindex="-1"><a class="header-anchor" href="#实例变量"><span>实例变量</span></a></h1><p>实例变量以 <code>@</code> 开头。未初始化的实例变量的值为 nil。</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/ruby</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Customer</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      @cust_id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      @cust_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      @cust_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">addr</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> display_details</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Customer id </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust_id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Customer name </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Customer address </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust_addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Wisdom Apartments, Ludhiya&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Poul&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;New Empire road, Khandala&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cust1.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">display_details</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cust2.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">display_details</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="类变量" tabindex="-1"><a class="header-anchor" href="#类变量"><span>类变量</span></a></h1><p>类变量以 <code>@@</code> 开头，且必须初始化后才能在方法定义中使用。<br> 引用一个未初始化的类变量会产生错误。类变量在定义它的类或模块的子类或子模块中可共享使用。</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/ruby</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Customer</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   @@no_of_customers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initialize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#ABB2BF;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      @cust_id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">id</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      @cust_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      @cust_addr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">addr</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> display_details</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Customer id </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust_id</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Customer name </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">      puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Customer address </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust_addr</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> total_no_of_customers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">       @@no_of_customers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">       puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Total number of customers: </span><span style="--shiki-light:#50A14F;--shiki-dark:#E06C75;">#@@</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">no_of_customers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Wisdom Apartments, Ludhiya&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cust2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Customer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Poul&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;New Empire road, Khandala&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 调用方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cust1.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">total_no_of_customers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cust2.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">total_no_of_customers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h1><p>局部变量以小写字母或下划线 <code>_</code> 开头。局部变量的作用域从 class、module、def 或 do 到相对应的结尾或者从左大括号到右大括号 {}。</p><p>当调用一个未初始化的局部变量时，它被解释为调用一个不带参数的方法。</p><p>对未初始化的局部变量赋值也可以当作是变量声明。变量会一直存在，直到当前域结束为止。局部变量的生命周期在 Ruby 解析程序时确定。</p><p>在上面的实例中，局部变量是 id、name 和 addr。</p><h1 id="常量" tabindex="-1"><a class="header-anchor" href="#常量"><span>常量</span></a></h1><p>常量以大写字母开头。定义在类或模块内的常量可以从类或模块的内部访问，定义在类或模块外的常量可以被全局访问。</p><p>常量不能定义在方法内。引用一个未初始化的常量会产生错误。对已经初始化的常量赋值会产生警告。</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/ruby</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -*- coding: UTF-8 -*-</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Example</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">   VAR1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">   VAR2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> show</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">       puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;第一个常量的值为 </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">#{</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">VAR1</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">       puts</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;第二个常量的值为 </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">#{</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">VAR2</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建对象</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">object.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="伪变量" tabindex="-1"><a class="header-anchor" href="#伪变量"><span>伪变量</span></a></h1><p>它们是特殊的变量，有着局部变量的外观，但行为却像常量。您不能给这些变量赋任何值。</p><table><thead><tr><th style="text-align:left;">Var</th><th style="text-align:left;">Desc</th></tr></thead><tbody><tr><td style="text-align:left;">self</td><td style="text-align:left;">当前方法的接收器对象</td></tr><tr><td style="text-align:left;">true</td><td style="text-align:left;">代表 true 的值</td></tr><tr><td style="text-align:left;">false</td><td style="text-align:left;">代表 false 的值</td></tr><tr><td style="text-align:left;">nil</td><td style="text-align:left;">代表 undefined 的值</td></tr><tr><td style="text-align:left;">nil</td><td style="text-align:left;">代表 undefined 的值</td></tr><tr><td style="text-align:left;"><code>__FILE__</code></td><td style="text-align:left;">当前源文件的名称</td></tr><tr><td style="text-align:left;"><code>__LINE__</code></td><td style="text-align:left;">当前行在源文件中的编号</td></tr></tbody></table><h1 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h1><p>这一方面，很多语言都是类似的。</p><p>假设变量 a 的值为 10，变量 b 的值为 20，那么：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加法 - 把运算符两边的操作数相加</td><td style="text-align:left;">a + b 将得到 30</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减法 - 把左操作数减去右操作数</td><td style="text-align:left;">a - b 将得到 -10</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘法 - 把运算符两边的操作数相乘</td><td style="text-align:left;">a * b 将得到 200</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除法 - 把左操作数除以右操作数</td><td style="text-align:left;">b / a 将得到 2</td></tr><tr><td style="text-align:left;">%</td><td style="text-align:left;">求模 - 把左操作数除以右操作数，返回余数</td><td style="text-align:left;">b % a 将得到 0</td></tr><tr><td style="text-align:left;">**</td><td style="text-align:left;">指数 - 执行指数计算</td><td style="text-align:left;">a**b 将得到 10 的 20 次方</td></tr></tbody></table><p>赋值运算符和这个是一一对应的。</p><h1 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h1><p>假设变量 a 的值为 10，变量 b 的值为 20，那么：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">实例</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left;">(a == b) 不为真。</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:left;">(a != b) 为真。</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:left;">(a &gt; b) 不为真。</td></tr><tr><td style="text-align:left;">=</td><td style="text-align:left;">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:left;">(a &gt;= b) 不为真。</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">联合比较运算符。如果第一个操作数等于第二个操作数则返回 0，如果第一个操作数大于第二个操作数则返回 1，如果第一个操作数小于第二个操作数则返回 -1。</td><td style="text-align:left;">(a b) 返回 -1。</td></tr><tr><td style="text-align:left;">===</td><td style="text-align:left;">用于测试 case 语句的 when 子句内的相等。</td><td style="text-align:left;">(1...10) === 5 返回 true。</td></tr><tr><td style="text-align:left;">.eql?</td><td style="text-align:left;">如果接收器和参数具有相同的类型和相等的值，则返回 true。</td><td style="text-align:left;">1 == 1.0 返回 true，但是 1.eql?(1.0) 返回 false。</td></tr><tr><td style="text-align:left;">equal?</td><td style="text-align:left;">如果接收器和参数具有相同的对象 id，则返回 true。</td><td style="text-align:left;">如果 aObj 是 bObj 的副本，那么 aObj == bObj 返回 true，a.equal?bObj 返回 false，但是 a.equal?aObj 返回 true。</td></tr></tbody></table><h1 id="并行赋值" tabindex="-1"><a class="header-anchor" href="#并行赋值"><span>并行赋值</span></a></h1><p>Ruby 也支持变量的并行赋值。这使得多个变量可以通过一行的 Ruby 代码进行初始化。</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并行赋值如下：</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a, b, c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>并行赋值在交换两个变量的值时也很有用:</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b, c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="范围运算符" tabindex="-1"><a class="header-anchor" href="#范围运算符"><span>范围运算符</span></a></h1><p>在 Ruby 中，序列范围用于创建一系列连续的值 - 包含起始值、结束值（视情况而定）和它们之间的值。</p><p>在 Ruby 中，这些序列是使用 <code>..</code> 和 <code>...</code> 范围运算符来创建的。两点形式创建的范围包含起始值和结束值，三点形式创建的范围只包含起始值不包含结束值。</p><h1 id="defined-运算符" tabindex="-1"><a class="header-anchor" href="#defined-运算符"><span>defined? 运算符</span></a></h1><p>defined? 是一个特殊的运算符，以方法调用的形式来判断传递的表达式是否已定义。它返回表达式的描述字符串，如果表达式未定义则返回 nil。</p><p>一、One</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defined?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> variable </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果 variable 已经初始化，则为 True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>二、Two</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defined?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> method_call </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果方法已经定义，则为 True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>三、Three</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果存在可被 super 用户调用的方法，则为 True</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defined?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> super</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>四、Four</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defined?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> yield</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 如果已传递代码块，则为 True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="点运算符和双冒号运算符" tabindex="-1"><a class="header-anchor" href="#点运算符和双冒号运算符"><span>点运算符和双冒号运算符</span></a></h1><p>您可以通过在方法名称前加上模块名称和一条下划线来调用模块方法。您可以使用模块名称和两个冒号来引用一个常量。</p><p><code>::</code> 是一元运算符，允许在类或模块内定义常量、实例方法和类方法，可以从类或模块外的任何地方进行访问。</p><p>请记住：在 Ruby 中，类和方法也可以被当作常量。</p><p>您只需要在表达式的常量名前加上 <code>::</code> 前缀，即可返回适当的类或模块对象。</p><p>如果未使用前缀表达式，则默认使用主 Object 类。</p><ul><li>One</li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">MR_COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 定义在主 Object 类上的常量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">module</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">  MR_COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">MR_COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 设置全局计数为 1</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">  MR_COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 设置局部计数为 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> MR_COUNT</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # 这是全局常量</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">MR_COUNT</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 这是 &quot;Foo&quot; 的局部常量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Two</li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; out there&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_one</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">   CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> proc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; in there&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> where_is_my_CONST</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; inside one&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_two</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">   CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39; inside two&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> where_is_my_CONST</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">      CONST</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where_is_my_CONST</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_two</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where_is_my_CONST</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_two</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_two</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> CONST</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">puts</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_one</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inside_two</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CONST</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67)]))}const d=i(t,[["render",e]]),r=JSON.parse('{"path":"/posts/Lang/2017-04-15-lang-ruby-04-var-oper-04.html","title":"Ruby-04-var, operator","lang":"zh-CN","frontmatter":{"title":"Ruby-04-var, operator","date":"2017-04-15T00:00:00.000Z","categories":["Lang"],"tags":["ruby","lang"],"header-img":"static/app/res/img/article-bg.jpeg","published":true,"description":"变量 Ruby 支持五种类型的变量。 一般小写字母、下划线开头：变量（Variable）。 $开头：全局变量（Global variable）。 @开头：实例变量（Instance variable）。 @@开头：类变量（Class variable）类变量被共享在整个继承链中 大写字母开头：常数（Constant）。 全局变量 全局变量以 $ 开头。...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2017-04-15-lang-ruby-04-var-oper-04.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Ruby-04-var, operator"}],["meta",{"property":"og:description","content":"变量 Ruby 支持五种类型的变量。 一般小写字母、下划线开头：变量（Variable）。 $开头：全局变量（Global variable）。 @开头：实例变量（Instance variable）。 @@开头：类变量（Class variable）类变量被共享在整个继承链中 大写字母开头：常数（Constant）。 全局变量 全局变量以 $ 开头。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"ruby"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:published_time","content":"2017-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ruby-04-var, operator\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":6.77,"words":2030},"filePathRelative":"posts/Lang/2017-04-15-lang-ruby-04-var-oper-04.md","localizedDate":"2017年4月15日","excerpt":"\\n<p>Ruby 支持五种类型的变量。</p>\\n<ul>\\n<li>\\n<p>一般小写字母、下划线开头：变量（Variable）。</p>\\n</li>\\n<li>\\n<p>$开头：全局变量（Global variable）。</p>\\n</li>\\n<li>\\n<p>@开头：实例变量（Instance variable）。</p>\\n</li>\\n<li>\\n<p>@@开头：类变量（Class variable）类变量被共享在整个继承链中</p>\\n</li>\\n<li>\\n<p>大写字母开头：常数（Constant）。</p>\\n</li>\\n</ul>\\n<h1>全局变量</h1>\\n<p>全局变量以 <code>$</code> 开头。未初始化的全局变量的值为 <strong>nil</strong>，在使用 -w 选项后，会产生警告。</p>","autoDesc":true}');export{d as comp,r as data};
