import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CEDSurVN.js";const e={};function l(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-00-intro" target="_blank" rel="noopener noreferrer">jmockit-01-jmockit 入门使用案例</a></p><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-01-overview" target="_blank" rel="noopener noreferrer">jmockit-02-概览</a></p><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-03-mocking" target="_blank" rel="noopener noreferrer">jmockit-03-Mocking 模拟</a></p><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-04-faking" target="_blank" rel="noopener noreferrer">jmockit-04-Faking 伪造</a></p><p><a href="https://houbb.github.io/2023/05/09/test-jmockit-05-code-converate" target="_blank" rel="noopener noreferrer">jmockit-05-代码覆盖率</a></p><p><a href="https://houbb.github.io/2023/05/09/test-mockito-01-overivew" target="_blank" rel="noopener noreferrer">mockito-01-入门介绍</a></p><p><a href="https://houbb.github.io/2023/05/09/test-mockito-02-springaop" target="_blank" rel="noopener noreferrer">mockito-02-springaop 整合遇到的问题，失效</a></p><h1 id="intro" tabindex="-1"><a class="header-anchor" href="#intro"><span>intro</span></a></h1><p>企业应用程序针对特定的业务领域，通常具有用于多个并发用户的 GUI 和用于许多实体类型的应用程序数据库；</p><p>此外，它通常与组织内部或外部的其他应用程序集成。</p><p>在 Java 中，构建此类应用程序时通常使用 Java EE API 和/或 Spring 框架。</p><p>在本章中，我们描述了一种通过编写容器外集成测试来测试 Java 企业应用程序的方法，其中每个测试都在定义良好的业务场景（也称为“用例”或“使用”场景）中执行单个步骤 ）。</p><p>在典型的分层架构中，此类测试从最高层（通常是应用程序层）的组件调用公共方法，然后向下调用较低层。</p><h1 id="_1-例子" tabindex="-1"><a class="header-anchor" href="#_1-例子"><span>1 例子</span></a></h1><p>为了进行演示，我们将使用 Spring Pet Clinic 示例应用程序的 Java EE 版本。</p><p>完整的代码可以在项目存储库中找到。</p><p>应用程序代码库分为四层：UI 或表示层、应用程序层、领域层和基础设施层。</p><p>该应用程序的域模型（遵循域驱动设计的方法和术语）有六个域实体：Vet（兽医）、Specialty（兽医的专业）、Pet、PetType、Owner（宠物的主人）和 Visit（来自宠物的访问） 宠物及其主人到诊所）。</p><p>除了实体之外，应用程序的域模型（和层）还包括域服务类。</p><p>在这个简单的域中，对于每种实体类型（VetMaintenance、PetMaintenance 等），我们只有一个这样的类。</p><p>在 DDD 中，实体通过“存储库”组件添加到持久存储中、重构或从持久存储中删除。</p><p>鉴于我们使用复杂的 ORM API (JPA)，只有一个这样的存储库，它不是特定于域或应用程序的，因此进入基础设施层：数据库类。</p><p>该应用程序使用关系数据库，特别是示例应用程序中的内存中 HSqlDb 数据库，因此它可以是独立的。</p><p>应用程序层包含应用程序服务类，它将用户输入从 UI 转换为对较低层的调用，并使输出数据可在 UI 中显示。 这是划分数据库事务的层。</p><h2 id="_1-1-使用java-ee" tabindex="-1"><a class="header-anchor" href="#_1-1-使用java-ee"><span>1.1 使用Java EE</span></a></h2><p>在 Java EE 7 中，我们将 JPA 用于域 <code>@Entity</code> 类型，将 EJB（无状态会话 Bean）或简单的 <code>@Transactional</code> 类用于域服务，并使用 JSF <code>@ViewScoped</code> beans 用于应用程序服务。</p><p>UI 层的代码未包含在示例中，因为无论如何集成测试套件都不会执行它。 （在 Java EE 中，该层将由“.xhtml”文件形式的 JSF Facelet 组成。）</p><p>对于我们的第一个集成测试类，让我们考虑兽医屏幕，它只显示所有兽医及其专业的列表。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> VetScreenTest</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">TestUtil</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> VetData</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vetData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SUT</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> VetScreen</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vetScreen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> findVets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Inserts input data (instances of Vet and Specialty) into the database.</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Vet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vet2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> vetData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Helen Leary&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;radiology&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Vet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vet0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> vetData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;James Carter&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Vet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vet1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> vetData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Linda Douglas&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;surgery&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dentistry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      List</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vetsInOrderOfLastName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vet0, vet1, vet2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Exercises the code under test (VetScreen, VetMaintenance, Vet, Specialty).</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      vetScreen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showVetList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      List</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vets</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> vetScreen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getVets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Verifies the output is as expected.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      vets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">retainAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vetsInOrderOfLastName);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vetsInOrderOfLastName, vets); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// checks the contents and ordering of the list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Vet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vetWithSpecialties</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> vets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// this will be &quot;vet1&quot;...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">vetWithSpecialties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getNrOfSpecialties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...which we know has two specialties</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      vetData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">refresh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vetWithSpecialties); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ensures the Vet contains data actually in the db</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      List</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> specialtiesInOrderOfName</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> vetWithSpecialties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSpecialties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dentistry&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">specialtiesInOrderOfName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// checks that specialties...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;surgery&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">specialtiesInOrderOfName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...are in the correct order</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的测试中首先要注意的是，它从应用程序的最顶层开始，该层是用 Java 编写的，因此完全在 JVM 中运行：应用程序层。</p><p>因此，测试不关心任何 HTTP 请求和响应，也不关心应用程序 URL 如何映射到应用程序层中的组件； 这些细节因 UI 实现所使用的技术（JSF、JSP、Struts、GWT、Spring MVC 等）而异，并且被视为超出了集成测试的范围。</p><p>第二件事要注意的是测试代码非常干净并且专注于它要测试的内容。 它完全根据应用程序及其业务领域编写，没有部署、数据库配置或事务等低级问题。</p><p>最后，第三件需要注意的事情是测试类中根本没有出现 JMockit API。</p><p>我们所拥有的只是使用 <code>@TestUtil</code> 和 <code>@SUT</code> 注释。 这些是用户定义的注释，可以根据团队的喜好选择任意名称。 在我们的示例代码中，它们的定义如下。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FIELD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Tested</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">availableDuringSetup</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> fullyInitialized</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> TestUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// a test utility object</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FIELD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Tested</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">fullyInitialized</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> SUT</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// the System Under Test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，这里我们使用JMockit的@Tested注解作为元注解。</p><p>使用“fullInitialized = true”会导致通过依赖项注入（具体来说，构造函数注入后跟字段注入，如果适用）自动解析测试类的依赖项。</p><p>使用“availableDuringSetup = true”只会导致在执行任何测试设置方法（JUnit 中的 @Before 或 TestNG 中的 @BeforeMethod）之前创建测试对象，这与在每个测试方法之前创建测试对象的默认设置相反 执行，并在任何设置方法之后。</p><p>在第一个示例测试类中，未使用此效果，因此使用“@TestUtil”的唯一好处是记录测试类中字段的意图。</p><p>如测试中所示，VetData 提供了创建测试所需的新测试数据的方法，以及其他实用方法，例如刷新（实体）（强制从数据库中重新加载给定实体的持久状态）。</p><p>顾名思义，测试套件将为每种实体类型提供一个这样的类，只要需要所述类型的持久实例，就可以在一个或多个测试类中使用。</p><h2 id="_1-2-测试基础设施" tabindex="-1"><a class="header-anchor" href="#_1-2-测试基础设施"><span>1.2 测试基础设施</span></a></h2><p>像 VetData 这样的实用程序类如下所示。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> VetData</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestDatabase</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Vet</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fullName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">... </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">specialtyNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">names</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> fullName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Vet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> vet</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Vet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      vet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setFirstName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(names[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      vet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setLastName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(names[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">names</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> specialtyName</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> specialtyNames) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         Specialty</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> specialty</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Specialty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         specialty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(specialtyName);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         vet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSpecialties</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(specialty);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">save</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vet);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vet;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // other &quot;create&quot; methods taking different data items, if needed</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此类很容易编写，因为它们只需使用现有的实体类，以及 TestDatabase 基类的“db”字段中提供的方法。</p><p>这是一个测试基础架构类，可以重用于不同的企业应用程序，只要它们使用 JPA 进行持久性（并使用 JMockit 进行集成测试）。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestDatabase</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PersistenceContext</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EntityManager</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Inject</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Database</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostConstruct</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> beginTransactionIfNotYet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      EntityTransaction</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isActive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreDestroy</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> endTransactionWithRollbackIfStillActive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      EntityTransaction</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> em</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isActive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // Other utility methods: &quot;refresh&quot;, &quot;findOne&quot;, &quot;assertCreated&quot;, etc.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库实用程序类（也可在生产代码中使用）提供比 JPA 的 EntityManager 更易于使用的 API，但其使用是可选的；</p><p>测试可以直接使用“em”字段而不是“db”（当然，如果它受到保护的话）。</p><p>测试数据库类中的 EntityManager em 字段被注入一个根据 META-INF/persistence.xml 文件自动创建的实例，该文件应该存在于测试运行时类路径中（使用时这将进入“src/test”目录） Maven 兼容的项目结构；然后可以在“src/main”下提供该文件的“生产”版本）。</p><p>创建一个默认实体管理器实例，并将其注入到具有 @PersistenceContext 字段的任何测试或生产类（例如数据库类）中。</p><p>如果需要多个数据库，则每个数据库都有一个不同的实体管理器，由该注释的可选“name”属性配置，并在 persistence.xml 文件中具有相应的条目。</p><p>这个基类的另一个重要职责是划分每个测试运行的事务，确保它在测试开始之前存在，并在测试完成后以回滚结束（无论成功或失败）。</p><p>这是可行的，因为 JMockit 在适当的时间执行 @PostConstruct 和 @PreDestroy 方法（来自标准 javax.annotation API，Spring 框架也支持）。</p><p>由于每个“测试数据”对象都是在 @Tested(availableDuringSetup = true) 字段中引入测试类的，因此它会在任何设置或测试方法之前“构造”，并在每个测试完成后“销毁”。</p><h2 id="_1-3-使用spring框架" tabindex="-1"><a class="header-anchor" href="#_1-3-使用spring框架"><span>1.3 使用Spring框架</span></a></h2><p>完全初始化的 @Tested 对象也支持 Spring 特定的注释，例如 @Autowired 和 @Value。</p><p>但是，基于 Spring 的应用程序还可以在各种 BeanFactory 实现类的实例上直接调用 BeanFactory#getBean(...) 方法。</p><p>无论如何获取所述 bean 工厂实例，@Tested 和 @Injectable 对象都可以作为来自 bean 工厂实例的 bean 提供，只需应用mockit.integration.springframework.FakeBeanFactory 伪类，如下所示使用 JUnit。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExampleSpringIntegrationTest</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> applySpringIntegration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FakeBeanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Tested</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DependencyImpl</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Tested</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">fullyInitialized</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ExampleService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> exampleService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> exerciseApplicationCodeWhichLooksUpBeansThroughABeanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // In code under test:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      BeanFactory</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DefaultListableBeanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      ExampleService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ExampleService) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">beanFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;exampleService&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">      Dependency</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> dep</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      assertSame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(exampleService, service);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      assertSame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dependency, dep);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用 bean 工厂 fake 后，如果给定的 bean 名称等于测试的字段名称，则任何 Spring bean 工厂实例上的任何 getBean(String) 调用都将自动返回测试类中字段的测试对象。</p><p>此外，mockit.integration.springframework.TestWebApplicationContext类可以用作org.springframework.web.context.ConfigurableWebApplicationContext实现，它从测试类公开@Tested对象。</p><h1 id="interface-resolution" tabindex="-1"><a class="header-anchor" href="#interface-resolution"><span>Interface resolution</span></a></h1><p>一些应用程序代码库对许多特定于应用程序的实现类使用单独的 Java 接口。</p><p>那么，这些接口是在接收注入依赖项的字段和/或参数中使用的接口。</p><p>因此，当实例化具有基于接口的依赖关系的 @Tested 对象时，需要告知 JMockit 实现这些接口的类。 有两种方法可以做到这一点。</p><p>2.1 显式提供测试对象</p><p>2.2 提供接口解析方法</p><h1 id="_3-方法的权衡" tabindex="-1"><a class="header-anchor" href="#_3-方法的权衡"><span>3 方法的权衡</span></a></h1><p>在这种测试方法中，目标是进行涵盖企业应用程序代码库中所有 Java 代码的集成测试。</p><p>为了避免在 Java 应用程序服务器（例如 Tomcat、Glassfish 或 JBoss Wildfly）内运行代码所固有的困难，这些测试是容器外测试，其中所有代码（生产代码和测试代码）都在同一个服务器中运行。</p><p>测试是针对应用程序最高级别组件的 API 编写的。</p><p>因此，UI 代码不会被执行，因为它通常不是用 Java 语言编写的，而是用特定于技术的模板语言（例如 JSF Facelets、JSP 或 Spring 框架支持的语言）编写的。</p><p>为了练习此类 UI 组件（在 Web 应用程序中通常还包含 JavaScript 代码），我们需要使用 WebDriver 或 HtmlUnit 等测试 API 编写基于 HTTP 请求和响应的功能 UI 测试。 此类测试需要采用容器内方法，这带来了许多实际问题和困难，例如如何/何时启动应用程序服务器、如何部署/重新部署应用程序代码以及如何保持测试彼此隔离 鉴于典型的功能测试经常执行一个或多个数据库事务，其中部分或全部事务通常会被提交。</p><p>相比之下，此处显示的容器外集成测试更加细粒度，通常包含单个事务，该事务始终在测试结束时回滚。</p><p>这种方法使得测试更容易创建、运行更快（特别是启动成本可以忽略不计）并且更不易损坏。</p><p>使用代码覆盖工具也更容易，使用调试器也更容易/更快，因为所有内容都在单个 JVM 实例中运行。</p><p>缺点是 UI 模板中的代码以及客户端 JavaScript 代码不会被此类测试覆盖。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="http://jmockit.github.io/tutorial/EnterpriseApplications.html" target="_blank" rel="noopener noreferrer">http://jmockit.github.io/tutorial/EnterpriseApplications.html</a></p>`,81)]))}const r=s(e,[["render",l]]),d=JSON.parse('{"path":"/posts/test/2023-05-09-test-jmockit-02-test-enterprise.html","title":"test 之 jmockit-02-Testing enterprise applications","lang":"zh-CN","frontmatter":{"title":"test 之 jmockit-02-Testing enterprise applications","date":"2023-05-09T00:00:00.000Z","categories":["Test"],"tags":["junit","test","sh"],"published":true,"description":"拓展阅读 jmockit-01-jmockit 入门使用案例 jmockit-02-概览 jmockit-03-Mocking 模拟 jmockit-04-Faking 伪造 jmockit-05-代码覆盖率 mockito-01-入门介绍 mockito-02-springaop 整合遇到的问题，失效 intro 企业应用程序针对特定的业务领域，通常...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/test/2023-05-09-test-jmockit-02-test-enterprise.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test 之 jmockit-02-Testing enterprise applications"}],["meta",{"property":"og:description","content":"拓展阅读 jmockit-01-jmockit 入门使用案例 jmockit-02-概览 jmockit-03-Mocking 模拟 jmockit-04-Faking 伪造 jmockit-05-代码覆盖率 mockito-01-入门介绍 mockito-02-springaop 整合遇到的问题，失效 intro 企业应用程序针对特定的业务领域，通常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2023-05-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test 之 jmockit-02-Testing enterprise applications\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":9.94,"words":2982},"filePathRelative":"posts/test/2023-05-09-test-jmockit-02-test-enterprise.md","localizedDate":"2023年5月9日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2023/05/09/test-jmockit-00-intro\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">jmockit-01-jmockit 入门使用案例</a></p>\\n<p><a href=\\"https://houbb.github.io/2023/05/09/test-jmockit-01-overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">jmockit-02-概览</a></p>\\n<p><a href=\\"https://houbb.github.io/2023/05/09/test-jmockit-03-mocking\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">jmockit-03-Mocking 模拟</a></p>","autoDesc":true}');export{r as comp,d as data};
