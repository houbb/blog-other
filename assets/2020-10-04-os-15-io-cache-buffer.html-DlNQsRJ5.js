import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,o as t}from"./app-uJE4P3e0.js";const n={};function s(o,p){return t(),e("div",null,p[0]||(p[0]=[i('<h1 id="_1-磁盘高速缓存-disk-cache" tabindex="-1"><a class="header-anchor" href="#_1-磁盘高速缓存-disk-cache"><span>1. 磁盘高速缓存(Disk Cache)</span></a></h1><p>操作系统中使用磁盘高速缓存技术来提高磁盘的I/O速度，对高速缓存复制的访问要比原始数据访问更为高效。</p><p>例如，正在运行的进程的指令既存储在磁盘上，也存储在物理内存上，也被复制到CPU的二级和一级高速缓存中。</p><p>不过，磁盘高速缓存技术不同于通常意义下的介于CPU与内存之间的小容量高速存储器，而是指利用内存中的存储空间来暂存从磁盘中读出的一系列盘块中的信息。</p><p>因此，磁盘高速缓存在逻辑上属于磁盘，物理上则是驻留在内存中的盘块。</p><p>高速缓存在内存中分为两种形式：一种是在内存中开辟一个单独的存储空间作为磁速缓存，大小固定；另一种是把未利用的内存空间作为一个缓沖池，供请求分页系统和磁盘I/O时共享。</p><h1 id="_2-缓冲区-buffer" tabindex="-1"><a class="header-anchor" href="#_2-缓冲区-buffer"><span>2. 缓冲区(Buffer)</span></a></h1><p>在设备管理子系统中，引入缓冲区的目的主要有：</p><ol><li><p>缓和CPU与I/O设备间速度不匹配的矛盾。</p></li><li><p>减少对CPU的中断频率，放宽对CPU中断响应时间的限制。</p></li><li><p>解决基本数据单元大小（即数据粒度）不匹配的问题。</p></li><li><p>提高CPU和I/O设备之间的并行性。</p></li></ol><p>其实现方法有：</p><ol><li><p>釆用硬件缓冲器，但由于成本太高，除一些关键部位外，一般不釆用硬件缓冲器</p></li><li><p>釆用缓冲区（位于内存区域）。</p></li></ol><p>根据系统设置缓冲器的个数，缓冲技术可以分为：</p><h2 id="_1-单缓冲" tabindex="-1"><a class="header-anchor" href="#_1-单缓冲"><span>1) 单缓冲</span></a></h2><p>在设备和处理机之间设置一个缓冲区。设备和处理机交换数据时，先把被交换数据写入缓冲区，然后需要数据的设备或处理机从缓冲区取走数据。</p><p>如图5-5所示，在块设备输入时，假定从磁盘把一块数据输入到缓冲区的时间为T，操作系统将该缓冲区中的数据传送到用户区的时间为M，而CPU对这一块数据处理的时间为 C。</p><p>由于T和C是可以并行的，当T&gt;C时，系统对每一块数据的处理时间为M十T，反之则为M+C，故可把系统对每一块数据的处理时间表示为Max(C, T)+M。</p><ul><li>图5-5 单缓冲工作示意图</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231139_98d996a8_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><h2 id="_2-双缓冲" tabindex="-1"><a class="header-anchor" href="#_2-双缓冲"><span>2) 双缓冲</span></a></h2><p>根据单缓冲的特点，CPU在传送时间M内处于空闲状态，由此引入双缓冲。</p><p>I/O设备输入数据时先装填到缓冲区1，在缓冲区1填满后才开始装填缓冲区2，与此同时处理机可以从缓冲区1中取出数据放入用户进程处理，当缓冲区1中的数据处理完后，若缓冲区2已填满，则处理机又从缓冲区2中取出数据放入用户进程处理，而I/O设备又可以装填缓冲区1。</p><p>双缓冲机制提高了处理机和输入设备的并行操作的程度。</p><p>如图5-6所示，系统处理一块数据的时间可以粗略地认为是MAC(C, T)。</p><p>如果 C T，则可使CPU不必等待设备输入。</p><p>对于字符设备，若釆用行输入方式，则釆用双缓冲可使用户在输入完第一行之后，在CPU执行第一行中的命令的同时，用户可继续向第二缓冲区输入下一行数据。</p><p>而单缓冲情况下则必须等待一行数据被提取完毕才可输入下一行的数据。</p><ul><li>图5-6 双缓冲工作示意图</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231246_f8170494_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>如果两台机器之间通信仅配置了单缓冲，如图5-7(a)所示。那么，它们在任一时刻都只能实现单方向的数据传输。</p><p>例如，只允许把数据从A机传送到B机，或者从B机传送到A 机，而绝不允许双方同时向对方发送数据。</p><p>为了实现双向数据传输，必须在两台机器中都设置两个缓冲区，一个用做发送缓冲区，另一个用做接收缓冲区，如图5-7(b)所示。</p><ul><li>图5-7 双机通信时缓冲区的设置</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231318_3da3855f_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><h2 id="_3-循环缓冲" tabindex="-1"><a class="header-anchor" href="#_3-循环缓冲"><span>3) 循环缓冲</span></a></h2><p>包含多个大小相等的缓冲区，每个缓冲区中有一个链接指针指向下一个缓冲区，最后一个缓冲区指针指向第一个缓冲区，多个缓冲区构成一个环形。</p><p>循环缓冲用于输入/输出时，还需要有两个指针in和out。</p><p>对输入而言，首先要从设备接收数据到缓冲区中，in指针指向可以输入数据的第一个空缓冲区；当运行进程需要数据时，从循环缓冲区中取一个装满数据的缓冲区，并从此缓冲区中提取数据，out指针指向可以提取数据的第一个满缓冲区。输出则正好相反。</p><h2 id="_4-缓冲池" tabindex="-1"><a class="header-anchor" href="#_4-缓冲池"><span>4) 缓冲池</span></a></h2><p>由多个系统公用的缓冲区组成，缓冲区按其使用状况可以形成三个队列：空缓冲队列、装满输入数据的缓冲队列（输入队列）和装满输出数据的缓沖队列（输出队列）。还应具有四种缓冲区：用于收容输入数据的工作缓冲区、用于提取输入数据的工作缓冲区、 用于收容输出数据的工作缓冲区及用于提取输出数据的工作缓冲区，如图5-8所示。</p><ul><li>图5-8 缓冲区的工作方式</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231401_565dd288_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>当输入进程需要输入数据时，便从空缓冲队列的队首摘下一个空缓冲区，把它作为收容输入工作缓冲区，然后把输入数据输入其中，装满后再将它挂到输入队列队尾。</p><p>当计算进程需要输入数据时，便从输入队列取得一个缓冲区作为提取输入工作缓冲区，计算进程从中提取数据，数据用完后再将它挂到空缓冲队列尾。</p><p>当计算进程需要输出数据时，便从空缓冲队列的队首取得一个空缓冲区，作为收容输出工作缓冲区，当其中装满输出数据后，再将它挂到输出队列队尾。</p><p>当要输出时，由输出进程从输出队列中取得一个装满输出数据的缓冲区，作为提取输出工作缓冲区，当数据提取完后，再将它挂到空缓冲队列的队尾。</p><h1 id="_3-高速缓存与缓冲区的对比" tabindex="-1"><a class="header-anchor" href="#_3-高速缓存与缓冲区的对比"><span>3. 高速缓存与缓冲区的对比</span></a></h1><p>高速缓存是可以保存数据拷贝的高速存储器，访问高速缓存比访问原始数据更高效速度更快。其对比见表5-1。</p><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231507_74a5b03d_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><h1 id="输入-输出-i-o-设备分配与回收" tabindex="-1"><a class="header-anchor" href="#输入-输出-i-o-设备分配与回收"><span>输入/输出(I/O)设备分配与回收</span></a></h1><h2 id="_1-设备分配概述" tabindex="-1"><a class="header-anchor" href="#_1-设备分配概述"><span>1. 设备分配概述</span></a></h2><p>设备分配是指根据用户的I/O请求分配所需的设备。分配的总原则是充分发挥设备的使用效率，尽可能地让设备忙碌，又要避免由于不合理的分配方法造成进程死锁。</p><p>从设备的特性来看，釆用下述三种使用方式的设备分别称为独占设备、共享设备和虚拟设备三类。</p><ol><li><p>独占式使用设备。指在申请设备时，如果设备空闲，就将其独占，不再允许其他进程申请使用，一直等到该设备被释放才允许其他进程申请使用。例如，打印机，在使用它打印时，只能独占式使用，否则在同一张纸上交替打印不同任务的内容，无法正常阅读。</p></li><li><p>分时式共享使用设备。独占式使用设备时，设备利用率很低，当设备没有独占使用的要求时，可以通过分时共享使用，提高利用率。例如，对磁盘设备的I/O操作，各进程的每次I/O操作请求可以通过分时来交替进行。</p></li><li><p>以SPOOLing方式使用外部设备。SPOOLing技术是在批处理操作系统时代引入的，即假脱机I/O技术。这种技术用于对设备的操作，实质上就是对I/O操作进行批处理。</p></li></ol><h2 id="_2-设备分配的数据结构" tabindex="-1"><a class="header-anchor" href="#_2-设备分配的数据结构"><span>2. 设备分配的数据结构</span></a></h2><p>设备分配依据的主要数据结构有设备控制表(DCT)、控制器控制表(COCT)、通道控制表(CHCT)和系统设备表(SDT)，各数据结构功能如下：</p><p>设备控制表DCT：系统为每一个设备配置一张DCT,如图5-9所示。</p><p>它用于记录设备的特性以及与I/O控制器连接的情况。DCT包括设备标识符、设备类型、设备状态、指向控制器控制表COCT的指针等。</p><p>其中，设备状态指示设备是忙还是空闲，设备队列指针指向等待使用该设备的进程组成的等待队列，控制表指针指向与该设备相连接的设备控制器。</p><ul><li>图5-9设备控制表</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231631_df426d3a_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>控制器控制表COCT：每个控制器都配有一张COCT，如图5-10a所示。它反映设备控制器的使用状态以及和通道的连接情况等。</p><p>通道控制表CHCT：每个通道配有一张CHCT，如图5-10b所示。</p><p>系统设备表SDT：整个系统只有一张SDT，如图5-10c所示。它记录已连接到系统中的所有物理设备的情况，每个物理设备占一个表目。</p><ul><li>图 5-10 COCT、CHCT 和 SDT</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231657_5cad220e_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><p>由于在多道程序系统中，进程数多于资源数，会引起资源的竞争。因此，要有一套合理的分配原则，主要考虑的因素有：I/O设备的固有属性，I/O设备的分配算法，设备分配的安全性以及设备独立性。</p><h1 id="_3-设备分配的策略" tabindex="-1"><a class="header-anchor" href="#_3-设备分配的策略"><span>3. 设备分配的策略</span></a></h1><ol><li><p>设备分配原则：设备分配应根据设备特性、用户要求和系统配置情况。分配的总原则既要充分发挥设备的使用效率，又要避免造成进程死锁，还要将用户程序和具体设备隔离开。</p></li><li><p>设备分配方式：设备分配方式有静态分配和动态分配两种。</p></li></ol><p>静态分配主要用于对独占设备的分配，它在用户作业开始执行前，由系统一次性分配该作业所要求的全部设备、控制器（和通道)。一旦分配后，这些设备、控制器（和通道）就一直为该作业所占用，直到该作业被撤销。静态分配方式不会出现死锁，但设备的使用效率低。因此，静态分配方式弁不符合分配的总原则。</p><p>动态分配是在进程执行过程中根据执行需要进行。当进程需要设备时，通过系统调用命令向系统提出设备请求，由系统按照事先规定的策略给进程分配所需要的设备、I/O控制器，一旦用完之后，便立即释放。动态分配方式有利于提高设备的利用率，但如果分配算法使用不当，则有可能造成进程死锁。</p><ol start="3"><li>设备分配算法：常用的动态设备分配算法有先请求先分配、优先级高者优先等。</li></ol><p>对于独占设备，既可以釆用动态分配方式也可以静态分配方式，往往釆用静态分配方式，即在作业执行前，将作业所要用的这一类设备分配给它。共享设备可被多个进程所共享，一般釆用动态分配方式，但在每个I/O传输的单位时间内只被一个进程所占有，通常釆用先请求先分配和优先级高者先分的分配算法。</p><h1 id="_4-设备分配的安全性" tabindex="-1"><a class="header-anchor" href="#_4-设备分配的安全性"><span>4. 设备分配的安全性</span></a></h1><p>设备分配的安全性是指设备分配中应防止发生进程死锁。</p><ol><li><p>安全分配方式：每当进程发出I/O请求后便进入阻塞状态，直到其I/O操作完成时才被唤醒。这样，一旦进程已经获得某种设备后便阻塞，不能再请求任何资源，而且在它阻塞时也不保持任何资源。i点是设备分配安全；缺点是CPU和I/O设备是串行工作的（对同一进程而言)。</p></li><li><p>不安全分配方式：进程在发出I/O请求后继续运行，需要时又发出第二个、第三个 I/O请求等。仅当进程所请求的设备已被另一进程占用时，才进入阻塞状态。优点是一个进程可同时操作多个设备，从而使进程推进迅速；缺点是这种设备分配有可能产生死锁。</p></li></ol><h1 id="_5-逻辑设备名到物理设备名的映射" tabindex="-1"><a class="header-anchor" href="#_5-逻辑设备名到物理设备名的映射"><span>5. 逻辑设备名到物理设备名的映射</span></a></h1><p>为了提高设备分配的灵活性和设备的利用率、方便实现I/O重定向，因此引入了设备独立性。设备独立性是指应用程序独立于具体使用的物理设备。</p><p>为了实现设备独立性，在应用程序中使用逻辑设备名来请求使用某类设备，在系统中设置一张逻辑设备表(Logical Unit Table, LUT)，用于将逻辑设备名映射为物理设备名。</p><p>LUT 表项包括逻辑设备名、物理设备名和设备驱动程序入口地址；当进程用逻辑设备名来请求分配设备时，系统为它分配相应的物理设备，并在LUT中建立一个表项，以后进程再利用逻辑设备名请求I/0操作时，系统通过查找LUT来寻找相应的物理设备和驱动程序。</p><p>在系统中可釆取两种方式建立逻辑设备表：</p><p>在整个系统中只设置一张LUT。这样，所有进程的设备分配情况都记录在这张表中，故不允许有相同的逻辑设备名，主要适用于单用户系统中。</p><p>为每个用户设置一张LUT。当用户登录时，系统便为该用户建立一个进程，同时也为之建立一张LUT，并将该表放入进程的PCB中。</p><h1 id="spooling技术-假脱机技术" tabindex="-1"><a class="header-anchor" href="#spooling技术-假脱机技术"><span>SPOOLing技术(假脱机技术)</span></a></h1><p>为了缓和CPU的高速性与I/O设备低速性之间的矛盾而引入了脱机输入/输出技术。</p><p>该技术是利用专门的外围控制机，将低速I/O设备上的数据传送到高速磁盘上；或者相反。</p><p>SPOOLing的意思是外部设备同时联机操作，又称为假脱机输入/输出操作，是操作系统中釆用的一项将独占设备改造成共享设备的技术。</p><p>SPOOLing系统组成如图5-11所示。</p><h2 id="输入井和输出井" tabindex="-1"><a class="header-anchor" href="#输入井和输出井"><span>输入井和输出井</span></a></h2><p>在磁盘上开辟出的两个存储区域。输入井模拟脱机输入时的磁盘，用于收容I/O设备输入的数据。</p><p>输出井模拟脱机输出时的磁盘，用于收容用户程序的输出数据。</p><ul><li>图5-11 SPOOLing系统的组成</li></ul><figure><img src="https://images.gitee.com/uploads/images/2020/1006/231916_f84b518b_508704.png" alt="输入图片说明" tabindex="0" loading="lazy"><figcaption>屏幕截图.png</figcaption></figure><h2 id="输入缓冲区和输出缓冲区" tabindex="-1"><a class="header-anchor" href="#输入缓冲区和输出缓冲区"><span>输入缓冲区和输出缓冲区</span></a></h2><p>在内存中开辟的两个缓冲区。输入缓冲区用于暂存由输入设备送来的数据，以后再传送 到输入井。输出缓冲区用于暂存从输出井送来的数据，以后再传送到输出设备。</p><h2 id="输入进程和输出进程" tabindex="-1"><a class="header-anchor" href="#输入进程和输出进程"><span>输入进程和输出进程</span></a></h2><p>输入进程模拟脱机输入时的外围控制机，将用户要求的数据从输入机通过输入缓冲区再送到输入井。</p><p>当CPU需要输入数据时，直接将数据从输入井读入内存。输出进程模拟脱机 输出时的外围控制机，把用户要求输出的数据先从内存送到输出并，待输出设备空闲时，再将输出井中的数据经过输出缓冲区送到输出设备。</p><p>共享打印机是使用SPOOLing技术的一个实例，这项技术已被广泛地用于多用户系统和局域网络中。</p><p>当用户进程请求打印输出时，SPOOLing系统同意为它打印输出，但并不真正立即把打印机分配给该用户进程，而只为它做两件事：</p><ol><li><p>由输出进程在输出井中为之申请一个空闲磁盘块区，并将要打印的数据送入其中。</p></li><li><p>输出进程再为用户进程申请一张空白的用户请求打印表，并将用户的打印要求填入 其中，再将该表挂到请求打印队列上。</p></li></ol><p>SPOOLing系统的主要特点有：提高了 I/O的速度；将独占设备改造为共享设备；实现了虚拟设备功能。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="http://c.biancheng.net/cpp/html/2579.html" target="_blank" rel="noopener noreferrer">操作系统的基本概念</a></p><p><a href="https://lgwain.gitbooks.io/os/content/unit11.html" target="_blank" rel="noopener noreferrer">https://lgwain.gitbooks.io/os/content/unit11.html</a></p>',104)]))}const r=a(n,[["render",s]]),c=JSON.parse('{"path":"/posts/OS/2020-10-04-os-15-io-cache-buffer.html","title":"操作系统学习(15)IO 缓存和 buffer","lang":"zh-CN","frontmatter":{"title":"操作系统学习(15)IO 缓存和 buffer","date":"2020-10-04T00:00:00.000Z","categories":["OS"],"tags":["os","file","sf"],"published":true,"description":"1. 磁盘高速缓存(Disk Cache) 操作系统中使用磁盘高速缓存技术来提高磁盘的I/O速度，对高速缓存复制的访问要比原始数据访问更为高效。 例如，正在运行的进程的指令既存储在磁盘上，也存储在物理内存上，也被复制到CPU的二级和一级高速缓存中。 不过，磁盘高速缓存技术不同于通常意义下的介于CPU与内存之间的小容量高速存储器，而是指利用内存中的存储空...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/OS/2020-10-04-os-15-io-cache-buffer.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"操作系统学习(15)IO 缓存和 buffer"}],["meta",{"property":"og:description","content":"1. 磁盘高速缓存(Disk Cache) 操作系统中使用磁盘高速缓存技术来提高磁盘的I/O速度，对高速缓存复制的访问要比原始数据访问更为高效。 例如，正在运行的进程的指令既存储在磁盘上，也存储在物理内存上，也被复制到CPU的二级和一级高速缓存中。 不过，磁盘高速缓存技术不同于通常意义下的介于CPU与内存之间的小容量高速存储器，而是指利用内存中的存储空..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images.gitee.com/uploads/images/2020/1006/231139_98d996a8_508704.png \\"屏幕截图.png\\""}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"os"}],["meta",{"property":"article:tag","content":"file"}],["meta",{"property":"article:tag","content":"sf"}],["meta",{"property":"article:published_time","content":"2020-10-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统学习(15)IO 缓存和 buffer\\",\\"image\\":[\\"https://images.gitee.com/uploads/images/2020/1006/231139_98d996a8_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231246_f8170494_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231318_3da3855f_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231401_565dd288_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231507_74a5b03d_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231631_df426d3a_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231657_5cad220e_508704.png \\\\\\"屏幕截图.png\\\\\\"\\",\\"https://images.gitee.com/uploads/images/2020/1006/231916_f84b518b_508704.png \\\\\\"屏幕截图.png\\\\\\"\\"],\\"datePublished\\":\\"2020-10-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":15.08,"words":4525},"filePathRelative":"posts/OS/2020-10-04-os-15-io-cache-buffer.md","localizedDate":"2020年10月4日","excerpt":"\\n<p>操作系统中使用磁盘高速缓存技术来提高磁盘的I/O速度，对高速缓存复制的访问要比原始数据访问更为高效。</p>\\n<p>例如，正在运行的进程的指令既存储在磁盘上，也存储在物理内存上，也被复制到CPU的二级和一级高速缓存中。</p>\\n<p>不过，磁盘高速缓存技术不同于通常意义下的介于CPU与内存之间的小容量高速存储器，而是指利用内存中的存储空间来暂存从磁盘中读出的一系列盘块中的信息。</p>\\n<p>因此，磁盘高速缓存在逻辑上属于磁盘，物理上则是驻留在内存中的盘块。</p>\\n<p>高速缓存在内存中分为两种形式：一种是在内存中开辟一个单独的存储空间作为磁速缓存，大小固定；另一种是把未利用的内存空间作为一个缓沖池，供请求分页系统和磁盘I/O时共享。</p>","autoDesc":true}');export{r as comp,c as data};
