import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-uJE4P3e0.js";const e={};function l(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="python-中的接口问题" tabindex="-1"><a class="header-anchor" href="#python-中的接口问题"><span>Python 中的接口问题</span></a></h1><p>作为习惯了 java 语言的开发者来说，我首先想到的是，python 有接口吗？</p><p>然后查了一下。大部分的解答如下：</p><ol><li><p>没有。在Python中没必要使用类似Java的interface。因为Python里有多继承和使用鸭子类型。</p></li><li><p>在Python中，协议就是接口。例如上下文管理协议，只要实现了对应的<code>__enter__</code>, <code>__exit__</code>方法就实现了这个上下文管理协议。</p></li><li><p>Java中的接口是抽象类的特殊情况，抽象类：对一类事物的抽象。接口：对某一行为抽象。Java中的接口里面全部都是抽象方法。</p></li><li><p>在Python中，可以用抽象类实现接口</p></li></ol><h1 id="python-vs-java-接口" tabindex="-1"><a class="header-anchor" href="#python-vs-java-接口"><span>Python VS Java 接口</span></a></h1><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h2><p>Java里的Interface是一种特殊的类. 要兼容某种协议, 就要implements相应的interface.</p><p>例如, 序列化协议Serializable, 比较/排序协议Comparable.</p><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h2><p>而在Python里, 不是通过implements接口类来兼容特定协议, 而是只需通过实现特定的方法.</p><p>例如, 只需要实现 <code>__getitem__</code> 方法, 就可以支持索引操作: obj[idx], 实现 <code>__hash__</code> 方法就可以支持Hash操作.</p><p>用Fluent Python里的话来讲, 要判断一个动物是不是鸭子, Java看的是它的血统: 是否实现了鸭子接口, 是一个鸭子实例； Python则是看它的行为: 是否像鸭子一样走路, 一样叫发声.</p><p>Java是静态类型语言, 在编译时就可以通过类型检查知道某调用是否合法, 例如是否可序列化。</p><p>Python是动态类型语言, 加上可在运行时给Object/Class动态添加方法/属性(即Monkey Patching), 在运行时才能知道调用是否合法.</p><h1 id="基于-abc-实现抽象类的例子" tabindex="-1"><a class="header-anchor" href="#基于-abc-实现抽象类的例子"><span>基于 ABC 实现抽象类的例子</span></a></h1><ul><li><a href="http://Payment.py" target="_blank" rel="noopener noreferrer">Payment.py</a></li></ul><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">desc: 支付接口测试</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">author: binbin.hou</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> abc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> abstractmethod, ABCMeta</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Payment</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">metaclass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ABCMeta</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&#39;&#39;&#39;支付接口：该类定义为抽象类/接口类&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	@abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		pass</span><span style="--shiki-light:#000000;--shiki-dark:#FFFFFF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AliPay</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Payment</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&#39;&#39;&#39;支付宝实现&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">		print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Ali pay &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, amount, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; 金额&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WeChat</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Payment</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">	&#39;&#39;&#39;微信实现&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">		print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;WeChat pay &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, amount, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; 金额&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;测试代码&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ali </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> AliPay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">weChat </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> WeChat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ali.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">weChat.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>日志信息</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$   python Payment.py</span></span>
<span class="line"><span>Ali pay  100  金额</span></span>
<span class="line"><span>WeChat pay  100  金额</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="拓展学习" tabindex="-1"><a class="header-anchor" href="#拓展学习"><span>拓展学习</span></a></h1><p>IOC-控制反转</p><p>ABC-抽象基础类</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><ul><li>接口相关信息</li></ul><p><a href="https://www.cnblogs.com/gaoshengyue/p/7552557.html" target="_blank" rel="noopener noreferrer">python--面向对象—接口</a></p><p><a href="https://www.cnblogs.com/allen2333/p/9092580.html" target="_blank" rel="noopener noreferrer">Python - python里有类似Java的接口(interface)吗？</a></p><p><a href="https://www.cnblogs.com/hester/p/8304932.html" target="_blank" rel="noopener noreferrer">python之接口</a></p><p><a href="https://blog.csdn.net/weixin_35653315/article/details/78106404" target="_blank" rel="noopener noreferrer">Python中的接口</a></p>`,28)]))}const r=i(e,[["render",l]]),d=JSON.parse('{"path":"/posts/Lang/2018-02-14-python-14-class-interface-14.html","title":"Python-14-class 类的接口","lang":"zh-CN","frontmatter":{"title":"Python-14-class 类的接口","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","class","sh"],"published":true,"description":"Python 中的接口问题 作为习惯了 java 语言的开发者来说，我首先想到的是，python 有接口吗？ 然后查了一下。大部分的解答如下： 没有。在Python中没必要使用类似Java的interface。因为Python里有多继承和使用鸭子类型。 在Python中，协议就是接口。例如上下文管理协议，只要实现了对应的__enter__, __exi...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2018-02-14-python-14-class-interface-14.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python-14-class 类的接口"}],["meta",{"property":"og:description","content":"Python 中的接口问题 作为习惯了 java 语言的开发者来说，我首先想到的是，python 有接口吗？ 然后查了一下。大部分的解答如下： 没有。在Python中没必要使用类似Java的interface。因为Python里有多继承和使用鸭子类型。 在Python中，协议就是接口。例如上下文管理协议，只要实现了对应的__enter__, __exi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"class"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python-14-class 类的接口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.17,"words":650},"filePathRelative":"posts/Lang/2018-02-14-python-14-class-interface-14.md","localizedDate":"2018年2月14日","excerpt":"\\n<p>作为习惯了 java 语言的开发者来说，我首先想到的是，python 有接口吗？</p>\\n<p>然后查了一下。大部分的解答如下：</p>\\n<ol>\\n<li>\\n<p>没有。在Python中没必要使用类似Java的interface。因为Python里有多继承和使用鸭子类型。</p>\\n</li>\\n<li>\\n<p>在Python中，协议就是接口。例如上下文管理协议，只要实现了对应的<code>__enter__</code>, <code>__exit__</code>方法就实现了这个上下文管理协议。</p>\\n</li>\\n<li>\\n<p>Java中的接口是抽象类的特殊情况，抽象类：对一类事物的抽象。接口：对某一行为抽象。Java中的接口里面全部都是抽象方法。</p>\\n</li>\\n<li>\\n<p>在Python中，可以用抽象类实现接口</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
