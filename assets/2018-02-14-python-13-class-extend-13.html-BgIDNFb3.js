import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-CEDSurVN.js";const t={};function l(p,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="类的继承" tabindex="-1"><a class="header-anchor" href="#类的继承"><span>类的继承</span></a></h1><p>当然，如果不支持继承，语言特性就不值得称为“类”。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p>派生类定义的语法如下所示:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DerivedClassName</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BaseClassName</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>名称 BaseClassName 必须定义于包含派生类定义的作用域中。</p><h3 id="基类在其他模块" tabindex="-1"><a class="header-anchor" href="#基类在其他模块"><span>基类在其他模块</span></a></h3><p>也允许用其他任意表达式代替基类名称所在的位置。</p><p>这有时也可能会用得上，例如，当基类定义在另一个模块中的时候:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DerivedClassName</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">modname</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BaseClassName</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>派生类定义的执行过程与基类相同。</p><p>当构造类对象时，基类会被记住。</p><p>此信息将被用来解析属性引用：如果请求的属性在类中找不到，搜索将转往基类中进行查找。</p><p>如果基类本身也派生自其他某个类，则此规则将被递归地应用。</p><p>派生类的实例化没有任何特殊之处: DerivedClassName() 会创建该类的一个新实例。</p><h2 id="方法引用解析方式" tabindex="-1"><a class="header-anchor" href="#方法引用解析方式"><span>方法引用解析方式</span></a></h2><p>方法引用将按以下方式解析：搜索相应的类属性，如有必要将按基类继承链逐步向下查找，如果产生了一个函数对象则方法引用就生效。</p><p>派生类可能会重载其基类的方法。</p><p>因为方法在调用同一对象的其他方法时没有特殊权限，调用同一基类中定义的另一方法的基类方法最终可能会调用覆盖它的派生类的方法。</p><p>（对 C++ 程序员的提示：Python 中所有的方法实际上都是 virtual 方法。）</p><p>在派生类中的重载方法实际上可能想要扩展而非简单地替换同名的基类方法。</p><p>有一种方式可以简单地直接调用基类方法：即调用 BaseClassName.methodname(self, arguments)。</p><p>有时这对客户端来说也是有用的。</p><p>（请注意仅当此基类可在全局作用域中以 BaseClassName 的名称被访问时方可使用此方式。）</p><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h2><p>Python有两个内置函数可被用于继承机制：</p><p>使用 isinstance() 来检查一个实例的类型: isinstance(obj, int) 仅会在 <code>obj.__class__</code> 为 int 或某个派生自 int 的类时为 True。</p><p>使用 issubclass() 来检查类的继承关系: issubclass(bool, int) 为 True，因为 bool 是 int 的子类。 但是，issubclass(float, int) 为 False，因为 float 不是 int 的子类。</p><h1 id="多重继承" tabindex="-1"><a class="header-anchor" href="#多重继承"><span>多重继承</span></a></h1><p>Python也支持多重继承的形式。 具有多个基类的类定义如下所示：</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DerivedClassName</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Base1</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Base2</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Base3</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多数应用来说，在最简单的情况下，你可以认为搜索从父类所继承属性的操作是深度优先、从左至右的，当层次结构中存在重叠时不会在同一个类中搜索两次。</p><p>因此，如果某一属性在 DerivedClassName 中未找到，则会到 Base1 中搜索它，然后（递归地）到 Base1 的基类中搜索，如果在那里未找到，再到 Base2 中搜索，依此类推。</p><p>真实情况比这个更复杂一些；方法解析顺序会动态改变以支持对 super() 的协同调用。</p><p>这种方式在某些其他多重继承型语言中被称为后续方法调用，它比单继承型语言中的 super 调用更强大。</p><p>动态改变顺序是有必要的，因为所有多重继承的情况都会显示出一个或更多的菱形关联（即至少有一个父类可通过多条路径被最底层类所访问）。</p><p>例如，所有类都是继承自 object，因此任何多重继承的情况都提供了一条以上的路径可以通向 object。</p><p>为了确保基类不会被访问一次以上，动态算法会用一种特殊方式将搜索顺序线性化， 保留每个类所指定的从左至右的顺序，只调用每个父类一次，并且保持单调（即一个类可以被子类化而不影响其父类的优先顺序）。</p><p>总而言之，这些特性使得设计具有多重继承的可靠且可扩展的类成为可能。</p><p>要了解更多细节，请参阅 <a href="https://www.python.org/download/releases/2.3/mro/%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.python.org/download/releases/2.3/mro/。</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/zh-cn/3/tutorial/classes.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/zh-cn/3/tutorial/classes.html</a></p>`,42)]))}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/posts/Lang/2018-02-14-python-13-class-extend-13.html","title":"Python-13-class 类的继承","lang":"zh-CN","frontmatter":{"title":"Python-13-class 类的继承","date":"2018-02-14T00:00:00.000Z","categories":["Lang"],"tags":["python","lang","class","sh"],"published":true,"description":"类的继承 当然，如果不支持继承，语言特性就不值得称为“类”。 语法 派生类定义的语法如下所示: 名称 BaseClassName 必须定义于包含派生类定义的作用域中。 基类在其他模块 也允许用其他任意表达式代替基类名称所在的位置。 这有时也可能会用得上，例如，当基类定义在另一个模块中的时候: 派生类定义的执行过程与基类相同。 当构造类对象时，基类会被记...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/Lang/2018-02-14-python-13-class-extend-13.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Python-13-class 类的继承"}],["meta",{"property":"og:description","content":"类的继承 当然，如果不支持继承，语言特性就不值得称为“类”。 语法 派生类定义的语法如下所示: 名称 BaseClassName 必须定义于包含派生类定义的作用域中。 基类在其他模块 也允许用其他任意表达式代替基类名称所在的位置。 这有时也可能会用得上，例如，当基类定义在另一个模块中的时候: 派生类定义的执行过程与基类相同。 当构造类对象时，基类会被记..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"class"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python-13-class 类的继承\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":3.67,"words":1100},"filePathRelative":"posts/Lang/2018-02-14-python-13-class-extend-13.md","localizedDate":"2018年2月14日","excerpt":"\\n<p>当然，如果不支持继承，语言特性就不值得称为“类”。</p>\\n<h2>语法</h2>\\n<p>派生类定义的语法如下所示:</p>\\n<div class=\\"language-py line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"py\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> DerivedClassName</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">BaseClassName</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\\">)</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    .</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    .</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    .</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,k as data};
