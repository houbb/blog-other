import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a,o as n}from"./app-uJE4P3e0.js";const l={};function o(d,i){return n(),s("div",null,i[0]||(i[0]=[a(`<h1 id="编译并安装应用程序" tabindex="-1"><a class="header-anchor" href="#编译并安装应用程序"><span>编译并安装应用程序</span></a></h1><p>在最后一个主题中，您将学习一些新的 go 命令。</p><p>虽然 go run 命令是在频繁更改时编译和运行程序的有用快捷方式，但它不会生成二进制可执行文件。</p><p>本主题介绍了两个用于构建代码的附加命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>go build 命令编译包及其依赖项，但不会安装结果。</span></span>
<span class="line"><span>go install 命令编译并安装软件包。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="go-build" tabindex="-1"><a class="header-anchor" href="#go-build"><span>go build</span></a></h1><h2 id="介绍一下-go-build-命令" tabindex="-1"><a class="header-anchor" href="#介绍一下-go-build-命令"><span>介绍一下 go build 命令</span></a></h2><p><code>go build</code> 是 Go 编程语言中的一个命令行工具，用于编译源代码文件生成可执行程序或库文件。</p><p>它是 Go 语言标准库中提供的一个重要命令，用于将 Go 代码编译成计算机可以执行的二进制文件。</p><p>下面是一些关于 <code>go build</code> 命令的重要信息：</p><ol><li><p><strong>基本用法：</strong> 在命令行中，进入包含源代码文件的目录，并执行 <code>go build</code> 命令。默认情况下，它会编译当前目录中的所有 <code>.go</code> 文件，并生成一个可执行文件，文件名与目录名相同。</p></li><li><p><strong>生成可执行文件：</strong> 如果你想生成一个可执行文件，只需执行 <code>go build</code>，它会将代码编译成一个二进制文件。例如，如果你有一个名为 <code>main.go</code> 的源代码文件，那么执行 <code>go build</code> 会生成一个名为 <code>main</code>（或者是你当前目录的名字）的可执行文件。</p></li><li><p><strong>指定输出文件名：</strong> 你可以通过使用 <code>-o</code> 标志来指定生成的可执行文件的名称。例如，执行 <code>go build -o myapp</code> 将生成一个名为 <code>myapp</code> 的可执行文件。</p></li><li><p><strong>编译为库文件：</strong> 除了生成可执行文件，<code>go build</code> 也可以用于编译为库文件（也称为包）。在这种情况下，它不会生成可执行文件，而是生成一个 <code>.a</code> 文件（archive 文件），用于其他程序引用。你可以在 <code>go build</code> 后面加上目标包的导入路径来编译为库文件。</p></li><li><p><strong>交叉编译：</strong> 使用 <code>go build</code>，你还可以进行交叉编译，即在一个平台上编译生成另一个平台的可执行文件。你可以通过设置 <code>GOOS</code> 和 <code>GOARCH</code> 环境变量来指定目标平台。例如，要在 Windows 上编译一个 Linux 可执行文件，可以执行类似以下的命令：<code>GOOS=linux GOARCH=amd64 go build</code>.</p></li><li><p><strong>编译标签：</strong> 通过在代码中使用特定的编译标签，你可以根据不同的条件来选择性地编译部分代码。例如，你可以使用 <code>// +build</code> 注释来指定只在特定平台或环境下编译某部分代码。</p></li></ol><p>总之，<code>go build</code> 是一个非常实用的命令，用于将 Go 代码编译成可执行文件或库文件。</p><p>它的灵活性和强大功能使得开发者可以轻松地构建和部署他们的 Go 项目。</p><h2 id="测试验证" tabindex="-1"><a class="header-anchor" href="#测试验证"><span>测试验证</span></a></h2><p>执行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ go build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行后</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ ls</span></span>
<span class="line"><span>go.mod  hello.exe*  hello.go</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令行执行 hello.exe</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ hello.exe</span></span>
<span class="line"><span>map[Darrin:Hi, Darrin. Welcome! Gladys:Great to see you, Gladys! Samantha:Hail, Samantha! Well met!]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="go-install" tabindex="-1"><a class="header-anchor" href="#go-install"><span>go install</span></a></h1><h2 id="介绍一下-go-install" tabindex="-1"><a class="header-anchor" href="#介绍一下-go-install"><span>介绍一下 go install</span></a></h2><p><code>go install</code> 是 Go 编程语言中的一个命令行工具，用于编译并安装源代码文件，生成可执行程序或库文件，并将其安装到 Go 语言的工作环境中。</p><p>这个命令可以帮助你在 <code>$GOPATH/bin</code> 目录下生成可执行文件，或在 <code>$GOPATH/pkg</code> 目录下生成库文件，使得这些文件可以在任何地方被调用。</p><p>以下是关于 <code>go install</code> 命令的一些重要信息：</p><ol><li><p><strong>基本用法：</strong> 在命令行中，执行 <code>go install</code> 命令时，它会编译当前目录中的所有 <code>.go</code> 文件，并将生成的可执行文件或库文件安装到 <code>$GOPATH/bin</code> 或 <code>$GOPATH/pkg</code> 目录中，取决于是生成可执行文件还是库文件。</p></li><li><p><strong>生成可执行文件：</strong> 当你在源代码目录中执行 <code>go install</code> 命令时，它会将编译后的可执行文件生成在 <code>$GOPATH/bin</code> 目录下。可执行文件的名称与源代码目录的名称相同，例如如果你有一个名为 <code>main.go</code> 的文件，那么生成的可执行文件将是 <code>main</code>。</p></li><li><p><strong>生成库文件：</strong> 如果你要生成库文件，可以在 <code>go install</code> 后面加上目标包的导入路径。生成的库文件会被放置在 <code>$GOPATH/pkg</code> 目录下，方便其他程序引用。</p></li><li><p><strong>指定输出目录：</strong> 你可以使用 <code>-o</code> 标志来指定可执行文件或库文件的输出目录。例如，执行 <code>go install -o /path/to/output</code> 会将生成的文件放置在指定目录下。</p></li><li><p><strong>交叉编译和交叉安装：</strong> 类似于 <code>go build</code>，你也可以使用 <code>GOOS</code> 和 <code>GOARCH</code> 环境变量来进行交叉编译和交叉安装。例如，要在 Windows 上安装一个 Linux 可执行文件，可以执行类似以下的命令：<code>GOOS=linux GOARCH=amd64 go install</code>.</p></li></ol><p>总之，<code>go install</code> 是一个方便的命令，用于编译并安装源代码，将生成的可执行文件或库文件放置在 Go 工作环境中，以便于在项目中引用和使用。它是构建和部署 Go 项目的重要工具之一。</p><h2 id="给一个-go-install-实际的例子" tabindex="-1"><a class="header-anchor" href="#给一个-go-install-实际的例子"><span>给一个 go install 实际的例子</span></a></h2><p>当你使用 <code>go install</code> 命令时，它会将生成的可执行文件安装到 <code>$GOPATH/bin</code> 目录中。下面是一个简单的示例，演示如何使用 <code>go install</code> 编译并安装一个 Go 程序：</p><p>假设你有以下的源代码文件：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// main.go</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>在命令行中，进入包含 <code>main.go</code> 文件的目录。</p></li><li><p>执行以下命令：</p></li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">go</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li><p>如果你的 <code>$GOPATH</code> 设置为 <code>/home/user/go</code>，那么生成的可执行文件将被安装在 <code>/home/user/go/bin</code> 目录下。</p></li><li><p>然后你可以在命令行中直接运行生成的可执行文件：</p></li></ol><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$GOPATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/bin/main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出应该是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Hello, world!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个示例演示了如何使用 <code>go install</code> 命令将一个简单的 Go 程序编译并安装到工作环境中。通过执行这个命令，你可以将生成的可执行文件保存在 <code>$GOPATH/bin</code> 目录中，以便在任何地方直接调用。</p><h1 id="todo" tabindex="-1"><a class="header-anchor" href="#todo"><span>TODO</span></a></h1><blockquote><p><a href="https://go.dev/doc/tutorial/" target="_blank" rel="noopener noreferrer">继续学习</a></p></blockquote><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://go.dev/doc/tutorial/add-a-test" target="_blank" rel="noopener noreferrer">https://go.dev/doc/tutorial/add-a-test</a></p>`,42)]))}const p=e(l,[["render",o]]),c=JSON.parse('{"path":"/posts/Lang/2018-09-07-lang-go-08-compile-and-run.html","title":"Go Lang-08-compile and run 编译并安装应用程序","lang":"zh-CN","frontmatter":{"title":"Go Lang-08-compile and run 编译并安装应用程序","date":"2018-09-07T00:00:00.000Z","categories":["Lang"],"tags":["go","lang","sh"],"published":true,"description":"编译并安装应用程序 在最后一个主题中，您将学习一些新的 go 命令。 虽然 go run 命令是在频繁更改时编译和运行程序的有用快捷方式，但它不会生成二进制可执行文件。 本主题介绍了两个用于构建代码的附加命令： go build 介绍一下 go build 命令 go build 是 Go 编程语言中的一个命令行工具，用于编译源代码文件生成可执行程序或...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2018-09-07-lang-go-08-compile-and-run.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Go Lang-08-compile and run 编译并安装应用程序"}],["meta",{"property":"og:description","content":"编译并安装应用程序 在最后一个主题中，您将学习一些新的 go 命令。 虽然 go run 命令是在频繁更改时编译和运行程序的有用快捷方式，但它不会生成二进制可执行文件。 本主题介绍了两个用于构建代码的附加命令： go build 介绍一下 go build 命令 go build 是 Go 编程语言中的一个命令行工具，用于编译源代码文件生成可执行程序或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Go Lang-08-compile and run 编译并安装应用程序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-09-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":5.44,"words":1633},"filePathRelative":"posts/Lang/2018-09-07-lang-go-08-compile-and-run.md","localizedDate":"2018年9月7日","excerpt":"\\n<p>在最后一个主题中，您将学习一些新的 go 命令。</p>\\n<p>虽然 go run 命令是在频繁更改时编译和运行程序的有用快捷方式，但它不会生成二进制可执行文件。</p>\\n<p>本主题介绍了两个用于构建代码的附加命令：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>go build 命令编译包及其依赖项，但不会安装结果。</span></span>\\n<span class=\\"line\\"><span>go install 命令编译并安装软件包。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{p as comp,c as data};
