import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as n}from"./app-uJE4P3e0.js";const d={};function e(l,s){return n(),a("div",null,s[0]||(s[0]=[i(`<h1 id="序言" tabindex="-1"><a class="header-anchor" href="#序言"><span>序言</span></a></h1><p>结合 ai 打造 rca 系统，先让 ai 回答一下。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="你是一名监控报警-运维的资深架构师-经验丰富-知识跨多个领域。性格严谨、理性-擅长反思-逻辑自洽。针对一个已知的异常-如何给出对应的问题排查步骤-最好也可以转换为程序可以自定验证的执行步骤。" tabindex="-1"><a class="header-anchor" href="#你是一名监控报警-运维的资深架构师-经验丰富-知识跨多个领域。性格严谨、理性-擅长反思-逻辑自洽。针对一个已知的异常-如何给出对应的问题排查步骤-最好也可以转换为程序可以自定验证的执行步骤。"><span>你是一名监控报警+运维的资深架构师，经验丰富，知识跨多个领域。性格严谨、理性，擅长反思，逻辑自洽。针对一个已知的异常，如何给出对应的问题排查步骤，最好也可以转换为程序可以自定验证的执行步骤。</span></a></h2><p>要将“异常排查”从<strong>人肉经验</strong>转为<strong>系统化、自动化</strong>，需要把整个排查过程模型化为：</p><hr><h2 id="🧠-高质量问题排查的本质结构" tabindex="-1"><a class="header-anchor" href="#🧠-高质量问题排查的本质结构"><span>🧠 高质量问题排查的本质结构</span></a></h2><p>针对一个<strong>已知异常（如某服务调用超时、服务挂掉、性能下降）</strong>，理想的排查步骤应包含：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>【输入】异常现象（含告警） + 环境上下文</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>【系统性排查】</span></span>
<span class="line"><span>  - 多维验证（从网络、依赖、资源、代码、变更、配置等多个维度）</span></span>
<span class="line"><span>↓</span></span>
<span class="line"><span>【输出】</span></span>
<span class="line"><span>  - 原因定位（支持打分/排序）</span></span>
<span class="line"><span>  - 修复建议（可自动执行或交由人工）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-通用排查步骤框架-可转换为程序自动执行" tabindex="-1"><a class="header-anchor" href="#✅-通用排查步骤框架-可转换为程序自动执行"><span>✅ 通用排查步骤框架（可转换为程序自动执行）</span></a></h2><p>我们假设异常为：「某服务 service-X 响应超时」。</p><p>以下是结构化排查路径，每一条都可以转换为自动化脚本/agent任务：</p><table><thead><tr><th>步骤编号</th><th>排查方向</th><th>自动化验证逻辑</th></tr></thead><tbody><tr><td>1.1</td><td>🛑 当前服务本身状态</td><td>检查 <code>service-X</code> 实例是否存活、CPU/内存是否饱和、线程池是否阻塞（监控指标或 jstack）</td></tr><tr><td>1.2</td><td>🧪 服务本地健康检查</td><td>调用本地 <code>/health</code>、<code>/ping</code> 接口，确认服务是否自认为健康</td></tr><tr><td>1.3</td><td>🧱 服务依赖状态</td><td>检查 service-X 依赖的数据库、MQ、下游服务是否也有报警或延迟</td></tr><tr><td>1.4</td><td>🔄 变更确认</td><td>service-X 及其依赖组件最近是否有变更记录（代码、配置、基础设施、版本）</td></tr><tr><td>1.5</td><td>🕸️ 网络链路</td><td>检查 service-X 到依赖组件（如 DB、MQ、其他服务）的网络是否中断/抖动（ping、traceroute）</td></tr><tr><td>1.6</td><td>🔍 Trace 检查</td><td>拉取当前慢调用的 Trace，看是在哪一段耗时（如 DB 查询 2s，网络调用 5s）</td></tr><tr><td>1.7</td><td>⏱️ 依赖服务 SLA</td><td>检查下游服务在同一时间窗口是否有 QPS 激增、RT 变大、异常率升高</td></tr><tr><td>1.8</td><td>🛠️ 重试机制</td><td>是否存在因重试而导致的雪崩？（看日志、Trace、线程池状态）</td></tr><tr><td>1.9</td><td>📜 日志分析</td><td>快速拉取日志关键词（error、timeout、refused、circuit-break）并聚类</td></tr><tr><td>1.10</td><td>🧠 知识库匹配</td><td>结合专家规则/历史案例库，判断是否匹配典型“调用超时”场景根因</td></tr></tbody></table><hr><h2 id="🧩-输出格式示例-适合系统落地" tabindex="-1"><a class="header-anchor" href="#🧩-输出格式示例-适合系统落地"><span>🧩 输出格式示例（适合系统落地）</span></a></h2><p>可以将整个推理过程落地为如下结构（适合输出报告 + 人机共识）：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;incident&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;service-X 调用超时&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;timestamp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2025-08-07 10:23:00&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;suspected_causes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;下游 service-Y 响应超时&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;evidence&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;Trace 显示在调用 service-Y 时耗时高达 7s&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;service-Y 报警：调用数据库超时&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;数据库 CPU 达 90%&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;score&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.92</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;网络抖动&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;evidence&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;ping 到 service-Y 的连接丢包 30%&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;VPC 网络监控显示该时段有丢包告警&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;score&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.76</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;title&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;配置变更导致数据库连接池配置异常&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;evidence&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;变更记录：service-X 两小时前修改了数据库连接池配置&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;连接池日志报错：connection timeout&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;score&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.64</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;next_steps&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;检查 service-Y 的性能瓶颈&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;查看数据库慢查询日志&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;回滚最近的连接池配置变更&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔁-可反馈闭环机制-提升准确率" tabindex="-1"><a class="header-anchor" href="#🔁-可反馈闭环机制-提升准确率"><span>🔁 可反馈闭环机制（提升准确率）</span></a></h2><ol><li><p><strong>根因打分机制</strong>：系统给出 Top-N 根因 + 置信度（score），人工确认后回写「最终根因」</p></li><li><p><strong>反馈训练数据</strong>：</p><ul><li>把人工最终确认的根因 + 上下文特征形成标注数据</li><li>用于下一轮相似告警时做更准的 root cause classification</li></ul></li><li><p><strong>构建专家规则 + Embedding 检索系统</strong>：</p><ul><li>常见场景（雪崩、慢查询、GC频繁、连接数耗尽、服务限流）建立规则模板</li><li>使用 LLM 进行 embedding 向量化匹配当前症状</li></ul></li></ol><hr><h2 id="✅-结语" tabindex="-1"><a class="header-anchor" href="#✅-结语"><span>✅ 结语</span></a></h2><p>你可以从一个标准化排查清单出发，将每个步骤转为「脚本 + 验证逻辑」，再结合 AI 模型做：</p><ul><li>事件推理链条构建（COT + trace）</li><li>多源证据融合（监控+日志+trace+CMDB）</li><li>根因 Top-K 排名 + 自愈建议</li></ul><p>后续我可以提供你所需的排查 DSL 规范，或者帮你生成自动化规则执行框架原型。</p><p>是否需要我继续深入某个部分？如：</p><ul><li>各个排查维度脚本化方案</li><li>根因打分模型设计</li><li>问题分类器与 LLM 联动方案（如使用 GPT、向量检索、专家知识库融合）</li></ul><h2 id="比如异常是数据库无法连接-给出常见的排查步骤" tabindex="-1"><a class="header-anchor" href="#比如异常是数据库无法连接-给出常见的排查步骤"><span>比如异常是数据库无法连接，给出常见的排查步骤</span></a></h2><p>好的，以下是一个<strong>数据库无法连接</strong>问题的排查流程，分为人工分析思路和自动化可执行的程序验证步骤，适用于 MySQL/PostgreSQL 等常见数据库，特别在运维和报警响应系统中非常实用。</p><hr><h2 id="✅-异常现象" tabindex="-1"><a class="header-anchor" href="#✅-异常现象"><span>✅ 异常现象：</span></a></h2><p>服务连接数据库失败，报错如：<code>Connection refused</code>、<code>Timeout</code>、<code>Could not connect to database</code> 等。</p><hr><h2 id="🔍-一、排查思路步骤-人工逻辑" tabindex="-1"><a class="header-anchor" href="#🔍-一、排查思路步骤-人工逻辑"><span>🔍 一、排查思路步骤（人工逻辑）</span></a></h2><p>每一步都包含「检查目标」+「说明目的」+「常见原因」。</p><h3 id="_1-确认数据库连接配置正确" tabindex="-1"><a class="header-anchor" href="#_1-确认数据库连接配置正确"><span>1. <strong>确认数据库连接配置正确</strong></span></a></h3><ul><li>✅ 检查：DB 的 host、port、user、password、dbname</li><li>🎯 目的：防止配置误填，比如端口、IP 或环境变量出错</li><li>🧯 常见原因：配置文件错误、环境变量未加载、CI/CD 发布未覆盖新配置</li></ul><hr><h3 id="_2-检查网络连通性-从服务到数据库" tabindex="-1"><a class="header-anchor" href="#_2-检查网络连通性-从服务到数据库"><span>2. <strong>检查网络连通性（从服务到数据库）</strong></span></a></h3><ul><li>✅ 检查：<code>telnet host port</code> 或 <code>nc -vz host port</code> 是否通</li><li>🎯 目的：确认服务容器/主机是否能访问数据库端口</li><li>🧯 常见原因：网络隔离、K8s NetworkPolicy、SG/ACL 拦截、防火墙、VPC 路由错误</li></ul><hr><h3 id="_3-检查数据库是否存活" tabindex="-1"><a class="header-anchor" href="#_3-检查数据库是否存活"><span>3. <strong>检查数据库是否存活</strong></span></a></h3><ul><li>✅ 检查：数据库进程是否运行，端口是否监听</li><li>🎯 目的：排除数据库崩溃、OOM、挂了等情况</li><li>🧯 常见原因：资源不足、磁盘满、被误杀、主从漂移</li></ul><hr><h3 id="_4-验证数据库授权和账户是否生效" tabindex="-1"><a class="header-anchor" href="#_4-验证数据库授权和账户是否生效"><span>4. <strong>验证数据库授权和账户是否生效</strong></span></a></h3><ul><li>✅ 检查：使用相同账户/密码从其他机器连接是否成功（CLI 或 DBeaver）</li><li>🎯 目的：确认权限或密码是否问题</li><li>🧯 常见原因：密码过期、账户锁定、权限被改、白名单限制</li></ul><hr><h3 id="_5-检查连接数是否已满" tabindex="-1"><a class="header-anchor" href="#_5-检查连接数是否已满"><span>5. <strong>检查连接数是否已满</strong></span></a></h3><ul><li>✅ 检查：数据库 <code>SHOW PROCESSLIST</code> 或监控指标</li><li>🎯 目的：排除因 max_connections 达到上限导致无法建立新连接</li><li>🧯 常见原因：连接泄漏、长事务、连接池未关闭</li></ul><hr><h3 id="_6-确认域名能解析-如果用的是域名" tabindex="-1"><a class="header-anchor" href="#_6-确认域名能解析-如果用的是域名"><span>6. <strong>确认域名能解析（如果用的是域名）</strong></span></a></h3><ul><li>✅ 检查：<code>nslookup</code> 或 <code>dig</code> 是否能正确解析 IP</li><li>🎯 目的：排查 DNS 配置、域名解析失败或变更未同步</li><li>🧯 常见原因：DNS污染、host 缓存未刷新、域名变更但配置没跟上</li></ul><hr><h3 id="_7-查看数据库日志" tabindex="-1"><a class="header-anchor" href="#_7-查看数据库日志"><span>7. <strong>查看数据库日志</strong></span></a></h3><ul><li>✅ 检查：<code>error.log</code>、<code>slow.log</code> 等</li><li>🎯 目的：找出数据库是否拒绝了连接、是否有异常栈</li><li>🧯 常见原因：Too many connections、认证失败、资源异常</li></ul><hr><h3 id="_8-回溯最近是否发生过变更" tabindex="-1"><a class="header-anchor" href="#_8-回溯最近是否发生过变更"><span>8. <strong>回溯最近是否发生过变更</strong></span></a></h3><ul><li>✅ 检查：最近几分钟内是否有部署、变更、数据库迁移或 failover</li><li>🎯 目的：辅助定位因变更引发的问题</li><li>🧯 常见原因：切主、容器重启、主备漂移、配置变更</li></ul><hr><h2 id="🤖-二、程序自动化验证步骤-可嵌入根因分析系统" tabindex="-1"><a class="header-anchor" href="#🤖-二、程序自动化验证步骤-可嵌入根因分析系统"><span>🤖 二、程序自动化验证步骤（可嵌入根因分析系统）</span></a></h2><p>这些可用于自动诊断 agent、巡检脚本、AI 根因平台等模块：</p><table><thead><tr><th>步骤</th><th>自动化命令示例</th><th>成功判定</th><th></th></tr></thead><tbody><tr><td>1. 检查配置</td><td>解析 <code>.env</code>, <code>yaml</code>, <code>properties</code></td><td>host、port、user 非空</td><td></td></tr><tr><td>2. telnet 检查</td><td><code>nc -vz db_host db_port</code></td><td>返回 open</td><td></td></tr><tr><td>3. ping 数据库进程</td><td>\`ps -ef</td><td>grep mysqld\`</td><td>存在 mysqld</td></tr><tr><td>4. 端口监听检查</td><td>\`ss -ltnp</td><td>grep 3306\`</td><td>有 LISTEN 记录</td></tr><tr><td>5. 授权验证</td><td><code>mysql -u user -p password -h host -e &quot;SELECT 1&quot;</code></td><td>返回成功</td><td></td></tr><tr><td>6. 连接数检查</td><td><code>SHOW STATUS LIKE &#39;Threads_connected&#39;</code></td><td>未超阈值</td><td></td></tr><tr><td>7. DNS 检查</td><td><code>nslookup mysql.xxx.internal</code></td><td>返回正确 IP</td><td></td></tr><tr><td>8. 日志分析</td><td>读取日志关键词（拒绝、max、access denied）</td><td>无严重错误</td><td></td></tr><tr><td>9. 变更感知</td><td>查询 CMDB 或 GitOps 最近操作</td><td>无风险变更 or 标注相关性</td><td></td></tr></tbody></table><hr><h2 id="📈-三、可选增强项-用于智能系统" tabindex="-1"><a class="header-anchor" href="#📈-三、可选增强项-用于智能系统"><span>📈 三、可选增强项（用于智能系统）</span></a></h2><h3 id="🔁-整体闭环与学习" tabindex="-1"><a class="header-anchor" href="#🔁-整体闭环与学习"><span>🔁 整体闭环与学习：</span></a></h3><ul><li><strong>告警聚类：</strong> 同时报警的服务、节点打包处理</li><li><strong>变更关联：</strong> 判断是否有高关联变更事件</li><li><strong>打分机制：</strong> 每个排查项设置信心值，最终输出 top3 根因</li><li><strong>反馈标注：</strong> 允许人工标注最终真实根因，作为训练样本</li><li><strong>自愈建议：</strong> 针对常见原因（如连接数满）推荐自愈脚本</li></ul><hr><h2 id="✅-示例输出-ai系统形式" tabindex="-1"><a class="header-anchor" href="#✅-示例输出-ai系统形式"><span>✅ 示例输出（AI系统形式）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>❌ [告警] service-X 连接 mysql-Y 超时</span></span>
<span class="line"><span>🧠 [根因推理]：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. 🟥 数据库端口未监听（mysqld 未运行）</span></span>
<span class="line"><span>   - 检查项：端口监听失败、进程不存在</span></span>
<span class="line"><span>   - 置信度：95%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. 🟧 连接数已达上限（Too many connections）</span></span>
<span class="line"><span>   - 数据库返回连接满</span></span>
<span class="line"><span>   - 置信度：80%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. 🟨 DNS 解析失败</span></span>
<span class="line"><span>   - dig 返回为空</span></span>
<span class="line"><span>   - 置信度：40%</span></span>
<span class="line"><span></span></span>
<span class="line"><span>🛠️ 推荐操作：</span></span>
<span class="line"><span>- 登录数据库主机，确认 mysqld 是否启动</span></span>
<span class="line"><span>- 查看数据库日志是否有连接错误</span></span>
<span class="line"><span>- 检查是否有异常变更操作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="以-mysql-无法访问为例-给出排查步骤-结果例子。并给出最后的自洽推断-从所有的结果中找出根因" tabindex="-1"><a class="header-anchor" href="#以-mysql-无法访问为例-给出排查步骤-结果例子。并给出最后的自洽推断-从所有的结果中找出根因"><span>以 mysql 无法访问为例，给出排查步骤+结果例子。并给出最后的自洽推断，从所有的结果中找出根因</span></a></h2><p>好的，我们以 “<strong>MySQL 无法访问</strong>” 为例，来系统性地设计一份 <strong>可转化为程序执行的排查流程</strong>，包括：</p><ol><li><strong>排查步骤</strong></li><li><strong>每步的具体命令/方式</strong></li><li><strong>每步的结果举例</strong></li><li><strong>最终的闭环推理：基于所有检查项得出根因</strong></li></ol><hr><h2 id="✅-异常现象-应用访问-mysql-报错-如-连接超时、拒绝连接" tabindex="-1"><a class="header-anchor" href="#✅-异常现象-应用访问-mysql-报错-如-连接超时、拒绝连接"><span>✅ 异常现象：应用访问 MySQL 报错（如：连接超时、拒绝连接）</span></a></h2><hr><h2 id="🧭-排查步骤-按从网络到服务层递进" tabindex="-1"><a class="header-anchor" href="#🧭-排查步骤-按从网络到服务层递进"><span>🧭 排查步骤（按从网络到服务层递进）</span></a></h2><table><thead><tr><th>步骤</th><th>内容</th><th>命令 / 方法</th><th>预期</th><th>异常举例</th><th></th></tr></thead><tbody><tr><td>1️⃣</td><td>检查网络连通性（IP+端口）</td><td><code>telnet mysql_host 3306</code> / <code>nc -vz</code></td><td>能连通</td><td>连接失败</td><td></td></tr><tr><td>2️⃣</td><td>检查 DNS 是否解析正常</td><td><code>nslookup mysql_host</code> / <code>dig mysql_host</code></td><td>正确解析为预期 IP</td><td>未解析、解析为错误地址</td><td></td></tr><tr><td>3️⃣</td><td>检查主机能 ping 通（icmp）</td><td><code>ping mysql_host</code></td><td>能通</td><td>不通说明网络或安全组问题</td><td></td></tr><tr><td>4️⃣</td><td>检查防火墙 / 安全组</td><td><code>iptables -L</code> / 云控制台检查安全组</td><td>端口 3306 放通</td><td>拒绝连接可能被防火墙拦截</td><td></td></tr><tr><td>5️⃣</td><td>检查服务端监听情况</td><td>在 MySQL 服务器上 \`netstat -tunlp</td><td>grep 3306\`</td><td>有监听</td><td>无监听，MySQL 未启动或监听错误</td></tr><tr><td>6️⃣</td><td>检查 MySQL 服务是否启动</td><td><code>systemctl status mysqld</code> / \`ps -ef</td><td>grep mysql\`</td><td>服务运行中</td><td>服务未启动、异常退出</td></tr><tr><td>7️⃣</td><td>检查 MySQL 错误日志</td><td><code>/var/log/mysqld.log</code> 或配置中的 log 文件</td><td>正常启动无报错</td><td>报错如：无法绑定端口、innodb 初始化失败</td><td></td></tr><tr><td>8️⃣</td><td>检查连接权限 / 用户密码</td><td>登录测试：<code>mysql -h xxx -u user -p</code></td><td>登录成功</td><td>报错如 access denied、host not allowed</td><td></td></tr><tr><td>9️⃣</td><td>检查连接数是否打满</td><td><code>show global status like &#39;Threads_connected&#39;;</code> 与 <code>max_connections</code> 对比</td><td>正常范围</td><td>报错如 &quot;Too many connections&quot;</td><td></td></tr><tr><td>🔟</td><td>检查磁盘 / 系统资源</td><td><code>df -h</code>, <code>free -m</code>, <code>top</code></td><td>资源足够</td><td>磁盘满导致 MySQL 异常退出</td><td></td></tr><tr><td>🔁</td><td>检查是否发生变更</td><td>配置、域名切换、版本升级</td><td>有无相关变更记录</td><td>域名切换导致解析失败</td><td></td></tr></tbody></table><hr><h2 id="📋-示例结果-模拟一轮排查" tabindex="-1"><a class="header-anchor" href="#📋-示例结果-模拟一轮排查"><span>📋 示例结果（模拟一轮排查）</span></a></h2><table><thead><tr><th>步骤</th><th>检查项</th><th>结果</th><th>结论</th></tr></thead><tbody><tr><td>1</td><td>telnet <a href="http://mysql.domain.com" target="_blank" rel="noopener noreferrer">mysql.domain.com</a> 3306</td><td>❌ 连接失败</td><td>网络层存在问题</td></tr><tr><td>2</td><td>dig <a href="http://mysql.domain.com" target="_blank" rel="noopener noreferrer">mysql.domain.com</a></td><td>✅ 解析为 10.0.0.100</td><td>DNS 正常</td></tr><tr><td>3</td><td>ping 10.0.0.100</td><td>✅ 能 ping 通</td><td>网络链路可达</td></tr><tr><td>4</td><td>检查安全组</td><td>✅ 3306 已放通</td><td>不是安全组问题</td></tr><tr><td>5</td><td>netstat -tunlp</td><td>✅ MySQL 监听 3306</td><td>正常</td></tr><tr><td>6</td><td>mysql 服务状态</td><td>✅ 运行中</td><td>正常</td></tr><tr><td>7</td><td>查看日志</td><td>❌ 多次报错 <code>Host xxx is not allowed to connect to this MySQL server</code></td><td>权限问题</td></tr><tr><td>8</td><td>用应用账号登录</td><td>❌ access denied</td><td>应用使用的账号无权限</td></tr><tr><td>9</td><td>连接数</td><td>✅ 未打满</td><td>非连接数问题</td></tr><tr><td>🔟</td><td>资源</td><td>✅ 磁盘正常</td><td>非资源问题</td></tr><tr><td>🔁</td><td>变更审计</td><td>✅ 最近做了数据库用户权限精简</td><td>潜在关联变更</td></tr></tbody></table><hr><h2 id="🧠-根因推理-逻辑自洽闭环" tabindex="-1"><a class="header-anchor" href="#🧠-根因推理-逻辑自洽闭环"><span>🧠 根因推理（逻辑自洽闭环）</span></a></h2><blockquote><h3 id="❗-根因推断-应用连接不上-mysql-是因为在最近一次权限清理过程中-误删或限制了应用主机的访问权限。" tabindex="-1"><a class="header-anchor" href="#❗-根因推断-应用连接不上-mysql-是因为在最近一次权限清理过程中-误删或限制了应用主机的访问权限。"><span>❗ 根因推断：应用连接不上 MySQL，是因为在最近一次权限清理过程中，<strong>误删或限制了应用主机的访问权限</strong>。</span></a></h3></blockquote><h3 id="🔄-推理路径" tabindex="-1"><a class="header-anchor" href="#🔄-推理路径"><span>🔄 推理路径：</span></a></h3><ul><li>连接失败 ⟶ 非 DNS、非网络不通、非监听问题 ✅</li><li>MySQL 正常运行 ⟶ 服务未崩 ✅</li><li>日志显示权限拒绝（Access denied / Host not allowed） ⟶ 锁定为权限问题</li><li>结合变更记录，发现数据库有用户权限修改 ⟶ 极大概率是此操作导致</li><li>验证用户确实无法登录 ⟶ 直接证实问题</li></ul><hr><h2 id="🚀-闭环能力设计建议-自动化思路" tabindex="-1"><a class="header-anchor" href="#🚀-闭环能力设计建议-自动化思路"><span>🚀 闭环能力设计建议（自动化思路）</span></a></h2><p>可以设计一个自定义脚本或系统流程，自动执行上述步骤（至少前 7 步）：</p><ul><li>自动采集网络连通性、服务状态、连接测试</li><li>抓取错误日志关键词，归类错误（如 access denied、连接数等）</li><li>拉取变更记录与时间轴对比</li><li>根据规则打分输出 Top-N 根因评分（如下）</li></ul><hr><h2 id="🧪-top3-根因候选-打分" tabindex="-1"><a class="header-anchor" href="#🧪-top3-根因候选-打分"><span>🧪 Top3 根因候选 + 打分</span></a></h2><table><thead><tr><th>根因</th><th>证据点</th><th>置信评分（1-10）</th></tr></thead><tbody><tr><td>数据库权限配置错误</td><td>日志报错+验证失败+有权限变更记录</td><td><strong>9.5</strong></td></tr><tr><td>网络端口阻断</td><td>telnet 失败，但安全组无变更</td><td>3</td></tr><tr><td>MySQL 服务挂掉</td><td>服务运行正常</td><td>1</td></tr></tbody></table><hr><p>如你需要，我可以帮你将上述流程抽象为 JSON DSL 或 Shell/Java 脚本框架，以便系统自动执行根因排查。是否需要？</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1>`,96)]))}const p=t(d,[["render",e]]),o=JSON.parse('{"path":"/posts/Note/2025-04-19-note-rca-14-ai-chat-find-rca-with-expert-knowledge.html","title":"RCA 根因分析推断-14-从AI通用知识（专家规则）出发，给出推断步骤","lang":"zh-CN","frontmatter":{"title":"RCA 根因分析推断-14-从AI通用知识（专家规则）出发，给出推断步骤","date":"2025-04-19T00:00:00.000Z","categories":["Note"],"tags":["note","rca","ai","devops","alarm","sh"],"published":true,"description":"序言 结合 ai 打造 rca 系统，先让 ai 回答一下。 chat 你是一名监控报警+运维的资深架构师，经验丰富，知识跨多个领域。性格严谨、理性，擅长反思，逻辑自洽。针对一个已知的异常，如何给出对应的问题排查步骤，最好也可以转换为程序可以自定验证的执行步骤。 要将“异常排查”从人肉经验转为系统化、自动化，需要把整个排查过程模型化为： 🧠 高质量问...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Note/2025-04-19-note-rca-14-ai-chat-find-rca-with-expert-knowledge.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"RCA 根因分析推断-14-从AI通用知识（专家规则）出发，给出推断步骤"}],["meta",{"property":"og:description","content":"序言 结合 ai 打造 rca 系统，先让 ai 回答一下。 chat 你是一名监控报警+运维的资深架构师，经验丰富，知识跨多个领域。性格严谨、理性，擅长反思，逻辑自洽。针对一个已知的异常，如何给出对应的问题排查步骤，最好也可以转换为程序可以自定验证的执行步骤。 要将“异常排查”从人肉经验转为系统化、自动化，需要把整个排查过程模型化为： 🧠 高质量问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"note"}],["meta",{"property":"article:tag","content":"rca"}],["meta",{"property":"article:tag","content":"ai"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:tag","content":"alarm"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2025-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RCA 根因分析推断-14-从AI通用知识（专家规则）出发，给出推断步骤\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":11.25,"words":3374},"filePathRelative":"posts/Note/2025-04-19-note-rca-14-ai-chat-find-rca-with-expert-knowledge.md","localizedDate":"2025年4月19日","excerpt":"\\n<p>结合 ai 打造 rca 系统，先让 ai 回答一下。</p>\\n<h1>chat</h1>\\n<h2>你是一名监控报警+运维的资深架构师，经验丰富，知识跨多个领域。性格严谨、理性，擅长反思，逻辑自洽。针对一个已知的异常，如何给出对应的问题排查步骤，最好也可以转换为程序可以自定验证的执行步骤。</h2>\\n<p>要将“异常排查”从<strong>人肉经验</strong>转为<strong>系统化、自动化</strong>，需要把整个排查过程模型化为：</p>\\n<hr>\\n<h2>🧠 高质量问题排查的本质结构</h2>\\n<p>针对一个<strong>已知异常（如某服务调用超时、服务挂掉、性能下降）</strong>，理想的排查步骤应包含：</p>","autoDesc":true}');export{p as comp,o as data};
