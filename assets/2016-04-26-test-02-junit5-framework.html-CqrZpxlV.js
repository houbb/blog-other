import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,o as a}from"./app-CEDSurVN.js";const e={};function l(r,i){return a(),n("div",null,i[0]||(i[0]=[t(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/06/24/junit5-01-hello" target="_blank" rel="noopener noreferrer">junit5 系列</a></p><p><a href="https://houbb.github.io/2021/07/23/junit-performance-junit5" target="_blank" rel="noopener noreferrer">基于 junit5 实现 junitperf 源码分析</a></p><p><a href="https://github.com/houbb/data-factory" target="_blank" rel="noopener noreferrer">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p><p><a href="https://github.com/houbb/junitperf" target="_blank" rel="noopener noreferrer">Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。)</a></p><h1 id="junit5-的入门例子" tabindex="-1"><a class="header-anchor" href="#junit5-的入门例子"><span>junit5 的入门例子</span></a></h1><h2 id="maven-引入" tabindex="-1"><a class="header-anchor" href="#maven-引入"><span>maven 引入</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.junit.jupiter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        junit-jupiter-api</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        5.8.2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.junit.jupiter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        junit-jupiter-engine</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        5.8.2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试类" tabindex="-1"><a class="header-anchor" href="#测试类"><span>测试类</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.jupiter.api.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.jupiter.api.Assertions.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CalculatorTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testAdd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Arrange</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Calculator</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Act</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Assert</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, result, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3 + 7 should equal 10&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><p>junit5 对比 junit4 可以说是划时代的提升。</p><p>这么多年过去了，就算是再顽固的系统，现在也开始使用 jdk1.8 了，这一点令人欣慰。</p><p>junit5 是新时代的单元测试，所以忘掉你的 junit4 吧。</p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-junit5" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-junit5"><span>详细介绍一下 junit5</span></a></h2><p>JUnit 5 是 Java 中的下一代单元测试框架，与 JUnit 4 相比，它引入了许多新的特性和改进。</p><p>JUnit 5 由三个主要模块组成：JUnit Platform、JUnit Jupiter 和 JUnit Vintage。</p><p>以下是 JUnit 5 的一些主要特性和概念：</p><ol><li><p><strong>JUnit Platform：</strong> JUnit 5 的基础，提供了一个测试平台，用于运行不同测试框架的测试。它还支持通过插件机制扩展测试框架。</p></li><li><p><strong>JUnit Jupiter：</strong> JUnit 5 的新测试引擎，支持最新的测试风格和功能。JUnit Jupiter 提供了注解驱动的测试、参数化测试、条件测试、嵌套测试等功能。</p><ul><li><p><strong>注解驱动的测试：</strong> 使用 <code>@Test</code>、<code>@BeforeEach</code>、<code>@AfterEach</code> 等注解进行测试方法的标记，相比 JUnit 4 更加灵活。</p></li><li><p><strong>参数化测试：</strong> 使用 <code>@ParameterizedTest</code> 和 <code>@ValueSource</code> 等注解，支持在一个测试方法上运行多次，每次使用不同的参数。</p></li><li><p><strong>条件测试：</strong> 使用 <code>@EnabledOnOs</code>、<code>@DisabledIf</code> 等条件注解，根据条件动态地启用或禁用测试。</p></li><li><p><strong>嵌套测试：</strong> 使用 <code>@Nested</code> 注解，支持更好地组织测试类，使测试结构更清晰。</p></li></ul></li><li><p><strong>JUnit Vintage：</strong> 为了兼容 JUnit 3 和 JUnit 4 测试，JUnit 5 提供了 Vintage 引擎，使得旧有的测试可以在 JUnit 5 平台上运行。</p></li><li><p><strong>测试接口和默认方法：</strong> JUnit 5 允许在测试接口中使用 <code>@Test</code> 和其他测试相关的注解，并且支持在接口中定义默认方法。这使得共享测试代码更为灵活。</p></li><li><p><strong>扩展模型：</strong> JUnit 5 引入了扩展模型，通过编写自定义扩展，可以对测试执行过程中的各个阶段进行扩展和定制。这是一个强大的特性，用于实现更高级的测试控制和集成。</p></li><li><p><strong>动态测试注册：</strong> JUnit 5 引入了 <code>TestFactory</code> 注解，使得测试可以在运行时动态生成。这对于根据运行时条件生成测试非常有用。</p></li><li><p><strong>条件测试：</strong> JUnit 5 提供了 <code>@EnabledOn</code>、<code>@DisabledOn</code>、<code>@EnabledIf</code>、<code>@DisabledIf</code> 等注解，可以根据条件启用或禁用测试。</p></li><li><p><strong>JUnit Platform Launcher API：</strong> 允许通过编程方式运行测试，支持集成到不同的构建工具和 IDE 中。</p></li><li><p><strong>并发测试支持：</strong> JUnit 5 提供了 <code>@RepeatedTest</code> 注解，支持更方便地编写和执行并发测试。</p></li><li><p><strong>参数解析和转换：</strong> JUnit 5 提供了强大的参数解析和转换功能，使得测试方法可以接受更复杂的参数类型，并支持自定义的参数解析器。</p></li></ol><p>JUnit 5 的设计目标是提供更灵活、现代化、可扩展的测试框架，使得 Java 开发者能够更轻松地编写和维护高质量的单元测试。</p><h2 id="为什么需要有-junit5-junit-还不够吗" tabindex="-1"><a class="header-anchor" href="#为什么需要有-junit5-junit-还不够吗"><span>为什么需要有 junit5? junit 还不够吗</span></a></h2><p>JUnit 5 的引入主要是为了满足新的测试需求和应对现代化的软件开发环境，以提供更丰富、灵活、现代化的测试框架。</p><p>以下是一些推动 JUnit 5 发展的主要原因：</p><ol><li><p><strong>支持新的语言特性：</strong> JUnit 5 提供了对 Java 8 及以上版本的支持，包括使用 Lambdas 和其他新的语言特性。这使得测试代码更为简洁和易读。</p></li><li><p><strong>模块化的设计：</strong> JUnit 5 采用了模块化的设计，分为三个主要组件：JUnit Jupiter（新的测试引擎）、JUnit Platform（测试平台）、JUnit Vintage（兼容旧版 JUnit）。这种设计使得 JUnit 5 更加灵活，可以适应不同的测试场景。</p></li><li><p><strong>新的测试注解和功能：</strong> JUnit 5 引入了一系列新的测试注解和功能，例如 <code>@Test</code>、<code>@BeforeEach</code>、<code>@AfterEach</code> 等注解的改进，以及参数化测试、嵌套测试、条件测试等新的功能。这些功能使得测试更为灵活、易用，并提供更丰富的测试表达能力。</p></li><li><p><strong>扩展和插件机制：</strong> JUnit 5 提供了更强大的扩展模型，允许开发者编写自定义扩展，以适应不同的测试需求。同时，JUnit 5 的插件机制使得集成到不同的构建工具和 IDE 中变得更为容易。</p></li><li><p><strong>并发测试支持：</strong> JUnit 5 提供了对并发测试的原生支持，通过 <code>@RepeatedTest</code> 注解，可以更方便地编写和执行并发测试。</p></li><li><p><strong>条件测试：</strong> JUnit 5 引入了条件测试，通过 <code>@EnabledOn</code>、<code>@DisabledOn</code>、<code>@EnabledIf</code>、<code>@DisabledIf</code> 等注解，可以根据条件动态地启用或禁用测试。</p></li><li><p><strong>测试接口和默认方法：</strong> JUnit 5 允许在测试接口中使用 <code>@Test</code> 和其他测试相关的注解，并且支持在接口中定义默认方法。这使得共享测试代码更为灵活。</p></li><li><p><strong>清晰的命名规范：</strong> JUnit 5 引入了一套清晰的命名规范，例如测试方法的命名规则 <code>test{MethodName}</code>、生命周期回调方法的命名规则 <code>beforeEach</code>、<code>afterEach</code> 等，使得测试代码的结构更为一致和易读。</p></li></ol><p>总体而言，JUnit 5 的目标是提供一个现代化、灵活、可扩展的测试框架，以满足日益复杂和变化的软件开发环境中的测试需求。</p><p>虽然 JUnit 4 仍然是许多项目中使用的稳定框架，但随着时间的推移，Junit 5 的特性和优势使得它成为越来越受欢迎的选择。</p><h2 id="如果让你深入学习-junit5-你会问哪10个问题-为什么" tabindex="-1"><a class="header-anchor" href="#如果让你深入学习-junit5-你会问哪10个问题-为什么"><span>如果让你深入学习 junit5，你会问哪10个问题？为什么</span></a></h2><p>深入学习JUnit 5时，你可能会提出以下10个问题，以更全面地理解和掌握这个测试框架：</p><ol><li><p><strong>JUnit 5的核心组件是什么？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解JUnit 5的核心组件，包括JUnit Jupiter、JUnit Platform和JUnit Vintage，有助于理解JUnit 5的整体架构和设计目标。</li></ul></li><li><p><strong>JUnit Jupiter的新特性有哪些？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解JUnit Jupiter引入的新测试注解、扩展模型和功能，如参数化测试、嵌套测试等，可以更好地使用和组织测试。</li></ul></li><li><p><strong>JUnit 5的测试生命周期是怎样的？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解测试生命周期，包括<code>@BeforeAll</code>、<code>@BeforeEach</code>、<code>@AfterEach</code>等注解，有助于在测试中执行初始化和清理操作。</li></ul></li><li><p><strong>JUnit 5的参数化测试是如何工作的？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解如何使用<code>@ParameterizedTest</code>注解进行参数化测试，以及如何传递不同的参数集，有助于编写更灵活和复用性强的测试。</li></ul></li><li><p><strong>JUnit 5的扩展模型是什么？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解JUnit 5的扩展模型，包括编写自定义扩展和使用现有扩展，可以实现更高级的测试控制和集成。</li></ul></li><li><p><strong>JUnit 5的条件测试是如何使用的？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解条件测试，如<code>@EnabledOn</code>、<code>@DisabledOn</code>、<code>@EnabledIf</code>、<code>@DisabledIf</code>等注解，有助于根据运行时条件动态启用或禁用测试。</li></ul></li><li><p><strong>JUnit 5如何支持并发测试？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解如何使用<code>@RepeatedTest</code>注解支持并发测试，以及如何设置线程池，有助于编写更高效和可扩展的并发测试。</li></ul></li><li><p><strong>JUnit 5的测试接口和默认方法有何特点？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解如何在测试接口中使用<code>@Test</code>和其他测试相关的注解，以及如何使用默认方法实现共享测试代码，有助于测试代码的组织和结构。</li></ul></li><li><p><strong>JUnit 5如何进行动态测试注册？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解如何使用<code>TestFactory</code>注解进行动态测试注册，使得测试可以在运行时动态生成，有助于测试的灵活性和可扩展性。</li></ul></li><li><p><strong>JUnit 5与其他测试框架的集成有何优势？</strong></p><ul><li><strong>为什么这个问题重要？</strong> 了解JUnit 5与其他测试框架（如Mockito）的集成优势，以及如何利用这些集成提高测试代码的质量和可维护性。</li></ul></li></ol><h2 id="junit5-的-核心组件" tabindex="-1"><a class="header-anchor" href="#junit5-的-核心组件"><span>junit5 的 核心组件</span></a></h2><p>JUnit 5 的核心组件包括 JUnit Jupiter、JUnit Platform 和 JUnit Vintage。</p><p>这三个组件共同构成了JUnit 5的架构，各自承担着不同的角色和功能。</p><ol><li><p><strong>JUnit Jupiter:</strong></p><ul><li><strong>介绍：</strong> JUnit Jupiter 是 JUnit 5 的测试引擎，它支持最新的测试风格和功能。引入了一系列新的测试注解和功能，使得测试更为灵活和现代化。</li><li><strong>主要特性：</strong><ul><li><strong>新的测试注解：</strong> 包括 <code>@Test</code>、<code>@BeforeEach</code>、<code>@AfterEach</code> 等，用于标记测试方法、生命周期回调方法等。</li><li><strong>参数化测试：</strong> 引入了 <code>@ParameterizedTest</code> 注解，支持在一个测试方法上运行多次，每次使用不同的参数。</li><li><strong>嵌套测试：</strong> 引入了 <code>@Nested</code> 注解，支持更好地组织测试类，使测试结构更清晰。</li><li><strong>条件测试：</strong> 引入了 <code>@EnabledOn</code>、<code>@DisabledOn</code>、<code>@EnabledIf</code>、<code>@DisabledIf</code> 等注解，可以根据条件动态启用或禁用测试。</li></ul></li></ul></li><li><p><strong>JUnit Platform:</strong></p><ul><li><strong>介绍：</strong> JUnit Platform 是 JUnit 5 的测试平台，提供了一个通用的测试架构，可以运行不同测试框架的测试。它还支持通过插件机制扩展测试框架。</li><li><strong>主要特性：</strong><ul><li><strong>测试引擎：</strong> 定义了测试引擎 API，使得不同的测试引擎可以在JUnit Platform上运行。</li><li><strong>插件机制：</strong> 支持通过插件机制扩展测试框架，以适应不同的测试需求。</li><li><strong>命令行工具：</strong> 提供了用于运行测试的命令行工具，如 <code>junit-platform-console-standalone</code>。</li></ul></li></ul></li><li><p><strong>JUnit Vintage:</strong></p><ul><li><strong>介绍：</strong> JUnit Vintage 是 JUnit 5 中的一个模块，用于兼容旧版本的 JUnit 测试。它可以运行基于 JUnit 3 和 JUnit 4 的测试。</li><li><strong>主要特性：</strong><ul><li><strong>兼容性：</strong> 提供了兼容 JUnit 3 和 JUnit 4 的测试引擎，以便在 JUnit 5 中运行旧有的测试。</li><li><strong>无缝过渡：</strong> 允许逐步迁移到 JUnit 5，保留和运行旧有的测试，而新的测试可以使用 JUnit Jupiter。</li></ul></li></ul></li></ol><p>这三个核心组件共同协作，使得JUnit 5成为一个灵活、现代化的测试框架。</p><p>JUnit Jupiter提供了丰富的新特性，JUnit Platform提供了通用的测试平台，而JUnit Vintage确保了对旧有测试的兼容性。</p><p>这种模块化的设计使得JUnit 5更具适应性和可扩展性。</p>`,39)]))}const h=s(e,[["render",l]]),d=JSON.parse('{"path":"/posts/tests/2016-04-26-test-02-junit5-framework.html","title":"test-02-java 单元测试框架 junit5 入门介绍","lang":"zh-CN","frontmatter":{"title":"test-02-java 单元测试框架 junit5 入门介绍","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","test"],"published":true,"description":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) ju...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-02-junit5-framework.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test-02-java 单元测试框架 junit5 入门介绍"}],["meta",{"property":"og:description","content":"拓展阅读 junit5 系列 基于 junit5 实现 junitperf 源码分析 Auto generate mock data for java test.(便于 Java 测试自动生成对象信息) Junit performance rely on junit5 and jdk8+.(java 性能测试框架。性能测试。压测。测试报告生成。) ju..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test-02-java 单元测试框架 junit5 入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":9.66,"words":2899},"filePathRelative":"posts/tests/2016-04-26-test-02-junit5-framework.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2018/06/24/junit5-01-hello\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">junit5 系列</a></p>\\n<p><a href=\\"https://houbb.github.io/2021/07/23/junit-performance-junit5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基于 junit5 实现 junitperf 源码分析</a></p>\\n<p><a href=\\"https://github.com/houbb/data-factory\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Auto generate mock data for java test.(便于 Java 测试自动生成对象信息)</a></p>","autoDesc":true}');export{h as comp,d as data};
