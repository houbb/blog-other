import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-uJE4P3e0.js";const t={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="控制结构" tabindex="-1"><a class="header-anchor" href="#控制结构"><span>控制结构</span></a></h1><p>从花括号语言中知道的大多数控制结构都可以在 Solidity 中使用：</p><p>有：if、else、while、do、for、break、continue、return，具有 C 或 JavaScript 中已知的常用语义。</p><p>Solidity 还支持 try/catch 语句形式的异常处理，但仅适用于外部函数调用和合约创建调用。 可以使用 revert 语句创建错误。</p><p>条件句不能省略括号，但单语句体周围的花括号可以省略。</p><p>请注意，没有像 C 和 JavaScript 那样从非布尔类型转换为布尔类型，因此 if (1) { ... } 不是有效的 Solidity。</p><h1 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用"><span>函数调用</span></a></h1><h2 id="内部函数调用" tabindex="-1"><a class="header-anchor" href="#内部函数调用"><span>内部函数调用</span></a></h2><p>当前合约的函数可以直接（“内部”）调用，也可以递归调用，如以下无意义的示例所示：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// SPDX-License-Identifier: GPL-3.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pragma</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  uint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">uint</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">uint</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="省略功能参数名称" tabindex="-1"><a class="header-anchor" href="#省略功能参数名称"><span>省略功能参数名称</span></a></h2><p>未使用的参数（尤其是返回参数）的名称可以省略。</p><p>这些参数仍将存在于堆栈中，但无法访问。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// SPDX-License-Identifier: GPL-3.0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pragma</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> solidity</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">代替整数除法和乘以</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 的幂时尤其明显</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">例如</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`type(uint256).max = x.length 或 i =0.5.0  msg.value / 2 ether)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            revert(&quot;Not enough Ether provided.&quot;);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        // Alternative way to do it:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        require(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            amount =0.8.1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">interface DataFeed { function getData(address token) external returns (uint value); }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">contract FeedConsumer {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    DataFeed feed;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    uint errorCount;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    function rate(address token) public returns (uint value, bool success) {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        // Permanently disable the mechanism if there are</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        // more than 10 errors.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        require(errorCount &lt; 10);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        try feed.getData(token) returns (uint v) {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return (v, true);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        } catch Error(string memory /*reason*/) {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // This is executed in case</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // revert was called inside getData</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // and a reason string was provided.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            errorCount++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return (0, false);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        } catch Panic(uint /*errorCode*/) {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // This is executed in case of a panic,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // i.e. a serious error like division by zero</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // or overflow. The error code can be used</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // to determine the kind of error.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            errorCount++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return (0, false);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        } catch (bytes memory /*lowLevelData*/) {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            // This is executed in case revert() was used.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            errorCount++;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            return (0, false);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try 关键字后面必须跟一个表示外部函数调用或合约创建的表达式（new ContractName()）。</p><p>表达式内部的错误不会被捕获（例如，如果它是一个还涉及内部函数调用的复杂表达式），只会在外部调用本身内部发生还原。</p><p>后面的返回部分（可选）声明了与外部调用返回的类型匹配的返回变量。</p><p>如果没有错误，则分配这些变量，并且合约的执行在第一个成功块内继续。如果到达成功块的末尾，则在 catch 块之后继续执行。</p><p>Solidity 根据错误类型支持不同类型的 catch 块：</p><p>catch Error(string memory reason) { ... }：如果错误是由 revert(&quot;reasonString&quot;) 或 require(false, &quot;reasonString&quot;) （或导致此类异常的内部错误）引起的，则执行此 catch 子句.</p><p>catch Panic(uint errorCode) { ... }：如果错误是由恐慌引起的，即失败的断言、被零除、无效的数组访问、算术溢出等，将运行此 catch 子句。</p><p>catch (bytes memory lowLevelData) { ... }：如果错误签名与任何其他子句不匹配，如果在解码错误消息时出错，或者如果没有提供错误数据和异常，则执行此子句。在这种情况下，声明的变量提供对低级错误数据的访问。</p><p>catch { ... }：如果您对错误数据不感兴趣，您可以使用 catch { ... }（即使作为唯一的 catch 子句）代替前面的子句。</p><p>计划在未来支持其他类型的错误数据。字符串 Error 和 Panic 当前按原样解析，不被视为标识符。</p><p>为了捕获所有错误情况，您必须至少有子句 catch { ...} 或子句 catch (bytes memory lowLevelData) { ... }。</p><p>在 return 和 catch 子句中声明的变量只在后面的块中。</p><ul><li>笔记</li></ul><p>如果在 try/catch 语句中的返回数据解码过程中发生错误，这会导致当前执行的合约出现异常，因此不会在 catch 子句中捕获。如果在catch Error(string memory reason)的解码过程中出现错误，并且有一个低级的catch子句，这个错误就会被捕获到那里。</p><ul><li>笔记</li></ul><p>如果执行到达一个catch-block，则外部调用的状态改变效果已经恢复。如果执行到达成功块，则效果不会恢复。如果效果已恢复，则在 catch 块中继续执行或 try/catch 语句本身的执行恢复（例如，由于上述解码失败或由于未提供低级 catch 子句）。</p><ul><li>笔记</li></ul><p>呼叫失败背后的原因可能是多方面的。不要假设错误消息直接来自被调用的合约：错误可能发生在调用链的更深处，而被调用的合约只是转发了它。此外，这可能是由于气体不足的情况，而不是故意的错误情况：调用者始终在调用中保留至少 1/64 的气体，因此即使被调用的合约耗尽气体，调用者还剩一些气。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.soliditylang.org/en/latest/control-structures.html" target="_blank" rel="noopener noreferrer">https://docs.soliditylang.org/en/latest/control-structures.html</a></p>`,34)]))}const k=i(t,[["render",l]]),d=JSON.parse('{"path":"/posts/Lang/2022-05-22-solidity-16-expression-and-control-struct.html","title":"Solidity-16-Expressions and Control Structures","lang":"zh-CN","frontmatter":{"title":"Solidity-16-Expressions and Control Structures","date":"2022-05-22T00:00:00.000Z","categories":["Lang"],"tags":["lang","solidity","sh"],"published":true,"description":"控制结构 从花括号语言中知道的大多数控制结构都可以在 Solidity 中使用： 有：if、else、while、do、for、break、continue、return，具有 C 或 JavaScript 中已知的常用语义。 Solidity 还支持 try/catch 语句形式的异常处理，但仅适用于外部函数调用和合约创建调用。 可以使用 rever...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2022-05-22-solidity-16-expression-and-control-struct.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Solidity-16-Expressions and Control Structures"}],["meta",{"property":"og:description","content":"控制结构 从花括号语言中知道的大多数控制结构都可以在 Solidity 中使用： 有：if、else、while、do、for、break、continue、return，具有 C 或 JavaScript 中已知的常用语义。 Solidity 还支持 try/catch 语句形式的异常处理，但仅适用于外部函数调用和合约创建调用。 可以使用 rever..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"solidity"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2022-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Solidity-16-Expressions and Control Structures\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":22.36,"words":6709},"filePathRelative":"posts/Lang/2022-05-22-solidity-16-expression-and-control-struct.md","localizedDate":"2022年5月22日","excerpt":"\\n<p>从花括号语言中知道的大多数控制结构都可以在 Solidity 中使用：</p>\\n<p>有：if、else、while、do、for、break、continue、return，具有 C 或 JavaScript 中已知的常用语义。</p>\\n<p>Solidity 还支持 try/catch 语句形式的异常处理，但仅适用于外部函数调用和合约创建调用。 可以使用 revert 语句创建错误。</p>\\n<p>条件句不能省略括号，但单语句体周围的花括号可以省略。</p>\\n<p>请注意，没有像 C 和 JavaScript 那样从非布尔类型转换为布尔类型，因此 if (1) { ... } 不是有效的 Solidity。</p>","autoDesc":true}');export{k as comp,d as data};
