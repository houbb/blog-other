import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-CEDSurVN.js";const t={};function l(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="图表容器及大小" tabindex="-1"><a class="header-anchor" href="#图表容器及大小"><span>图表容器及大小</span></a></h1><p>在快速上手中，我们介绍了初始化 ECharts 的接口 echarts.init。</p><p>API 文档中详细介绍了参数的具体含义，建议理解后再阅读本文。</p><p>下面，我们就常见的几种使用场景，介绍如何初始化一个图表以及改变其大小。</p><h1 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h1><h2 id="在-html-中定义有宽度和高度的父容器-推荐" tabindex="-1"><a class="header-anchor" href="#在-html-中定义有宽度和高度的父容器-推荐"><span>在 HTML 中定义有宽度和高度的父容器（推荐）</span></a></h2><p>通常来说，需要在 HTML 中先定义一个 \`\` 节点，并且通过 CSS 使得该节点具有宽度和高度。</p><p>初始化的时候，传入该节点，图表的大小默认即为该节点的大小，除非声明了 opts.width 或 opts.height 将其覆盖。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  var myChart = echarts.init(document.getElementById(&#39;main&#39;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，使用这种方法在调用 echarts.init 时需保证容器已经有宽度和高度了。</p><h2 id="指定图表的大小" tabindex="-1"><a class="header-anchor" href="#指定图表的大小"><span>指定图表的大小</span></a></h2><p>如果图表容器不存在宽度和高度，或者，你希望图表宽度和高度不等于容器大小，也可以在初始化的时候指定大小。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  var myChart = echarts.init(document.getElementById(&#39;main&#39;), null, {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: 600,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: 400</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps: 这种更加适合动态指定大小的场景</p><h1 id="响应容器大小的变化" tabindex="-1"><a class="header-anchor" href="#响应容器大小的变化"><span>响应容器大小的变化</span></a></h1><h2 id="监听图表容器的大小并改变图表大小" tabindex="-1"><a class="header-anchor" href="#监听图表容器的大小并改变图表大小"><span>监听图表容器的大小并改变图表大小</span></a></h2><p>在有些场景下，我们希望当容器大小改变时，图表的大小也相应地改变。</p><p>比如，图表容器是一个高度为 300px、宽度为页面 100% 的节点，你希望在浏览器宽度改变的时候，始终保持图表宽度是页面的 100%。</p><p>这种情况下，可以监听页面的 window.onresize 事件获取浏览器大小改变的事件，然后调用 echartsInstance.resize 改变图表的大小。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  #main,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  html,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  body {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    width: 100%;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  #main {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    height: 400px;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  var myChart = echarts.init(document.getElementById(&#39;main&#39;));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  window.onresize = function() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    myChart.resize();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为图表设置特定的大小" tabindex="-1"><a class="header-anchor" href="#为图表设置特定的大小"><span>为图表设置特定的大小</span></a></h2><p>除了直接调用 resize() 不含参数的形式之外，还可以指定宽度和高度，实现图表大小不等于容器大小的效果。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">myChart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  width</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 800</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  height</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 400</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小贴士：阅读 API 文档的时候要留意接口的定义方式，这一接口有时会被误认为是 myCharts.resize(800, 400) 的形式，但其实不存在这样的调用方式。</p><h2 id="容器节点被销毁以及被重建时" tabindex="-1"><a class="header-anchor" href="#容器节点被销毁以及被重建时"><span>容器节点被销毁以及被重建时</span></a></h2><p>假设页面中存在多个标签页，每个标签页都包含一些图表。</p><p>当选中一个标签页的时候，其他标签页的内容在 DOM 中被移除了。</p><p>这样，当用户再选中这些标签页的时候，就会发现图表“不见”了。</p><p>本质上，这是由于图表的容器节点被移除导致的。即使之后该节点被重新添加，图表所在的节点也已经不存在了。</p><p>正确的做法是，在图表容器被销毁之后，调用 echartsInstance.dispose 销毁实例，在图表容器重新被添加后再次调用 echarts.init 初始化。</p><blockquote><p>小贴士：在容器节点被销毁时，总是应调用 echartsInstance.dispose 以销毁实例释放资源，避免内存泄漏。</p></blockquote>`,31)]))}const d=i(t,[["render",l]]),c=JSON.parse('{"path":"/posts/UI/2017-05-27-echart-02-chart-size.html","title":"ECharts-02-图表容器及大小","lang":"zh-CN","frontmatter":{"title":"ECharts-02-图表容器及大小","date":"2017-05-27T00:00:00.000Z","categories":["UI"],"tags":["ui","html","js"],"published":true,"description":"图表容器及大小 在快速上手中，我们介绍了初始化 ECharts 的接口 echarts.init。 API 文档中详细介绍了参数的具体含义，建议理解后再阅读本文。 下面，我们就常见的几种使用场景，介绍如何初始化一个图表以及改变其大小。 初始化 在 HTML 中定义有宽度和高度的父容器（推荐） 通常来说，需要在 HTML 中先定义一个 `` 节点，并且通...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/UI/2017-05-27-echart-02-chart-size.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"ECharts-02-图表容器及大小"}],["meta",{"property":"og:description","content":"图表容器及大小 在快速上手中，我们介绍了初始化 ECharts 的接口 echarts.init。 API 文档中详细介绍了参数的具体含义，建议理解后再阅读本文。 下面，我们就常见的几种使用场景，介绍如何初始化一个图表以及改变其大小。 初始化 在 HTML 中定义有宽度和高度的父容器（推荐） 通常来说，需要在 HTML 中先定义一个 `` 节点，并且通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"ui"}],["meta",{"property":"article:tag","content":"html"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2017-05-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ECharts-02-图表容器及大小\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-05-27T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":2.75,"words":825},"filePathRelative":"posts/UI/2017-05-27-echart-02-chart-size.md","localizedDate":"2017年5月27日","excerpt":"\\n<p>在快速上手中，我们介绍了初始化 ECharts 的接口 echarts.init。</p>\\n<p>API 文档中详细介绍了参数的具体含义，建议理解后再阅读本文。</p>\\n<p>下面，我们就常见的几种使用场景，介绍如何初始化一个图表以及改变其大小。</p>\\n<h1>初始化</h1>\\n<h2>在 HTML 中定义有宽度和高度的父容器（推荐）</h2>\\n<p>通常来说，需要在 HTML 中先定义一个 `` 节点，并且通过 CSS 使得该节点具有宽度和高度。</p>\\n<p>初始化的时候，传入该节点，图表的大小默认即为该节点的大小，除非声明了 opts.width 或 opts.height 将其覆盖。</p>","autoDesc":true}');export{d as comp,c as data};
