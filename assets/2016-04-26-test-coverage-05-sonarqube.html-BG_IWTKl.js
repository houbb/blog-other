import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,o as a}from"./app-CEDSurVN.js";const t={};function s(i,e){return a(),o("div",null,e[0]||(e[0]=[n('<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/06/23/test-04-test-converage" target="_blank" rel="noopener noreferrer">test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍</a></p><p><a href="https://houbb.github.io/2018/06/23/test-05-jacoco-idea-plugin" target="_blank" rel="noopener noreferrer">test 系统学习-05-test jacoco 测试覆盖率与 idea 插件</a></p><p><a href="https://houbb.github.io/2018/06/23/test-06-jacoco-overview" target="_blank" rel="noopener noreferrer">test 系统学习-06-test jacoco</a></p><p><a href="https://houbb.github.io/2016/10/14/sonarQube" target="_blank" rel="noopener noreferrer">SonarQube</a></p><p><a href="https://houbb.github.io/2019/12/18/docker-learn-29-install-devops-sonar" target="_blank" rel="noopener noreferrer">Docker learn-29-docker 安装 sonarQube with mysql</a></p><p><a href="https://houbb.github.io/2018/08/14/ubuntu-sonar" target="_blank" rel="noopener noreferrer">Ubuntu Sonar</a></p><h1 id="sonarqube" tabindex="-1"><a class="header-anchor" href="#sonarqube"><span>SonarQube</span></a></h1><h2 id="sonarqube-10-3-文档" tabindex="-1"><a class="header-anchor" href="#sonarqube-10-3-文档"><span>SonarQube 10.3 文档</span></a></h2><p>SonarQube是一款自我管理的自动代码审查工具，系统地帮助您交付整洁的代码。作为我们Sonar解决方案的核心元素，SonarQube集成到您现有的工作流程中，并检测代码中的问题，以帮助您对项目进行持续的代码检查。该产品分析30多种不同的编程语言，并集成到您的持续集成（CI）管道中，以确保您的代码符合高质量的标准。</p><h2 id="编写整洁的代码" tabindex="-1"><a class="header-anchor" href="#编写整洁的代码"><span>编写整洁的代码</span></a></h2><p>整洁的代码是产生安全、可靠和可维护软件的标准，因此，编写整洁的代码对于保持健康的代码库至关重要。这适用于所有类型的代码：源代码、测试代码、基础设施代码、粘合代码、脚本等。有关详细信息，请参见整洁的代码。</p><p>Sonar的“边写边整洁”方法消除了在开发过程的后期审查代码时产生的许多问题。边写边整洁方法利用您的质量门，在新代码（已添加或更改的代码）中发现需要修复或审查的问题时向您发出警告/通知，使您能够保持高标准并专注于代码质量。</p><h2 id="使用sonar进行开发" tabindex="-1"><a class="header-anchor" href="#使用sonar进行开发"><span>使用Sonar进行开发</span></a></h2><p>Sonar解决方案在开发过程的每个阶段执行检查：</p><ul><li>SonarLint在您编写代码时在IDE中提供即时反馈，以便在提交之前找到并修复问题。</li><li>SonarQube的PR分析与SonarQube的PR分析和使用质量门一起适应您的CI/CD工作流程。</li><li>质量门阻止具有问题的代码发布到生产环境，这是帮助您采用“边写边整洁”方法的关键工具。</li><li>边写边整洁方法帮助您专注于提交新的、整洁的生产代码，同时知道随着时间的推移，现有代码将得到改进。</li></ul><h2 id="了解有关sonarqube检测的问题类型的更多信息。" tabindex="-1"><a class="header-anchor" href="#了解有关sonarqube检测的问题类型的更多信息。"><span>了解有关SonarQube检测的问题类型的更多信息。</span></a></h2><p>组织从默认的规则和指标集开始，称为Sonar way质量配置文件。这可以根据项目进行定制，以满足不同的技术要求。分析中提出的问题与质量配置文件中定义的条件进行比较，以建立您的质量门。</p><p>质量门是代码质量的指示器，可配置为对当前发布的代码进行go/no-go信号。它指示您的代码是否整洁并可以继续前进。</p><ul><li>通过（绿色）的质量门表示代码符合您的标准，准备合并。</li><li>失败（红色）的质量门表示存在问题需要解决。</li></ul><p>SonarQube通过其用户界面、电子邮件以及在拉取或合并请求上的装饰（在商业版本中）提供反馈，以通知您的团队存在问题需要解决。在运行连接模式的SonarLint支持的IDE中也可以获得反馈。SonarQube还就每个问题提供深入的指导，告诉您为什么每个问题是个问题以及如何修复，为所有经验水平的开发人员提供了有价值的教育层面。然后，开发人员可以有效地解决问题，因此只有在代码整洁且通过了质量门的情况下，代码才会被推进。</p><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h2><p>既然您已经了解了SonarQube如何帮助您编写整洁的代码，您可以尝试使用SonarQube。您可以运行一个本地的非生产实例的SonarQube并进行初始项目分析。安装本地实例可以让您迅速上手，以便亲身体验SonarQube。然后，当您准备在生产环境中设置SonarQube时，您需要在配置第一次代码分析之前安装服务器。</p><p>分析源代码部分解释了如何设置所有分析的各种版本，包括如何分析项目的分支和拉取请求。</p><h2 id="更多入门资源" tabindex="-1"><a class="header-anchor" href="#更多入门资源"><span>更多入门资源</span></a></h2><ul><li>如何设置和升级</li><li>如何创建和导入项目</li><li>如何管理实例</li><li>如何设置投资组合</li></ul><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-sonarqube" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-sonarqube"><span>详细介绍一下 SonarQube</span></a></h2><p>SonarQube（前身为 Sonar）是一个开源的代码质量管理平台，用于评估和监控软件代码的质量。</p><p>它提供了一套强大的工具，帮助开发团队发现和解决代码中的缺陷、漏洞和其他与代码质量相关的问题。</p><p>SonarQube支持多种编程语言，包括Java、C#、C++、Python等。</p><p>以下是 SonarQube 的主要特性和组件：</p><ol><li><p><strong>静态代码分析：</strong> SonarQube通过对源代码的静态分析，检查代码中的潜在问题、代码规范违规、安全漏洞等。它使用一系列规则和规范，通过扫描源代码来识别这些问题。</p></li><li><p><strong>多语言支持：</strong> SonarQube不仅仅支持单一语言，而是涵盖了多种主流编程语言，包括Java、C#、C++、Python、JavaScript等。这使得它适用于各种类型的项目。</p></li><li><p><strong>可扩展性：</strong> SonarQube可以通过插件进行扩展，以支持特定于项目或组织的需求。这些插件可以添加新的规则、报告模板、集成第三方工具等。</p></li><li><p><strong>代码复杂度和覆盖率分析：</strong> SonarQube提供了有关代码复杂性和测试覆盖率的详细报告。这有助于团队了解代码的难度，并确保测试用例覆盖足够全面。</p></li><li><p><strong>可视化仪表板：</strong> SonarQube生成直观的仪表板，显示有关项目的各种指标和度量值。这有助于团队实时监控代码质量并及时采取行动。</p></li><li><p><strong>质量门：</strong> 可以定义质量门，要求在提交代码前通过一定的质量标准。这有助于防止低质量的代码进入代码库。</p></li><li><p><strong>集成支持：</strong> SonarQube能够与许多持续集成和开发工具集成，包括Jenkins、GitLab、GitHub等。这使得它能够无缝地与团队的现有工作流程集成。</p></li><li><p><strong>安全漏洞检测：</strong> SonarQube还能够检测代码中的安全漏洞，帮助开发团队提高应用程序的安全性。</p></li></ol><p>总的来说，SonarQube是一个功能强大的工具，通过自动化和集成代码分析，帮助团队提高代码质量、降低技术债务，并加速软件交付过程。</p><p>它在持续集成和持续交付（CI/CD）流程中发挥着关键作用，为开发者、测试人员和项目经理提供了有价值的反馈和洞察。</p><h2 id="sonarqube-是如何实现-可扩展性的" tabindex="-1"><a class="header-anchor" href="#sonarqube-是如何实现-可扩展性的"><span>SonarQube 是如何实现 可扩展性的？</span></a></h2><p>SonarQube实现可扩展性的关键在于其插件系统。插件系统允许用户根据其特定的需求和项目要求，通过添加新的规则、定制报告、扩展支持的编程语言等方式，扩展SonarQube的功能。</p><p>以下是SonarQube实现可扩展性的主要方面：</p><ol><li><p><strong>插件机制：</strong> SonarQube的核心架构允许用户通过插件来扩展其功能。插件可以添加新的规则、报告模板、仪表板小部件等，以满足特定的需求。SonarQube社区提供了大量的官方插件，同时也支持用户自定义插件。</p></li><li><p><strong>插件开发框架：</strong> SonarQube提供了强大的插件开发框架，简化了插件的开发过程。插件可以使用Java编写，并通过SonarQube的API与核心系统进行交互。这种开发框架使得用户可以轻松地定制和扩展SonarQube的功能。</p></li><li><p><strong>多语言支持：</strong> SonarQube支持多种主流编程语言，包括Java、C#、C++、Python等。这种多语言支持使得SonarQube可以在不同类型的项目中使用，并满足各种开发团队的需求。</p></li><li><p><strong>丰富的规则集：</strong> SonarQube内置了大量的规则集，涵盖了代码质量、性能、安全性等方面。用户可以通过启用或禁用这些规则，定制适合其项目的规则集。同时，用户还可以添加自定义规则，以满足特定的代码审查需求。</p></li><li><p><strong>仪表板和报告：</strong> SonarQube的仪表板和报告可以通过插件进行定制。用户可以添加自定义的图表、指标和仪表板小部件，以便更好地监控项目的代码质量和进度。</p></li></ol><p>通过这些可扩展性的机制，SonarQube变得灵活且适应性强，可以满足不同团队和项目的需求。</p><p>这种可扩展性使得SonarQube成为一个强大的工具，可以适应各种开发环境和工作流程，并随着需求的变化而不断演进。</p><h2 id="sonarqube-如何与-jenkins-整合" tabindex="-1"><a class="header-anchor" href="#sonarqube-如何与-jenkins-整合"><span>SonarQube 如何与 Jenkins 整合</span></a></h2><p>SonarQube和Jenkins的整合允许在持续集成（CI）和持续交付（CD）过程中进行自动化的代码质量分析。</p><p>下面是将SonarQube与Jenkins整合的一般步骤：</p><ol><li><p><strong>安装和配置SonarQube：</strong></p><ul><li>在SonarQube官方网站上下载并安装SonarQube服务器。</li><li>启动SonarQube服务器，并访问Web界面。</li><li>在SonarQube中创建一个项目，并获取项目的唯一标识（Project Key）。</li></ul></li><li><p><strong>安装SonarQube Scanner：</strong></p><ul><li>下载并安装SonarQube Scanner，这是一个与SonarQube集成的命令行工具。</li><li>在Jenkins服务器上安装SonarQube Scanner插件。</li></ul></li><li><p><strong>配置SonarQube服务器信息：</strong></p><ul><li>在Jenkins中配置SonarQube服务器的信息，包括服务器的URL和凭据（如果有）。</li><li>在Jenkins中配置全局工具设置，指定SonarQube Scanner的安装路径。</li></ul></li><li><p><strong>配置Jenkins Job：</strong></p><ul><li>在Jenkins中创建或编辑一个项目（Job），配置它以执行构建任务。</li><li>在构建环境中配置构建步骤，添加&quot;Invoke Standalone SonarQube Analysis&quot;构建步骤。</li></ul></li><li><p><strong>配置SonarQube分析属性：</strong></p><ul><li>在Jenkins Job中，为SonarQube分析指定必要的属性，如SonarQube服务器URL、项目Key等。</li><li>可以通过Jenkins Job配置界面或在构建脚本中使用相应的属性来完成。</li></ul></li><li><p><strong>配置触发条件：</strong></p><ul><li>在Jenkins中配置构建触发条件，例如当代码提交到源代码库时自动触发构建任务。</li><li>可以使用Jenkins的Webhooks或轮询源代码库等方式。</li></ul></li><li><p><strong>保存并运行Jenkins Job：</strong></p><ul><li>保存Jenkins Job配置并运行构建任务。</li><li>Jenkins将触发构建、执行SonarQube代码分析，并将分析结果发送到SonarQube服务器。</li></ul></li><li><p><strong>查看SonarQube报告：</strong></p><ul><li>在SonarQube服务器上查看生成的代码分析报告。</li><li>SonarQube提供了详细的代码质量指标、问题追踪、图表和仪表板，帮助团队了解代码质量状况。</li></ul></li></ol><p>通过这种集成，团队可以在代码提交时自动进行代码质量分析，及时发现和修复问题，确保高质量的代码进入代码库。</p><p>整合SonarQube和Jenkins有助于构建一个健康的持续集成和持续交付流程。</p><h2 id="sonarqube-的-静态代码分析原理" tabindex="-1"><a class="header-anchor" href="#sonarqube-的-静态代码分析原理"><span>SonarQube 的 静态代码分析原理</span></a></h2><p>SonarQube的静态代码分析是通过对源代码进行静态分析来检测潜在问题和代码质量问题的一种方法。</p><p>这个过程主要基于一系列规则、规范和算法。</p><p>以下是SonarQube静态代码分析的基本原理：</p><ol><li><p><strong>规则引擎：</strong> SonarQube使用一个规则引擎来定义和执行静态代码分析规则。这些规则可以涵盖代码质量、性能、安全性等方面。规则引擎根据这些规则在源代码中寻找模式，并标识出潜在的问题。</p></li><li><p><strong>语法和语义分析：</strong> SonarQube对源代码进行语法和语义分析，以理解代码的结构、关系和含义。这有助于更深入地理解代码中的问题，而不仅仅是表面上的语法错误。</p></li><li><p><strong>代码流分析：</strong> SonarQube通过代码流分析来追踪变量和数据在代码中的传递和处理方式。这有助于检测潜在的空指针引用、数据流问题和其他与代码流相关的问题。</p></li><li><p><strong>数据和控制流分析：</strong> 通过分析代码的数据流和控制流，SonarQube能够识别代码中的依赖关系、逻辑错误和潜在的漏洞。这包括对条件语句、循环和异常处理的分析。</p></li><li><p><strong>代码度量：</strong> SonarQube收集有关代码度量的信息，如代码行数、圈复杂性、函数复杂性等。这些度量不仅用于评估代码的质量，还用于检测潜在的性能和可维护性问题。</p></li><li><p><strong>插件系统：</strong> SonarQube的插件系统允许用户根据他们的需求添加新的规则和扩展。这使得SonarQube可以根据特定项目、组织或技术栈进行定制，以适应不同的开发环境。</p></li></ol><p>总的来说，SonarQube的静态代码分析原理基于深入的语法和语义分析、代码流分析、数据和控制流分析，以及一系列事先定义的规则。</p><p>这些分析帮助开发团队识别潜在问题、改善代码质量，提供及时的反馈，并帮助项目保持高质量的代码。</p><h2 id="sonarqube-的最佳实践" tabindex="-1"><a class="header-anchor" href="#sonarqube-的最佳实践"><span>SonarQube 的最佳实践</span></a></h2><p>使用SonarQube进行代码质量管理时，有一些最佳实践可以帮助团队充分发挥其潜力，提高代码质量和开发效率：</p><ol><li><p><strong>集成到持续集成流程：</strong> 将SonarQube集成到持续集成（CI）和持续交付（CD）流程中，确保在代码提交时自动执行代码分析。这有助于及早发现和修复问题，确保高质量的代码进入代码库。</p></li><li><p><strong>设置质量门：</strong> 在SonarQube中设置质量门，要求在提交代码前通过一定的质量标准。这有助于防止低质量的代码进入代码库，保持整体代码质量。</p></li><li><p><strong>定期执行代码审查：</strong> 使用SonarQube的报告和仪表板，定期进行代码审查。关注代码质量指标、问题趋势和可视化仪表板，确保团队了解项目的整体健康状况。</p></li><li><p><strong>自定义规则集：</strong> 根据项目的特定需求，启用、禁用或自定义SonarQube的规则集。确保规则集对项目的实际情况有意义，有助于减少误报和集中关注关键问题。</p></li><li><p><strong>规划技术债务：</strong> 使用SonarQube的技术债务功能，识别和规划项目中的技术债务。通过这种方式，团队可以有计划地解决技术债务，提高代码的可维护性和可读性。</p></li><li><p><strong>关注安全漏洞：</strong> SonarQube能够检测代码中的安全漏洞，确保项目的安全性。关注并及时修复这些问题，以提高应用程序的安全性。</p></li><li><p><strong>定期升级SonarQube：</strong> 定期升级到SonarQube的最新版本，以获取新功能、性能改进和安全修复。保持工具的最新状态有助于提高整体效能。</p></li><li><p><strong>合理使用仪表板：</strong> 在SonarQube的仪表板中配置关键的指标和图表，以便团队能够直观地了解代码质量的状况。确保仪表板具有实际的业务价值。</p></li><li><p><strong>灵活配置通知：</strong> 配置SonarQube的通知机制，确保团队能够及时收到代码质量报告。这有助于团队在问题出现时迅速做出反应。</p></li><li><p><strong>持续学习和培训：</strong> 持续学习SonarQube的新功能和最佳实践，并通过培训确保团队能够充分利用工具的潜力。这有助于不断提升团队的技能和意识。</p></li></ol><p>以上这些最佳实践能够帮助团队充分利用SonarQube来提高代码质量、降低技术债务，并在整个软件开发周期中保持高水平的代码质量。</p><h2 id="给出-sonarqube-学习资料-包含网址" tabindex="-1"><a class="header-anchor" href="#给出-sonarqube-学习资料-包含网址"><span>给出 SonarQube 学习资料，包含网址</span></a></h2><p>以下是一些学习SonarQube的官方和其他资源，你可以通过这些资源深入了解SonarQube的使用和最佳实践：</p><ol><li><p><strong>官方文档：</strong></p><ul><li><a href="https://docs.sonarqube.org/" target="_blank" rel="noopener noreferrer">SonarQube Documentation</a>: SonarQube的官方文档，包含详细的安装、配置和使用指南，以及各种功能的解释和示例。</li></ul></li><li><p><strong>官方社区：</strong></p><ul><li><a href="https://community.sonarsource.com/" target="_blank" rel="noopener noreferrer">SonarSource Community</a>: SonarQube官方社区，你可以在这里提问、分享经验和获取帮助。</li></ul></li><li><p><strong>教程和博客：</strong></p><ul><li><a href="https://www.tutorialspoint.com/sonarqube/index.htm" target="_blank" rel="noopener noreferrer">SonarQube Tutorials</a>: Tutorialspoint上的SonarQube教程，提供了入门和高级的学习资源。</li><li><a href="https://blog.sonarsource.com/" target="_blank" rel="noopener noreferrer">SonarSource Blog</a>: SonarSource官方博客，包含有关SonarQube最新发展、最佳实践和使用案例的文章。</li></ul></li><li><p><strong>视频教程：</strong></p><ul><li><a href="https://www.youtube.com/watch?v=T3buzbEwbBw" target="_blank" rel="noopener noreferrer">SonarQube - Code Quality Analysis Tool</a>: YouTube上的SonarQube视频教程，提供了基本的使用和配置指南。</li></ul></li><li><p><strong>书籍：</strong></p><ul><li>&quot;Mastering SonarQube&quot; by Patroklos Papapetrou: 这本书提供了深入的SonarQube使用和配置方面的知识。</li></ul></li><li><p><strong>GitHub存储库：</strong></p><ul><li><a href="https://github.com/SonarSource/sonarqube" target="_blank" rel="noopener noreferrer">SonarQube GitHub Repository</a>: SonarQube的官方GitHub存储库，包含源代码和其他与SonarQube相关的资源。</li></ul></li><li><p><strong>培训和课程：</strong></p><ul><li><a href="https://www.sonarqube.org/training/" target="_blank" rel="noopener noreferrer">SonarQube Training</a>: SonarQube官方培训资源，提供在线培训和课程。</li></ul></li><li><p><strong>Stack Overflow：</strong></p><ul><li><a href="https://stackoverflow.com/questions/tagged/sonarqube" target="_blank" rel="noopener noreferrer">SonarQube Tag on Stack Overflow</a>: Stack Overflow上关于SonarQube的问题和答案，你可以在这里找到其他开发者的经验分享。</li></ul></li></ol><p>请注意，由于资源的更新和变动，建议查看官方文档和社区以获取最新的学习资料。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.sonarsource.com/sonarqube/latest/" target="_blank" rel="noopener noreferrer">https://docs.sonarsource.com/sonarqube/latest/</a></p>',64)]))}const u=r(t,[["render",s]]),b=JSON.parse('{"path":"/posts/tests/2016-04-26-test-coverage-05-sonarqube.html","title":"test coverate-05-测试覆盖率 SonarQube 是一个综合性的代码质量管理平台，其中包含了对测试覆盖率的支持","lang":"zh-CN","frontmatter":{"title":"test coverate-05-测试覆盖率 SonarQube 是一个综合性的代码质量管理平台，其中包含了对测试覆盖率的支持","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["java","test"],"published":true,"description":"拓展阅读 test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍 test 系统学习-05-test jacoco 测试覆盖率与 idea 插件 test 系统学习-06-test jacoco SonarQube Docker learn-29-docker 安装 sonarQube with mysql Ubun...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-coverage-05-sonarqube.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test coverate-05-测试覆盖率 SonarQube 是一个综合性的代码质量管理平台，其中包含了对测试覆盖率的支持"}],["meta",{"property":"og:description","content":"拓展阅读 test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍 test 系统学习-05-test jacoco 测试覆盖率与 idea 插件 test 系统学习-06-test jacoco SonarQube Docker learn-29-docker 安装 sonarQube with mysql Ubun..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test coverate-05-测试覆盖率 SonarQube 是一个综合性的代码质量管理平台，其中包含了对测试覆盖率的支持\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":15.05,"words":4516},"filePathRelative":"posts/tests/2016-04-26-test-coverage-05-sonarqube.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2018/06/23/test-04-test-converage\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍</a></p>\\n<p><a href=\\"https://houbb.github.io/2018/06/23/test-05-jacoco-idea-plugin\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">test 系统学习-05-test jacoco 测试覆盖率与 idea 插件</a></p>","autoDesc":true}');export{u as comp,b as data};
