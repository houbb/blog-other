import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-uJE4P3e0.js";const t={};function h(e,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="grovvy-可以用来做什么" tabindex="-1"><a class="header-anchor" href="#grovvy-可以用来做什么"><span>grovvy 可以用来做什么</span></a></h1><p>Groovy 是一种基于 Java 平台的动态编程语言，它可以用于多种用途，包括以下几个方面：</p><ol><li><p>脚本编程：Groovy 提供了简洁而灵活的语法，可以用于编写脚本。你可以使用 Groovy 编写用于自动化任务、批处理脚本、快速原型开发等的脚本程序。</p></li><li><p>Java 应用程序开发：Groovy 与 Java 无缝集成，可以与 Java 代码互操作。你可以在 Java 应用程序中使用 Groovy 编写部分逻辑，或者使用 Groovy 编写完整的应用程序。Groovy 提供了更简洁的语法和更丰富的功能，可以提高开发效率。</p></li><li><p>测试：Groovy 有丰富的测试框架，如 Spock 和 Geb，用于编写单元测试和集成测试。这些框架提供了更具表现力和可读性的测试语法，使测试更容易编写和维护。</p></li><li><p>脚本化构建工具：Groovy 在构建工具领域非常流行。Gradle，一种功能强大的构建自动化工具，使用 Groovy 作为其构建脚本语言。你可以使用 Groovy 编写 Gradle 脚本来构建、测试和部署项目。</p></li><li><p>数据处理和脚本化任务：Groovy 提供了强大的集合处理和字符串处理功能，以及方便的文件和网络操作。这使得 Groovy 成为处理数据、批量处理文件、执行网络请求等任务的良好选择。</p></li></ol><p>总之，Groovy 是一种功能丰富、灵活且易于学习的编程语言，适用于各种场景，从脚本编程到大型应用程序开发。</p><p>它可以与 Java 无缝集成，并且提供了许多额外的功能和语法糖，使得编写代码更加简洁和高效。</p><h1 id="给出一个-grovvy-脚本的实用例子" tabindex="-1"><a class="header-anchor" href="#给出一个-grovvy-脚本的实用例子"><span>给出一个 grovvy 脚本的实用例子</span></a></h1><p>当然！以下是一个 Groovy 脚本的实用例子，展示了如何使用 Groovy 进行文件处理和数据操作：</p><div class="language-groovy line-numbers-mode" data-highlighter="shiki" data-ext="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 导入所需的类库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> groovy.json.JsonSlurper</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> java.nio.file.*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 读取 JSON 文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> jsonString</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">readAllBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;data.json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> json</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> JsonSlurper</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parseText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(jsonString)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 处理 JSON 数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">json.each { </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item.name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item.age</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> city </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> item.city</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 打印每个对象的信息</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Name: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Age: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$age</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;City: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$city</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 写入文本文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;This is a sample text file.&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;output.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), content.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">getBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 读取文本文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fileContent</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">readAllBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">Paths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;output.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;File Content: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$fileContent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们首先导入了需要使用的类库，包括 <code>groovy.json.JsonSlurper</code> 用于解析 JSON 数据，以及 <code>java.nio.file.*</code> 用于进行文件操作。</p><p>然后，我们读取名为 <code>data.json</code> 的 JSON 文件，并使用 <code>JsonSlurper</code> 将其解析为 Groovy 中的对象。</p><p>接下来，我们遍历每个 JSON 对象，提取并打印出其中的姓名、年龄和城市信息。</p><p>然后，我们将一段文本写入名为 <code>output.txt</code> 的文本文件中。</p><p>最后，我们读取 <code>output.txt</code> 文件的内容，并打印在控制台上。</p><p>这只是一个简单的示例，展示了 Groovy 脚本在文件处理和数据操作方面的实用性。</p><p>你可以根据具体需求，使用 Groovy 编写更复杂的脚本来处理数据、执行任务等。</p><h1 id="java-程序中如何直接调用-groovy" tabindex="-1"><a class="header-anchor" href="#java-程序中如何直接调用-groovy"><span>java 程序中如何直接调用 groovy</span></a></h1><p>在 Java 程序中，你可以通过使用 GroovyShell 或 GroovyClassLoader 来直接调用 Groovy 代码。</p><h2 id="groovyshell" tabindex="-1"><a class="header-anchor" href="#groovyshell"><span>GroovyShell</span></a></h2><p>下面是两种常见的方法：</p><ol><li>使用 GroovyShell：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> groovy.lang.GroovyShell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GroovyExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GroovyShell</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> shell</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GroovyShell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 定义 Groovy 代码</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> groovyCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;def greet(name) { println &#39;Hello, &#39; + name }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 在 GroovyShell 中执行代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        shell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(groovyCode);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 调用 Groovy 代码中的方法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        shell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invokeMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;greet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们创建了一个 GroovyShell 对象，然后将 Groovy 代码作为字符串传递给 <code>evaluate()</code> 方法进行执行。</p><p>通过调用 <code>invokeMethod()</code> 方法，我们可以在 Java 中调用 Groovy 代码中定义的方法。</p><h2 id="groovyclassloader" tabindex="-1"><a class="header-anchor" href="#groovyclassloader"><span>GroovyClassLoader</span></a></h2><ol start="2"><li>使用 GroovyClassLoader：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> groovy.lang.GroovyClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> groovy.lang.GroovyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GroovyExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GroovyClassLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> classLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GroovyClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 定义 Groovy 代码</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> groovyCode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;def greet(name) { println &#39;Hello, &#39; + name }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 编译 Groovy 代码</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> groovyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> classLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(groovyCode);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建 Groovy 对象实例</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GroovyObject</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> groovyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (GroovyObject) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">groovyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredConstructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 调用 Groovy 对象中的方法</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        groovyObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invokeMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;greet&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用 GroovyClassLoader 加载并编译 Groovy 代码。</p><p>然后，我们通过实例化 Groovy 类，获得一个 GroovyObject 对象。最后，通过调用 <code>invokeMethod()</code> 方法，我们可以在 Java 中调用 Groovy 代码中定义的方法。</p><p>无论你选择哪种方式，都可以在 Java 程序中直接调用 Groovy 代码，实现更灵活和动态的编程。请确保在运行代码时包含 Groovy 的相关依赖库。</p><h2 id="二者的差异是什么-给出对比表格" tabindex="-1"><a class="header-anchor" href="#二者的差异是什么-给出对比表格"><span>二者的差异是什么？给出对比表格</span></a></h2><p>下面是 GroovyShell 和 GroovyClassLoader 之间的一些主要差异，以对比表格的形式呈现：</p><table><thead><tr><th></th><th>GroovyShell</th><th>GroovyClassLoader</th></tr></thead><tbody><tr><td>执行方式</td><td>即时解释执行 Groovy 代码</td><td>编译 Groovy 代码并生成可执行的类</td></tr><tr><td>代码执行</td><td><code>evaluate()</code> 方法执行整个 Groovy 代码字符串</td><td><code>parseClass()</code> 方法将 Groovy 代码编译成 Java 类</td></tr><tr><td>类加载器</td><td>使用默认的类加载器</td><td>可以指定自定义的类加载器</td></tr><tr><td>实例化对象</td><td>无需显式实例化对象</td><td>需要使用反射 API 显式实例化对象</td></tr><tr><td>调用方式</td><td>直接通过 GroovyShell 对象调用方法</td><td>通过实例化 Groovy 类获得 GroovyObject 并调用其方法</td></tr><tr><td>依赖库需求</td><td>需要引入 Groovy 的核心库和相关依赖</td><td>需要引入 Groovy 的核心库和相关依赖，以及额外的 ASM 库</td></tr><tr><td>应用场景</td><td>适用于简单的动态脚本执行和交互式环境</td><td>适用于更复杂的动态脚本和类加载需求，如插件化、脚本引擎等</td></tr></tbody></table><p>根据具体的应用场景和需求，选择适合的方式进行 Groovy 代码的调用和执行。</p><p>GroovyShell 适用于简单的动态脚本执行和交互式环境，而 GroovyClassLoader 更适用于需要更高级的类加载和动态脚本功能的场景。</p><h2 id="那个性能更好-一般规则引擎推荐使用哪一种-为什么" tabindex="-1"><a class="header-anchor" href="#那个性能更好-一般规则引擎推荐使用哪一种-为什么"><span>那个性能更好？一般规则引擎推荐使用哪一种？为什么</span></a></h2><p>在性能方面，一般来说，GroovyClassLoader 的性能通常会优于 GroovyShell。</p><p>这是因为 GroovyShell 在执行代码时会进行实时的解释和解析，而 GroovyClassLoader 则将 Groovy 代码编译成可执行的 Java 类，因此具有更高的执行效率。</p><p><strong>对于一般的规则引擎，通常建议使用 GroovyClassLoader。规则引擎通常需要在运行时动态加载和执行规则，而 GroovyClassLoader 可以提供更好的性能和更高的灵活性。通过将规则编写为 Groovy 代码，并使用 GroovyClassLoader 进行编译和加载，可以实现更快的规则执行和更高效的动态规则更新。</strong></p><p>此外，GroovyClassLoader 还提供了更多的自定义选项，如自定义类加载器，可以实现更高级的类加载控制和隔离，满足规则引擎的特定需求。</p><p>需要注意的是，性能的优劣取决于具体的使用情况和场景，因此在选择使用 GroovyShell 还是 GroovyClassLoader 时，应该结合实际情况进行评估，并进行基准测试以确保最佳性能。</p><h1 id="如何利用-grovvy-结合-java-实现规则引擎-给出完整的思路" tabindex="-1"><a class="header-anchor" href="#如何利用-grovvy-结合-java-实现规则引擎-给出完整的思路"><span>如何利用 grovvy 结合 java 实现规则引擎，给出完整的思路？</span></a></h1><p>利用 Groovy 结合 Java 实现规则引擎的一般思路如下：</p><ol><li><p>定义规则：首先，定义规则，包括规则的条件和动作。规则可以是一系列的条件语句，用于匹配输入数据，并执行相应的动作。</p></li><li><p>编写规则脚本：使用 Groovy 编写规则脚本，将规则以可执行的代码的形式表达出来。在规则脚本中，可以使用 Groovy 提供的语法和功能来实现规则的条件匹配和动作执行。</p></li><li><p>构建规则引擎基础：在 Java 中构建规则引擎的基础结构，包括规则引擎的类和方法，用于加载和执行规则脚本。</p></li><li><p>加载规则脚本：使用 GroovyClassLoader 加载规则脚本文件或字符串，将其编译成可执行的 Java 类。</p></li><li><p>实例化规则对象：通过反射机制实例化规则类，并获取规则对象。</p></li><li><p>执行规则：将输入数据传递给规则对象，并调用规则对象的方法来执行规则。在规则对象中，可以根据规则脚本中定义的条件逻辑，对输入数据进行匹配，并执行相应的动作。</p></li><li><p>输出结果：根据规则执行的结果，输出相应的结果或触发相应的操作。</p></li><li><p>可选：提供动态规则更新：通过监听规则脚本的变化，实现动态规则更新的功能。当规则脚本发生变化时，重新加载和执行规则，以更新规则引擎的行为。</p></li></ol><p>这是一个基本的思路框架，实际实现时可以根据具体需求进行适当调整和扩展。需要注意的是，规则引擎的实现涉及到安全性、性能等方面的考虑，因此在设计和实现过程中需要综合考虑这些因素。</p><p>值得一提的是，除了自行实现规则引擎，也可以考虑使用现有的规则引擎库，如 Drools，它提供了强大的规则引擎功能，并且支持 Groovy 作为规则语言。</p><p>使用现有的规则引擎库可以减少开发工作量，并提供更丰富的特性和可靠性。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p>chatGPT</p><p><a href="https://groovy-lang.org/dsls.html" target="_blank" rel="noopener noreferrer">https://groovy-lang.org/dsls.html</a></p>`,49)]))}const r=i(t,[["render",h]]),d=JSON.parse('{"path":"/posts/Lang/2023-05-09-grovvy-08-grovvy-in-action.html","title":"grovvy-08-grovvy 能用来做什么？java 如何使用 groovy","lang":"zh-CN","frontmatter":{"title":"grovvy-08-grovvy 能用来做什么？java 如何使用 groovy","date":"2023-05-09T00:00:00.000Z","categories":["Lang"],"tags":["grovvy","lang","sh"],"published":true,"description":"grovvy 可以用来做什么 Groovy 是一种基于 Java 平台的动态编程语言，它可以用于多种用途，包括以下几个方面： 脚本编程：Groovy 提供了简洁而灵活的语法，可以用于编写脚本。你可以使用 Groovy 编写用于自动化任务、批处理脚本、快速原型开发等的脚本程序。 Java 应用程序开发：Groovy 与 Java 无缝集成，可以与 Jav...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Lang/2023-05-09-grovvy-08-grovvy-in-action.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"grovvy-08-grovvy 能用来做什么？java 如何使用 groovy"}],["meta",{"property":"og:description","content":"grovvy 可以用来做什么 Groovy 是一种基于 Java 平台的动态编程语言，它可以用于多种用途，包括以下几个方面： 脚本编程：Groovy 提供了简洁而灵活的语法，可以用于编写脚本。你可以使用 Groovy 编写用于自动化任务、批处理脚本、快速原型开发等的脚本程序。 Java 应用程序开发：Groovy 与 Java 无缝集成，可以与 Jav..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"grovvy"}],["meta",{"property":"article:tag","content":"lang"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2023-05-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"grovvy-08-grovvy 能用来做什么？java 如何使用 groovy\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":8.16,"words":2447},"filePathRelative":"posts/Lang/2023-05-09-grovvy-08-grovvy-in-action.md","localizedDate":"2023年5月9日","excerpt":"\\n<p>Groovy 是一种基于 Java 平台的动态编程语言，它可以用于多种用途，包括以下几个方面：</p>\\n<ol>\\n<li>\\n<p>脚本编程：Groovy 提供了简洁而灵活的语法，可以用于编写脚本。你可以使用 Groovy 编写用于自动化任务、批处理脚本、快速原型开发等的脚本程序。</p>\\n</li>\\n<li>\\n<p>Java 应用程序开发：Groovy 与 Java 无缝集成，可以与 Java 代码互操作。你可以在 Java 应用程序中使用 Groovy 编写部分逻辑，或者使用 Groovy 编写完整的应用程序。Groovy 提供了更简洁的语法和更丰富的功能，可以提高开发效率。</p>\\n</li>\\n<li>\\n<p>测试：Groovy 有丰富的测试框架，如 Spock 和 Geb，用于编写单元测试和集成测试。这些框架提供了更具表现力和可读性的测试语法，使测试更容易编写和维护。</p>\\n</li>\\n<li>\\n<p>脚本化构建工具：Groovy 在构建工具领域非常流行。Gradle，一种功能强大的构建自动化工具，使用 Groovy 作为其构建脚本语言。你可以使用 Groovy 编写 Gradle 脚本来构建、测试和部署项目。</p>\\n</li>\\n<li>\\n<p>数据处理和脚本化任务：Groovy 提供了强大的集合处理和字符串处理功能，以及方便的文件和网络操作。这使得 Groovy 成为处理数据、批量处理文件、执行网络请求等任务的良好选择。</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
