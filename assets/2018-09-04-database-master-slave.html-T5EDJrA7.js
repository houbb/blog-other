import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-uJE4P3e0.js";const p={};function r(l,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="数据库集群架构" tabindex="-1"><a class="header-anchor" href="#数据库集群架构"><span>数据库集群架构</span></a></h1><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h2><p>一主多从，主从同步，读写分离。</p><p>（1）一个主库提供写服务</p><p>（2）多个从库提供读服务，可以增加从库提升读性能</p><p>（3）主从之间同步数据</p><p>在MYSQL中实现这一功能的术语叫 - <a href="https://dev.mysql.com/doc/refman/5.7/en/replication.html" target="_blank" rel="noopener noreferrer">Replication</a></p><h2 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h2><ol><li><p>水平扩展，读写分离 - 在这种架构下，所有的增/删/改操作在Master上执行，所有的读操作在Slaves上执行，这样可以把并行压力分担到多个从库</p></li><li><p>数据安全 - 从库可以随时停下来备份数据，而不必考虑服务不可用的问题。</p></li><li><p>数据分析 - 在从库上分析数据，不会影响主库的性能</p></li><li><p>远程数据分配 - 可以通过从库创建数据提供给远端的网站使用，而不必暴露主库</p></li></ol><ul><li>核心目的</li></ul><p>提升读性能。</p><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h2><ul><li>成本增加</li></ul><p>无可厚非的是搭建主从肯定会增加成本，毕竟一台服务器和两台服务器的成本完全不同，另外由于主从必须要开启二进制日志，所以也会造成额外的性能消耗</p><ul><li>数据延迟</li></ul><p>Slave从Master复制过来肯定是会有一定的数据延迟的，所以当刚插入就出现查询的情况，可能查询不出来，当然如果是插入者自己查询，那么可以直接从Master中查询出来，当然这个也是需要用代码来控制的</p><ul><li>写入更慢</li></ul><p>主从复制主要是针对读远大于写或者对数据备份实时性要求较高的系统中，因为Master在写中需要更多操作，而且只有一台写入的Master（因为我目前只会配置一台写入Master，最多就是有从Master的Slave，用来在Master挂掉后替换成Master，平时不对外进行服务），所以写入的压力并不能被分散。</p><h1 id="mysql-主从复制" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制"><span>MySQL 主从复制</span></a></h1><p>MySQL主从复制的基础是主服务器对数据库修改记录二进制日志，从服务器通过主服务器的二进制日志自动执行更新。</p><h2 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h2><h3 id="基于语句" tabindex="-1"><a class="header-anchor" href="#基于语句"><span>基于语句</span></a></h3><p>主服务器上面执行的语句在从服务器上面再执行一遍，在MySQL-3.23版本以后支持。</p><p>存在的问题：时间上可能不完全同步造成偏差，执行语句的用户也可能是不同一个用户。</p><h3 id="基于行" tabindex="-1"><a class="header-anchor" href="#基于行"><span>基于行</span></a></h3><p>把主服务器上面改编后的内容直接复制过去，而不关心到底改变该内容是由哪条语句引发的，在MySQL-5.0版本以后引入。</p><p>存在的问题：比如一个工资表中有一万个用户，我们把每个用户的工资+1000，那么基于行的复制则要复制一万行的内容，由此造成的开销比较大，而基于语句的复制仅仅一条语句就可以了。</p><h3 id="混合类型" tabindex="-1"><a class="header-anchor" href="#混合类型"><span>混合类型</span></a></h3><p>MySQL默认使用基于语句的复制，当基于语句的复制会引发问题的时候就会使用基于行的复制，MySQL会自动进行选择。</p><p>在MySQL主从复制架构中，读操作可以在所有的服务器上面进行，而写操作只能在主服务器上面进行。</p><p>主从复制架构虽然给读操作提供了扩展，可如果写操作也比较多的话（多台从服务器还要从主服务器上面同步数据），单主模型的复制中主服务器势必会成为性能瓶颈。</p><h1 id="mysql主从复制-binarylog" tabindex="-1"><a class="header-anchor" href="#mysql主从复制-binarylog"><span>MySQL主从复制（BinaryLog）</span></a></h1><h2 id="主流方式" tabindex="-1"><a class="header-anchor" href="#主流方式"><span>主流方式</span></a></h2><ol><li><p>基于 <a href="https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html" target="_blank" rel="noopener noreferrer">BinaryLog</a> 的比较传统的方式 这种方式log文件和文件中的同步位置</p></li><li><p>基于 <a href="https://dev.mysql.com/doc/refman/5.7/en/replication-gtids.html" target="_blank" rel="noopener noreferrer">GlobalTransactionIdentifiers (GTIDs)</a> 这种方式比较新，暂未研究</p></li></ol><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><ul><li>主从复制</li></ul><figure><img src="https://image-static.segmentfault.com/214/064/2140640119-58e3a97a13419_articlex" alt="主从复制" tabindex="0" loading="lazy"><figcaption>主从复制</figcaption></figure><p>主服务器上面的任何修改都会保存在二进制日志Binary log里面，从服务器上面启动一个I/O thread（实际上就是一个主服务器的客户端进程），连接到主服务器上面请求读取二进制日志，然后把读取到的二进制日志写到本地的一个Realy log里面。</p><p>从服务器上面开启一个SQL thread定时检查Realy log，如果发现有更改立即把更改的内容在本机上面执行一遍。</p><ul><li>一主多从</li></ul><p>如果一主多从的话，这时主库既要负责写又要负责为几个从库提供二进制日志。</p><p>此时可以稍做调整，将二进制日志只给某一从，这一从再开启二进制日志并将自己的二进制日志再发给其它从。</p><p>或者是干脆这个从不记录只负责将二进制日志转发给其它从，这样架构起来性能可能要好得多，而且数据之间的延时应该也稍微要好一些。</p><p>工作原理图如下：</p><figure><img src="https://image-static.segmentfault.com/194/582/1945827240-58e3a97e5f4f2_articlex" alt="一主多从" tabindex="0" loading="lazy"><figcaption>一主多从</figcaption></figure><h3 id="单个进程处理的不足" tabindex="-1"><a class="header-anchor" href="#单个进程处理的不足"><span>单个进程处理的不足</span></a></h3><p>实际上在老版本的MySQL主从复制中Slave端并不是两个进程完成的，而是由一个进程完成。</p><p>但是后来发现这样做存在较大的风险和性能问题，主要如下：</p><p>首先，一个进程会使复制bin-log日志和解析日志并在自身执行的过程成为一个串行的过程，性能受到了一定的限制，异步复制的延迟也会比较长。</p><p>另外，Slave端从Master端获取bin-log过来之后，需要接着解析日志内容，然后在自身执行。在这个过程中，Master端可能又产生了大量变化并新增了大量的日志。如果在这个阶段Master端的存储出现了无法修复的错误，那么在这个阶段所产生的所有变更都将永远无法找回。如果在Slave端的压力比较大的时候，这个过程的时间可能会比较长。</p><p>为了提高复制的性能并解决存在的风险，后面版本的MySQL将Slave端的复制动作交由两个进程来完成。提出这个改进方案的人是Yahoo!的一位工程师“Jeremy Zawodny”。这样既解决了性能问题，又缩短了异步的延时时间，同时也减少了可能存在的数据丢失量。</p><p>当然，即使是换成了现在这样两个线程处理以后，同样也还是存在slave数据延时以及数据丢失的可能性的，毕竟这个复制是异步的。只要数据的更改不是在一个事物中，这些问题都是会存在的。如果要完全避免这些问题，就只能用MySQL的cluster来解决了。不过MySQL的cluster是内存数据库的解决方案，需要将所有数据都load到内存中，这样就对内存的要求就非常大了，对于一般的应用来说可实施性不是太大。</p><h3 id="复制过滤-replication-filters" tabindex="-1"><a class="header-anchor" href="#复制过滤-replication-filters"><span>复制过滤(Replication Filters)</span></a></h3><p>还有一点要提的是MySQL的复制过滤(Replication Filters)，复制过滤可以让你只复制服务器中的一部分数据。</p><p>有两种复制过滤：在Master上过滤二进制日志中的事件；在Slave上过滤中继日志中的事件。如下：</p><figure><img src="https://image-static.segmentfault.com/261/015/2610150268-58e3a97a53132_articlex" alt="复制过滤" tabindex="0" loading="lazy"><figcaption>复制过滤</figcaption></figure><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p>配置Master的 <code>my.cnf</code> 文件(关键性的配置)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>log-bin=mysql-bin</span></span>
<span class="line"><span>server-id   = 1</span></span>
<span class="line"><span>binlog-do-db=icinga</span></span>
<span class="line"><span>binlog-do-db=DB2     //如果备份多个数据库，重复设置这个选项即可</span></span>
<span class="line"><span>binlog-do-db=DB3   //需要同步的数据库，如果没有本行，即表示同步所有的数据库</span></span>
<span class="line"><span>binlog-ignore-db=mysql  //被忽略的数据库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置Slave的 <code>my.cnf</code>文件(关键性的配置)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>log-bin=mysql-bin</span></span>
<span class="line"><span>server-id=2</span></span>
<span class="line"><span>master-host=10.1.68.110</span></span>
<span class="line"><span>master-user=backup</span></span>
<span class="line"><span>master-password=1234qwer</span></span>
<span class="line"><span>master-port=3306</span></span>
<span class="line"><span>replicate-do-db=icinga</span></span>
<span class="line"><span>replicate-do-db=DB2</span></span>
<span class="line"><span>replicate-do-db=DB3   //需要同步的数据库，如果没有本行，即表示同步所有的数据库</span></span>
<span class="line"><span>replicate-ignore-db=mysql   //被忽略的数据库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><p>网友说replicate-do-db的使用中可能会出些<a href="http://blog.knowsky.com/196961.htm" target="_blank" rel="noopener noreferrer">问题</a>，自己没有亲自去测试。</p><p>猜想binlog-do-db参数用于主服务器中，通过过滤Binary Log来过滤掉配置文件中不允许复制的数据库，也就是不向Binary Log中写入不允许复制数据的操作日志；</p><p>而replicate-do-db用于从服务器中，通过过滤Relay Log来过滤掉不允许复制的数据库或表，也就是执行Relay Log中的动作时不执行那些不被允许的修改动作。</p><p>这样的话，多个从数据库服务器的情况：有的从服务器既从主服务器中复制数据，又做为主服务器向另外的从服务器复制数据，那它的配置文件中应该可以同时存在binlog-do-db、replicate-do-db这两个参数才对。</p><p>一切都是自己的预测，关于binlog-do-db、replicate-do-db的具体使用方法还得在实际开发中一点点摸索才可以。</p><p>网上有说，复制时忽略某些数据库或者表的操作最好不要在主服务器上面进行，因为主服务器忽略之后就不会再往二进制文件中写了，但是在从服务器上面虽然忽略了某些数据库但是主服务器上面的这些操作信息依然会被复制到从服务器上面的relay log里面，只是不会在从服务器上面执行而已。</p><p>我想这个意思应该是建议在从服务器中设置replicate-do-db，而不要在主服务器上设置binlog-do-db。</p><p>另外，不管是黑名单（binlog-ignore-db、replicate-ignore-db）还是白名单（binlog-do-db、replicate-do-db）只写一个就行了，如果同时使用那么只有白名单生效。</p><h2 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置"><span>其他配置</span></a></h2><h3 id="一主多从" tabindex="-1"><a class="header-anchor" href="#一主多从"><span>一主多从</span></a></h3><p>由一个master和一个slave组成复制系统是最简单的情况。Slave之间并不相互通信，只能与master进行通信。</p><p>在实际应用场景中，MySQL复制90%以上都是一个Master复制到一个或者多个Slave的架构模式，主要用于读压力比较大的应用的数据库端廉价扩展解决方案。</p><h3 id="主主复制" tabindex="-1"><a class="header-anchor" href="#主主复制"><span>主主复制</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MASTER - MASTER</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Master-Master复制的两台服务器，既是master，又是另一台服务器的slave。</p><p>这样，任何一方所做的变更，都会通过复制应用到另外一方的数据库中。</p><p>在这种复制架构中，各自上运行的不是同一db，比如左边的是db1, 右边的是db2，db1的从在右边反之db2的从在左边，两者互为主从，再辅助一些监控的服务还可以实现一定程度上的高可以用。</p><h3 id="主动—被动模式的master-master-master-master-in-active-passive-mode" tabindex="-1"><a class="header-anchor" href="#主动—被动模式的master-master-master-master-in-active-passive-mode"><span>主动—被动模式的Master-Master(Master-Master in Active-Passive Mode)</span></a></h3><p>这是由master-master结构变化而来的，它避免了M-M的缺点。</p><p>实际上，这是一种具有容错和高可用性的系统。</p><p>它的不同点在于其中只有一个节点在提供读写服务，另外一个节点时刻准备着，当主节点一旦故障马上接替服务。</p><p>比如通过corosync+pacemaker+drbd+MySQL就可以提供这样一组高可用服务，主备模式下再跟着slave服务器，也可以实现读写分离。</p><h3 id="带从服务器的master-master结构-master-master-with-slaves" tabindex="-1"><a class="header-anchor" href="#带从服务器的master-master结构-master-master-with-slaves"><span>带从服务器的Master-Master结构(Master-Master with Slaves)</span></a></h3><p>这种结构的优点就是提供了冗余。</p><p>在地理上分布的复制结构，它不存在单一节点故障问题，而且还可以将读密集型的请求放到slave上。</p><h3 id="mysql-5-5-支持半同步复制" tabindex="-1"><a class="header-anchor" href="#mysql-5-5-支持半同步复制"><span>MySQL-5.5 支持半同步复制</span></a></h3><p>早前的MySQL复制只能是基于异步来实现，从MySQL-5.5开始，支持半自动复制。</p><p>在以前的异步（asynchronous）复制中，主库在执行完一些事务后，是不会管备库的进度的。</p><p>如果备库处于落后，而更不幸的是主库此时又出现Crash（例如宕机），这时备库中的数据就是不完整的。</p><p>简而言之，在主库发生故障的时候，我们无法使用备库来继续提供数据一致的服务了。</p><p>Semisynchronous Replication(半同步复制)则一定程度上保证提交的事务已经传给了至少一个备库。Semi synchronous中，仅仅保证事务的已经传递到备库上，但是并不确保已经在备库上执行完成了。</p><p>此外，还有一种情况会导致主备数据不一致。</p><p>在某个session中，主库上提交一个事务后，会等待事务传递给至少一个备库，如果在这个等待过程中主库Crash，那么也可能备库和主库不一致，这是很致命的。</p><p>如果主备网络故障或者备库挂了，主库在事务提交后等待10秒（rpl_semi_sync_master_timeout的默认值）后，就会继续。这时，主库就会变回原来的异步状态。</p><p>MySQL在加载并开启Semi-sync插件后，每一个事务需等待备库接收日志后才返回给客户端。</p><p>如果做的是小事务，两台主机的延迟又较小，则Semi-sync可以实现在性能很小损失的情况下的零数据丢失。</p><h1 id="主从一致性" tabindex="-1"><a class="header-anchor" href="#主从一致性"><span>主从一致性</span></a></h1><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因"><span>原因</span></a></h2><p>主从同步有时延，这个时延期间读从库，可能读到不一致的数据。</p><p>ps: 任何数据冗余，必将引发一致性问题。</p><h2 id="避免方式" tabindex="-1"><a class="header-anchor" href="#避免方式"><span>避免方式</span></a></h2><h3 id="忽略" tabindex="-1"><a class="header-anchor" href="#忽略"><span>忽略</span></a></h3><p>任何脱离业务的架构设计都是耍流氓。</p><p>绝大部分业务，例如：百度搜索，淘宝订单，QQ消息，58帖子都允许短时间不一致。</p><p>如果业务能够接受，最推崇此法，别把系统架构搞得太复杂。</p><h3 id="强制读主" tabindex="-1"><a class="header-anchor" href="#强制读主"><span>强制读主</span></a></h3><p>（1）使用一个高可用主库提供数据库服务</p><p>（2）读和写都落到主库上</p><p>（3）采用缓存来提升系统读性能</p><p>这是很常见的微服务架构，可以避免数据库主从一致性问题。</p><h3 id="选择性读主" tabindex="-1"><a class="header-anchor" href="#选择性读主"><span>选择性读主</span></a></h3><p>强制读主过于粗暴，毕竟只有少量写请求，很短时间，可能读取到脏数据。</p><p>有没有可能实现，只有这一段时间，可能读到从库脏数据的读请求读主，平时读从呢？</p><ul><li>写请求</li></ul><p>当写请求发生时：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>service ---- [Cache] set key</span></span>
<span class="line"><span>   |(Write)</span></span>
<span class="line"><span> DB-M(sync)---DB-S</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）写主库</p><p>（2）将哪个库，哪个表，哪个主键三个信息拼装一个 key 设置到 cache 里，这条记录的超时时间，设置为“主从同步时延”。</p><p>画外音：key的格式为 <code>db:table:PK</code>，假设主从延时为1s，这个key的cache超时时间也为1s。</p><ul><li>读请求</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>service ---- [Cache] get key</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   +------------+</span></span>
<span class="line"><span>   |            |</span></span>
<span class="line"><span> DB-M         DB-S</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当读请求发生时：</p><p>这是要读哪个库，哪个表，哪个主键的数据呢，也将这三个信息拼装一个key，到cache里去查询，如果，</p><p>（1）cache里有这个key，说明1s内刚发生过写请求，数据库主从同步可能还没有完成，此时就应该去主库查询</p><p>（2）cache里没有这个key，说明最近没有发生过写请求，此时就可以去从库查询</p><p>以此，保证读到的一定不是不一致的脏数据。</p><h1 id="双主一致性" tabindex="-1"><a class="header-anchor" href="#双主一致性"><span>双主一致性</span></a></h1><h2 id="问题-1" tabindex="-1"><a class="header-anchor" href="#问题-1"><span>问题</span></a></h2><p>数据冗余会引发数据的一致性问题，因为数据的同步有一个时间差，并发的写入可能导致数据同步失败，引起数据丢失：</p><ul><li>场景</li></ul><p>假设主库使用了auto increment来作为自增主键：</p><ol><li><p>两个MySQL-master设置双向同步可以用来保证主库的高可用</p></li><li><p>数据库中现存的记录主键是1，2，3</p></li><li><p>主库1插入了一条记录，主键为4，并向主库2同步数据</p></li><li><p>数据同步成功之前，主库2也插入了一条记录，由于数据还没有同步成功，插入记录生成的主键也为4，并向主库1也同步数据</p></li></ol><p>主库1和主库2都插入了主键为4的记录，双主同步失败，数据不一致</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><h3 id="相同步长免冲突" tabindex="-1"><a class="header-anchor" href="#相同步长免冲突"><span>相同步长免冲突</span></a></h3><p>能否保证两个主库生成的主键一定不冲突呢？</p><p>回答：</p><ul><li><p>设置不同的初始值</p></li><li><p>设置相同的增长步长</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MASTER-1: 1,3,5,7,9...</span></span>
<span class="line"><span>MASTER-2: 2,4,6,8,10...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>同步之后，二者也不会冲突。</p><h3 id="上游生成id避冲突" tabindex="-1"><a class="header-anchor" href="#上游生成id避冲突"><span>上游生成ID避冲突</span></a></h3><p>换一个思路，为何要依赖于数据库的自增ID，来保证数据的一致性呢？</p><p>完全可以由业务上游，使用统一的ID生成器，来保证ID的生成不冲突。</p><h3 id="消除双写不治本" tabindex="-1"><a class="header-anchor" href="#消除双写不治本"><span>消除双写不治本</span></a></h3><p>使用auto increment两个主库并发写可能导致数据不一致，只使用一个主库提供服务，另一个主库作为shadow-master，只用来保证高可用，能否避免一致性问题呢？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+---------------+  4   +------------------+</span></span>
<span class="line"><span>|   DB-Master   | ---&gt; | DB-Shadow Master |</span></span>
<span class="line"><span>+---------------+      +------------------+</span></span>
<span class="line"><span>  :</span></span>
<span class="line"><span>  : (1,2,3,4)</span></span>
<span class="line"><span>  v</span></span>
<span class="line"><span>+---------------+</span></span>
<span class="line"><span>| Master-insert |</span></span>
<span class="line"><span>+---------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上图所示：</p><p>两个MySQL-master设置双向同步可以用来保证主库的高可用</p><p>只有主库1对外提供写入服务</p><p>两个主库设置相同的虚IP，在主库1挂掉或者网络异常的时候，虚IP自动漂移，shadow master顶上，保证主库的高可用</p><ul><li>极端情况的不一致</li></ul><p>这个切换由于虚IP没有变化，所以切换过程对调用方是透明的，但在极限的情况下，也可能引发数据的不一致：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>                 网络抖动，故障转移</span></span>
<span class="line"><span>  +------------------------------+</span></span>
<span class="line"><span>  |                              v</span></span>
<span class="line"><span>+---------------+  4           +------------------+</span></span>
<span class="line"><span>|   DB-Master   | -----------&gt; | DB-Shadow Master |</span></span>
<span class="line"><span>+---------------+              +------------------+</span></span>
<span class="line"><span>  :</span></span>
<span class="line"><span>  : (1,2,3,4)</span></span>
<span class="line"><span>  v</span></span>
<span class="line"><span>+---------------+</span></span>
<span class="line"><span>| Master-insert |</span></span>
<span class="line"><span>+---------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上图所示：</p><p>两个MySQL-master设置双向同步可以用来保证主库的高可用，并设置了相同的虚IP</p><p>网络抖动前，主库1对上游提供写入服务，插入了一条记录，主键为4，并向shadow master主库2同步数据</p><p>突然主库1网络异常，keepalived 检测出异常后，实施虚IP漂移，主库2开始提供服务</p><p>在主键4的数据同步成功之前，主库2插入了一条记录，也生成了主键为4的记录，结果导致数据不一致</p><h2 id="内网-dns-探测" tabindex="-1"><a class="header-anchor" href="#内网-dns-探测"><span>内网 DNS 探测</span></a></h2><p>虚IP漂移，双主同步延时导致的数据不一致，本质上，需要在双主同步完数据之后，再实施虚IP偏移，使用内网DNS探测，可以实现shadow master延时高可用：</p><p>使用内网域名连接数据库，例如：<a href="http://db.58daojia.org" target="_blank" rel="noopener noreferrer">db.58daojia.org</a></p><p>主库1和主库2设置双主同步，不使用相同虚IP，而是分别使用ip1和ip2</p><p>一开始 <a href="http://db.58daojia.org" target="_blank" rel="noopener noreferrer">db.58daojia.org</a> 指向 ip1</p><p>用一个小脚本轮询探测ip1主库的连通性</p><p>当ip1主库发生异常时，小脚本delay一个x秒的延时，等待主库2同步完数据之后，再将db.58daojia.org解析到ip2</p><p>程序以内网域名进行重连，即可自动连接到ip2主库，并保证了数据的一致性</p><h1 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离"><span>读写分离</span></a></h1><p><a href="https://houbb.github.io/2018/09/04/database-read-write" target="_blank" rel="noopener noreferrer">读写分离</a></p><h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><ul><li>高可用</li></ul><p><a href="https://houbb.github.io/2018/09/04/distributed-ha" target="_blank" rel="noopener noreferrer">高可用</a></p><ul><li>分布式 id 算法</li></ul><p><a href="https://houbb.github.io/2018/09/04/distributed-id" target="_blank" rel="noopener noreferrer">分布式 id 算法</a></p><ul><li>备份-还原</li></ul><p><a href="https://houbb.github.io/2018/07/13/database-recover" target="_blank" rel="noopener noreferrer">数据库备份-还原</a></p><ul><li>开源框架</li></ul><p><a href="https://houbb.github.io/2018/08/30/sqlproxy" target="_blank" rel="noopener noreferrer">SqlProxy</a></p><p><a href="https://houbb.github.io/2018/09/04/mycat" target="_blank" rel="noopener noreferrer">Mycat</a></p><p><a href="https://houbb.github.io/2018/08/19/databus" target="_blank" rel="noopener noreferrer">DataBus</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><ul><li>mysql 主从复制</li></ul><p><a href="http://blog.sina.com.cn/s/blog_821512b50101hxod.html" target="_blank" rel="noopener noreferrer">http://blog.sina.com.cn/s/blog_821512b50101hxod.html</a></p><p><a href="http://blog.51cto.com/369369/790921" target="_blank" rel="noopener noreferrer">http://blog.51cto.com/369369/790921</a></p><p><a href="https://www.jianshu.com/p/ab704b437ebd" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/ab704b437ebd</a></p><p><a href="http://www.cnblogs.com/clsn/p/8150036.html" target="_blank" rel="noopener noreferrer">http://www.cnblogs.com/clsn/p/8150036.html</a></p><p><a href="https://www.kancloud.cn/curder/mysql/355287" target="_blank" rel="noopener noreferrer">https://www.kancloud.cn/curder/mysql/355287</a></p><ul><li>中间件 Amoeba</li></ul><p><a href="https://www.jianshu.com/p/4aec9f682509" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/4aec9f682509</a></p><ul><li>主从一致性</li></ul><p><a href="https://mp.weixin.qq.com/s/sCjzzi9VXPk-JcWXySfHgw" target="_blank" rel="noopener noreferrer">MySQL 双主一致性架构优化</a></p><p><a href="https://mp.weixin.qq.com/s/5JYtta9aMGcic7o_ejna-A" target="_blank" rel="noopener noreferrer">数据库主从不一致，怎么解？</a></p><ul><li>建议参考书籍</li></ul><p>《高性能MySQL》</p><ul><li>todo</li></ul><p>实战记录</p>`,197)]))}const h=e(p,[["render",r]]),o=JSON.parse('{"path":"/posts/Design/2018-09-04-database-master-slave.html","title":"Database Master Slave mysql 数据库集群。主从复制，主从同步，读写分离。","lang":"zh-CN","frontmatter":{"title":"Database Master Slave mysql 数据库集群。主从复制，主从同步，读写分离。","date":"2018-09-04T00:00:00.000Z","categories":["Design"],"tags":["database","sql","master-slave","design","sh"],"published":true,"description":"数据库集群架构 架构 一主多从，主从同步，读写分离。 （1）一个主库提供写服务 （2）多个从库提供读服务，可以增加从库提升读性能 （3）主从之间同步数据 在MYSQL中实现这一功能的术语叫 - Replication 优势 水平扩展，读写分离 - 在这种架构下，所有的增/删/改操作在Master上执行，所有的读操作在Slaves上执行，这样可以把并行压...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Design/2018-09-04-database-master-slave.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Database Master Slave mysql 数据库集群。主从复制，主从同步，读写分离。"}],["meta",{"property":"og:description","content":"数据库集群架构 架构 一主多从，主从同步，读写分离。 （1）一个主库提供写服务 （2）多个从库提供读服务，可以增加从库提升读性能 （3）主从之间同步数据 在MYSQL中实现这一功能的术语叫 - Replication 优势 水平扩展，读写分离 - 在这种架构下，所有的增/删/改操作在Master上执行，所有的读操作在Slaves上执行，这样可以把并行压..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image-static.segmentfault.com/214/064/2140640119-58e3a97a13419_articlex"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"database"}],["meta",{"property":"article:tag","content":"sql"}],["meta",{"property":"article:tag","content":"master-slave"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2018-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Database Master Slave mysql 数据库集群。主从复制，主从同步，读写分离。\\",\\"image\\":[\\"https://image-static.segmentfault.com/214/064/2140640119-58e3a97a13419_articlex\\",\\"https://image-static.segmentfault.com/194/582/1945827240-58e3a97e5f4f2_articlex\\",\\"https://image-static.segmentfault.com/261/015/2610150268-58e3a97a53132_articlex\\"],\\"datePublished\\":\\"2018-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":16.79,"words":5036},"filePathRelative":"posts/Design/2018-09-04-database-master-slave.md","localizedDate":"2018年9月4日","excerpt":"\\n<h2>架构</h2>\\n<p>一主多从，主从同步，读写分离。</p>\\n<p>（1）一个主库提供写服务</p>\\n<p>（2）多个从库提供读服务，可以增加从库提升读性能</p>\\n<p>（3）主从之间同步数据</p>\\n<p>在MYSQL中实现这一功能的术语叫 - <a href=\\"https://dev.mysql.com/doc/refman/5.7/en/replication.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Replication</a></p>\\n<h2>优势</h2>\\n<ol>\\n<li>\\n<p>水平扩展，读写分离 - 在这种架构下，所有的增/删/改操作在Master上执行，所有的读操作在Slaves上执行，这样可以把并行压力分担到多个从库</p>\\n</li>\\n<li>\\n<p>数据安全 - 从库可以随时停下来备份数据，而不必考虑服务不可用的问题。</p>\\n</li>\\n<li>\\n<p>数据分析 - 在从库上分析数据，不会影响主库的性能</p>\\n</li>\\n<li>\\n<p>远程数据分配 - 可以通过从库创建数据提供给远端的网站使用，而不必暴露主库</p>\\n</li>\\n</ol>","autoDesc":true}');export{h as comp,o as data};
