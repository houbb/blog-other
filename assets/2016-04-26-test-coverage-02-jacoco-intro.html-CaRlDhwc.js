import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-CEDSurVN.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读"><span>拓展阅读</span></a></h1><p><a href="https://houbb.github.io/2018/06/23/test-04-test-converage" target="_blank" rel="noopener noreferrer">test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍</a></p><p><a href="https://houbb.github.io/2018/06/23/test-05-jacoco-idea-plugin" target="_blank" rel="noopener noreferrer">test 系统学习-05-test jacoco 测试覆盖率与 idea 插件</a></p><p><a href="https://houbb.github.io/2018/06/23/test-06-jacoco-overview" target="_blank" rel="noopener noreferrer">test 系统学习-06-test jacoco</a></p><h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-jacoco-java-code-coverage" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-jacoco-java-code-coverage"><span>详细介绍一下 JaCoCo (Java Code Coverage)</span></a></h2><p>JaCoCo（Java Code Coverage）是一个用于Java应用程序的代码覆盖工具，用于评估在测试过程中代码的覆盖率。</p><p>代码覆盖是一种衡量代码执行过程中有多少代码被测试覆盖的度量方式，通常以百分比表示。</p><p>JaCoCo可以帮助开发人员了解他们的测试用例是否足够全面，是否覆盖了应用程序中的所有代码路径。</p><p>以下是JaCoCo的一些主要特性和用法：</p><ol><li><p><strong>多种覆盖度量：</strong> JaCoCo支持多种代码覆盖度量，包括行覆盖率、分支覆盖率、方法覆盖率和类覆盖率。这使得开发人员可以细粒度地了解测试覆盖的情况。</p></li><li><p><strong>轻量级集成：</strong> JaCoCo可以轻松地集成到各种构建工具和持续集成环境中，如Apache Ant、Apache Maven、Gradle等。这使得在项目中使用JaCoCo变得非常方便。</p></li><li><p><strong>支持多种输出格式：</strong> JaCoCo生成的报告可以以多种格式呈现，包括HTML、XML和CSV。HTML报告是可视化的，可以直观地展示代码覆盖率情况，而XML和CSV报告适合进一步处理和分析。</p></li><li><p><strong>支持运行时注入：</strong> JaCoCo可以通过Java代理（Java Agent）方式在运行时注入到被测应用程序中，无需修改代码。这种方式使得在不需要重新编译代码的情况下就能够获取代码覆盖率数据。</p></li><li><p><strong>交互式报告：</strong> JaCoCo生成的HTML报告不仅展示代码覆盖率，还提供了交互式的用户界面，允许用户在代码中直接查看覆盖信息。</p></li></ol><p>使用JaCoCo的基本步骤通常包括以下几个方面：</p><ol><li><p><strong>集成JaCoCo到构建工具中：</strong> 在构建工具（如Maven或Gradle）的配置文件中添加JaCoCo插件或任务，以便在构建过程中生成覆盖率数据。</p></li><li><p><strong>运行测试：</strong> 执行应用程序的测试套件，确保测试用例充分覆盖了代码。</p></li><li><p><strong>生成报告：</strong> 使用JaCoCo生成覆盖率报告，查看覆盖率的详细信息。</p></li><li><p><strong>分析报告：</strong> 分析生成的报告，了解代码覆盖的情况，识别未覆盖的代码块，并决定是否需要添加额外的测试用例。</p></li></ol><p>JaCoCo在Java开发中是一个强大的工具，能够帮助开发人员提高代码质量，确保测试覆盖全面。</p><h2 id="jacoco-的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#jacoco-的实现原理是什么"><span>jacoco 的实现原理是什么？</span></a></h2><p>JaCoCo的实现原理主要基于Java虚拟机（JVM）的Java代理（Java Agent）技术。</p><p>Java代理允许在应用程序运行时修改字节码，JaCoCo通过这种机制来插入额外的代码，以收集代码覆盖率信息。</p><p>下面是JaCoCo的基本实现原理：</p><ol><li><p><strong>Java代理：</strong> JaCoCo以Java代理的形式注入到被测应用程序中。Java代理是一种能够在类加载时动态修改字节码的机制。JaCoCo作为一个Java代理，通过这个能力来监控和收集代码覆盖率信息。</p></li><li><p><strong>插入探针代码：</strong> 在类加载过程中，JaCoCo会在每个方法的入口和出口处插入探针代码。这些探针代码用于跟踪方法的执行情况，记录哪些代码路径被执行。</p></li><li><p><strong>计数器：</strong> JaCoCo使用计数器来追踪每个代码块的执行情况。每个方法的入口和出口处的探针代码会增加相应计数器的值，从而记录执行的次数。</p></li><li><p><strong>数据收集：</strong> 在应用程序执行期间，JaCoCo通过探针代码收集执行信息，包括哪些代码被执行，执行次数等。这些信息会在内存中被保存。</p></li><li><p><strong>报告生成：</strong> 当测试完成或需要生成代码覆盖率报告时，JaCoCo将内存中收集的覆盖率数据输出到报告文件中。报告可以以不同的格式（如HTML、XML、CSV）生成，以便于开发人员进行查看和分析。</p></li></ol><p>总体而言，JaCoCo的实现原理基于对Java字节码的动态修改和监控，通过在方法入口和出口处插入探针代码来收集代码覆盖率信息。</p><p>这种动态注入的方式使得在不修改源代码的情况下就能够获取覆盖率数据，提供了一种非侵入式的代码覆盖率检测方法。</p><h2 id="给一个-jacoco-的入门使用例子" tabindex="-1"><a class="header-anchor" href="#给一个-jacoco-的入门使用例子"><span>给一个 jacoco 的入门使用例子</span></a></h2><p>下面是一个简单的JaCoCo的入门使用例子，使用Maven构建工具：</p><ol><li><p><strong>创建一个Maven项目：</strong> 在你的项目目录中，运行以下命令创建一个Maven项目：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> archetype:generate</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DgroupId=com.example</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DartifactId=jacoco-example</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DarchetypeArtifactId=maven-archetype-quickstart</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DinteractiveMode=false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>在<code>pom.xml</code>中添加JaCoCo插件：</strong> 打开项目的<code>pom.xml</code>文件，添加JaCoCo插件配置：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            org.jacoco</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            jacoco-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            0.8.7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        prepare-agent</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    report</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    prepare-package</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        report</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置将在构建过程中使用JaCoCo代理，并在<code>prepare-package</code>阶段生成覆盖率报告。</p></li><li><p><strong>编写一个简单的Java类：</strong> 在<code>src/main/java/com/example</code>目录下创建一个简单的Java类<code>Calculator.java</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编写单元测试：</strong> 在<code>src/test/java/com/example</code>目录下创建一个测试类<code>CalculatorTest.java</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.junit.Assert.assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CalculatorTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testAdd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Calculator</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testSubtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Calculator</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> calculator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subtract</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>运行测试和生成报告：</strong> 在项目目录下运行以下Maven命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将运行单元测试，并生成JaCoCo的覆盖率报告。</p></li><li><p><strong>查看报告：</strong> 打开浏览器，访问项目目录下的<code>target/site/jacoco/index.html</code>文件，查看生成的HTML格式的覆盖率报告。</p></li></ol><p>这个简单的例子演示了如何使用JaCoCo插件来生成代码覆盖率报告。</p><p>在实际项目中，你可以根据需要定制JaCoCo插件的配置，以满足项目的具体需求。</p><h2 id="jacoco-的使用最佳实践" tabindex="-1"><a class="header-anchor" href="#jacoco-的使用最佳实践"><span>jacoco 的使用最佳实践</span></a></h2><p>使用JaCoCo进行代码覆盖率分析的最佳实践通常包括以下几个方面：</p><ol><li><p><strong>集成到构建工具：</strong> 将JaCoCo集成到你的构建工具中，如Maven、Gradle或Ant。通过构建工具的插件，可以在构建过程中自动执行代码覆盖率分析，而无需手动介入。</p><ul><li><p><strong>Maven示例：</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            org.jacoco</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            jacoco-maven-plugin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            0.8.7</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        prepare-agent</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    report</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    prepare-package</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        report</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>全面覆盖测试：</strong> 编写足够全面的单元测试和集成测试，确保测试用例能够覆盖尽可能多的代码路径。不仅仅是简单的行覆盖，还应该关注分支覆盖、方法覆盖等。</p></li><li><p><strong>关注不同覆盖度指标：</strong> 了解不同的覆盖度指标，如行覆盖率、分支覆盖率、方法覆盖率等。不同的指标提供了不同层次的信息，可以帮助你更全面地了解代码覆盖情况。</p></li><li><p><strong>定期执行：</strong> 在持续集成系统中定期执行代码覆盖率分析，确保每次构建都能生成最新的覆盖率报告。这有助于及时发现代码覆盖率下降或不足的情况。</p></li><li><p><strong>使用JaCoCo报告：</strong> 利用JaCoCo生成的报告进行可视化分析。JaCoCo的HTML报告提供了直观的图形化展示，帮助你更容易地理解代码覆盖情况。</p></li><li><p><strong>忽略无关代码：</strong> 在配置JaCoCo时，可以通过exclude设置来排除不需要关注的代码，例如第三方库或自动生成的代码。这有助于聚焦在真正需要测试和关注的部分上。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        com/example/SomeThirdPartyLibrary/**</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        com/example/generated/**</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结合静态分析：</strong> 结合静态代码分析工具，如SonarQube，以获得更全面的代码质量信息。代码覆盖率与静态分析相结合，可以提供更全面的代码评估。</p></li><li><p><strong>持续改进：</strong> 始终关注代码覆盖率，并根据报告中的信息进行持续改进。通过分析覆盖率报告，识别未覆盖的代码块，并补充相应的测试用例。</p></li></ol><p>通过遵循这些最佳实践，可以确保在项目中有效地使用JaCoCo进行代码覆盖率分析，从而提高代码质量和可维护性。</p><h2 id="java-静态分析工具有哪些" tabindex="-1"><a class="header-anchor" href="#java-静态分析工具有哪些"><span>java 静态分析工具有哪些?</span></a></h2><p>Java静态分析工具用于在代码编写阶段检测潜在的问题、优化代码结构、提高代码质量，并帮助发现潜在的错误。以下是一些常用的Java静态分析工具：</p><ol><li><p><strong>FindBugs：</strong> FindBugs是一个基于静态分析的工具，用于寻找Java代码中的潜在错误和问题。它能够检测内存泄漏、空指针引用、未使用的变量等问题。</p></li><li><p><strong>Checkstyle：</strong> Checkstyle主要用于规范和检查Java代码的风格和格式。它可以强制执行编码规范，确保代码风格的一致性，并提供一些规则来检查代码结构。</p></li><li><p><strong>PMD：</strong> PMD是一个多功能的静态代码分析工具，用于检查代码中的潜在问题，包括代码复杂性、未使用的变量、不良的编码实践等。</p></li><li><p><strong>SonarQube：</strong> SonarQube是一个开源平台，用于管理代码质量。它结合了静态代码分析、代码覆盖率、复杂性度量等多个方面的检查，提供了全面的代码质量报告。</p></li><li><p><strong>Eclipse Code Analyzers：</strong> Eclipse集成开发环境（IDE）自带一些静态分析工具，如Eclipse Code Analyzers。这些工具能够在编码过程中提供实时的代码建议和警告，帮助开发人员遵循最佳实践。</p></li><li><p><strong>IntelliJ IDEA Inspections：</strong> IntelliJ IDEA是另一个流行的Java IDE，它也内置了许多静态分析工具，称为Inspections。这些工具提供了代码检查和建议，帮助提高代码质量。</p></li><li><p><strong>Error Prone：</strong> Error Prone是由Google开发的一个静态分析工具，专注于提供在编译时捕获错误和潜在问题的能力。它可以通过在编译时进行插桩来检测代码问题。</p></li><li><p><strong>JArchitect：</strong> JArchitect是一个专业的静态分析工具，用于进行复杂度分析、依赖关系分析、代码结构可视化等。它提供了一套强大的工具，用于理解和改进Java代码。</p></li></ol><p>这些工具可以单独使用，也可以结合使用以获得更全面的代码分析和评估。选择工具时，可以根据项目需求、团队习惯和个人偏好来进行选择。</p><p>还有 alibaba 的代码风格检测工具。</p><h2 id="如果让你深入学习-jacoco-你会问哪10个问题-为什么" tabindex="-1"><a class="header-anchor" href="#如果让你深入学习-jacoco-你会问哪10个问题-为什么"><span>如果让你深入学习 jacoco，你会问哪10个问题？为什么？</span></a></h2><p>深入学习JaCoCo需要探索其内部机制、用法、定制能力等方面。</p><p>以下是10个深入学习JaCoCo时可能会提出的问题：</p><ol><li><p><strong>JaCoCo是如何实现代码覆盖率检测的？</strong></p><p>了解JaCoCo的实现机制，包括在字节码中插入探针代码、使用计数器追踪代码块执行等方面的细节。</p></li><li><p><strong>JaCoCo支持哪些代码覆盖率度量指标？</strong></p><p>了解JaCoCo支持的覆盖率度量，包括行覆盖率、分支覆盖率、方法覆盖率等，以及各指标的含义和适用场景。</p></li><li><p><strong>JaCoCo是如何集成到不同构建工具中的？</strong></p><p>探究JaCoCo在Maven、Gradle等构建工具中是如何配置和集成的，了解它是如何与构建过程无缝交互的。</p></li><li><p><strong>JaCoCo的报告生成原理是什么？</strong></p><p>了解JaCoCo生成报告的原理，包括报告数据的收集、存储以及不同报告格式（如HTML、XML、CSV）的生成过程。</p></li><li><p><strong>JaCoCo是如何处理异常和条件语句的？</strong></p><p>了解JaCoCo在检测异常和条件语句覆盖时的工作原理，包括对try-catch块和if-else语句的处理方式。</p></li><li><p><strong>JaCoCo对运行时性能的影响是什么？</strong></p><p>了解在使用JaCoCo时，对应用程序运行时性能的影响，以及如何优化配置以减小性能损失。</p></li><li><p><strong>如何在JaCoCo中排除不需要关注的代码？</strong></p><p>探讨JaCoCo配置中如何排除第三方库、自动生成的代码等不需要关注的部分，以确保关注点集中在项目核心代码上。</p></li><li><p><strong>JaCoCo是否支持对特定代码路径的定制化分析？</strong></p><p>了解JaCoCo是否支持针对特定代码路径的自定义配置，以实现更精细的覆盖率分析。</p></li><li><p><strong>JaCoCo是否支持与持续集成工具的集成？</strong></p><p>探究JaCoCo如何与持续集成工具（如Jenkins）集成，以实现在每次构建中自动执行代码覆盖率检测和生成报告。</p></li><li><p><strong>JaCoCo在分布式系统和大规模项目中的应用场景是什么？</strong></p><p>了解JaCoCo在分布式系统和大规模项目中的应用情况，包括处理多模块项目、并行构建等方面的最佳实践。</p></li></ol><p>这些问题可以帮助深入了解JaCoCo的各个方面，从而更好地应用和定制JaCoCo在实际项目中的代码覆盖率分析。</p><h2 id="jacoco的报告生成原理是什么" tabindex="-1"><a class="header-anchor" href="#jacoco的报告生成原理是什么"><span>JaCoCo的报告生成原理是什么？</span></a></h2><p>JaCoCo的报告生成原理涉及将在运行时收集的覆盖率数据转换为可视化的报告。</p><p>以下是JaCoCo报告生成的基本原理：</p><ol><li><p><strong>运行时数据收集：</strong> 在应用程序运行期间，JaCoCo通过在字节码中插入探针代码的方式收集覆盖率数据。这些数据包括被执行的代码行、分支、方法等信息，以及相应的执行次数。</p></li><li><p><strong>数据存储：</strong> JaCoCo将收集到的覆盖率数据存储在内存中，通常以一种紧凑的二进制格式（exec文件）保存。这个文件包含了各种计数器的信息，用于后续的报告生成。</p></li><li><p><strong>报告生成工具：</strong> JaCoCo提供了用于报告生成的工具，主要是<code>ReportGenerator</code>。这个工具负责将内存中的覆盖率数据转换为可视化的报告。</p></li><li><p><strong>报告格式：</strong> JaCoCo支持生成多种格式的报告，包括HTML、XML、CSV等。其中，HTML报告是最常用的，提供了可交互的可视化界面，直观展示代码覆盖情况。</p></li><li><p><strong>HTML报告生成过程：</strong></p><ul><li><strong>模板引擎：</strong> JaCoCo使用模板引擎来创建HTML报告的基础结构。</li><li><strong>覆盖率数据解析：</strong> JaCoCo解析内存中的覆盖率数据，获取每个类、方法、行、分支的覆盖情况和执行次数。</li><li><strong>报告内容生成：</strong> 根据解析的覆盖率数据，生成HTML报告的具体内容，包括统计数据、覆盖率百分比、代码高亮显示等。</li><li><strong>交互性：</strong> HTML报告具有交互性，允许用户在代码中直接查看覆盖信息，了解哪些代码被覆盖、哪些未被覆盖。</li></ul></li></ol><p>通过这个过程，JaCoCo生成的报告提供了详细的代码覆盖率信息，开发人员可以通过查看报告来分析测试覆盖情况，识别潜在的问题区域，以及进行代码质量分析。</p><p>在构建工具中，比如Maven或Gradle，配置JaCoCo插件可以自动触发报告生成过程，使得在构建过程中生成最新的报告，方便团队及时了解代码覆盖情况。</p><h2 id="jacoco支持哪些代码覆盖率度量指标" tabindex="-1"><a class="header-anchor" href="#jacoco支持哪些代码覆盖率度量指标"><span>JaCoCo支持哪些代码覆盖率度量指标？</span></a></h2><p>JaCoCo支持多种代码覆盖率度量指标，用于评估在测试过程中代码的覆盖情况。以下是JaCoCo支持的主要代码覆盖率度量指标：</p><ol><li><p><strong>行覆盖率（Line Coverage）：</strong></p><ul><li><strong>含义：</strong> 行覆盖率表示被测试覆盖的源代码行数占总源代码行数的比例。</li><li><strong>计算方式：</strong> 通过监测每一行的执行情况，计算覆盖的行数占总行数的比例。</li></ul></li><li><p><strong>分支覆盖率（Branch Coverage）：</strong></p><ul><li><strong>含义：</strong> 分支覆盖率表示被测试覆盖的条件分支数占总条件分支数的比例。</li><li><strong>计算方式：</strong> 通过监测条件分支语句（如if语句）的执行情况，计算覆盖的分支数占总分支数的比例。</li></ul></li><li><p><strong>方法覆盖率（Method Coverage）：</strong></p><ul><li><strong>含义：</strong> 方法覆盖率表示被测试覆盖的方法数占总方法数的比例。</li><li><strong>计算方式：</strong> 通过监测每个方法的执行情况，计算覆盖的方法数占总方法数的比例。</li></ul></li><li><p><strong>类覆盖率（Class Coverage）：</strong></p><ul><li><strong>含义：</strong> 类覆盖率表示被测试覆盖的类数占总类数的比例。</li><li><strong>计算方式：</strong> 通过监测每个类的执行情况，计算覆盖的类数占总类数的比例。</li></ul></li><li><p><strong>指令覆盖率（Instruction Coverage）：</strong></p><ul><li><strong>含义：</strong> 指令覆盖率表示被测试覆盖的字节码指令数占总字节码指令数的比例。</li><li><strong>计算方式：</strong> 通过监测每个字节码指令的执行情况，计算覆盖的指令数占总指令数的比例。</li></ul></li><li><p><strong>圈复杂度（Cyclomatic Complexity）：</strong></p><ul><li><strong>含义：</strong> 圈复杂度是一种衡量代码复杂性的指标，表示代码中独立路径的数量。</li><li><strong>计算方式：</strong> 通过监测条件语句和循环语句的执行情况，计算圈复杂度。</li></ul></li></ol><p>这些度量指标提供了多个层次的代码覆盖情况，帮助开发人员更全面地了解测试覆盖的情况。</p><p>通过查看JaCoCo生成的报告，可以清晰地看到每个度量指标的详细信息，从而有针对性地改进测试用例和提高代码质量。</p><h2 id="jacoco是如何实现代码覆盖率检测的" tabindex="-1"><a class="header-anchor" href="#jacoco是如何实现代码覆盖率检测的"><span>JaCoCo是如何实现代码覆盖率检测的？</span></a></h2><p>JaCoCo实现代码覆盖率检测的基本原理涉及在Java应用程序的字节码中插入探针代码，通过这些探针代码来跟踪和收集代码的执行情况。以下是JaCoCo的实现原理：</p><ol><li><p><strong>Java代理：</strong> JaCoCo使用Java代理技术，在应用程序启动时以Java代理的形式注入到JVM中。这可以通过在Java虚拟机启动参数中添加JaCoCo代理的jar文件来实现。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-javaagent:/path/to/jacocoagent.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=option1=value1,option2=value2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>字节码插桩：</strong> JaCoCo在类加载时通过Java代理动态修改字节码。它在每个方法的入口和出口处插入特殊的探针代码，这些探针代码用于记录代码的执行情况。这样的插桩是在运行时完成的，而不需要修改源代码。</p><p>插入的探针代码的作用主要有两个：</p><ul><li>记录方法的进入和退出，以便计算方法的执行次数。</li><li>在条件分支和循环语句处插入代码，以便跟踪这些分支和循环的覆盖情况。</li></ul></li><li><p><strong>计数器：</strong> JaCoCo使用计数器来追踪代码块的执行情况。每个插入的探针代码都与一个计数器相关联。在方法执行时，探针代码会增加相应计数器的值，从而记录代码块的执行次数。</p></li><li><p><strong>运行时数据收集：</strong> 在应用程序运行期间，JaCoCo会收集探针代码生成的执行数据，包括哪些代码被执行，执行次数等。这些数据会在内存中被保存。</p></li><li><p><strong>报告生成：</strong> 当需要生成代码覆盖率报告时，JaCoCo将内存中收集的覆盖率数据转换为可读的报告。报告可以以不同的格式呈现，如HTML、XML、CSV等。</p></li></ol><p>整个过程中，JaCoCo通过动态修改字节码和插入探针代码的方式，实现了对Java应用程序的无侵入式覆盖率检测。</p><p>这种方式允许在不修改源代码的情况下获取代码覆盖率信息，使得JaCoCo成为一个方便且强大的代码覆盖率工具。</p><h2 id="jacoco在分布式系统和大规模项目中的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#jacoco在分布式系统和大规模项目中的应用场景是什么"><span>JaCoCo在分布式系统和大规模项目中的应用场景是什么？</span></a></h2><p>在分布式系统和大规模项目中，JaCoCo仍然是一个强大的工具，但在应用时需要考虑一些特殊的场景和需求。</p><p>以下是JaCoCo在这些环境中的一些应用场景：</p><ol><li><p><strong>多模块项目的覆盖率分析：</strong> 大规模项目通常是由多个模块组成的。JaCoCo能够支持多模块项目，可以在每个模块中独立地生成覆盖率报告，同时也可以生成整个项目的汇总报告。这样，可以在不同层次上查看覆盖率，从而更好地理解项目的整体质量。</p></li><li><p><strong>并行构建和测试：</strong> 在大规模项目中，构建和测试通常是并行进行的，以加速整个开发过程。JaCoCo能够在并行构建和测试环境中正常工作，确保每个构建和测试任务都生成正确的覆盖率数据。</p></li><li><p><strong>持续集成和自动化部署：</strong> 在分布式系统和大规模项目中，通常会使用持续集成工具（如Jenkins、Travis CI等）和自动化部署流程。JaCoCo可以与这些工具集成，确保在每次构建和部署过程中都能够生成最新的覆盖率报告。</p></li><li><p><strong>分布式测试环境的支持：</strong> 在分布式系统中，测试可能分布在不同的节点上。JaCoCo可以通过合适的配置来支持在分布式测试环境中收集覆盖率数据，确保所有测试都被覆盖。</p></li><li><p><strong>代码审查和质量监控：</strong> 在大规模项目中，进行代码审查和监控整体代码质量是至关重要的。JaCoCo生成的报告可以用于代码审查，同时也可以通过与其他质量监控工具（如SonarQube）结合，提供更全面的代码质量分析。</p></li><li><p><strong>定制化分析：</strong> 对于大规模项目，可能只关注部分关键路径或核心模块的覆盖率。JaCoCo支持通过配置来定制化分析，以集中关注在项目中最重要的部分，从而更有效地管理和优化测试覆盖。</p></li></ol><p>总体而言，JaCoCo在分布式系统和大规模项目中的应用场景主要涵盖了构建、测试、持续集成、代码审查和整体质量监控等方面。</p><p>通过合理配置和使用，可以帮助团队更好地管理和维护大规模项目的代码质量。</p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://support.smartbear.com/testcomplete/docs/tutorials/getting-started/first-test/web/index.html" target="_blank" rel="noopener noreferrer">https://support.smartbear.com/testcomplete/docs/tutorials/getting-started/first-test/web/index.html</a></p>`,64)]))}const h=i(l,[["render",t]]),k=JSON.parse('{"path":"/posts/tests/2016-04-26-test-coverage-02-jacoco-intro.html","title":"test coverate-02-测试覆盖率概览 JaCoCo (Java Code Coverage) 入门介绍","lang":"zh-CN","frontmatter":{"title":"test coverate-02-测试覆盖率概览 JaCoCo (Java Code Coverage) 入门介绍","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["java","test"],"published":true,"description":"拓展阅读 test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍 test 系统学习-05-test jacoco 测试覆盖率与 idea 插件 test 系统学习-06-test jacoco chat 详细介绍一下 JaCoCo (Java Code Coverage) JaCoCo（Java Code Cove...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-26-test-coverage-02-jacoco-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test coverate-02-测试覆盖率概览 JaCoCo (Java Code Coverage) 入门介绍"}],["meta",{"property":"og:description","content":"拓展阅读 test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍 test 系统学习-05-test jacoco 测试覆盖率与 idea 插件 test 系统学习-06-test jacoco chat 详细介绍一下 JaCoCo (Java Code Coverage) JaCoCo（Java Code Cove..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test coverate-02-测试覆盖率概览 JaCoCo (Java Code Coverage) 入门介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":19.72,"words":5916},"filePathRelative":"posts/tests/2016-04-26-test-coverage-02-jacoco-intro.md","localizedDate":"2016年4月26日","excerpt":"\\n<p><a href=\\"https://houbb.github.io/2018/06/23/test-04-test-converage\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">test 系统学习-04-test converate 测试覆盖率 jacoco 原理介绍</a></p>\\n<p><a href=\\"https://houbb.github.io/2018/06/23/test-05-jacoco-idea-plugin\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">test 系统学习-05-test jacoco 测试覆盖率与 idea 插件</a></p>","autoDesc":true}');export{h as comp,k as data};
