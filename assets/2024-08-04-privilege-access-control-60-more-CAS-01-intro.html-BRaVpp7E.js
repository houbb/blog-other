import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a,o as t}from"./app-uJE4P3e0.js";const e={};function l(h,i){return t(),n("div",null,i[0]||(i[0]=[a(`<h1 id="chat" tabindex="-1"><a class="header-anchor" href="#chat"><span>chat</span></a></h1><h2 id="详细介绍一下-cas" tabindex="-1"><a class="header-anchor" href="#详细介绍一下-cas"><span>详细介绍一下 CAS</span></a></h2><p>CAS（Central Authentication Service）是一个用于Web应用的集中认证服务，它允许用户使用单一的登录凭证（如用户名和密码）来访问多个应用程序或服务。</p><p>CAS的核心思想是减少用户需要记住多个用户名和密码的负担，同时提供一个中心化的认证机制，以便于管理和维护用户账户。</p><p>以下是CAS的一些关键特性和组成部分：</p><ol><li><p><strong>单点登录（SSO - Single Sign-On）</strong>：用户只需要登录一次，就可以访问所有通过CAS认证的服务。</p></li><li><p><strong>票据（Tickets）</strong>：CAS使用票据来代表用户的认证状态。主要有两种类型的票据：</p><ul><li><strong>ST（Service Ticket）</strong>：用于访问特定服务的一次性票据。</li><li><strong>PT（Proxy Ticket）</strong>：用于代理服务的访问，允许用户在不需要重新认证的情况下访问多个服务。</li></ul></li><li><p><strong>票据存储（Ticket Storage）</strong>：CAS服务器通常需要存储票据信息，以便验证和授权。</p></li><li><p><strong>安全性</strong>：CAS提供了多种安全措施，包括SSL/TLS加密通信、防止重放攻击的机制等。</p></li><li><p><strong>可扩展性</strong>：CAS可以与多种后端认证源集成，如LDAP、数据库等。</p></li><li><p><strong>灵活性</strong>：CAS支持多种客户端和服务端协议，如CAS协议、SAML、OAuth等。</p></li><li><p><strong>多因素认证（MFA - Multi-Factor Authentication）</strong>：CAS可以支持多因素认证，增加安全性。</p></li><li><p><strong>用户界面</strong>：CAS提供了用户友好的登录界面，可以定制以适应不同的品牌和设计需求。</p></li><li><p><strong>API和集成</strong>：CAS提供了丰富的API，允许开发者轻松地将CAS集成到各种应用程序和服务中。</p></li><li><p><strong>社区和支持</strong>：CAS有一个活跃的开源社区，提供持续的更新和支持。</p></li></ol><p>CAS通常由以下组件构成：</p><ul><li><strong>CAS服务器</strong>：负责处理认证请求、发放票据、存储票据等。</li><li><strong>客户端</strong>：需要认证的应用程序或服务，它们通过与CAS服务器交互来验证用户的身份。</li><li><strong>用户代理</strong>：通常是用户的Web浏览器，用于与CAS服务器和客户端进行交互。</li></ul><p>CAS广泛应用于教育机构、企业和政府机构，用于提供安全、便捷的身份验证服务。</p><h2 id="cas-的独特设计有哪些-为什么这么设计-why" tabindex="-1"><a class="header-anchor" href="#cas-的独特设计有哪些-为什么这么设计-why"><span>CAS 的独特设计有哪些？为什么这么设计？why</span></a></h2><p>CAS（Central Authentication Service）是一种广泛应用于Web应用的单点登录（SSO）解决方案。</p><p>它通过提供一个集中的身份验证服务，允许用户使用单一的登录凭证访问多个应用程序或服务。</p><p>以下是CAS适合使用的一些场景：</p><ol><li><p><strong>教育机构</strong>：大学和学校通常有多个应用程序和服务需要身份验证，CAS可以为学生、教师和工作人员提供无缝的访问体验。</p></li><li><p><strong>企业环境</strong>：企业内部可能有多个系统和应用程序需要员工登录，使用CAS可以简化登录流程，提高效率。</p></li><li><p><strong>政府机构</strong>：政府机构可能需要管理多个公共服务和内部系统，CAS可以提供一个安全、集中的认证机制。</p></li><li><p><strong>云服务提供商</strong>：云服务通常涉及多个服务和应用，CAS可以用来管理用户对这些服务的访问权限。</p></li><li><p><strong>大型组织或联盟</strong>：当多个组织或系统需要共享用户身份验证信息时，CAS可以作为一个中心点来简化管理。</p></li><li><p><strong>需要遵守合规性要求的场合</strong>：某些行业或地区可能需要遵守特定的数据保护和隐私法规，CAS可以帮助组织集中管理和保护用户认证数据。</p></li><li><p><strong>具有多层次访问控制需求的应用</strong>：对于那些需要细粒度访问控制的应用程序，CAS可以与属性发布和基于角色的访问控制（RBAC）集成，以提供更复杂的访问管理。</p></li></ol><p>总的来说，任何需要集中管理用户认证并提供对多个服务或应用程序访问的场景，都可以从CAS中受益。</p><h2 id="cas-central-authentication-service-适合使用的场景-when-where-who" tabindex="-1"><a class="header-anchor" href="#cas-central-authentication-service-适合使用的场景-when-where-who"><span>CAS（Central Authentication Service） 适合使用的场景？when where who</span></a></h2><h2 id="cas-central-authentication-service-如何实现-how" tabindex="-1"><a class="header-anchor" href="#cas-central-authentication-service-如何实现-how"><span>CAS（Central Authentication Service） 如何实现？ how</span></a></h2><p>CAS（Central Authentication Service）服务器的安全性主要通过以下加密技术来保障：</p><ol><li><p><strong>SSL/TLS协议</strong>：CAS服务器与客户端之间的所有交互都采用SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议进行加密，确保数据传输的安全性 。</p></li><li><p><strong>票据加密</strong>：CAS使用票据（如Service Ticket和Proxy Ticket）来代表用户的认证状态。这些票据在生成时通常会使用随机数以确保其唯一性和不可预测性，增加了安全性 。</p></li><li><p><strong>一次性票据</strong>：Service Ticket设计为一次性使用，一旦使用后即失效，这减少了票据被重放攻击的风险 。</p></li><li><p><strong>票据有效期限制</strong>：Service Ticket具有短暂的有效期，过期后将自动失效，这进一步增强了安全性 。</p></li><li><p><strong>自定义加密算法</strong>：CAS支持自定义加密算法，以满足不同业务需求。例如，可以实现密码的MD5或SHA加密后再与数据库中的盐值拼接，以增强密码的安全性 。</p></li><li><p><strong>国密算法</strong>：在某些应用中，CAS可能采用国密算法（如SM2和SM4）来增强安全性。SM2用于生成根密钥对，SM4作为对称加密算法用于加密控制字CW 。</p></li><li><p><strong>安全Cookie</strong>：CAS使用安全Cookie（secure cookie）来存储会话信息，这些Cookie仅通过HTTPS传输，防止了Cookie在传输过程中被截获的风险 。</p></li><li><p><strong>多因素认证（MFA）</strong>：CAS可以集成多因素认证机制，增加安全性，要求用户提供两种或以上的认证方式 。</p></li><li><p><strong>授权管理</strong>：CAS可以对用户进行授权管理，确保只有经过验证并获得授权的用户才能访问特定的服务 。</p></li></ol><p>通过这些加密技术和安全措施，CAS服务器能够为Web应用提供安全、可靠的单点登录服务。</p><h2 id="java-接入-cas-的入门例子" tabindex="-1"><a class="header-anchor" href="#java-接入-cas-的入门例子"><span>java 接入 CAS 的入门例子</span></a></h2><p>Java接入CAS通常涉及到客户端和服务端的集成。</p><p>以下是一个简单的入门例子，展示如何在Java应用程序中作为客户端接入CAS服务器进行单点登录。</p><h3 id="服务端-cas-server-配置" tabindex="-1"><a class="header-anchor" href="#服务端-cas-server-配置"><span>服务端（CAS Server）配置</span></a></h3><p>首先，你需要一个运行中的CAS服务器。</p><p>有许多开源的CAS服务器实现，比如Apereo CAS服务器。</p><p>这里假设你已经有一个配置好的CAS服务器。</p><h3 id="客户端-java应用程序-配置" tabindex="-1"><a class="header-anchor" href="#客户端-java应用程序-配置"><span>客户端（Java应用程序）配置</span></a></h3><ol><li><p><strong>添加依赖</strong>：如果你使用Maven构建Java项目，你需要在<code>pom.xml</code>文件中添加CAS客户端的依赖。这里以Java CAS Client 3.0为例：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        org.jasig.cas.client</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cas-client-core</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        3.4.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>配置Web应用</strong>：在<code>web.xml</code>中配置CAS过滤器，以拦截需要认证的请求：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CAS Authentication Filter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CAS Authentication Filter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Filter for CAS Client</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    org.jasig.cas.client.authentication.AuthenticationFilter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        casServerLoginUrl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        https://your-cas-server/login</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        serverName</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        https://your-app-server</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    CAS Authentication Filter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    /*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里<code>casServerLoginUrl</code>是CAS服务器的登录URL，<code>serverName</code>是你的应用程序的URL。</p></li><li><p><strong>处理认证</strong>：在用户登录成功后，CAS服务器会重定向用户回到你的应用程序，并附带一些认证信息。你需要配置成功后的重定向URL和回调方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CasAuthenticationHandler</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenticationHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                FilterConfig</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> filterConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ticket</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ticket&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (ticket </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ticket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 调用服务端校验票据</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;https://your-cas-server/validate?service=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRequestURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&amp;ticket=&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ticket;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 发送请求并获取响应</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> body</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;authenticationSuccess&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 认证成功，重定向到首页或用户页面</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;welcome&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 认证失败，重定向到登录页面</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>发送请求</strong>：<code>sendPost</code>方法是一个简单的HTTP POST请求发送方法，用于向CAS服务器发送校验票据的请求。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> data) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现HTTP POST请求</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 返回响应体</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>运行和测试</strong>：启动你的Java Web应用程序，并尝试访问受保护的资源。如果没有登录，应该会被重定向到CAS服务器进行登录。</p></li></ol><p>这个例子提供了一个基本的框架，展示了如何在Java Web应用程序中集成CAS单点登录。</p><p>在实际部署中，你可能需要根据具体需求调整配置和实现细节。</p><h2 id="应该实现哪些核心能力-how-much" tabindex="-1"><a class="header-anchor" href="#应该实现哪些核心能力-how-much"><span>应该实现哪些核心能力？how-much</span></a></h2>`,32)]))}const k=s(e,[["render",l]]),o=JSON.parse('{"path":"/posts/Design/2024-08-04-privilege-access-control-60-more-CAS-01-intro.html","title":"privilege-60-CAS（Central Authentication Service）","lang":"zh-CN","frontmatter":{"title":"privilege-60-CAS（Central Authentication Service）","date":"2024-08-04T00:00:00.000Z","categories":["Design"],"tags":["design","privilege","sh"],"published":true,"description":"chat 详细介绍一下 CAS CAS（Central Authentication Service）是一个用于Web应用的集中认证服务，它允许用户使用单一的登录凭证（如用户名和密码）来访问多个应用程序或服务。 CAS的核心思想是减少用户需要记住多个用户名和密码的负担，同时提供一个中心化的认证机制，以便于管理和维护用户账户。 以下是CAS的一些关键特性...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-backend/posts/Design/2024-08-04-privilege-access-control-60-more-CAS-01-intro.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"privilege-60-CAS（Central Authentication Service）"}],["meta",{"property":"og:description","content":"chat 详细介绍一下 CAS CAS（Central Authentication Service）是一个用于Web应用的集中认证服务，它允许用户使用单一的登录凭证（如用户名和密码）来访问多个应用程序或服务。 CAS的核心思想是减少用户需要记住多个用户名和密码的负担，同时提供一个中心化的认证机制，以便于管理和维护用户账户。 以下是CAS的一些关键特性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"design"}],["meta",{"property":"article:tag","content":"privilege"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:published_time","content":"2024-08-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"privilege-60-CAS（Central Authentication Service）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":7.53,"words":2260},"filePathRelative":"posts/Design/2024-08-04-privilege-access-control-60-more-CAS-01-intro.md","localizedDate":"2024年8月4日","excerpt":"\\n<h2>详细介绍一下 CAS</h2>\\n<p>CAS（Central Authentication Service）是一个用于Web应用的集中认证服务，它允许用户使用单一的登录凭证（如用户名和密码）来访问多个应用程序或服务。</p>\\n<p>CAS的核心思想是减少用户需要记住多个用户名和密码的负担，同时提供一个中心化的认证机制，以便于管理和维护用户账户。</p>\\n<p>以下是CAS的一些关键特性和组成部分：</p>\\n<ol>\\n<li>\\n<p><strong>单点登录（SSO - Single Sign-On）</strong>：用户只需要登录一次，就可以访问所有通过CAS认证的服务。</p>\\n</li>\\n<li>\\n<p><strong>票据（Tickets）</strong>：CAS使用票据来代表用户的认证状态。主要有两种类型的票据：</p>\\n<ul>\\n<li><strong>ST（Service Ticket）</strong>：用于访问特定服务的一次性票据。</li>\\n<li><strong>PT（Proxy Ticket）</strong>：用于代理服务的访问，允许用户在不需要重新认证的情况下访问多个服务。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>票据存储（Ticket Storage）</strong>：CAS服务器通常需要存储票据信息，以便验证和授权。</p>\\n</li>\\n<li>\\n<p><strong>安全性</strong>：CAS提供了多种安全措施，包括SSL/TLS加密通信、防止重放攻击的机制等。</p>\\n</li>\\n<li>\\n<p><strong>可扩展性</strong>：CAS可以与多种后端认证源集成，如LDAP、数据库等。</p>\\n</li>\\n<li>\\n<p><strong>灵活性</strong>：CAS支持多种客户端和服务端协议，如CAS协议、SAML、OAuth等。</p>\\n</li>\\n<li>\\n<p><strong>多因素认证（MFA - Multi-Factor Authentication）</strong>：CAS可以支持多因素认证，增加安全性。</p>\\n</li>\\n<li>\\n<p><strong>用户界面</strong>：CAS提供了用户友好的登录界面，可以定制以适应不同的品牌和设计需求。</p>\\n</li>\\n<li>\\n<p><strong>API和集成</strong>：CAS提供了丰富的API，允许开发者轻松地将CAS集成到各种应用程序和服务中。</p>\\n</li>\\n<li>\\n<p><strong>社区和支持</strong>：CAS有一个活跃的开源社区，提供持续的更新和支持。</p>\\n</li>\\n</ol>","autoDesc":true}');export{k as comp,o as data};
