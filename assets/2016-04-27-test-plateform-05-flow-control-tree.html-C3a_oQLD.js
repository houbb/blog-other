import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a,o as n}from"./app-CEDSurVN.js";const o={};function p(s,e){return n(),r("div",null,e[0]||(e[0]=[a(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h1><p>测试平台最强大的一个设计应该是流程控制。</p><p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p><p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p><h1 id="整体流程的串联" tabindex="-1"><a class="header-anchor" href="#整体流程的串联"><span>整体流程的串联</span></a></h1><p>可以通过 tree 的方式，将上面的流程串联在一起</p><p><a href="https://element.eleme.io/#/zh-CN/component/tree" target="_blank" rel="noopener noreferrer">https://element.eleme.io/#/zh-CN/component/tree</a></p><h1 id="入门例子" tabindex="-1"><a class="header-anchor" href="#入门例子"><span>入门例子</span></a></h1><p>这里用 vue+element-UI 演示，其他类似。</p><p>循序渐进，演示一下实现的主流程。</p><h2 id="step1-基本例子" tabindex="-1"><a class="header-anchor" href="#step1-基本例子"><span>STEP1: 基本例子</span></a></h2><p>演示一下最基本的 tree 效果</p><p><a href="https://houbb.github.io/tools/test-plateform/01-basic.html" target="_blank" rel="noopener noreferrer">tree 基本例子</a></p><h2 id="step2-树的修改" tabindex="-1"><a class="header-anchor" href="#step2-树的修改"><span>STEP2: 树的修改</span></a></h2><p>接下来，让其支持树的增加/删除。</p><p><a href="https://houbb.github.io/tools/test-plateform/02-edit.html" target="_blank" rel="noopener noreferrer">tree 支持编辑</a></p><h2 id="step3-指定新增的类型" tabindex="-1"><a class="header-anchor" href="#step3-指定新增的类型"><span>STEP3: 指定新增的类型</span></a></h2><p>我们把页面分为左右2个部分，左边就是我们原来的树形菜单。</p><p>点击【新增】按钮时，直接新增一个节点，同时弹出选择列表，有三个选项：</p><ol><li>IF条件</li><li>并发循环</li><li>顺序循环</li></ol><p>当选额其中一个选项之后，在右边显示对应的配置信息：</p><p>以选择 <code>IF条件</code> 为例，右侧页面效果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>IF 条件                     【保存按钮】</span></span>
<span class="line"><span>---------------------------------------</span></span>
<span class="line"><span>节点名称：【节点名称 input】</span></span>
<span class="line"><span></span></span>
<span class="line"><span>节点内容：【节点内容的 textarea】</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击【保存按钮】之后，才将当前的 <code>IF 条件</code> 作为标签 + 节点名称，更新到左侧的树结构。</p><p>同时保存对应的节点右侧内容，当下次点击对应的左侧子树时，可以直接支持右侧对应页面数据的反显和编辑。</p><p>ROOT 节点点击不需要显示编辑内容，点击页面【提交】控台输入对应的 json 信息。</p><p><a href="https://houbb.github.io/tools/test-plateform/03-config.html" target="_blank" rel="noopener noreferrer">tree 支持内容配置</a></p><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://github.com/metersphere/metersphere" target="_blank" rel="noopener noreferrer">https://github.com/metersphere/metersphere</a></p>`,29)]))}const h=t(o,[["render",p]]),c=JSON.parse('{"path":"/posts/tests/2016-04-27-test-plateform-05-flow-control-tree.html","title":"test framework-05-测试平台 flow control 流程控制树形前端代码实现","lang":"zh-CN","frontmatter":{"title":"test framework-05-测试平台 flow control 流程控制树形前端代码实现","date":"2016-04-26T00:00:00.000Z","categories":["Test"],"tags":["junit","framework","open-source","plateform","test"],"published":true,"description":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 整体流程的串联 可以通过 tree 的方式，将上面的流程串联在一起 https://element.eleme.io/#/zh-CN/component/tree 入...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/blog-other/posts/tests/2016-04-27-test-plateform-05-flow-control-tree.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"test framework-05-测试平台 flow control 流程控制树形前端代码实现"}],["meta",{"property":"og:description","content":"前言 测试平台最强大的一个设计应该是流程控制。 测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。 所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。 整体流程的串联 可以通过 tree 的方式，将上面的流程串联在一起 https://element.eleme.io/#/zh-CN/component/tree 入..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T03:45:14.000Z"}],["meta",{"property":"article:tag","content":"junit"}],["meta",{"property":"article:tag","content":"framework"}],["meta",{"property":"article:tag","content":"open-source"}],["meta",{"property":"article:tag","content":"plateform"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2016-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T03:45:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"test framework-05-测试平台 flow control 流程控制树形前端代码实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T03:45:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755834314000,"updatedTime":1755834314000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1}]},"readingTime":{"minutes":1.67,"words":501},"filePathRelative":"posts/tests/2016-04-27-test-plateform-05-flow-control-tree.md","localizedDate":"2016年4月26日","excerpt":"\\n<p>测试平台最强大的一个设计应该是流程控制。</p>\\n<p>测试平台的用户群体是测试，知道一些简单的判断，但是编程能力一般。</p>\\n<p>所以我们需要设计一个流程控制的系列组件，让测试拥有近似于开发的编程能力。</p>\\n<h1>整体流程的串联</h1>\\n<p>可以通过 tree 的方式，将上面的流程串联在一起</p>\\n<p><a href=\\"https://element.eleme.io/#/zh-CN/component/tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://element.eleme.io/#/zh-CN/component/tree</a></p>","autoDesc":true}');export{h as comp,c as data};
